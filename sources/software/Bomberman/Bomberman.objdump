
Bomberman.elf:     file format elf32-littlenios2
Bomberman.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001cbd8 memsz 0x0001cbd8 flags r-x
    LOAD off    0x0001dbf8 vaddr 0x0001cbf8 paddr 0x0001e75c align 2**12
         filesz 0x00001b64 memsz 0x00001b64 flags rw-
    LOAD off    0x000202c0 vaddr 0x000202c0 paddr 0x000202c0 align 2**12
         filesz 0x00000000 memsz 0x000001a8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001bdcc  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000bfc  0001bffc  0001bffc  0001cffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b64  0001cbf8  0001e75c  0001dbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a8  000202c0  000202c0  000202c0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00020468  00020468  0001f75c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001f75c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000011a8  00000000  00000000  0001f780  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000283f9  00000000  00000000  00020928  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a700  00000000  00000000  00048d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000dbf8  00000000  00000000  00053421  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003014  00000000  00000000  0006101c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004230  00000000  00000000  00064030  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017abc  00000000  00000000  00068260  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0007fd1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001998  00000000  00000000  0007fd60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008562e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00085631  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008563d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008563e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0008563f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00085643  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00085647  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0008564b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00085656  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00085661  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  0008566c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005f  00000000  00000000  00085675  2**0
                  CONTENTS, READONLY
 29 .jdi          00006728  00000000  00000000  000856d4  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000cd0b5  00000000  00000000  0008bdfc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
0001bffc l    d  .rodata	00000000 .rodata
0001cbf8 l    d  .rwdata	00000000 .rwdata
000202c0 l    d  .bss	00000000 .bss
00020468 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Bomberman_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 INIT.c
00000000 l    df *ABS*	00000000 LEDandHEX.c
00000000 l    df *ABS*	00000000 USB_Keyboard_Driver.c
000202c0 l     O .bss	00000002 ctl_reg
000202c2 l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 audio_driver.c
00000000 l    df *ABS*	00000000 coins.c
00000000 l    df *ABS*	00000000 draw_driver.c
00000000 l    df *ABS*	00000000 drawing.c
00000000 l    df *ABS*	00000000 ed.c
00000000 l    df *ABS*	00000000 game.c
00008424 l     F .text	00000118 shuffle
0001cbf8 l     O .rwdata	00000024 player1
0001cc1c l     O .rwdata	00000024 player2
000202d0 l     O .bss	00000004 stage
000202d4 l     O .bss	00000004 coinHead
000202d8 l     O .bss	00000004 coinTail
000202dc l     O .bss	00000004 begin
0001e700 l     O .rwdata	00000004 currentSec
0001e704 l     O .rwdata	00000004 beginFlag
0001e708 l     O .rwdata	00000004 bgmFlag
00000000 l    df *ABS*	00000000 main.c
0000ac64 l     F .text	00000118 shuffle
00000000 l    df *ABS*	00000000 op.c
0001e714 l     O .rwdata	00000004 vol
0001e718 l     O .rwdata	00000004 B_vol
000202e8 l     O .bss	00000004 vol_counter
000202ec l     O .bss	00000004 B_vol_counter
00000000 l    df *ABS*	00000000 readKey.c
00000000 l    df *ABS*	00000000 transition.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0001cc40 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001ca42 l     O .rodata	00000010 zeroes.4404
00010a10 l     F .text	000000bc __sbprintf
0001ca52 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00010c20 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00012778 l     F .text	00000008 __fp_unlock
0001278c l     F .text	0000019c __sinit.part.1
00012928 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0001d48c l     O .rwdata	00000020 lc_ctype_charset
0001d46c l     O .rwdata	00000020 lc_message_charset
0001d4ac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001ca80 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001559c l     F .text	000000fc __sprint_r.part.0
0001cba4 l     O .rodata	00000010 zeroes.4349
00016bd8 l     F .text	000000bc __sbprintf
0001cbb4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001961c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00019730 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001975c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00019850 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00019938 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00019a24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00019c00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001e74c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00019e74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00019f58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001a094 l     F .text	00000034 alt_dev_reg
0001d68c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001a388 l     F .text	0000020c altera_avalon_jtag_uart_irq
0001a594 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001abcc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001af64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001b3c4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001b524 l     F .text	0000003c alt_get_errno
0001b560 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00020324 g     O .bss	00000004 alt_instruction_exception_handler
00014c34 g     F .text	00000074 _mprec_log10
00014d20 g     F .text	0000008c __any_on
0001718c g     F .text	00000054 _isatty_r
0001ca8c g     O .rodata	00000028 __mprec_tinytens
00019b3c g     F .text	0000007c alt_main
0000b364 g     F .text	000000c8 D_en
0000e4d4 g     F .text	000000c0 _puts_r
00020368 g     O .bss	00000100 alt_irq
000171e0 g     F .text	00000060 _lseek_r
0001e75c g       *ABS*	00000000 __flash_rwdata_start
00018b58 g     F .text	00000088 .hidden __eqdf2
0000b29c g     F .text	000000c8 A_en
00020468 g       *ABS*	00000000 __alt_heap_start
0000aefc g     F .text	00000210 op
0000e498 g     F .text	0000003c printf
000173f8 g     F .text	0000009c _wcrtomb_r
000202c4 g     O .bss	00000002 usb_ctl_val
0000b1d4 g     F .text	000000c8 S_en
0001545c g     F .text	0000005c __sseek
00012ad8 g     F .text	00000010 __sinit
00020350 g     O .bss	00000018 keycode
000172a0 g     F .text	00000140 __swbuf_r
000135ac g     F .text	0000007c _setlocale_r
00012930 g     F .text	00000078 __sfmoreglue
0000b74c g     F .text	000000c8 SPACE_en
00019bdc g     F .text	00000024 __malloc_unlock
00002b64 g     F .text	00000080 UsbGetRetryCnt
00013a70 g     F .text	0000015c memmove
00001944 g     F .text	000000a4 IO_init
00012ac0 g     F .text	00000018 _cleanup
00003934 g     F .text	000000a8 drawSolidWall
00013cf4 g     F .text	000000a8 _Balloc
00003828 g     F .text	00000028 draw_driver_speed
00007e94 g     F .text	000002b8 drawCoin
0000d084 g     F .text	000000dc .hidden __gtdf2
0001b94c g     F .text	00000024 altera_nios2_gen2_irq_init
0000b684 g     F .text	000000c8 RIGHT_en
00000000 g     F .entry	0000000c __reset
00019eb0 g     F .text	00000078 times
00000020 g       *ABS*	00000000 __flash_exceptions_start
00017130 g     F .text	0000005c _fstat_r
000202fc g     O .bss	00000004 errno
000153d8 g     F .text	00000008 __seofread
00020310 g     O .bss	00000004 alt_argv
000266ec g       *ABS*	00000000 _gp
00019f28 g     F .text	00000030 usleep
0000853c g     F .text	00000684 game
0000ae48 g     F .text	000000b4 initOP
0000b814 g     F .text	000000c8 ENTER_en
00002c64 g     F .text	00000054 changeBackVolume
00000484 g     F .text	000000f0 displayScore
00005b2c g     F .text	000009f4 drawFiringWall
000034ac g     F .text	00000158 UpdateCoins
0001d50c g     O .rwdata	00000180 alt_fd_list
0001b970 g     F .text	00000090 alt_find_dev
00013928 g     F .text	00000148 memcpy
0000e710 g     F .text	00000008 _times_r
00012780 g     F .text	0000000c _cleanup_r
00019540 g     F .text	000000dc .hidden __floatsidf
0001b4a8 g     F .text	0000007c alt_io_redirect
0001e6f8 g     O .rwdata	00000004 Audio_Sel_ptr
000202c6 g     O .bss	00000001 data_size
00018be0 g     F .text	000000f4 .hidden __ltdf2
0001bffc g       *ABS*	00000000 __DTOR_END__
0000e594 g     F .text	00000014 puts
0001bbcc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00003604 g     F .text	00000108 draw_driver
00015310 g     F .text	00000074 __fpclassifyd
00014b90 g     F .text	000000a4 __ratio
00016bbc g     F .text	0000001c __vfiprintf_internal
0001a78c g     F .text	0000021c altera_avalon_jtag_uart_read
0000dc34 g     F .text	00000014 malloc
0000e468 g     F .text	00000030 _printf_r
00009b8c g     F .text	00000694 placeBomb
0000c5d0 g     F .text	00000064 .hidden __udivsi3
0001988c g     F .text	000000ac isatty
0001cadc g     O .rodata	000000c8 __mprec_tens
00013628 g     F .text	0000000c __locale_charset
0000c464 g     F .text	00000074 .hidden __fixunsdfsi
000202f8 g     O .bss	00000004 __malloc_top_pad
000021f0 g     F .text	00000268 UsbGetConfigDesc2
0000b4f4 g     F .text	000000c8 DOWN_en
0001e72c g     O .rwdata	00000004 __mb_cur_max
00013658 g     F .text	0000000c _localeconv_r
00014128 g     F .text	0000003c __i2b
00012f5c g     F .text	000004c8 __sfvwrite_r
0000e624 g     F .text	00000054 _sbrk_r
00009468 g     F .text	00000490 canMove
000202cc g     O .bss	00000004 BI_counter
00017240 g     F .text	00000060 _read_r
0001e6ec g     O .rwdata	00000004 Back_Vol_ptr
0001e744 g     O .rwdata	00000004 alt_max_fd
00016e24 g     F .text	000000f0 _fclose_r
00012748 g     F .text	00000030 fflush
000202f4 g     O .bss	00000004 __malloc_max_sbrked_mem
000182ac g     F .text	000008ac .hidden __adddf3
00014938 g     F .text	0000010c __b2d
0001e70c g     O .rwdata	00000004 L1
00017ce8 g     F .text	000005c4 .hidden __umoddi3
00019a60 g     F .text	000000dc lseek
0001e71c g     O .rwdata	00000004 _global_impure_ptr
0000ba6c g     F .text	000000c8 ZERO_en
0000bbfc g     F .text	00000868 begin_anim
00014dac g     F .text	00000564 _realloc_r
00020468 g       *ABS*	00000000 __bss_end
0001b2d4 g     F .text	000000f0 alt_iic_isr_register
0001b844 g     F .text	00000108 alt_tick
000176ec g     F .text	000005fc .hidden __udivdi3
0001708c g     F .text	00000024 _fputwc_r
0001cab4 g     O .rodata	00000028 __mprec_bigtens
00013f0c g     F .text	00000104 __s2b
0000dadc g     F .text	000000a8 .hidden __floatunsidf
00014678 g     F .text	00000060 __mcmp
00001c40 g     F .text	00000100 UsbSetAddress
00012af8 g     F .text	00000018 __fp_lock_all
0001b288 g     F .text	0000004c alt_ic_irq_enabled
0001b7a8 g     F .text	0000009c alt_alarm_stop
00020318 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001d4e4 g     O .rwdata	00000028 alt_dev_null
000039dc g     F .text	000000a8 drawSoftWall
0001af44 g     F .text	00000020 alt_dcache_flush_all
00014010 g     F .text	00000068 __hi0bits
00001a70 g     F .text	00000080 IO_read
0000da5c g     F .text	00000080 .hidden __fixdfsi
0001e75c g       *ABS*	00000000 __ram_rwdata_end
0001e73c g     O .rwdata	00000008 alt_dev_list
00019f94 g     F .text	00000100 write
0001e6f0 g     O .rwdata	00000004 Bomb_Vol_ptr
0001cbf8 g       *ABS*	00000000 __ram_rodata_end
00019798 g     F .text	000000b8 fstat
0000bb34 g     F .text	000000c8 NINE_en
00018be0 g     F .text	000000f4 .hidden __ledf2
00002be4 g     F .text	00000080 UsbPrintMem
0000b5bc g     F .text	000000c8 LEFT_en
000143f0 g     F .text	00000140 __pow5mult
000156b0 g     F .text	0000150c ___vfiprintf_internal_r
00020308 g     O .bss	00000004 __nlocale_changed
0000c634 g     F .text	00000058 .hidden __umodsi3
00020468 g       *ABS*	00000000 end
0001a2c8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000202e0 g     O .bss	00000004 i
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0001bffc g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000921c g     F .text	0000024c move
0001ac44 g     F .text	0000007c alt_avalon_timer_sc_init
0000db84 g     F .text	00000064 .hidden __clzsi2
0001a9a8 g     F .text	00000224 altera_avalon_jtag_uart_write
00012ae8 g     F .text	00000004 __sfp_lock_acquire
00013844 g     F .text	000000e4 memchr
0000e718 g     F .text	000022dc ___vfprintf_internal_r
0001e6fc g     O .rwdata	00000004 BI
00002558 g     F .text	00000100 UsbClassRequest
00002d0c g     F .text	00000048 Audio_init
00012c4c g     F .text	00000310 _free_r
00013634 g     F .text	00000010 __locale_mb_cur_max
00003a84 g     F .text	000000cc cleanPlayer
0001be48 g     F .text	00000180 __call_exitprocs
00020304 g     O .bss	00000004 __mlocale_changed
0001e724 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
0002031c g     O .bss	00000004 _alt_tick_rate
0000e5c0 g     F .text	00000064 rand
00009ac8 g     F .text	000000c4 catchFire
00014530 g     F .text	00000148 __lshift
00002cb8 g     F .text	00000054 changeBombVolume
00020320 g     O .bss	00000004 _alt_nticks
00019c3c g     F .text	00000104 read
0001a100 g     F .text	00000064 alt_sys_init
0001bd30 g     F .text	00000118 __register_exitproc
00002d88 g     F .text	000000d4 Audio_Select
0000370c g     F .text	0000011c draw_driver_init
0000a658 g     F .text	000001d4 HPcheck
00014164 g     F .text	0000028c __multiply
0001a634 g     F .text	00000068 altera_avalon_jtag_uart_close
0000c68c g     F .text	00000028 .hidden __mulsi3
0001cbf8 g       *ABS*	00000000 __ram_rwdata_start
0001bffc g       *ABS*	00000000 __ram_rodata_start
00020328 g     O .bss	00000028 __malloc_current_mallinfo
00014a44 g     F .text	0000014c __d2b
00001d40 g     F .text	00000148 UsbGetDeviceDesc1
0001a164 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001bb08 g     F .text	000000c4 alt_get_fd
0001adec g     F .text	00000158 alt_busy_sleep
00016cf4 g     F .text	00000054 _close_r
0001bcb4 g     F .text	0000007c memcmp
0001a224 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000a8a0 g     F .text	000003c4 displayHP
00020468 g       *ABS*	00000000 __alt_stack_base
0001a274 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00010acc g     F .text	00000154 __swsetup_r
0000c6b4 g     F .text	000009d0 .hidden __divdf3
000129a8 g     F .text	00000118 __sfp
00014ca8 g     F .text	00000078 __copybits
0001d064 g     O .rwdata	00000408 __malloc_av_
00012af4 g     F .text	00000004 __sinit_lock_release
00018cd4 g     F .text	0000086c .hidden __muldf3
00015384 g     F .text	00000054 __sread
000202e4 g     O .bss	00000004 counter
00002ae0 g     F .text	00000084 UsbWaitTDListDone
000043d0 g     F .text	000009f4 drawExplosion
0001ba00 g     F .text	00000108 alt_find_file
0001afa0 g     F .text	000000a4 alt_dev_llist_insert
00019bb8 g     F .text	00000024 __malloc_lock
00019dc4 g     F .text	000000b0 sbrk
000126ec g     F .text	0000005c _fflush_r
00016d48 g     F .text	000000dc _calloc_r
000202c7 g     O .bss	00000001 hot_plug_count
000202c0 g       *ABS*	00000000 __bss_start
00013bcc g     F .text	00000128 memset
0000ad7c g     F .text	000000cc main
00020314 g     O .bss	00000004 alt_envp
000202f0 g     O .bss	00000004 __malloc_max_total_mem
00002d54 g     F .text	00000034 Bomb
0001a1c4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002458 g     F .text	00000100 UsbSetConfig
000173e0 g     F .text	00000018 __swbuf
0000e5a8 g     F .text	00000018 srand
000202c8 g     O .bss	00000004 keycode_read
000081dc g     F .text	00000180 initED
000154b8 g     F .text	00000008 __sclose
000038a0 g     F .text	00000094 cleanCell
08000000 g       *ABS*	00000000 __alt_heap_limit
00016f14 g     F .text	00000014 fclose
00010e48 g     F .text	00001688 _dtoa_r
0000dc5c g     F .text	0000080c _malloc_r
00017554 g     F .text	00000030 __ascii_wctomb
0001e748 g     O .rwdata	00000004 alt_errno
00000634 g     F .text	0000101c Keyboard_INIT
00013424 g     F .text	000000c4 _fwalk
0000c4d8 g     F .text	00000084 .hidden __divsi3
00012b28 g     F .text	00000124 _malloc_trim_r
00002658 g     F .text	00000148 UsbGetHidDesc
0001bffc g       *ABS*	00000000 __CTOR_END__
000154c0 g     F .text	000000dc strcmp
0001bffc g       *ABS*	00000000 __flash_rodata_start
0001bffc g       *ABS*	00000000 __DTOR_LIST__
00003850 g     F .text	00000050 delay
00018b58 g     F .text	00000088 .hidden __nedf2
00004dc4 g     F .text	00000d68 drawBomb
00001b48 g     F .text	00000044 UsbRead
00006520 g     F .text	000018a4 drawBombAndExplosion
0001a0c8 g     F .text	00000038 alt_irq_init
0000b8dc g     F .text	000000c8 PLUS_en
00019d40 g     F .text	00000084 alt_release_fd
0001c8f8 g     O .rodata	00000100 .hidden __clz_tab
0000835c g     F .text	000000c8 ed
0000a220 g     F .text	00000438 UpdateBomb
00020300 g     O .bss	00000004 _PathLocale
0001bc68 g     F .text	00000014 atexit
00016c94 g     F .text	00000060 _write_r
00013664 g     F .text	00000018 setlocale
0000026c g     F .text	00000218 INIT
0001e720 g     O .rwdata	00000004 _impure_ptr
0002030c g     O .bss	00000004 alt_argc
0000814c g     F .text	00000090 cleanCoin
000124d0 g     F .text	0000021c __sflush_r
0001b0a4 g     F .text	00000060 _do_dtors
00013650 g     F .text	00000008 __locale_cjk_lang
00003004 g     F .text	000004a8 getCoins
00004310 g     F .text	000000c0 drawPlayerHurt
00000020 g       .exceptions	00000000 alt_irq_entry
000148d4 g     F .text	00000064 __ulp
00012b10 g     F .text	00000018 __fp_unlock_all
0001e734 g     O .rwdata	00000008 alt_fs_list
000027a0 g     F .text	00000340 UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001367c g     F .text	0000000c localeconv
00008bc0 g     F .text	00000414 initStage
0001b124 g     F .text	00000050 alt_ic_isr_register
00000574 g     F .text	000000c0 displayTime
0001e6f4 g     O .rwdata	00000004 Bomb_Act_ptr
0001e75c g       *ABS*	00000000 _edata
00002e5c g     F .text	000001a8 deleteCoins
00020468 g       *ABS*	00000000 _end
00001af0 g     F .text	00000058 UsbWrite
00016f28 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0001a69c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00001650 g     F .text	000002f4 FetchKey
0001b1fc g     F .text	0000008c alt_ic_irq_disable
0000a82c g     F .text	00000074 scoreCompare
000098f8 g     F .text	000001d0 onFire
000153e0 g     F .text	0000007c __swrite
0001e728 g     O .rwdata	00000004 __malloc_trim_threshold
00013644 g     F .text	0000000c __locale_msgcharset
0001bc7c g     F .text	00000038 exit
000134e8 g     F .text	000000c4 _fwalk_reent
000146d8 g     F .text	000001fc __mdiff
0000c55c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00012aec g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
000019e8 g     F .text	00000088 IO_write
0000b10c g     F .text	000000c8 W_en
0000b42c g     F .text	000000c8 UP_en
0001bfc8 g     F .text	00000034 _exit
0001acc0 g     F .text	0000012c alt_alarm_start
000175e0 g     F .text	0000010c .hidden __muldi3
00013688 g     F .text	000001bc __smakebuf_r
0000e678 g     F .text	00000098 strlen
0001b64c g     F .text	0000015c open
00003b50 g     F .text	000007c0 drawPlayer
0000d084 g     F .text	000000dc .hidden __gedf2
0000dbe8 g     F .text	0000004c clock
0001e730 g     O .rwdata	00000004 __wctomb
00015698 g     F .text	00000018 __sprint_r
0001b104 g     F .text	00000020 alt_icache_flush_all
0001e750 g     O .rwdata	00000004 alt_priority_mask
0001b174 g     F .text	00000088 alt_ic_irq_enable
000109f4 g     F .text	0000001c __vfprintf_internal
00017584 g     F .text	0000005c _wctomb_r
0000d160 g     F .text	000008fc .hidden __subdf3
00014078 g     F .text	000000b0 __lo0bits
0000b9a4 g     F .text	000000c8 MINOR_en
00002060 g     F .text	00000190 UsbGetConfigDesc1
0001e754 g     O .rwdata	00000008 alt_alarm_list
0001b044 g     F .text	00000060 _do_ctors
00001b8c g     F .text	000000b4 UsbSoftReset
00008fd4 g     F .text	00000248 initPlayer
00007dc4 g     F .text	000000d0 pushToCoinList
00017494 g     F .text	000000c0 wcrtomb
00019658 g     F .text	000000d8 close
00001e88 g     F .text	000001d8 UsbGetDeviceDesc2
0001e710 g     O .rwdata	00000004 L2
000199a0 g     F .text	00000084 alt_load
000170b0 g     F .text	00000080 fputwc
0000dc48 g     F .text	00000014 free
00012af0 g     F .text	00000004 __sinit_lock_acquire
00013dc4 g     F .text	00000148 __multadd
00013d9c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	1080da04 	addi	r2,r2,872
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	1080da04 	addi	r2,r2,872
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a70e17 	ldw	r2,-25544(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a70e17 	ldw	r2,-25544(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     23c:	d699bb14 	ori	gp,gp,26348
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     244:	1080b014 	ori	r2,r2,704

    movhi r3, %hi(__bss_end)
     248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     24c:	18c11a14 	ori	r3,r3,1128

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00199a00 	call	199a0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	0019b3c0 	call	19b3c <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xf8000268>

0000026c <INIT>:
#include "./header_file/draw_driver.h"
#include "./header_file/USB_Keyboard_Driver.h"
#include "./header_file/audio_driver.h"

volatile unsigned int * Boot_Up = (unsigned int *) 0x080000d0;

     26c:	defff604 	addi	sp,sp,-40
     270:	dfc00915 	stw	ra,36(sp)
     274:	df000815 	stw	fp,32(sp)
     278:	dc000715 	stw	r16,28(sp)
     27c:	df000804 	addi	fp,sp,32

void INIT(){
     280:	000370c0 	call	370c <draw_driver_init>
///////////////////////////////////////////////////////////////////////Init Stage
	draw_driver_init();

     284:	e03ffb15 	stw	zero,-20(fp)
     288:	00001e06 	br	304 <INIT+0x98>
	//Draw Black Background
	for (int i = 0; i < 4; i++ ){
     28c:	e03ffc15 	stw	zero,-16(fp)
     290:	00001606 	br	2ec <INIT+0x80>
		//Loop  Row
     294:	01402804 	movi	r5,160
     298:	e13ffb17 	ldw	r4,-20(fp)
     29c:	000c68c0 	call	c68c <__mulsi3>
     2a0:	1021883a 	mov	r16,r2
     2a4:	01402804 	movi	r5,160
     2a8:	e13ffc17 	ldw	r4,-16(fp)
     2ac:	000c68c0 	call	c68c <__mulsi3>
     2b0:	1007883a 	mov	r3,r2
     2b4:	00800104 	movi	r2,4
     2b8:	d8800215 	stw	r2,8(sp)
     2bc:	d8c00115 	stw	r3,4(sp)
     2c0:	dc000015 	stw	r16,0(sp)
     2c4:	01c02984 	movi	r7,166
     2c8:	01808f44 	movi	r6,573
     2cc:	014001c4 	movi	r5,7
     2d0:	01006784 	movi	r4,414
     2d4:	00036040 	call	3604 <draw_driver>
		for (int z = 0; z < 3; z++){
     2d8:	01000044 	movi	r4,1
     2dc:	00038500 	call	3850 <delay>
void INIT(){
///////////////////////////////////////////////////////////////////////Init Stage
	draw_driver_init();

	//Draw Black Background
	for (int i = 0; i < 4; i++ ){
     2e0:	e0bffc17 	ldw	r2,-16(fp)
     2e4:	10800044 	addi	r2,r2,1
     2e8:	e0bffc15 	stw	r2,-16(fp)
     2ec:	e0bffc17 	ldw	r2,-16(fp)
     2f0:	108000d0 	cmplti	r2,r2,3
     2f4:	103fe71e 	bne	r2,zero,294 <__alt_data_end+0xf8000294>


void INIT(){
///////////////////////////////////////////////////////////////////////Init Stage
	draw_driver_init();

     2f8:	e0bffb17 	ldw	r2,-20(fp)
     2fc:	10800044 	addi	r2,r2,1
     300:	e0bffb15 	stw	r2,-20(fp)
     304:	e0bffb17 	ldw	r2,-20(fp)
     308:	10800110 	cmplti	r2,r2,4
     30c:	103fdf1e 	bne	r2,zero,28c <__alt_data_end+0xf800028c>
		//Loop  Row
		for (int z = 0; z < 3; z++){
			draw_driver(414,7,414+159,7+159,i*160,160*z,4);
			delay(1);
		}
	}
     310:	00800104 	movi	r2,4
     314:	d8800215 	stw	r2,8(sp)
     318:	00800284 	movi	r2,10
     31c:	d8800115 	stw	r2,4(sp)
     320:	00800284 	movi	r2,10
     324:	d8800015 	stw	r2,0(sp)
     328:	01c00944 	movi	r7,37
     32c:	01803984 	movi	r6,230
     330:	01400404 	movi	r5,16
     334:	01000344 	movi	r4,13
     338:	00036040 	call	3604 <draw_driver>

     33c:	0002d0c0 	call	2d0c <Audio_init>
	//Wait until the Boot_Up bottom being pressed
	while (!(*Boot_Up)){}
     340:	e03ffd15 	stw	zero,-12(fp)
     344:	00001306 	br	394 <INIT+0x128>

     348:	01400284 	movi	r5,10
     34c:	e13ffd17 	ldw	r4,-12(fp)
     350:	000c68c0 	call	c68c <__mulsi3>
     354:	1007883a 	mov	r3,r2
     358:	00800104 	movi	r2,4
     35c:	d8800215 	stw	r2,8(sp)
     360:	00806404 	movi	r2,400
     364:	d8800115 	stw	r2,4(sp)
     368:	d8c00015 	stw	r3,0(sp)
     36c:	01c04504 	movi	r7,276
     370:	01800704 	movi	r6,28
     374:	01404104 	movi	r5,260
     378:	01000304 	movi	r4,12
     37c:	00036040 	call	3604 <draw_driver>

     380:	01000784 	movi	r4,30
     384:	00038500 	call	3850 <delay>
			delay(1);
		}
	}

	//Wait until the Boot_Up bottom being pressed
	while (!(*Boot_Up)){}
     388:	e0bffd17 	ldw	r2,-12(fp)
     38c:	10800044 	addi	r2,r2,1
     390:	e0bffd15 	stw	r2,-12(fp)
     394:	e0bffd17 	ldw	r2,-12(fp)
     398:	10800310 	cmplti	r2,r2,12
     39c:	103fea1e 	bne	r2,zero,348 <__alt_data_end+0xf8000348>



	draw_driver(13,16,13+217,16+21,10,10,4);
	Audio_init();
     3a0:	00800104 	movi	r2,4
     3a4:	d8800215 	stw	r2,8(sp)
     3a8:	00800c84 	movi	r2,50
     3ac:	d8800115 	stw	r2,4(sp)
     3b0:	00800244 	movi	r2,9
     3b4:	d8800015 	stw	r2,0(sp)
     3b8:	01c01484 	movi	r7,82
     3bc:	01803ac4 	movi	r6,235
     3c0:	01400e84 	movi	r5,58
     3c4:	01000344 	movi	r4,13
     3c8:	00036040 	call	3604 <draw_driver>

     3cc:	01007d04 	movi	r4,500
     3d0:	00038500 	call	3850 <delay>
	for (int i = 0; i < 12; i++){
		draw_driver(12,260,28,276,i*10,400,4);
     3d4:	00800304 	movi	r2,12
     3d8:	e0bffe15 	stw	r2,-8(fp)
     3dc:	00001306 	br	42c <INIT+0x1c0>
		delay(30);
     3e0:	01400284 	movi	r5,10
     3e4:	e13ffe17 	ldw	r4,-8(fp)
     3e8:	000c68c0 	call	c68c <__mulsi3>
     3ec:	1007883a 	mov	r3,r2
     3f0:	00800104 	movi	r2,4
     3f4:	d8800215 	stw	r2,8(sp)
     3f8:	00806404 	movi	r2,400
     3fc:	d8800115 	stw	r2,4(sp)
     400:	d8c00015 	stw	r3,0(sp)
     404:	01c04504 	movi	r7,276
     408:	01800704 	movi	r6,28
     40c:	01404104 	movi	r5,260
     410:	01000304 	movi	r4,12
     414:	00036040 	call	3604 <draw_driver>
	}
     418:	01000784 	movi	r4,30
     41c:	00038500 	call	3850 <delay>

	draw_driver(13,16,13+217,16+21,10,10,4);
	Audio_init();

	for (int i = 0; i < 12; i++){
		draw_driver(12,260,28,276,i*10,400,4);
     420:	e0bffe17 	ldw	r2,-8(fp)
     424:	10800044 	addi	r2,r2,1
     428:	e0bffe15 	stw	r2,-8(fp)
     42c:	e0bffe17 	ldw	r2,-8(fp)
     430:	10800510 	cmplti	r2,r2,20
     434:	103fea1e 	bne	r2,zero,3e0 <__alt_data_end+0xf80003e0>
		delay(30);
	}

	draw_driver(13,58,13+222,24+58,9,50,4);
	delay(500);
     438:	00800104 	movi	r2,4
     43c:	d8800215 	stw	r2,8(sp)
     440:	00801684 	movi	r2,90
     444:	d8800115 	stw	r2,4(sp)
     448:	00800304 	movi	r2,12
     44c:	d8800015 	stw	r2,0(sp)
     450:	01c02004 	movi	r7,128
     454:	01803e44 	movi	r6,249
     458:	01401b44 	movi	r5,109
     45c:	010002c4 	movi	r4,11
     460:	00036040 	call	3604 <draw_driver>

     464:	00006340 	call	634 <Keyboard_INIT>
	for (int i = 12; i < 20; i++){
		draw_driver(12,260,28,276,i*10,400,4);
		delay(30);
     468:	0001883a 	nop
     46c:	e6ffff04 	addi	sp,fp,-4
     470:	dfc00217 	ldw	ra,8(sp)
     474:	df000117 	ldw	fp,4(sp)
     478:	dc000017 	ldw	r16,0(sp)
     47c:	dec00304 	addi	sp,sp,12
     480:	f800283a 	ret

00000484 <displayScore>:
#include "./header_file/LEDandHEX.h"


void displayScore(player* playerA, player* playerB){
     484:	defff804 	addi	sp,sp,-32
     488:	dfc00715 	stw	ra,28(sp)
     48c:	df000615 	stw	fp,24(sp)
     490:	df000604 	addi	fp,sp,24
     494:	e13ffe15 	stw	r4,-8(fp)
     498:	e17fff15 	stw	r5,-4(fp)
	if(playerA->score<=99){
     49c:	e0bffe17 	ldw	r2,-8(fp)
     4a0:	10800317 	ldw	r2,12(r2)
     4a4:	10801928 	cmpgeui	r2,r2,100
     4a8:	1000141e 	bne	r2,zero,4fc <displayScore+0x78>
		unsigned int score0 = playerA->score%10;
     4ac:	e0bffe17 	ldw	r2,-8(fp)
     4b0:	10800317 	ldw	r2,12(r2)
     4b4:	01400284 	movi	r5,10
     4b8:	1009883a 	mov	r4,r2
     4bc:	000c6340 	call	c634 <__umodsi3>
     4c0:	e0bffa15 	stw	r2,-24(fp)
		unsigned int score1 = playerA->score/10;
     4c4:	e0bffe17 	ldw	r2,-8(fp)
     4c8:	10800317 	ldw	r2,12(r2)
     4cc:	01400284 	movi	r5,10
     4d0:	1009883a 	mov	r4,r2
     4d4:	000c5d00 	call	c5d0 <__udivsi3>
     4d8:	e0bffb15 	stw	r2,-20(fp)
		*player1Score1 = score1;
     4dc:	00820034 	movhi	r2,2048
     4e0:	10805804 	addi	r2,r2,352
     4e4:	e0fffb17 	ldw	r3,-20(fp)
     4e8:	10c00015 	stw	r3,0(r2)
		*player1Score0 = score0;
     4ec:	00820034 	movhi	r2,2048
     4f0:	10805c04 	addi	r2,r2,368
     4f4:	e0fffa17 	ldw	r3,-24(fp)
     4f8:	10c00015 	stw	r3,0(r2)
	}
	if(playerB->score<=99){
     4fc:	e0bfff17 	ldw	r2,-4(fp)
     500:	10800317 	ldw	r2,12(r2)
     504:	10801928 	cmpgeui	r2,r2,100
     508:	1000141e 	bne	r2,zero,55c <displayScore+0xd8>
		unsigned int score0 = playerB->score%10;
     50c:	e0bfff17 	ldw	r2,-4(fp)
     510:	10800317 	ldw	r2,12(r2)
     514:	01400284 	movi	r5,10
     518:	1009883a 	mov	r4,r2
     51c:	000c6340 	call	c634 <__umodsi3>
     520:	e0bffc15 	stw	r2,-16(fp)
		unsigned int score1 = playerB->score/10;
     524:	e0bfff17 	ldw	r2,-4(fp)
     528:	10800317 	ldw	r2,12(r2)
     52c:	01400284 	movi	r5,10
     530:	1009883a 	mov	r4,r2
     534:	000c5d00 	call	c5d0 <__udivsi3>
     538:	e0bffd15 	stw	r2,-12(fp)
		*player2Score1 = score1;
     53c:	00820034 	movhi	r2,2048
     540:	10806004 	addi	r2,r2,384
     544:	e0fffd17 	ldw	r3,-12(fp)
     548:	10c00015 	stw	r3,0(r2)
		*player2Score0 = score0;
     54c:	00820034 	movhi	r2,2048
     550:	10806404 	addi	r2,r2,400
     554:	e0fffc17 	ldw	r3,-16(fp)
     558:	10c00015 	stw	r3,0(r2)
	}

}
     55c:	0001883a 	nop
     560:	e037883a 	mov	sp,fp
     564:	dfc00117 	ldw	ra,4(sp)
     568:	df000017 	ldw	fp,0(sp)
     56c:	dec00204 	addi	sp,sp,8
     570:	f800283a 	ret

00000574 <displayTime>:

void displayTime(unsigned int sec){
     574:	defff904 	addi	sp,sp,-28
     578:	dfc00615 	stw	ra,24(sp)
     57c:	df000515 	stw	fp,20(sp)
     580:	df000504 	addi	fp,sp,20
     584:	e13fff15 	stw	r4,-4(fp)
	if(sec>180){sec = 180;}
     588:	e0bfff17 	ldw	r2,-4(fp)
     58c:	10802d70 	cmpltui	r2,r2,181
     590:	1000021e 	bne	r2,zero,59c <displayTime+0x28>
     594:	00802d04 	movi	r2,180
     598:	e0bfff15 	stw	r2,-4(fp)
	unsigned int min = sec/60;
     59c:	e0bfff17 	ldw	r2,-4(fp)
     5a0:	01400f04 	movi	r5,60
     5a4:	1009883a 	mov	r4,r2
     5a8:	000c5d00 	call	c5d0 <__udivsi3>
     5ac:	e0bffb15 	stw	r2,-20(fp)
	unsigned int sec_offset = sec%60;
     5b0:	e0bfff17 	ldw	r2,-4(fp)
     5b4:	01400f04 	movi	r5,60
     5b8:	1009883a 	mov	r4,r2
     5bc:	000c6340 	call	c634 <__umodsi3>
     5c0:	e0bffc15 	stw	r2,-16(fp)
	unsigned int sec_1 =sec_offset/10;
     5c4:	e0bffc17 	ldw	r2,-16(fp)
     5c8:	01400284 	movi	r5,10
     5cc:	1009883a 	mov	r4,r2
     5d0:	000c5d00 	call	c5d0 <__udivsi3>
     5d4:	e0bffd15 	stw	r2,-12(fp)
	unsigned int sec_0 =sec_offset%10;
     5d8:	e0bffc17 	ldw	r2,-16(fp)
     5dc:	01400284 	movi	r5,10
     5e0:	1009883a 	mov	r4,r2
     5e4:	000c6340 	call	c634 <__umodsi3>
     5e8:	e0bffe15 	stw	r2,-8(fp)
	*timeScreen2 = min;
     5ec:	00820034 	movhi	r2,2048
     5f0:	10805004 	addi	r2,r2,320
     5f4:	e0fffb17 	ldw	r3,-20(fp)
     5f8:	10c00015 	stw	r3,0(r2)
	*timeScreen1 = sec_1;
     5fc:	00820034 	movhi	r2,2048
     600:	10805404 	addi	r2,r2,336
     604:	e0fffd17 	ldw	r3,-12(fp)
     608:	10c00015 	stw	r3,0(r2)
	*timeScreen0 = sec_0;
     60c:	00820034 	movhi	r2,2048
     610:	10804c04 	addi	r2,r2,304
     614:	e0fffe17 	ldw	r3,-8(fp)
     618:	10c00015 	stw	r3,0(r2)
}
     61c:	0001883a 	nop
     620:	e037883a 	mov	sp,fp
     624:	dfc00117 	ldw	ra,4(sp)
     628:	df000017 	ldw	fp,0(sp)
     62c:	dec00204 	addi	sp,sp,8
     630:	f800283a 	ret

00000634 <Keyboard_INIT>:
alt_u8 	hot_plug_count;

int keycode_read;


void Keyboard_INIT(){
     634:	deffed04 	addi	sp,sp,-76
     638:	dfc01215 	stw	ra,72(sp)
     63c:	df001115 	stw	fp,68(sp)
     640:	df001104 	addi	fp,sp,68

	IO_init();
     644:	00019440 	call	1944 <IO_init>
			//UsbRead(0xc008);
			usleep(10*10000);
		}*/

		alt_u16 intStat;
		alt_u16 fs_device = 0;
     648:	e03ffe0d 	sth	zero,-8(fp)
		alt_u16 code;

		ctl_reg = 0;
     64c:	d026f50d 	sth	zero,-25644(gp)
		no_device = 0;
     650:	d026f58d 	sth	zero,-25642(gp)


		printf("USB keyboard setup...\n\n");
     654:	010000b4 	movhi	r4,2
     658:	212fff04 	addi	r4,r4,-16388
     65c:	000e5940 	call	e594 <puts>
		USB_HOT_PLUG:


		draw_driver(414,7,414+160,7+40,12,130,4);
     660:	00800104 	movi	r2,4
     664:	d8800215 	stw	r2,8(sp)
     668:	00802084 	movi	r2,130
     66c:	d8800115 	stw	r2,4(sp)
     670:	00800304 	movi	r2,12
     674:	d8800015 	stw	r2,0(sp)
     678:	01c00bc4 	movi	r7,47
     67c:	01808f84 	movi	r6,574
     680:	014001c4 	movi	r5,7
     684:	01006784 	movi	r4,414
     688:	00036040 	call	3604 <draw_driver>
		draw_driver(414,7,414+160,7+40,12+160,130,4);
     68c:	00800104 	movi	r2,4
     690:	d8800215 	stw	r2,8(sp)
     694:	00802084 	movi	r2,130
     698:	d8800115 	stw	r2,4(sp)
     69c:	00802b04 	movi	r2,172
     6a0:	d8800015 	stw	r2,0(sp)
     6a4:	01c00bc4 	movi	r7,47
     6a8:	01808f84 	movi	r6,574
     6ac:	014001c4 	movi	r5,7
     6b0:	01006784 	movi	r4,414
     6b4:	00036040 	call	3604 <draw_driver>

		for (int i = 20; i < 61; i++){
     6b8:	00800504 	movi	r2,20
     6bc:	e0bff215 	stw	r2,-56(fp)
     6c0:	00001306 	br	710 <Keyboard_INIT+0xdc>
			draw_driver(414,7,414+30,7+30,i*10,400,4);
     6c4:	01400284 	movi	r5,10
     6c8:	e13ff217 	ldw	r4,-56(fp)
     6cc:	000c68c0 	call	c68c <__mulsi3>
     6d0:	1007883a 	mov	r3,r2
     6d4:	00800104 	movi	r2,4
     6d8:	d8800215 	stw	r2,8(sp)
     6dc:	00806404 	movi	r2,400
     6e0:	d8800115 	stw	r2,4(sp)
     6e4:	d8c00015 	stw	r3,0(sp)
     6e8:	01c00944 	movi	r7,37
     6ec:	01806f04 	movi	r6,444
     6f0:	014001c4 	movi	r5,7
     6f4:	01006784 	movi	r4,414
     6f8:	00036040 	call	3604 <draw_driver>
			delay(30);
     6fc:	01000784 	movi	r4,30
     700:	00038500 	call	3850 <delay>


		draw_driver(414,7,414+160,7+40,12,130,4);
		draw_driver(414,7,414+160,7+40,12+160,130,4);

		for (int i = 20; i < 61; i++){
     704:	e0bff217 	ldw	r2,-56(fp)
     708:	10800044 	addi	r2,r2,1
     70c:	e0bff215 	stw	r2,-56(fp)
     710:	e0bff217 	ldw	r2,-56(fp)
     714:	10800f50 	cmplti	r2,r2,61
     718:	103fea1e 	bne	r2,zero,6c4 <__alt_data_end+0xf80006c4>
		}



		//----------------------------------------SIE1 initial---------------------------------------------------//
		UsbSoftReset();
     71c:	0001b8c0 	call	1b8c <UsbSoftReset>

		// STEP 1a:
		UsbWrite (HPI_SIE1_MSG_ADR, 0);
     720:	000b883a 	mov	r5,zero
     724:	01005104 	movi	r4,324
     728:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite (HOST1_STAT_REG, 0xFFFF);
     72c:	017fffd4 	movui	r5,65535
     730:	01302414 	movui	r4,49296
     734:	0001af00 	call	1af0 <UsbWrite>

		/* Set HUSB_pEOT time */
		UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     738:	01409604 	movi	r5,600
     73c:	01006d04 	movi	r4,436
     740:	0001af00 	call	1af0 <UsbWrite>

		usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     744:	00811004 	movi	r2,1088
     748:	d0a6f60d 	sth	r2,-25640(gp)
		UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     74c:	d0a6f60b 	ldhu	r2,-25640(gp)
     750:	10bfffcc 	andi	r2,r2,65535
     754:	100b883a 	mov	r5,r2
     758:	01005084 	movi	r4,322
     75c:	0001af00 	call	1af0 <UsbWrite>

		intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     760:	00808404 	movi	r2,528
     764:	e0bffe8d 	sth	r2,-6(fp)
		UsbWrite(HOST1_IRQ_EN_REG, intStat);
     768:	e0bffe8b 	ldhu	r2,-6(fp)
     76c:	100b883a 	mov	r5,r2
     770:	01302314 	movui	r4,49292
     774:	0001af00 	call	1af0 <UsbWrite>
		// STEP 1a end

		// STEP 1b begin
		UsbWrite(COMM_R0,0x0000);//reset time
     778:	000b883a 	mov	r5,zero
     77c:	01007104 	movi	r4,452
     780:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R1,0x0000);  //port number
     784:	000b883a 	mov	r5,zero
     788:	01007184 	movi	r4,454
     78c:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R2,0x0000);  //r1
     790:	000b883a 	mov	r5,zero
     794:	01007204 	movi	r4,456
     798:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R3,0x0000);  //r1
     79c:	000b883a 	mov	r5,zero
     7a0:	01007284 	movi	r4,458
     7a4:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R4,0x0000);  //r1
     7a8:	000b883a 	mov	r5,zero
     7ac:	01007304 	movi	r4,460
     7b0:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R5,0x0000);  //r1
     7b4:	000b883a 	mov	r5,zero
     7b8:	01007384 	movi	r4,462
     7bc:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R6,0x0000);  //r1
     7c0:	000b883a 	mov	r5,zero
     7c4:	01007404 	movi	r4,464
     7c8:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R7,0x0000);  //r1
     7cc:	000b883a 	mov	r5,zero
     7d0:	01007484 	movi	r4,466
     7d4:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R8,0x0000);  //r1
     7d8:	000b883a 	mov	r5,zero
     7dc:	01007504 	movi	r4,468
     7e0:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R9,0x0000);  //r1
     7e4:	000b883a 	mov	r5,zero
     7e8:	01007584 	movi	r4,470
     7ec:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R10,0x0000);  //r1
     7f0:	000b883a 	mov	r5,zero
     7f4:	01007604 	movi	r4,472
     7f8:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R11,0x0000);  //r1
     7fc:	000b883a 	mov	r5,zero
     800:	01007684 	movi	r4,474
     804:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R12,0x0000);  //r1
     808:	000b883a 	mov	r5,zero
     80c:	01007704 	movi	r4,476
     810:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R13,0x0000);  //r1
     814:	000b883a 	mov	r5,zero
     818:	01007784 	movi	r4,478
     81c:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     820:	01401c84 	movi	r5,114
     824:	01007084 	movi	r4,450
     828:	0001af00 	call	1af0 <UsbWrite>
		IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     82c:	01738054 	movui	r5,52737
     830:	01000044 	movi	r4,1
     834:	00019e80 	call	19e8 <IO_write>

		while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     838:	0001883a 	nop
     83c:	010000c4 	movi	r4,3
     840:	0001a700 	call	1a70 <IO_read>
     844:	10bfffcc 	andi	r2,r2,65535
     848:	103ffc26 	beq	r2,zero,83c <__alt_data_end+0xf800083c>
		{
		}
		while (IO_read(HPI_MAILBOX) != COMM_ACK)
     84c:	00000806 	br	870 <Keyboard_INIT+0x23c>
		{
			printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     850:	01000044 	movi	r4,1
     854:	0001a700 	call	1a70 <IO_read>
     858:	10bfffcc 	andi	r2,r2,65535
     85c:	100b883a 	mov	r5,r2
     860:	010000b4 	movhi	r4,2
     864:	21300504 	addi	r4,r4,-16364
     868:	000e4980 	call	e498 <printf>
			goto USB_HOT_PLUG;
     86c:	003f7c06 	br	660 <__alt_data_end+0xf8000660>
		IO_write(HPI_MAILBOX,COMM_EXEC_INT);

		while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
		{
		}
		while (IO_read(HPI_MAILBOX) != COMM_ACK)
     870:	01000044 	movi	r4,1
     874:	0001a700 	call	1a70 <IO_read>
     878:	10bfffcc 	andi	r2,r2,65535
     87c:	1083fb58 	cmpnei	r2,r2,4077
     880:	103ff31e 	bne	r2,zero,850 <__alt_data_end+0xf8000850>
			printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
			goto USB_HOT_PLUG;
		}
		// STEP 1b end

		printf("STEP 1 Complete");
     884:	010000b4 	movhi	r4,2
     888:	21300e04 	addi	r4,r4,-16328
     88c:	000e4980 	call	e498 <printf>

		//Loading
		for (int i = 20; i < 24; i++){
     890:	00800504 	movi	r2,20
     894:	e0bff315 	stw	r2,-52(fp)
     898:	00001306 	br	8e8 <Keyboard_INIT+0x2b4>
			draw_driver(12,260,28,276,i*10,400,4);
     89c:	01400284 	movi	r5,10
     8a0:	e13ff317 	ldw	r4,-52(fp)
     8a4:	000c68c0 	call	c68c <__mulsi3>
     8a8:	1007883a 	mov	r3,r2
     8ac:	00800104 	movi	r2,4
     8b0:	d8800215 	stw	r2,8(sp)
     8b4:	00806404 	movi	r2,400
     8b8:	d8800115 	stw	r2,4(sp)
     8bc:	d8c00015 	stw	r3,0(sp)
     8c0:	01c04504 	movi	r7,276
     8c4:	01800704 	movi	r6,28
     8c8:	01404104 	movi	r5,260
     8cc:	01000304 	movi	r4,12
     8d0:	00036040 	call	3604 <draw_driver>
			delay(30);
     8d4:	01000784 	movi	r4,30
     8d8:	00038500 	call	3850 <delay>
		// STEP 1b end

		printf("STEP 1 Complete");

		//Loading
		for (int i = 20; i < 24; i++){
     8dc:	e0bff317 	ldw	r2,-52(fp)
     8e0:	10800044 	addi	r2,r2,1
     8e4:	e0bff315 	stw	r2,-52(fp)
     8e8:	e0bff317 	ldw	r2,-52(fp)
     8ec:	10800610 	cmplti	r2,r2,24
     8f0:	103fea1e 	bne	r2,zero,89c <__alt_data_end+0xf800089c>
			delay(30);
		}


		// STEP 2 begin
		UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     8f4:	01401d04 	movi	r5,116
     8f8:	01007084 	movi	r4,450
     8fc:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R0,0x003c);//reset time
     900:	01400f04 	movi	r5,60
     904:	01007104 	movi	r4,452
     908:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R1,0x0000);  //port number
     90c:	000b883a 	mov	r5,zero
     910:	01007184 	movi	r4,454
     914:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R2,0x0000);  //r1
     918:	000b883a 	mov	r5,zero
     91c:	01007204 	movi	r4,456
     920:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R3,0x0000);  //r1
     924:	000b883a 	mov	r5,zero
     928:	01007284 	movi	r4,458
     92c:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R4,0x0000);  //r1
     930:	000b883a 	mov	r5,zero
     934:	01007304 	movi	r4,460
     938:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R5,0x0000);  //r1
     93c:	000b883a 	mov	r5,zero
     940:	01007384 	movi	r4,462
     944:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R6,0x0000);  //r1
     948:	000b883a 	mov	r5,zero
     94c:	01007404 	movi	r4,464
     950:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R7,0x0000);  //r1
     954:	000b883a 	mov	r5,zero
     958:	01007484 	movi	r4,466
     95c:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R8,0x0000);  //r1
     960:	000b883a 	mov	r5,zero
     964:	01007504 	movi	r4,468
     968:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R9,0x0000);  //r1
     96c:	000b883a 	mov	r5,zero
     970:	01007584 	movi	r4,470
     974:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R10,0x0000);  //r1
     978:	000b883a 	mov	r5,zero
     97c:	01007604 	movi	r4,472
     980:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R11,0x0000);  //r1
     984:	000b883a 	mov	r5,zero
     988:	01007684 	movi	r4,474
     98c:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R12,0x0000);  //r1
     990:	000b883a 	mov	r5,zero
     994:	01007704 	movi	r4,476
     998:	0001af00 	call	1af0 <UsbWrite>
		UsbWrite(COMM_R13,0x0000);  //r1
     99c:	000b883a 	mov	r5,zero
     9a0:	01007784 	movi	r4,478
     9a4:	0001af00 	call	1af0 <UsbWrite>

		IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     9a8:	01738054 	movui	r5,52737
     9ac:	01000044 	movi	r4,1
     9b0:	00019e80 	call	19e8 <IO_write>

		while (IO_read(HPI_MAILBOX) != COMM_ACK)
     9b4:	0001883a 	nop
     9b8:	01000044 	movi	r4,1
     9bc:	0001a700 	call	1a70 <IO_read>
     9c0:	10bfffcc 	andi	r2,r2,65535
     9c4:	1083fb58 	cmpnei	r2,r2,4077
     9c8:	10000826 	beq	r2,zero,9ec <Keyboard_INIT+0x3b8>
		{
			printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     9cc:	01000044 	movi	r4,1
     9d0:	0001a700 	call	1a70 <IO_read>
     9d4:	10bfffcc 	andi	r2,r2,65535
     9d8:	100b883a 	mov	r5,r2
     9dc:	010000b4 	movhi	r4,2
     9e0:	21300504 	addi	r4,r4,-16364
     9e4:	000e4980 	call	e498 <printf>
			goto USB_HOT_PLUG;
     9e8:	003f1d06 	br	660 <__alt_data_end+0xf8000660>
		}
		// STEP 2 end

		ctl_reg = USB1_CTL_REG;
     9ec:	00b02284 	movi	r2,-16246
     9f0:	d0a6f50d 	sth	r2,-25644(gp)
		no_device = (A_DP_STAT | A_DM_STAT);
     9f4:	008c0004 	movi	r2,12288
     9f8:	d0a6f58d 	sth	r2,-25642(gp)
		fs_device = A_DP_STAT;
     9fc:	00880004 	movi	r2,8192
     a00:	e0bffe0d 	sth	r2,-8(fp)
		usb_ctl_val = UsbRead(ctl_reg);
     a04:	d0a6f50b 	ldhu	r2,-25644(gp)
     a08:	10bfffcc 	andi	r2,r2,65535
     a0c:	1009883a 	mov	r4,r2
     a10:	0001b480 	call	1b48 <UsbRead>
     a14:	d0a6f60d 	sth	r2,-25640(gp)

		if (!(usb_ctl_val & no_device))
     a18:	d0e6f60b 	ldhu	r3,-25640(gp)
     a1c:	d0a6f58b 	ldhu	r2,-25642(gp)
     a20:	1884703a 	and	r2,r3,r2
     a24:	10bfffcc 	andi	r2,r2,65535
     a28:	1000411e 	bne	r2,zero,b30 <Keyboard_INIT+0x4fc>
		{
			for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     a2c:	d026f6c5 	stb	zero,-25637(gp)
     a30:	00000f06 	br	a70 <Keyboard_INIT+0x43c>
			{
				usleep(5*1000);
     a34:	0104e204 	movi	r4,5000
     a38:	0019f280 	call	19f28 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
     a3c:	d0a6f50b 	ldhu	r2,-25644(gp)
     a40:	10bfffcc 	andi	r2,r2,65535
     a44:	1009883a 	mov	r4,r2
     a48:	0001b480 	call	1b48 <UsbRead>
     a4c:	d0a6f60d 	sth	r2,-25640(gp)
				if(usb_ctl_val & no_device) break;
     a50:	d0e6f60b 	ldhu	r3,-25640(gp)
     a54:	d0a6f58b 	ldhu	r2,-25642(gp)
     a58:	1884703a 	and	r2,r3,r2
     a5c:	10bfffcc 	andi	r2,r2,65535
     a60:	1000081e 	bne	r2,zero,a84 <Keyboard_INIT+0x450>
		fs_device = A_DP_STAT;
		usb_ctl_val = UsbRead(ctl_reg);

		if (!(usb_ctl_val & no_device))
		{
			for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     a64:	d0a6f6c3 	ldbu	r2,-25637(gp)
     a68:	10800044 	addi	r2,r2,1
     a6c:	d0a6f6c5 	stb	r2,-25637(gp)
     a70:	d0a6f6c3 	ldbu	r2,-25637(gp)
     a74:	10803fcc 	andi	r2,r2,255
     a78:	10800170 	cmpltui	r2,r2,5
     a7c:	103fed1e 	bne	r2,zero,a34 <__alt_data_end+0xf8000a34>
     a80:	00000106 	br	a88 <Keyboard_INIT+0x454>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
     a84:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
     a88:	d0e6f60b 	ldhu	r3,-25640(gp)
     a8c:	d0a6f58b 	ldhu	r2,-25642(gp)
     a90:	1884703a 	and	r2,r3,r2
     a94:	10bfffcc 	andi	r2,r2,65535
     a98:	1000311e 	bne	r2,zero,b60 <Keyboard_INIT+0x52c>
			{
				printf("\n[INFO]: no device is present in SIE1!\n");
     a9c:	010000b4 	movhi	r4,2
     aa0:	21301204 	addi	r4,r4,-16312
     aa4:	000e5940 	call	e594 <puts>
				printf("[INFO]: please insert a USB keyboard in SIE1!\n");
     aa8:	010000b4 	movhi	r4,2
     aac:	21301c04 	addi	r4,r4,-16272
     ab0:	000e5940 	call	e594 <puts>
				draw_driver(11,301,312,321,12,130,4);
     ab4:	00800104 	movi	r2,4
     ab8:	d8800215 	stw	r2,8(sp)
     abc:	00802084 	movi	r2,130
     ac0:	d8800115 	stw	r2,4(sp)
     ac4:	00800304 	movi	r2,12
     ac8:	d8800015 	stw	r2,0(sp)
     acc:	01c05044 	movi	r7,321
     ad0:	01804e04 	movi	r6,312
     ad4:	01404b44 	movi	r5,301
     ad8:	010002c4 	movi	r4,11
     adc:	00036040 	call	3604 <draw_driver>



				while (!(usb_ctl_val & no_device))
     ae0:	00000d06 	br	b18 <Keyboard_INIT+0x4e4>
				{
					usb_ctl_val = UsbRead(ctl_reg);
     ae4:	d0a6f50b 	ldhu	r2,-25644(gp)
     ae8:	10bfffcc 	andi	r2,r2,65535
     aec:	1009883a 	mov	r4,r2
     af0:	0001b480 	call	1b48 <UsbRead>
     af4:	d0a6f60d 	sth	r2,-25640(gp)
					if(usb_ctl_val & no_device)
     af8:	d0e6f60b 	ldhu	r3,-25640(gp)
     afc:	d0a6f58b 	ldhu	r2,-25642(gp)
     b00:	1884703a 	and	r2,r3,r2
     b04:	10bfffcc 	andi	r2,r2,65535
     b08:	10000126 	beq	r2,zero,b10 <Keyboard_INIT+0x4dc>
						goto USB_HOT_PLUG;
     b0c:	003ed406 	br	660 <__alt_data_end+0xf8000660>

					usleep(2000);
     b10:	0101f404 	movi	r4,2000
     b14:	0019f280 	call	19f28 <usleep>
				printf("[INFO]: please insert a USB keyboard in SIE1!\n");
				draw_driver(11,301,312,321,12,130,4);



				while (!(usb_ctl_val & no_device))
     b18:	d0e6f60b 	ldhu	r3,-25640(gp)
     b1c:	d0a6f58b 	ldhu	r2,-25642(gp)
     b20:	1884703a 	and	r2,r3,r2
     b24:	10bfffcc 	andi	r2,r2,65535
     b28:	103fee26 	beq	r2,zero,ae4 <__alt_data_end+0xf8000ae4>
     b2c:	00000c06 	br	b60 <Keyboard_INIT+0x52c>
			}
		}
		else
		{
			/* check for low speed or full speed by reading D+ and D- lines */
			if (usb_ctl_val & fs_device)
     b30:	d0e6f60b 	ldhu	r3,-25640(gp)
     b34:	e0bffe0b 	ldhu	r2,-8(fp)
     b38:	1884703a 	and	r2,r3,r2
     b3c:	10bfffcc 	andi	r2,r2,65535
     b40:	10000426 	beq	r2,zero,b54 <Keyboard_INIT+0x520>
			{
				printf("[INFO]: full speed device\n");
     b44:	010000b4 	movhi	r4,2
     b48:	21302804 	addi	r4,r4,-16224
     b4c:	000e5940 	call	e594 <puts>
     b50:	00000306 	br	b60 <Keyboard_INIT+0x52c>
			}
			else
			{
				printf("[INFO]: low speed device\n");
     b54:	010000b4 	movhi	r4,2
     b58:	21302f04 	addi	r4,r4,-16196
     b5c:	000e5940 	call	e594 <puts>
			}
		}

		for (int i = 24; i < 28; i++){
     b60:	00800604 	movi	r2,24
     b64:	e0bff415 	stw	r2,-48(fp)
     b68:	00001306 	br	bb8 <Keyboard_INIT+0x584>
			draw_driver(12,260,28,276,i*10,400,4);
     b6c:	01400284 	movi	r5,10
     b70:	e13ff417 	ldw	r4,-48(fp)
     b74:	000c68c0 	call	c68c <__mulsi3>
     b78:	1007883a 	mov	r3,r2
     b7c:	00800104 	movi	r2,4
     b80:	d8800215 	stw	r2,8(sp)
     b84:	00806404 	movi	r2,400
     b88:	d8800115 	stw	r2,4(sp)
     b8c:	d8c00015 	stw	r3,0(sp)
     b90:	01c04504 	movi	r7,276
     b94:	01800704 	movi	r6,28
     b98:	01404104 	movi	r5,260
     b9c:	01000304 	movi	r4,12
     ba0:	00036040 	call	3604 <draw_driver>
			delay(30);
     ba4:	01000784 	movi	r4,30
     ba8:	00038500 	call	3850 <delay>
			{
				printf("[INFO]: low speed device\n");
			}
		}

		for (int i = 24; i < 28; i++){
     bac:	e0bff417 	ldw	r2,-48(fp)
     bb0:	10800044 	addi	r2,r2,1
     bb4:	e0bff415 	stw	r2,-48(fp)
     bb8:	e0bff417 	ldw	r2,-48(fp)
     bbc:	10800710 	cmplti	r2,r2,28
     bc0:	103fea1e 	bne	r2,zero,b6c <__alt_data_end+0xf8000b6c>



		// STEP 3 begin
		//------------------------------------------------------set address -----------------------------------------------------------------
		UsbSetAddress();
     bc4:	0001c400 	call	1c40 <UsbSetAddress>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     bc8:	00000306 	br	bd8 <Keyboard_INIT+0x5a4>
		{
			UsbSetAddress();
     bcc:	0001c400 	call	1c40 <UsbSetAddress>
			usleep(10*1000);
     bd0:	0109c404 	movi	r4,10000
     bd4:	0019f280 	call	19f28 <usleep>

		// STEP 3 begin
		//------------------------------------------------------set address -----------------------------------------------------------------
		UsbSetAddress();

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     bd8:	010000c4 	movi	r4,3
     bdc:	0001a700 	call	1a70 <IO_read>
     be0:	10bfffcc 	andi	r2,r2,65535
     be4:	1080040c 	andi	r2,r2,16
     be8:	103ff826 	beq	r2,zero,bcc <__alt_data_end+0xf8000bcc>
		{
			UsbSetAddress();
			usleep(10*1000);
		}

		UsbWaitTDListDone();
     bec:	0002ae00 	call	2ae0 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506); // i
     bf0:	01414184 	movi	r5,1286
     bf4:	01000084 	movi	r4,2
     bf8:	00019e80 	call	19e8 <IO_write>
		printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bfc:	0009883a 	mov	r4,zero
     c00:	0001a700 	call	1a70 <IO_read>
     c04:	10bfffcc 	andi	r2,r2,65535
     c08:	100b883a 	mov	r5,r2
     c0c:	010000b4 	movhi	r4,2
     c10:	21303604 	addi	r4,r4,-16168
     c14:	000e4980 	call	e498 <printf>

		IO_write(HPI_ADDR,0x0508); // n
     c18:	01414204 	movi	r5,1288
     c1c:	01000084 	movi	r4,2
     c20:	00019e80 	call	19e8 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
     c24:	0009883a 	mov	r4,zero
     c28:	0001a700 	call	1a70 <IO_read>
     c2c:	d0a6f60d 	sth	r2,-25640(gp)
		printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     c30:	d0a6f60b 	ldhu	r2,-25640(gp)
     c34:	10bfffcc 	andi	r2,r2,65535
     c38:	100b883a 	mov	r5,r2
     c3c:	010000b4 	movhi	r4,2
     c40:	21304104 	addi	r4,r4,-16124
     c44:	000e4980 	call	e498 <printf>
		while (usb_ctl_val != 0x03) // retries occurred
     c48:	0001883a 	nop
     c4c:	d0a6f60b 	ldhu	r2,-25640(gp)
     c50:	10bfffcc 	andi	r2,r2,65535
     c54:	108000d8 	cmpnei	r2,r2,3
     c58:	10000326 	beq	r2,zero,c68 <Keyboard_INIT+0x634>
		{
			usb_ctl_val = UsbGetRetryCnt();
     c5c:	0002b640 	call	2b64 <UsbGetRetryCnt>
     c60:	d0a6f60d 	sth	r2,-25640(gp)

			goto USB_HOT_PLUG;
     c64:	003e7e06 	br	660 <__alt_data_end+0xf8000660>
		}

		printf("------------[ENUM PROCESS]:set address done!---------------\n");
     c68:	010000b4 	movhi	r4,2
     c6c:	21304d04 	addi	r4,r4,-16076
     c70:	000e5940 	call	e594 <puts>
		for (int i = 28; i < 32; i++){
     c74:	00800704 	movi	r2,28
     c78:	e0bff515 	stw	r2,-44(fp)
     c7c:	00001306 	br	ccc <Keyboard_INIT+0x698>
			draw_driver(12,260,28,276,i*10,400,4);
     c80:	01400284 	movi	r5,10
     c84:	e13ff517 	ldw	r4,-44(fp)
     c88:	000c68c0 	call	c68c <__mulsi3>
     c8c:	1007883a 	mov	r3,r2
     c90:	00800104 	movi	r2,4
     c94:	d8800215 	stw	r2,8(sp)
     c98:	00806404 	movi	r2,400
     c9c:	d8800115 	stw	r2,4(sp)
     ca0:	d8c00015 	stw	r3,0(sp)
     ca4:	01c04504 	movi	r7,276
     ca8:	01800704 	movi	r6,28
     cac:	01404104 	movi	r5,260
     cb0:	01000304 	movi	r4,12
     cb4:	00036040 	call	3604 <draw_driver>
			delay(30);
     cb8:	01000784 	movi	r4,30
     cbc:	00038500 	call	3850 <delay>

			goto USB_HOT_PLUG;
		}

		printf("------------[ENUM PROCESS]:set address done!---------------\n");
		for (int i = 28; i < 32; i++){
     cc0:	e0bff517 	ldw	r2,-44(fp)
     cc4:	10800044 	addi	r2,r2,1
     cc8:	e0bff515 	stw	r2,-44(fp)
     ccc:	e0bff517 	ldw	r2,-44(fp)
     cd0:	10800810 	cmplti	r2,r2,32
     cd4:	103fea1e 	bne	r2,zero,c80 <__alt_data_end+0xf8000c80>
		}

		// STEP 4 begin
		//-------------------------------get device descriptor-1 -----------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     cd8:	0001d400 	call	1d40 <UsbGetDeviceDesc1>

		//usleep(10*1000);
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     cdc:	00000306 	br	cec <Keyboard_INIT+0x6b8>
		{
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetDeviceDesc1();
     ce0:	0001d400 	call	1d40 <UsbGetDeviceDesc1>
			usleep(10*1000);
     ce4:	0109c404 	movi	r4,10000
     ce8:	0019f280 	call	19f28 <usleep>
		//-------------------------------get device descriptor-1 -----------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

		//usleep(10*1000);
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     cec:	010000c4 	movi	r4,3
     cf0:	0001a700 	call	1a70 <IO_read>
     cf4:	10bfffcc 	andi	r2,r2,65535
     cf8:	1080040c 	andi	r2,r2,16
     cfc:	103ff826 	beq	r2,zero,ce0 <__alt_data_end+0xf8000ce0>
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetDeviceDesc1();
			usleep(10*1000);
		}

		UsbWaitTDListDone();
     d00:	0002ae00 	call	2ae0 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506);
     d04:	01414184 	movi	r5,1286
     d08:	01000084 	movi	r4,2
     d0c:	00019e80 	call	19e8 <IO_write>
		printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     d10:	0009883a 	mov	r4,zero
     d14:	0001a700 	call	1a70 <IO_read>
     d18:	10bfffcc 	andi	r2,r2,65535
     d1c:	100b883a 	mov	r5,r2
     d20:	010000b4 	movhi	r4,2
     d24:	21305c04 	addi	r4,r4,-16016
     d28:	000e4980 	call	e498 <printf>

		IO_write(HPI_ADDR,0x0508);
     d2c:	01414204 	movi	r5,1288
     d30:	01000084 	movi	r4,2
     d34:	00019e80 	call	19e8 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
     d38:	0009883a 	mov	r4,zero
     d3c:	0001a700 	call	1a70 <IO_read>
     d40:	d0a6f60d 	sth	r2,-25640(gp)
		printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     d44:	d0a6f60b 	ldhu	r2,-25640(gp)
     d48:	10bfffcc 	andi	r2,r2,65535
     d4c:	100b883a 	mov	r5,r2
     d50:	010000b4 	movhi	r4,2
     d54:	21306704 	addi	r4,r4,-15972
     d58:	000e4980 	call	e498 <printf>
		while (usb_ctl_val != 0x03)
     d5c:	00000206 	br	d68 <Keyboard_INIT+0x734>
		{
			usb_ctl_val = UsbGetRetryCnt();
     d60:	0002b640 	call	2b64 <UsbGetRetryCnt>
     d64:	d0a6f60d 	sth	r2,-25640(gp)
		printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

		IO_write(HPI_ADDR,0x0508);
		usb_ctl_val = IO_read(HPI_DATA);
		printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
		while (usb_ctl_val != 0x03)
     d68:	d0a6f60b 	ldhu	r2,-25640(gp)
     d6c:	10bfffcc 	andi	r2,r2,65535
     d70:	108000d8 	cmpnei	r2,r2,3
     d74:	103ffa1e 	bne	r2,zero,d60 <__alt_data_end+0xf8000d60>
		{
			usb_ctl_val = UsbGetRetryCnt();
		}

		printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     d78:	010000b4 	movhi	r4,2
     d7c:	21307304 	addi	r4,r4,-15924
     d80:	000e5940 	call	e594 <puts>


		//--------------------------------get device descriptor-2---------------------------------------------//
		//get device descriptor
		// TASK: Call the appropriate function for this step.
		UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     d84:	0001e880 	call	1e88 <UsbGetDeviceDesc2>

		//if no message
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d88:	00000306 	br	d98 <Keyboard_INIT+0x764>
		{
			//resend the get device descriptor
			//get device descriptor
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetDeviceDesc2();
     d8c:	0001e880 	call	1e88 <UsbGetDeviceDesc2>
			usleep(10*1000);
     d90:	0109c404 	movi	r4,10000
     d94:	0019f280 	call	19f28 <usleep>
		//get device descriptor
		// TASK: Call the appropriate function for this step.
		UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

		//if no message
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d98:	010000c4 	movi	r4,3
     d9c:	0001a700 	call	1a70 <IO_read>
     da0:	10bfffcc 	andi	r2,r2,65535
     da4:	1080040c 	andi	r2,r2,16
     da8:	103ff826 	beq	r2,zero,d8c <__alt_data_end+0xf8000d8c>
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetDeviceDesc2();
			usleep(10*1000);
		}

		UsbWaitTDListDone();
     dac:	0002ae00 	call	2ae0 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506);
     db0:	01414184 	movi	r5,1286
     db4:	01000084 	movi	r4,2
     db8:	00019e80 	call	19e8 <IO_write>
		printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     dbc:	0009883a 	mov	r4,zero
     dc0:	0001a700 	call	1a70 <IO_read>
     dc4:	10bfffcc 	andi	r2,r2,65535
     dc8:	100b883a 	mov	r5,r2
     dcc:	010000b4 	movhi	r4,2
     dd0:	21305c04 	addi	r4,r4,-16016
     dd4:	000e4980 	call	e498 <printf>

		IO_write(HPI_ADDR,0x0508);
     dd8:	01414204 	movi	r5,1288
     ddc:	01000084 	movi	r4,2
     de0:	00019e80 	call	19e8 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
     de4:	0009883a 	mov	r4,zero
     de8:	0001a700 	call	1a70 <IO_read>
     dec:	d0a6f60d 	sth	r2,-25640(gp)
		printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     df0:	d0a6f60b 	ldhu	r2,-25640(gp)
     df4:	10bfffcc 	andi	r2,r2,65535
     df8:	100b883a 	mov	r5,r2
     dfc:	010000b4 	movhi	r4,2
     e00:	21306704 	addi	r4,r4,-15972
     e04:	000e4980 	call	e498 <printf>
		while (usb_ctl_val != 0x03)
     e08:	00000206 	br	e14 <Keyboard_INIT+0x7e0>
		{
			usb_ctl_val = UsbGetRetryCnt();
     e0c:	0002b640 	call	2b64 <UsbGetRetryCnt>
     e10:	d0a6f60d 	sth	r2,-25640(gp)
		printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

		IO_write(HPI_ADDR,0x0508);
		usb_ctl_val = IO_read(HPI_DATA);
		printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
		while (usb_ctl_val != 0x03)
     e14:	d0a6f60b 	ldhu	r2,-25640(gp)
     e18:	10bfffcc 	andi	r2,r2,65535
     e1c:	108000d8 	cmpnei	r2,r2,3
     e20:	103ffa1e 	bne	r2,zero,e0c <__alt_data_end+0xf8000e0c>
		{
			usb_ctl_val = UsbGetRetryCnt();
		}

		printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     e24:	010000b4 	movhi	r4,2
     e28:	21308704 	addi	r4,r4,-15844
     e2c:	000e5940 	call	e594 <puts>
		for (int i = 32; i < 36; i++){
     e30:	00800804 	movi	r2,32
     e34:	e0bff615 	stw	r2,-40(fp)
     e38:	00001306 	br	e88 <Keyboard_INIT+0x854>
			draw_driver(12,260,28,276,i*10,400,4);
     e3c:	01400284 	movi	r5,10
     e40:	e13ff617 	ldw	r4,-40(fp)
     e44:	000c68c0 	call	c68c <__mulsi3>
     e48:	1007883a 	mov	r3,r2
     e4c:	00800104 	movi	r2,4
     e50:	d8800215 	stw	r2,8(sp)
     e54:	00806404 	movi	r2,400
     e58:	d8800115 	stw	r2,4(sp)
     e5c:	d8c00015 	stw	r3,0(sp)
     e60:	01c04504 	movi	r7,276
     e64:	01800704 	movi	r6,28
     e68:	01404104 	movi	r5,260
     e6c:	01000304 	movi	r4,12
     e70:	00036040 	call	3604 <draw_driver>
			delay(30);
     e74:	01000784 	movi	r4,30
     e78:	00038500 	call	3850 <delay>
		{
			usb_ctl_val = UsbGetRetryCnt();
		}

		printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
		for (int i = 32; i < 36; i++){
     e7c:	e0bff617 	ldw	r2,-40(fp)
     e80:	10800044 	addi	r2,r2,1
     e84:	e0bff615 	stw	r2,-40(fp)
     e88:	e0bff617 	ldw	r2,-40(fp)
     e8c:	10800910 	cmplti	r2,r2,36
     e90:	103fea1e 	bne	r2,zero,e3c <__alt_data_end+0xf8000e3c>


		// STEP 5 begin
		//-----------------------------------get configuration descriptor -1 ----------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     e94:	00020600 	call	2060 <UsbGetConfigDesc1>

		//if no message
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e98:	00000306 	br	ea8 <Keyboard_INIT+0x874>
		{
			//resend the get device descriptor
			//get device descriptor

			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetConfigDesc1();
     e9c:	00020600 	call	2060 <UsbGetConfigDesc1>
			usleep(10*1000);
     ea0:	0109c404 	movi	r4,10000
     ea4:	0019f280 	call	19f28 <usleep>
		//-----------------------------------get configuration descriptor -1 ----------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

		//if no message
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ea8:	010000c4 	movi	r4,3
     eac:	0001a700 	call	1a70 <IO_read>
     eb0:	10bfffcc 	andi	r2,r2,65535
     eb4:	1080040c 	andi	r2,r2,16
     eb8:	103ff826 	beq	r2,zero,e9c <__alt_data_end+0xf8000e9c>
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetConfigDesc1();
			usleep(10*1000);
		}

		UsbWaitTDListDone();
     ebc:	0002ae00 	call	2ae0 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506);
     ec0:	01414184 	movi	r5,1286
     ec4:	01000084 	movi	r4,2
     ec8:	00019e80 	call	19e8 <IO_write>
		printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     ecc:	0009883a 	mov	r4,zero
     ed0:	0001a700 	call	1a70 <IO_read>
     ed4:	10bfffcc 	andi	r2,r2,65535
     ed8:	100b883a 	mov	r5,r2
     edc:	010000b4 	movhi	r4,2
     ee0:	21309904 	addi	r4,r4,-15772
     ee4:	000e4980 	call	e498 <printf>

		IO_write(HPI_ADDR,0x0508);
     ee8:	01414204 	movi	r5,1288
     eec:	01000084 	movi	r4,2
     ef0:	00019e80 	call	19e8 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
     ef4:	0009883a 	mov	r4,zero
     ef8:	0001a700 	call	1a70 <IO_read>
     efc:	d0a6f60d 	sth	r2,-25640(gp)
		printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     f00:	d0a6f60b 	ldhu	r2,-25640(gp)
     f04:	10bfffcc 	andi	r2,r2,65535
     f08:	100b883a 	mov	r5,r2
     f0c:	010000b4 	movhi	r4,2
     f10:	2130a404 	addi	r4,r4,-15728
     f14:	000e4980 	call	e498 <printf>
		while (usb_ctl_val != 0x03)
     f18:	00000206 	br	f24 <Keyboard_INIT+0x8f0>
		{
			usb_ctl_val = UsbGetRetryCnt();
     f1c:	0002b640 	call	2b64 <UsbGetRetryCnt>
     f20:	d0a6f60d 	sth	r2,-25640(gp)
		printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

		IO_write(HPI_ADDR,0x0508);
		usb_ctl_val = IO_read(HPI_DATA);
		printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
		while (usb_ctl_val != 0x03)
     f24:	d0a6f60b 	ldhu	r2,-25640(gp)
     f28:	10bfffcc 	andi	r2,r2,65535
     f2c:	108000d8 	cmpnei	r2,r2,3
     f30:	103ffa1e 	bne	r2,zero,f1c <__alt_data_end+0xf8000f1c>
		{
			usb_ctl_val = UsbGetRetryCnt();
		}
		printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     f34:	010000b4 	movhi	r4,2
     f38:	2130b004 	addi	r4,r4,-15680
     f3c:	000e5940 	call	e594 <puts>
		for (int i = 36; i < 40; i++){
     f40:	00800904 	movi	r2,36
     f44:	e0bff715 	stw	r2,-36(fp)
     f48:	00001306 	br	f98 <Keyboard_INIT+0x964>
			draw_driver(12,260,28,276,i*10,400,4);
     f4c:	01400284 	movi	r5,10
     f50:	e13ff717 	ldw	r4,-36(fp)
     f54:	000c68c0 	call	c68c <__mulsi3>
     f58:	1007883a 	mov	r3,r2
     f5c:	00800104 	movi	r2,4
     f60:	d8800215 	stw	r2,8(sp)
     f64:	00806404 	movi	r2,400
     f68:	d8800115 	stw	r2,4(sp)
     f6c:	d8c00015 	stw	r3,0(sp)
     f70:	01c04504 	movi	r7,276
     f74:	01800704 	movi	r6,28
     f78:	01404104 	movi	r5,260
     f7c:	01000304 	movi	r4,12
     f80:	00036040 	call	3604 <draw_driver>
			delay(30);
     f84:	01000784 	movi	r4,30
     f88:	00038500 	call	3850 <delay>
		while (usb_ctl_val != 0x03)
		{
			usb_ctl_val = UsbGetRetryCnt();
		}
		printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
		for (int i = 36; i < 40; i++){
     f8c:	e0bff717 	ldw	r2,-36(fp)
     f90:	10800044 	addi	r2,r2,1
     f94:	e0bff715 	stw	r2,-36(fp)
     f98:	e0bff717 	ldw	r2,-36(fp)
     f9c:	10800a10 	cmplti	r2,r2,40
     fa0:	103fea1e 	bne	r2,zero,f4c <__alt_data_end+0xf8000f4c>

		// STEP 6 begin
		//-----------------------------------get configuration descriptor-2------------------------------------//
		//get device descriptor
		// TASK: Call the appropriate function for this step.
		UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     fa4:	00021f00 	call	21f0 <UsbGetConfigDesc2>

		usleep(100*1000);
     fa8:	010000b4 	movhi	r4,2
     fac:	2121a804 	addi	r4,r4,-31072
     fb0:	0019f280 	call	19f28 <usleep>
		//if no message
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fb4:	00000306 	br	fc4 <Keyboard_INIT+0x990>
		{
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetConfigDesc2();
     fb8:	00021f00 	call	21f0 <UsbGetConfigDesc2>
			usleep(10*1000);
     fbc:	0109c404 	movi	r4,10000
     fc0:	0019f280 	call	19f28 <usleep>
		// TASK: Call the appropriate function for this step.
		UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

		usleep(100*1000);
		//if no message
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fc4:	010000c4 	movi	r4,3
     fc8:	0001a700 	call	1a70 <IO_read>
     fcc:	10bfffcc 	andi	r2,r2,65535
     fd0:	1080040c 	andi	r2,r2,16
     fd4:	103ff826 	beq	r2,zero,fb8 <__alt_data_end+0xf8000fb8>
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetConfigDesc2();
			usleep(10*1000);
		}

		UsbWaitTDListDone();
     fd8:	0002ae00 	call	2ae0 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506);
     fdc:	01414184 	movi	r5,1286
     fe0:	01000084 	movi	r4,2
     fe4:	00019e80 	call	19e8 <IO_write>
		printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     fe8:	0009883a 	mov	r4,zero
     fec:	0001a700 	call	1a70 <IO_read>
     ff0:	10bfffcc 	andi	r2,r2,65535
     ff4:	100b883a 	mov	r5,r2
     ff8:	010000b4 	movhi	r4,2
     ffc:	2130c304 	addi	r4,r4,-15604
    1000:	000e4980 	call	e498 <printf>

		IO_write(HPI_ADDR,0x0508);
    1004:	01414204 	movi	r5,1288
    1008:	01000084 	movi	r4,2
    100c:	00019e80 	call	19e8 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
    1010:	0009883a 	mov	r4,zero
    1014:	0001a700 	call	1a70 <IO_read>
    1018:	d0a6f60d 	sth	r2,-25640(gp)
		printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
    101c:	d0a6f60b 	ldhu	r2,-25640(gp)
    1020:	10bfffcc 	andi	r2,r2,65535
    1024:	100b883a 	mov	r5,r2
    1028:	010000b4 	movhi	r4,2
    102c:	2130ce04 	addi	r4,r4,-15560
    1030:	000e4980 	call	e498 <printf>
		while (usb_ctl_val != 0x03)
    1034:	00000206 	br	1040 <Keyboard_INIT+0xa0c>
		{
			usb_ctl_val = UsbGetRetryCnt();
    1038:	0002b640 	call	2b64 <UsbGetRetryCnt>
    103c:	d0a6f60d 	sth	r2,-25640(gp)
		printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

		IO_write(HPI_ADDR,0x0508);
		usb_ctl_val = IO_read(HPI_DATA);
		printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
		while (usb_ctl_val != 0x03)
    1040:	d0a6f60b 	ldhu	r2,-25640(gp)
    1044:	10bfffcc 	andi	r2,r2,65535
    1048:	108000d8 	cmpnei	r2,r2,3
    104c:	103ffa1e 	bne	r2,zero,1038 <__alt_data_end+0xf8001038>
		{
			usb_ctl_val = UsbGetRetryCnt();
		}


		printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
    1050:	010000b4 	movhi	r4,2
    1054:	2130da04 	addi	r4,r4,-15512
    1058:	000e5940 	call	e594 <puts>
		for (int i = 40; i < 44; i++){
    105c:	00800a04 	movi	r2,40
    1060:	e0bff815 	stw	r2,-32(fp)
    1064:	00001306 	br	10b4 <Keyboard_INIT+0xa80>
			draw_driver(12,260,28,276,i*10,400,4);
    1068:	01400284 	movi	r5,10
    106c:	e13ff817 	ldw	r4,-32(fp)
    1070:	000c68c0 	call	c68c <__mulsi3>
    1074:	1007883a 	mov	r3,r2
    1078:	00800104 	movi	r2,4
    107c:	d8800215 	stw	r2,8(sp)
    1080:	00806404 	movi	r2,400
    1084:	d8800115 	stw	r2,4(sp)
    1088:	d8c00015 	stw	r3,0(sp)
    108c:	01c04504 	movi	r7,276
    1090:	01800704 	movi	r6,28
    1094:	01404104 	movi	r5,260
    1098:	01000304 	movi	r4,12
    109c:	00036040 	call	3604 <draw_driver>
			delay(30);
    10a0:	01000784 	movi	r4,30
    10a4:	00038500 	call	3850 <delay>
			usb_ctl_val = UsbGetRetryCnt();
		}


		printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
		for (int i = 40; i < 44; i++){
    10a8:	e0bff817 	ldw	r2,-32(fp)
    10ac:	10800044 	addi	r2,r2,1
    10b0:	e0bff815 	stw	r2,-32(fp)
    10b4:	e0bff817 	ldw	r2,-32(fp)
    10b8:	10800b10 	cmplti	r2,r2,44
    10bc:	103fea1e 	bne	r2,zero,1068 <__alt_data_end+0xf8001068>


		// ---------------------------------get device info---------------------------------------------//

		// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x056c);
    10c0:	01415b04 	movi	r5,1388
    10c4:	01000084 	movi	r4,2
    10c8:	00019e80 	call	19e8 <IO_write>
		code = IO_read(HPI_DATA);
    10cc:	0009883a 	mov	r4,zero
    10d0:	0001a700 	call	1a70 <IO_read>
    10d4:	e0bfff0d 	sth	r2,-4(fp)
		code = code & 0x003;
    10d8:	e0bfff0b 	ldhu	r2,-4(fp)
    10dc:	108000cc 	andi	r2,r2,3
    10e0:	e0bfff0d 	sth	r2,-4(fp)
		printf("\ncode = %x\n", code);
    10e4:	e0bfff0b 	ldhu	r2,-4(fp)
    10e8:	100b883a 	mov	r5,r2
    10ec:	010000b4 	movhi	r4,2
    10f0:	2130ed04 	addi	r4,r4,-15436
    10f4:	000e4980 	call	e498 <printf>

		if (code == 0x01)
    10f8:	e0bfff0b 	ldhu	r2,-4(fp)
    10fc:	10800058 	cmpnei	r2,r2,1
    1100:	1000041e 	bne	r2,zero,1114 <Keyboard_INIT+0xae0>
		{
			printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
    1104:	010000b4 	movhi	r4,2
    1108:	2130f004 	addi	r4,r4,-15424
    110c:	000e5940 	call	e594 <puts>
    1110:	00000306 	br	1120 <Keyboard_INIT+0xaec>
		}
		else
		{
			printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
    1114:	010000b4 	movhi	r4,2
    1118:	2130ff04 	addi	r4,r4,-15364
    111c:	000e5940 	call	e594 <puts>
		}

		// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

		IO_write(HPI_ADDR,0x0576);
    1120:	01415d84 	movi	r5,1398
    1124:	01000084 	movi	r4,2
    1128:	00019e80 	call	19e8 <IO_write>
		IO_write(HPI_DATA,0x073F);
    112c:	0141cfc4 	movi	r5,1855
    1130:	0009883a 	mov	r4,zero
    1134:	00019e80 	call	19e8 <IO_write>
		IO_write(HPI_DATA,0x8105);
    1138:	01604154 	movui	r5,33029
    113c:	0009883a 	mov	r4,zero
    1140:	00019e80 	call	19e8 <IO_write>
		IO_write(HPI_DATA,0x0003);
    1144:	014000c4 	movi	r5,3
    1148:	0009883a 	mov	r4,zero
    114c:	00019e80 	call	19e8 <IO_write>
		IO_write(HPI_DATA,0x0008);
    1150:	01400204 	movi	r5,8
    1154:	0009883a 	mov	r4,zero
    1158:	00019e80 	call	19e8 <IO_write>
		IO_write(HPI_DATA,0xAC0A);
    115c:	016b0294 	movui	r5,44042
    1160:	0009883a 	mov	r4,zero
    1164:	00019e80 	call	19e8 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
    1168:	01415d84 	movi	r5,1398
    116c:	01006c04 	movi	r4,432
    1170:	0001af00 	call	1af0 <UsbWrite>

		//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
		//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
		//UsbPrintMem();
		IO_write(HPI_ADDR,0x057c);
    1174:	01415f04 	movi	r5,1404
    1178:	01000084 	movi	r4,2
    117c:	00019e80 	call	19e8 <IO_write>
		data_size = (IO_read(HPI_DATA))&0x0ff;
    1180:	0009883a 	mov	r4,zero
    1184:	0001a700 	call	1a70 <IO_read>
    1188:	d0a6f685 	stb	r2,-25638(gp)
		printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
    118c:	d0a6f683 	ldbu	r2,-25638(gp)
    1190:	10803fcc 	andi	r2,r2,255
    1194:	100b883a 	mov	r5,r2
    1198:	010000b4 	movhi	r4,2
    119c:	21310804 	addi	r4,r4,-15328
    11a0:	000e4980 	call	e498 <printf>

		for (int i = 44; i < 48; i++){
    11a4:	00800b04 	movi	r2,44
    11a8:	e0bff915 	stw	r2,-28(fp)
    11ac:	00001306 	br	11fc <Keyboard_INIT+0xbc8>
			draw_driver(12,260,28,276,i*10,400,4);
    11b0:	01400284 	movi	r5,10
    11b4:	e13ff917 	ldw	r4,-28(fp)
    11b8:	000c68c0 	call	c68c <__mulsi3>
    11bc:	1007883a 	mov	r3,r2
    11c0:	00800104 	movi	r2,4
    11c4:	d8800215 	stw	r2,8(sp)
    11c8:	00806404 	movi	r2,400
    11cc:	d8800115 	stw	r2,4(sp)
    11d0:	d8c00015 	stw	r3,0(sp)
    11d4:	01c04504 	movi	r7,276
    11d8:	01800704 	movi	r6,28
    11dc:	01404104 	movi	r5,260
    11e0:	01000304 	movi	r4,12
    11e4:	00036040 	call	3604 <draw_driver>
			delay(30);
    11e8:	01000784 	movi	r4,30
    11ec:	00038500 	call	3850 <delay>
		//UsbPrintMem();
		IO_write(HPI_ADDR,0x057c);
		data_size = (IO_read(HPI_DATA))&0x0ff;
		printf("[ENUM PROCESS]:data packet size is %d\n",data_size);

		for (int i = 44; i < 48; i++){
    11f0:	e0bff917 	ldw	r2,-28(fp)
    11f4:	10800044 	addi	r2,r2,1
    11f8:	e0bff915 	stw	r2,-28(fp)
    11fc:	e0bff917 	ldw	r2,-28(fp)
    1200:	10800c10 	cmplti	r2,r2,48
    1204:	103fea1e 	bne	r2,zero,11b0 <__alt_data_end+0xf80011b0>


		// STEP 7 begin
		//------------------------------------set configuration -----------------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbSetConfig();		// Set Configuration
    1208:	00024580 	call	2458 <UsbSetConfig>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    120c:	00000306 	br	121c <Keyboard_INIT+0xbe8>
		{
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbSetConfig();		// Set Configuration
    1210:	00024580 	call	2458 <UsbSetConfig>
			usleep(10*1000);
    1214:	0109c404 	movi	r4,10000
    1218:	0019f280 	call	19f28 <usleep>
		// STEP 7 begin
		//------------------------------------set configuration -----------------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbSetConfig();		// Set Configuration

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    121c:	010000c4 	movi	r4,3
    1220:	0001a700 	call	1a70 <IO_read>
    1224:	10bfffcc 	andi	r2,r2,65535
    1228:	1080040c 	andi	r2,r2,16
    122c:	103ff826 	beq	r2,zero,1210 <__alt_data_end+0xf8001210>
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbSetConfig();		// Set Configuration
			usleep(10*1000);
		}

		UsbWaitTDListDone();
    1230:	0002ae00 	call	2ae0 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506);
    1234:	01414184 	movi	r5,1286
    1238:	01000084 	movi	r4,2
    123c:	00019e80 	call	19e8 <IO_write>
		printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1240:	0009883a 	mov	r4,zero
    1244:	0001a700 	call	1a70 <IO_read>
    1248:	10bfffcc 	andi	r2,r2,65535
    124c:	100b883a 	mov	r5,r2
    1250:	010000b4 	movhi	r4,2
    1254:	21311204 	addi	r4,r4,-15288
    1258:	000e4980 	call	e498 <printf>

		IO_write(HPI_ADDR,0x0508);
    125c:	01414204 	movi	r5,1288
    1260:	01000084 	movi	r4,2
    1264:	00019e80 	call	19e8 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
    1268:	0009883a 	mov	r4,zero
    126c:	0001a700 	call	1a70 <IO_read>
    1270:	d0a6f60d 	sth	r2,-25640(gp)
		printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    1274:	d0a6f60b 	ldhu	r2,-25640(gp)
    1278:	10bfffcc 	andi	r2,r2,65535
    127c:	100b883a 	mov	r5,r2
    1280:	010000b4 	movhi	r4,2
    1284:	21311d04 	addi	r4,r4,-15244
    1288:	000e4980 	call	e498 <printf>
		while (usb_ctl_val != 0x03)
    128c:	00000206 	br	1298 <Keyboard_INIT+0xc64>
		{
			usb_ctl_val = UsbGetRetryCnt();
    1290:	0002b640 	call	2b64 <UsbGetRetryCnt>
    1294:	d0a6f60d 	sth	r2,-25640(gp)
		printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

		IO_write(HPI_ADDR,0x0508);
		usb_ctl_val = IO_read(HPI_DATA);
		printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
		while (usb_ctl_val != 0x03)
    1298:	d0a6f60b 	ldhu	r2,-25640(gp)
    129c:	10bfffcc 	andi	r2,r2,65535
    12a0:	108000d8 	cmpnei	r2,r2,3
    12a4:	103ffa1e 	bne	r2,zero,1290 <__alt_data_end+0xf8001290>
		{
			usb_ctl_val = UsbGetRetryCnt();
		}

		printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
    12a8:	010000b4 	movhi	r4,2
    12ac:	21312904 	addi	r4,r4,-15196
    12b0:	000e5940 	call	e594 <puts>

		for (int i = 48; i < 52; i++){
    12b4:	00800c04 	movi	r2,48
    12b8:	e0bffa15 	stw	r2,-24(fp)
    12bc:	00001306 	br	130c <Keyboard_INIT+0xcd8>
			draw_driver(12,260,28,276,i*10,400,4);
    12c0:	01400284 	movi	r5,10
    12c4:	e13ffa17 	ldw	r4,-24(fp)
    12c8:	000c68c0 	call	c68c <__mulsi3>
    12cc:	1007883a 	mov	r3,r2
    12d0:	00800104 	movi	r2,4
    12d4:	d8800215 	stw	r2,8(sp)
    12d8:	00806404 	movi	r2,400
    12dc:	d8800115 	stw	r2,4(sp)
    12e0:	d8c00015 	stw	r3,0(sp)
    12e4:	01c04504 	movi	r7,276
    12e8:	01800704 	movi	r6,28
    12ec:	01404104 	movi	r5,260
    12f0:	01000304 	movi	r4,12
    12f4:	00036040 	call	3604 <draw_driver>
			delay(30);
    12f8:	01000784 	movi	r4,30
    12fc:	00038500 	call	3850 <delay>
			usb_ctl_val = UsbGetRetryCnt();
		}

		printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");

		for (int i = 48; i < 52; i++){
    1300:	e0bffa17 	ldw	r2,-24(fp)
    1304:	10800044 	addi	r2,r2,1
    1308:	e0bffa15 	stw	r2,-24(fp)
    130c:	e0bffa17 	ldw	r2,-24(fp)
    1310:	10800d10 	cmplti	r2,r2,52
    1314:	103fea1e 	bne	r2,zero,12c0 <__alt_data_end+0xf80012c0>



		//----------------------------------------------class request out ------------------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbClassRequest();
    1318:	00025580 	call	2558 <UsbClassRequest>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    131c:	00000306 	br	132c <Keyboard_INIT+0xcf8>
		{
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbClassRequest();
    1320:	00025580 	call	2558 <UsbClassRequest>
			usleep(10*1000);
    1324:	0109c404 	movi	r4,10000
    1328:	0019f280 	call	19f28 <usleep>

		//----------------------------------------------class request out ------------------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbClassRequest();

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    132c:	010000c4 	movi	r4,3
    1330:	0001a700 	call	1a70 <IO_read>
    1334:	10bfffcc 	andi	r2,r2,65535
    1338:	1080040c 	andi	r2,r2,16
    133c:	103ff826 	beq	r2,zero,1320 <__alt_data_end+0xf8001320>
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbClassRequest();
			usleep(10*1000);
		}

		UsbWaitTDListDone();
    1340:	0002ae00 	call	2ae0 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506);
    1344:	01414184 	movi	r5,1286
    1348:	01000084 	movi	r4,2
    134c:	00019e80 	call	19e8 <IO_write>
		printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    1350:	0009883a 	mov	r4,zero
    1354:	0001a700 	call	1a70 <IO_read>
    1358:	10bfffcc 	andi	r2,r2,65535
    135c:	100b883a 	mov	r5,r2
    1360:	010000b4 	movhi	r4,2
    1364:	21313b04 	addi	r4,r4,-15124
    1368:	000e4980 	call	e498 <printf>

		IO_write(HPI_ADDR,0x0508);
    136c:	01414204 	movi	r5,1288
    1370:	01000084 	movi	r4,2
    1374:	00019e80 	call	19e8 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
    1378:	0009883a 	mov	r4,zero
    137c:	0001a700 	call	1a70 <IO_read>
    1380:	d0a6f60d 	sth	r2,-25640(gp)
		printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    1384:	d0a6f60b 	ldhu	r2,-25640(gp)
    1388:	10bfffcc 	andi	r2,r2,65535
    138c:	100b883a 	mov	r5,r2
    1390:	010000b4 	movhi	r4,2
    1394:	21314604 	addi	r4,r4,-15080
    1398:	000e4980 	call	e498 <printf>
		int i = 0;
    139c:	e03ffb15 	stw	zero,-20(fp)
		while (usb_ctl_val != 0x03)
    13a0:	00001306 	br	13f0 <Keyboard_INIT+0xdbc>
		{
			usb_ctl_val = UsbGetRetryCnt();
    13a4:	0002b640 	call	2b64 <UsbGetRetryCnt>
    13a8:	d0a6f60d 	sth	r2,-25640(gp)
			i++;
    13ac:	e0bffb17 	ldw	r2,-20(fp)
    13b0:	10800044 	addi	r2,r2,1
    13b4:	e0bffb15 	stw	r2,-20(fp)
			if (i == 10000){
    13b8:	e0bffb17 	ldw	r2,-20(fp)
    13bc:	1089c418 	cmpnei	r2,r2,10000
    13c0:	10000b1e 	bne	r2,zero,13f0 <Keyboard_INIT+0xdbc>
				draw_driver(6,205,327,229,12,130,4);
    13c4:	00800104 	movi	r2,4
    13c8:	d8800215 	stw	r2,8(sp)
    13cc:	00802084 	movi	r2,130
    13d0:	d8800115 	stw	r2,4(sp)
    13d4:	00800304 	movi	r2,12
    13d8:	d8800015 	stw	r2,0(sp)
    13dc:	01c03944 	movi	r7,229
    13e0:	018051c4 	movi	r6,327
    13e4:	01403344 	movi	r5,205
    13e8:	01000184 	movi	r4,6
    13ec:	00036040 	call	3604 <draw_driver>

		IO_write(HPI_ADDR,0x0508);
		usb_ctl_val = IO_read(HPI_DATA);
		printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
		int i = 0;
		while (usb_ctl_val != 0x03)
    13f0:	d0a6f60b 	ldhu	r2,-25640(gp)
    13f4:	10bfffcc 	andi	r2,r2,65535
    13f8:	108000d8 	cmpnei	r2,r2,3
    13fc:	103fe91e 	bne	r2,zero,13a4 <__alt_data_end+0xf80013a4>
				draw_driver(6,205,327,229,12,130,4);
			}
		}


		printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
    1400:	010000b4 	movhi	r4,2
    1404:	21315204 	addi	r4,r4,-15032
    1408:	000e5940 	call	e594 <puts>

		for (int i = 52; i < 56; i++){
    140c:	00800d04 	movi	r2,52
    1410:	e0bffc15 	stw	r2,-16(fp)
    1414:	00001306 	br	1464 <Keyboard_INIT+0xe30>
			draw_driver(12,260,28,276,i*10,400,4);
    1418:	01400284 	movi	r5,10
    141c:	e13ffc17 	ldw	r4,-16(fp)
    1420:	000c68c0 	call	c68c <__mulsi3>
    1424:	1007883a 	mov	r3,r2
    1428:	00800104 	movi	r2,4
    142c:	d8800215 	stw	r2,8(sp)
    1430:	00806404 	movi	r2,400
    1434:	d8800115 	stw	r2,4(sp)
    1438:	d8c00015 	stw	r3,0(sp)
    143c:	01c04504 	movi	r7,276
    1440:	01800704 	movi	r6,28
    1444:	01404104 	movi	r5,260
    1448:	01000304 	movi	r4,12
    144c:	00036040 	call	3604 <draw_driver>
			delay(30);
    1450:	01000784 	movi	r4,30
    1454:	00038500 	call	3850 <delay>
		}


		printf("------------[ENUM PROCESS]:class request out done!-------------------\n");

		for (int i = 52; i < 56; i++){
    1458:	e0bffc17 	ldw	r2,-16(fp)
    145c:	10800044 	addi	r2,r2,1
    1460:	e0bffc15 	stw	r2,-16(fp)
    1464:	e0bffc17 	ldw	r2,-16(fp)
    1468:	10800e10 	cmplti	r2,r2,56
    146c:	103fea1e 	bne	r2,zero,1418 <__alt_data_end+0xf8001418>


		// STEP 8 begin
		//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbGetHidDesc();
    1470:	00026580 	call	2658 <UsbGetHidDesc>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1474:	00000306 	br	1484 <Keyboard_INIT+0xe50>
		{
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetHidDesc();
    1478:	00026580 	call	2658 <UsbGetHidDesc>
			usleep(10*1000);
    147c:	0109c404 	movi	r4,10000
    1480:	0019f280 	call	19f28 <usleep>
		// STEP 8 begin
		//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbGetHidDesc();

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1484:	010000c4 	movi	r4,3
    1488:	0001a700 	call	1a70 <IO_read>
    148c:	10bfffcc 	andi	r2,r2,65535
    1490:	1080040c 	andi	r2,r2,16
    1494:	103ff826 	beq	r2,zero,1478 <__alt_data_end+0xf8001478>
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetHidDesc();
			usleep(10*1000);
		}

		UsbWaitTDListDone();
    1498:	0002ae00 	call	2ae0 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506);
    149c:	01414184 	movi	r5,1286
    14a0:	01000084 	movi	r4,2
    14a4:	00019e80 	call	19e8 <IO_write>
		printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
    14a8:	0009883a 	mov	r4,zero
    14ac:	0001a700 	call	1a70 <IO_read>
    14b0:	10bfffcc 	andi	r2,r2,65535
    14b4:	100b883a 	mov	r5,r2
    14b8:	010000b4 	movhi	r4,2
    14bc:	21313b04 	addi	r4,r4,-15124
    14c0:	000e4980 	call	e498 <printf>

		IO_write(HPI_ADDR,0x0508);
    14c4:	01414204 	movi	r5,1288
    14c8:	01000084 	movi	r4,2
    14cc:	00019e80 	call	19e8 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
    14d0:	0009883a 	mov	r4,zero
    14d4:	0001a700 	call	1a70 <IO_read>
    14d8:	d0a6f60d 	sth	r2,-25640(gp)
		printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    14dc:	d0a6f60b 	ldhu	r2,-25640(gp)
    14e0:	10bfffcc 	andi	r2,r2,65535
    14e4:	100b883a 	mov	r5,r2
    14e8:	010000b4 	movhi	r4,2
    14ec:	21314604 	addi	r4,r4,-15080
    14f0:	000e4980 	call	e498 <printf>
		while (usb_ctl_val != 0x03)
    14f4:	00000206 	br	1500 <Keyboard_INIT+0xecc>
		{
			usb_ctl_val = UsbGetRetryCnt();
    14f8:	0002b640 	call	2b64 <UsbGetRetryCnt>
    14fc:	d0a6f60d 	sth	r2,-25640(gp)
		printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

		IO_write(HPI_ADDR,0x0508);
		usb_ctl_val = IO_read(HPI_DATA);
		printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
		while (usb_ctl_val != 0x03)
    1500:	d0a6f60b 	ldhu	r2,-25640(gp)
    1504:	10bfffcc 	andi	r2,r2,65535
    1508:	108000d8 	cmpnei	r2,r2,3
    150c:	103ffa1e 	bne	r2,zero,14f8 <__alt_data_end+0xf80014f8>
		{
			usb_ctl_val = UsbGetRetryCnt();
		}

		printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
    1510:	010000b4 	movhi	r4,2
    1514:	21316404 	addi	r4,r4,-14960
    1518:	000e5940 	call	e594 <puts>


		for (int i = 56; i < 60; i++){
    151c:	00800e04 	movi	r2,56
    1520:	e0bffd15 	stw	r2,-12(fp)
    1524:	00001306 	br	1574 <Keyboard_INIT+0xf40>
			draw_driver(12,260,28,276,i*10,400,4);
    1528:	01400284 	movi	r5,10
    152c:	e13ffd17 	ldw	r4,-12(fp)
    1530:	000c68c0 	call	c68c <__mulsi3>
    1534:	1007883a 	mov	r3,r2
    1538:	00800104 	movi	r2,4
    153c:	d8800215 	stw	r2,8(sp)
    1540:	00806404 	movi	r2,400
    1544:	d8800115 	stw	r2,4(sp)
    1548:	d8c00015 	stw	r3,0(sp)
    154c:	01c04504 	movi	r7,276
    1550:	01800704 	movi	r6,28
    1554:	01404104 	movi	r5,260
    1558:	01000304 	movi	r4,12
    155c:	00036040 	call	3604 <draw_driver>
			delay(30);
    1560:	01000784 	movi	r4,30
    1564:	00038500 	call	3850 <delay>
		}

		printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");


		for (int i = 56; i < 60; i++){
    1568:	e0bffd17 	ldw	r2,-12(fp)
    156c:	10800044 	addi	r2,r2,1
    1570:	e0bffd15 	stw	r2,-12(fp)
    1574:	e0bffd17 	ldw	r2,-12(fp)
    1578:	10800f10 	cmplti	r2,r2,60
    157c:	103fea1e 	bne	r2,zero,1528 <__alt_data_end+0xf8001528>


		// STEP 9 begin
		//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbGetReportDesc();
    1580:	00027a00 	call	27a0 <UsbGetReportDesc>
		//if no message
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1584:	00000306 	br	1594 <Keyboard_INIT+0xf60>
		{
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetReportDesc();
    1588:	00027a00 	call	27a0 <UsbGetReportDesc>
			usleep(10*1000);
    158c:	0109c404 	movi	r4,10000
    1590:	0019f280 	call	19f28 <usleep>
		// STEP 9 begin
		//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
		// TASK: Call the appropriate function for this step.
		UsbGetReportDesc();
		//if no message
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1594:	010000c4 	movi	r4,3
    1598:	0001a700 	call	1a70 <IO_read>
    159c:	10bfffcc 	andi	r2,r2,65535
    15a0:	1080040c 	andi	r2,r2,16
    15a4:	103ff826 	beq	r2,zero,1588 <__alt_data_end+0xf8001588>
			// TASK: Call the appropriate function again if it wasn't processed successfully.
			UsbGetReportDesc();
			usleep(10*1000);
		}

		UsbWaitTDListDone();
    15a8:	0002ae00 	call	2ae0 <UsbWaitTDListDone>

		IO_write(HPI_ADDR,0x0506);
    15ac:	01414184 	movi	r5,1286
    15b0:	01000084 	movi	r4,2
    15b4:	00019e80 	call	19e8 <IO_write>
		printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
    15b8:	0009883a 	mov	r4,zero
    15bc:	0001a700 	call	1a70 <IO_read>
    15c0:	10bfffcc 	andi	r2,r2,65535
    15c4:	100b883a 	mov	r5,r2
    15c8:	010000b4 	movhi	r4,2
    15cc:	21317804 	addi	r4,r4,-14880
    15d0:	000e4980 	call	e498 <printf>

		IO_write(HPI_ADDR,0x0508);
    15d4:	01414204 	movi	r5,1288
    15d8:	01000084 	movi	r4,2
    15dc:	00019e80 	call	19e8 <IO_write>
		usb_ctl_val = IO_read(HPI_DATA);
    15e0:	0009883a 	mov	r4,zero
    15e4:	0001a700 	call	1a70 <IO_read>
    15e8:	d0a6f60d 	sth	r2,-25640(gp)
		printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    15ec:	d0a6f60b 	ldhu	r2,-25640(gp)
    15f0:	10bfffcc 	andi	r2,r2,65535
    15f4:	100b883a 	mov	r5,r2
    15f8:	010000b4 	movhi	r4,2
    15fc:	21318404 	addi	r4,r4,-14832
    1600:	000e4980 	call	e498 <printf>
		while (usb_ctl_val != 0x03)
    1604:	00000206 	br	1610 <Keyboard_INIT+0xfdc>
		{
			usb_ctl_val = UsbGetRetryCnt();
    1608:	0002b640 	call	2b64 <UsbGetRetryCnt>
    160c:	d0a6f60d 	sth	r2,-25640(gp)
		printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

		IO_write(HPI_ADDR,0x0508);
		usb_ctl_val = IO_read(HPI_DATA);
		printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
		while (usb_ctl_val != 0x03)
    1610:	d0a6f60b 	ldhu	r2,-25640(gp)
    1614:	10bfffcc 	andi	r2,r2,65535
    1618:	108000d8 	cmpnei	r2,r2,3
    161c:	103ffa1e 	bne	r2,zero,1608 <__alt_data_end+0xf8001608>
		{
			usb_ctl_val = UsbGetRetryCnt();
		}

		printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
    1620:	010000b4 	movhi	r4,2
    1624:	21319004 	addi	r4,r4,-14784
    1628:	000e5940 	call	e594 <puts>
		printf("\n-------------------USB Keyboard INIT Finished--------------------------------\n");
    162c:	010000b4 	movhi	r4,2
    1630:	2131a404 	addi	r4,r4,-14704
    1634:	000e5940 	call	e594 <puts>


}
    1638:	0001883a 	nop
    163c:	e037883a 	mov	sp,fp
    1640:	dfc00117 	ldw	ra,4(sp)
    1644:	df000017 	ldw	fp,0(sp)
    1648:	dec00204 	addi	sp,sp,8
    164c:	f800283a 	ret

00001650 <FetchKey>:


int FetchKey(unsigned int keycode[]){
    1650:	defffb04 	addi	sp,sp,-20
    1654:	dfc00415 	stw	ra,16(sp)
    1658:	df000315 	stw	fp,12(sp)
    165c:	dc000215 	stw	r16,8(sp)
    1660:	df000304 	addi	fp,sp,12
    1664:	e13ffe15 	stw	r4,-8(fp)

	alt_u8 	toggle = 0;
    1668:	e03ffd05 	stb	zero,-12(fp)

//	usleep(10000);

			toggle++;
    166c:	e0bffd03 	ldbu	r2,-12(fp)
    1670:	10800044 	addi	r2,r2,1
    1674:	e0bffd05 	stb	r2,-12(fp)
			IO_write(HPI_ADDR,0x0500); //the start address
    1678:	01414004 	movi	r5,1280
    167c:	01000084 	movi	r4,2
    1680:	00019e80 	call	19e8 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
    1684:	01414704 	movi	r5,1308
    1688:	0009883a 	mov	r4,zero
    168c:	00019e80 	call	19e8 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
    1690:	d0a6f683 	ldbu	r2,-25638(gp)
    1694:	10803fcc 	andi	r2,r2,255
    1698:	108003cc 	andi	r2,r2,15
    169c:	100b883a 	mov	r5,r2
    16a0:	0009883a 	mov	r4,zero
    16a4:	00019e80 	call	19e8 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
    16a8:	0140a444 	movi	r5,657
    16ac:	0009883a 	mov	r4,zero
    16b0:	00019e80 	call	19e8 <IO_write>
			if(toggle%2)
    16b4:	e0bffd03 	ldbu	r2,-12(fp)
    16b8:	1080004c 	andi	r2,r2,1
    16bc:	10803fcc 	andi	r2,r2,255
    16c0:	10000426 	beq	r2,zero,16d4 <FetchKey+0x84>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
    16c4:	01400044 	movi	r5,1
    16c8:	0009883a 	mov	r4,zero
    16cc:	00019e80 	call	19e8 <IO_write>
    16d0:	00000306 	br	16e0 <FetchKey+0x90>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
    16d4:	01401044 	movi	r5,65
    16d8:	0009883a 	mov	r4,zero
    16dc:	00019e80 	call	19e8 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
    16e0:	014004c4 	movi	r5,19
    16e4:	0009883a 	mov	r4,zero
    16e8:	00019e80 	call	19e8 <IO_write>
			IO_write(HPI_DATA,0x0000);//a
    16ec:	000b883a 	mov	r5,zero
    16f0:	0009883a 	mov	r4,zero
    16f4:	00019e80 	call	19e8 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    16f8:	01414004 	movi	r5,1280
    16fc:	01006c04 	movi	r4,432
    1700:	0001af00 	call	1af0 <UsbWrite>

			while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1704:	00002506 	br	179c <FetchKey+0x14c>
			{
				IO_write(HPI_ADDR,0x0500); //the start address
    1708:	01414004 	movi	r5,1280
    170c:	01000084 	movi	r4,2
    1710:	00019e80 	call	19e8 <IO_write>
				//data phase IN-1
				IO_write(HPI_DATA,0x051c); //500
    1714:	01414704 	movi	r5,1308
    1718:	0009883a 	mov	r4,zero
    171c:	00019e80 	call	19e8 <IO_write>

				IO_write(HPI_DATA,0x000f & data_size);//2 data length
    1720:	d0a6f683 	ldbu	r2,-25638(gp)
    1724:	10803fcc 	andi	r2,r2,255
    1728:	108003cc 	andi	r2,r2,15
    172c:	100b883a 	mov	r5,r2
    1730:	0009883a 	mov	r4,zero
    1734:	00019e80 	call	19e8 <IO_write>

				IO_write(HPI_DATA,0x0291);//4 //endpoint 1
    1738:	0140a444 	movi	r5,657
    173c:	0009883a 	mov	r4,zero
    1740:	00019e80 	call	19e8 <IO_write>
				if(toggle%2)
    1744:	e0bffd03 	ldbu	r2,-12(fp)
    1748:	1080004c 	andi	r2,r2,1
    174c:	10803fcc 	andi	r2,r2,255
    1750:	10000426 	beq	r2,zero,1764 <FetchKey+0x114>
				{
					IO_write(HPI_DATA,0x0001);//6 //data 1
    1754:	01400044 	movi	r5,1
    1758:	0009883a 	mov	r4,zero
    175c:	00019e80 	call	19e8 <IO_write>
    1760:	00000306 	br	1770 <FetchKey+0x120>
				}
				else
				{
					IO_write(HPI_DATA,0x0041);//6 //data 1
    1764:	01401044 	movi	r5,65
    1768:	0009883a 	mov	r4,zero
    176c:	00019e80 	call	19e8 <IO_write>
				}
				IO_write(HPI_DATA,0x0013);//8
    1770:	014004c4 	movi	r5,19
    1774:	0009883a 	mov	r4,zero
    1778:	00019e80 	call	19e8 <IO_write>
				IO_write(HPI_DATA,0x0000);//
    177c:	000b883a 	mov	r5,zero
    1780:	0009883a 	mov	r4,zero
    1784:	00019e80 	call	19e8 <IO_write>
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1788:	01414004 	movi	r5,1280
    178c:	01006c04 	movi	r4,432
    1790:	0001af00 	call	1af0 <UsbWrite>
				//usleep(1000);
				usleep(400);
    1794:	01006404 	movi	r4,400
    1798:	0019f280 	call	19f28 <usleep>
			}
			IO_write(HPI_DATA,0x0013);//8
			IO_write(HPI_DATA,0x0000);//a
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

			while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    179c:	010000c4 	movi	r4,3
    17a0:	0001a700 	call	1a70 <IO_read>
    17a4:	10bfffcc 	andi	r2,r2,65535
    17a8:	1080040c 	andi	r2,r2,16
    17ac:	103fd626 	beq	r2,zero,1708 <__alt_data_end+0xf8001708>
				UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
				//usleep(1000);
				usleep(400);
			}//end while

			usb_ctl_val = UsbWaitTDListDone();
    17b0:	0002ae00 	call	2ae0 <UsbWaitTDListDone>
    17b4:	d0a6f60d 	sth	r2,-25640(gp)

			// The first two keycodes are stored in 0x051E. Other keycodes are in
			// subsequent addresses.

			keycode[0] = UsbRead(0x051e) & 0x00ff;
    17b8:	01014784 	movi	r4,1310
    17bc:	0001b480 	call	1b48 <UsbRead>
    17c0:	10bfffcc 	andi	r2,r2,65535
    17c4:	10c03fcc 	andi	r3,r2,255
    17c8:	e0bffe17 	ldw	r2,-8(fp)
    17cc:	10c00015 	stw	r3,0(r2)
			keycode[1] = UsbRead(0x051e) >> 8;
    17d0:	e0bffe17 	ldw	r2,-8(fp)
    17d4:	14000104 	addi	r16,r2,4
    17d8:	01014784 	movi	r4,1310
    17dc:	0001b480 	call	1b48 <UsbRead>
    17e0:	10bfffcc 	andi	r2,r2,65535
    17e4:	1004d23a 	srli	r2,r2,8
    17e8:	10bfffcc 	andi	r2,r2,65535
    17ec:	80800015 	stw	r2,0(r16)
			keycode[2] = UsbRead(0x051f) & 0x00ff;
    17f0:	e0bffe17 	ldw	r2,-8(fp)
    17f4:	14000204 	addi	r16,r2,8
    17f8:	010147c4 	movi	r4,1311
    17fc:	0001b480 	call	1b48 <UsbRead>
    1800:	10bfffcc 	andi	r2,r2,65535
    1804:	10803fcc 	andi	r2,r2,255
    1808:	80800015 	stw	r2,0(r16)
			keycode[3] = UsbRead(0x051f) >> 8;
    180c:	e0bffe17 	ldw	r2,-8(fp)
    1810:	14000304 	addi	r16,r2,12
    1814:	010147c4 	movi	r4,1311
    1818:	0001b480 	call	1b48 <UsbRead>
    181c:	10bfffcc 	andi	r2,r2,65535
    1820:	1004d23a 	srli	r2,r2,8
    1824:	10bfffcc 	andi	r2,r2,65535
    1828:	80800015 	stw	r2,0(r16)
			keycode[4] = UsbRead(0x0520) & 0x00ff;
    182c:	e0bffe17 	ldw	r2,-8(fp)
    1830:	14000404 	addi	r16,r2,16
    1834:	01014804 	movi	r4,1312
    1838:	0001b480 	call	1b48 <UsbRead>
    183c:	10bfffcc 	andi	r2,r2,65535
    1840:	10803fcc 	andi	r2,r2,255
    1844:	80800015 	stw	r2,0(r16)
			keycode[5] = UsbRead(0x0520) >> 8;
    1848:	e0bffe17 	ldw	r2,-8(fp)
    184c:	14000504 	addi	r16,r2,20
    1850:	01014804 	movi	r4,1312
    1854:	0001b480 	call	1b48 <UsbRead>
    1858:	10bfffcc 	andi	r2,r2,65535
    185c:	1004d23a 	srli	r2,r2,8
    1860:	10bfffcc 	andi	r2,r2,65535
    1864:	80800015 	stw	r2,0(r16)

			usleep(200);//usleep(5000);
    1868:	01003204 	movi	r4,200
    186c:	0019f280 	call	19f28 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
    1870:	d0a6f50b 	ldhu	r2,-25644(gp)
    1874:	10bfffcc 	andi	r2,r2,65535
    1878:	1009883a 	mov	r4,r2
    187c:	0001b480 	call	1b48 <UsbRead>
    1880:	d0a6f60d 	sth	r2,-25640(gp)

			if(!(usb_ctl_val & no_device))
    1884:	d0e6f60b 	ldhu	r3,-25640(gp)
    1888:	d0a6f58b 	ldhu	r2,-25642(gp)
    188c:	1884703a 	and	r2,r3,r2
    1890:	10bfffcc 	andi	r2,r2,65535
    1894:	1000241e 	bne	r2,zero,1928 <FetchKey+0x2d8>
			{
				//USB hot plug routine
				for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
    1898:	d026f6c5 	stb	zero,-25637(gp)
    189c:	00000f06 	br	18dc <FetchKey+0x28c>
				{
					usleep(5*1000);
    18a0:	0104e204 	movi	r4,5000
    18a4:	0019f280 	call	19f28 <usleep>
					usb_ctl_val = UsbRead(ctl_reg);
    18a8:	d0a6f50b 	ldhu	r2,-25644(gp)
    18ac:	10bfffcc 	andi	r2,r2,65535
    18b0:	1009883a 	mov	r4,r2
    18b4:	0001b480 	call	1b48 <UsbRead>
    18b8:	d0a6f60d 	sth	r2,-25640(gp)
					if(usb_ctl_val & no_device) break;
    18bc:	d0e6f60b 	ldhu	r3,-25640(gp)
    18c0:	d0a6f58b 	ldhu	r2,-25642(gp)
    18c4:	1884703a 	and	r2,r3,r2
    18c8:	10bfffcc 	andi	r2,r2,65535
    18cc:	1000081e 	bne	r2,zero,18f0 <FetchKey+0x2a0>
			usb_ctl_val = UsbRead(ctl_reg);

			if(!(usb_ctl_val & no_device))
			{
				//USB hot plug routine
				for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
    18d0:	d0a6f6c3 	ldbu	r2,-25637(gp)
    18d4:	10800044 	addi	r2,r2,1
    18d8:	d0a6f6c5 	stb	r2,-25637(gp)
    18dc:	d0a6f6c3 	ldbu	r2,-25637(gp)
    18e0:	10803fcc 	andi	r2,r2,255
    18e4:	108001f0 	cmpltui	r2,r2,7
    18e8:	103fed1e 	bne	r2,zero,18a0 <__alt_data_end+0xf80018a0>
    18ec:	00000106 	br	18f4 <FetchKey+0x2a4>
				{
					usleep(5*1000);
					usb_ctl_val = UsbRead(ctl_reg);
					if(usb_ctl_val & no_device) break;
    18f0:	0001883a 	nop
				}
				if(!(usb_ctl_val & no_device))
    18f4:	d0e6f60b 	ldhu	r3,-25640(gp)
    18f8:	d0a6f58b 	ldhu	r2,-25642(gp)
    18fc:	1884703a 	and	r2,r3,r2
    1900:	10bfffcc 	andi	r2,r2,65535
    1904:	1000081e 	bne	r2,zero,1928 <FetchKey+0x2d8>
				{
					printf("\n[INFO]: the keyboard has been removed!!! \n");
    1908:	010000b4 	movhi	r4,2
    190c:	2131b804 	addi	r4,r4,-14624
    1910:	000e5940 	call	e594 <puts>
					printf("[INFO]: please insert again!!! \n");
    1914:	010000b4 	movhi	r4,2
    1918:	2131c304 	addi	r4,r4,-14580
    191c:	000e5940 	call	e594 <puts>
					return -1;
    1920:	00bfffc4 	movi	r2,-1
    1924:	00000106 	br	192c <FetchKey+0x2dc>
				}
			}


		return 0;
    1928:	0005883a 	mov	r2,zero
}
    192c:	e6ffff04 	addi	sp,fp,-4
    1930:	dfc00217 	ldw	ra,8(sp)
    1934:	df000117 	ldw	fp,4(sp)
    1938:	dc000017 	ldw	r16,0(sp)
    193c:	dec00304 	addi	sp,sp,12
    1940:	f800283a 	ret

00001944 <IO_init>:
#include "io_handler.h"
#include <stdio.h>


void IO_init(void)
{
    1944:	deffff04 	addi	sp,sp,-4
    1948:	df000015 	stw	fp,0(sp)
    194c:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
    1950:	00820034 	movhi	r2,2048
    1954:	00c00044 	movi	r3,1
    1958:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 1;
    195c:	00820034 	movhi	r2,2048
    1960:	10800404 	addi	r2,r2,16
    1964:	00c00044 	movi	r3,1
    1968:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 1;
    196c:	00820034 	movhi	r2,2048
    1970:	10800c04 	addi	r2,r2,48
    1974:	00c00044 	movi	r3,1
    1978:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
    197c:	00820034 	movhi	r2,2048
    1980:	10800804 	addi	r2,r2,32
    1984:	00c00044 	movi	r3,1
    1988:	10c00015 	stw	r3,0(r2)
	*otg_hpi_address = 0;
    198c:	00820034 	movhi	r2,2048
    1990:	10801404 	addi	r2,r2,80
    1994:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
    1998:	00820034 	movhi	r2,2048
    199c:	10801004 	addi	r2,r2,64
    19a0:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
    19a4:	00820034 	movhi	r2,2048
    19a8:	10800404 	addi	r2,r2,16
    19ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_reset = 0;
    19b0:	00820034 	movhi	r2,2048
    19b4:	10000015 	stw	zero,0(r2)
	*otg_hpi_reset = 1;
    19b8:	00820034 	movhi	r2,2048
    19bc:	00c00044 	movi	r3,1
    19c0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 1;
    19c4:	00820034 	movhi	r2,2048
    19c8:	10800404 	addi	r2,r2,16
    19cc:	00c00044 	movi	r3,1
    19d0:	10c00015 	stw	r3,0(r2)
}
    19d4:	0001883a 	nop
    19d8:	e037883a 	mov	sp,fp
    19dc:	df000017 	ldw	fp,0(sp)
    19e0:	dec00104 	addi	sp,sp,4
    19e4:	f800283a 	ret

000019e8 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
    19e8:	defffd04 	addi	sp,sp,-12
    19ec:	df000215 	stw	fp,8(sp)
    19f0:	df000204 	addi	fp,sp,8
    19f4:	2007883a 	mov	r3,r4
    19f8:	2805883a 	mov	r2,r5
    19fc:	e0fffe05 	stb	r3,-8(fp)
    1a00:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_cs = 0;
    1a04:	00820034 	movhi	r2,2048
    1a08:	10800404 	addi	r2,r2,16
    1a0c:	10000015 	stw	zero,0(r2)
	*otg_hpi_address = Address;
    1a10:	00820034 	movhi	r2,2048
    1a14:	10801404 	addi	r2,r2,80
    1a18:	e0fffe03 	ldbu	r3,-8(fp)
    1a1c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w  = 0;
    1a20:	00820034 	movhi	r2,2048
    1a24:	10800804 	addi	r2,r2,32
    1a28:	10000015 	stw	zero,0(r2)

	*otg_hpi_data = Data;
    1a2c:	00820034 	movhi	r2,2048
    1a30:	10801004 	addi	r2,r2,64
    1a34:	e0ffff0b 	ldhu	r3,-4(fp)
    1a38:	10c00015 	stw	r3,0(r2)

	*otg_hpi_cs = 1;
    1a3c:	00820034 	movhi	r2,2048
    1a40:	10800404 	addi	r2,r2,16
    1a44:	00c00044 	movi	r3,1
    1a48:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w  = 1;
    1a4c:	00820034 	movhi	r2,2048
    1a50:	10800804 	addi	r2,r2,32
    1a54:	00c00044 	movi	r3,1
    1a58:	10c00015 	stw	r3,0(r2)


}
    1a5c:	0001883a 	nop
    1a60:	e037883a 	mov	sp,fp
    1a64:	df000017 	ldw	fp,0(sp)
    1a68:	dec00104 	addi	sp,sp,4
    1a6c:	f800283a 	ret

00001a70 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
    1a70:	defffd04 	addi	sp,sp,-12
    1a74:	df000215 	stw	fp,8(sp)
    1a78:	df000204 	addi	fp,sp,8
    1a7c:	2005883a 	mov	r2,r4
    1a80:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_cs = 0;
    1a84:	00820034 	movhi	r2,2048
    1a88:	10800404 	addi	r2,r2,16
    1a8c:	10000015 	stw	zero,0(r2)
	*otg_hpi_address = Address;
    1a90:	00820034 	movhi	r2,2048
    1a94:	10801404 	addi	r2,r2,80
    1a98:	e0ffff03 	ldbu	r3,-4(fp)
    1a9c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r  = 0;
    1aa0:	00820034 	movhi	r2,2048
    1aa4:	10800c04 	addi	r2,r2,48
    1aa8:	10000015 	stw	zero,0(r2)

	temp = *otg_hpi_data;
    1aac:	00820034 	movhi	r2,2048
    1ab0:	10801004 	addi	r2,r2,64
    1ab4:	10800017 	ldw	r2,0(r2)
    1ab8:	e0bffe0d 	sth	r2,-8(fp)

	*otg_hpi_cs = 1;
    1abc:	00820034 	movhi	r2,2048
    1ac0:	10800404 	addi	r2,r2,16
    1ac4:	00c00044 	movi	r3,1
    1ac8:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r  = 1;
    1acc:	00820034 	movhi	r2,2048
    1ad0:	10800c04 	addi	r2,r2,48
    1ad4:	00c00044 	movi	r3,1
    1ad8:	10c00015 	stw	r3,0(r2)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	return temp;
    1adc:	e0bffe0b 	ldhu	r2,-8(fp)
}
    1ae0:	e037883a 	mov	sp,fp
    1ae4:	df000017 	ldw	fp,0(sp)
    1ae8:	dec00104 	addi	sp,sp,4
    1aec:	f800283a 	ret

00001af0 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    1af0:	defffc04 	addi	sp,sp,-16
    1af4:	dfc00315 	stw	ra,12(sp)
    1af8:	df000215 	stw	fp,8(sp)
    1afc:	df000204 	addi	fp,sp,8
    1b00:	2007883a 	mov	r3,r4
    1b04:	2805883a 	mov	r2,r5
    1b08:	e0fffe0d 	sth	r3,-8(fp)
    1b0c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
    1b10:	e0bffe0b 	ldhu	r2,-8(fp)
    1b14:	100b883a 	mov	r5,r2
    1b18:	01000084 	movi	r4,2
    1b1c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA, Data);
    1b20:	e0bfff0b 	ldhu	r2,-4(fp)
    1b24:	100b883a 	mov	r5,r2
    1b28:	0009883a 	mov	r4,zero
    1b2c:	00019e80 	call	19e8 <IO_write>
}
    1b30:	0001883a 	nop
    1b34:	e037883a 	mov	sp,fp
    1b38:	dfc00117 	ldw	ra,4(sp)
    1b3c:	df000017 	ldw	fp,0(sp)
    1b40:	dec00204 	addi	sp,sp,8
    1b44:	f800283a 	ret

00001b48 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    1b48:	defffd04 	addi	sp,sp,-12
    1b4c:	dfc00215 	stw	ra,8(sp)
    1b50:	df000115 	stw	fp,4(sp)
    1b54:	df000104 	addi	fp,sp,4
    1b58:	2005883a 	mov	r2,r4
    1b5c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
    1b60:	e0bfff0b 	ldhu	r2,-4(fp)
    1b64:	100b883a 	mov	r5,r2
    1b68:	01000084 	movi	r4,2
    1b6c:	00019e80 	call	19e8 <IO_write>
	return IO_read(HPI_DATA);
    1b70:	0009883a 	mov	r4,zero
    1b74:	0001a700 	call	1a70 <IO_read>
}
    1b78:	e037883a 	mov	sp,fp
    1b7c:	dfc00117 	ldw	ra,4(sp)
    1b80:	df000017 	ldw	fp,0(sp)
    1b84:	dec00204 	addi	sp,sp,8
    1b88:	f800283a 	ret

00001b8c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    1b8c:	defffe04 	addi	sp,sp,-8
    1b90:	dfc00115 	stw	ra,4(sp)
    1b94:	df000015 	stw	fp,0(sp)
    1b98:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    1b9c:	017e9414 	movui	r5,64080
    1ba0:	01000044 	movi	r4,1
    1ba4:	00019e80 	call	19e8 <IO_write>
	usleep(100000);
    1ba8:	010000b4 	movhi	r4,2
    1bac:	2121a804 	addi	r4,r4,-31072
    1bb0:	0019f280 	call	19f28 <usleep>
	printf("[USB INIT]:reset finished!\n");
    1bb4:	010000b4 	movhi	r4,2
    1bb8:	2131cb04 	addi	r4,r4,-14548
    1bbc:	000e5940 	call	e594 <puts>

	usleep(500000);
    1bc0:	01000234 	movhi	r4,8
    1bc4:	21284804 	addi	r4,r4,-24288
    1bc8:	0019f280 	call	19f28 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    1bcc:	010000b4 	movhi	r4,2
    1bd0:	2131d204 	addi	r4,r4,-14520
    1bd4:	000e5940 	call	e594 <puts>
	IO_read(HPI_MAILBOX);
    1bd8:	01000044 	movi	r4,1
    1bdc:	0001a700 	call	1a70 <IO_read>
	IO_read(HPI_STATUS);
    1be0:	010000c4 	movi	r4,3
    1be4:	0001a700 	call	1a70 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    1be8:	01005104 	movi	r4,324
    1bec:	0001b480 	call	1b48 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    1bf0:	000b883a 	mov	r5,zero
    1bf4:	01005104 	movi	r4,324
    1bf8:	0001af00 	call	1af0 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    1bfc:	01005204 	movi	r4,328
    1c00:	0001b480 	call	1b48 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    1c04:	000b883a 	mov	r5,zero
    1c08:	01005204 	movi	r4,328
    1c0c:	0001af00 	call	1af0 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    1c10:	017fffd4 	movui	r5,65535
    1c14:	01302414 	movui	r4,49296
    1c18:	0001af00 	call	1af0 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    1c1c:	017fffd4 	movui	r5,65535
    1c20:	01302c14 	movui	r4,49328
    1c24:	0001af00 	call	1af0 <UsbWrite>

}
    1c28:	0001883a 	nop
    1c2c:	e037883a 	mov	sp,fp
    1c30:	dfc00117 	ldw	ra,4(sp)
    1c34:	df000017 	ldw	fp,0(sp)
    1c38:	dec00204 	addi	sp,sp,8
    1c3c:	f800283a 	ret

00001c40 <UsbSetAddress>:


void UsbSetAddress()
{
    1c40:	defffe04 	addi	sp,sp,-8
    1c44:	dfc00115 	stw	ra,4(sp)
    1c48:	df000015 	stw	fp,0(sp)
    1c4c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1c50:	01414004 	movi	r5,1280
    1c54:	01000084 	movi	r4,2
    1c58:	00019e80 	call	19e8 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    1c5c:	01414304 	movi	r5,1292
    1c60:	0009883a 	mov	r4,zero
    1c64:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1c68:	01400204 	movi	r5,8
    1c6c:	0009883a 	mov	r4,zero
    1c70:	00019e80 	call	19e8 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    1c74:	01403404 	movi	r5,208
    1c78:	0009883a 	mov	r4,zero
    1c7c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1c80:	01400044 	movi	r5,1
    1c84:	0009883a 	mov	r4,zero
    1c88:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1c8c:	014004c4 	movi	r5,19
    1c90:	0009883a 	mov	r4,zero
    1c94:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1c98:	01414504 	movi	r5,1300
    1c9c:	0009883a 	mov	r4,zero
    1ca0:	00019e80 	call	19e8 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    1ca4:	01414004 	movi	r5,1280
    1ca8:	0009883a 	mov	r4,zero
    1cac:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0002);
    1cb0:	01400084 	movi	r5,2
    1cb4:	0009883a 	mov	r4,zero
    1cb8:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1cbc:	000b883a 	mov	r5,zero
    1cc0:	0009883a 	mov	r4,zero
    1cc4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1cc8:	000b883a 	mov	r5,zero
    1ccc:	0009883a 	mov	r4,zero
    1cd0:	00019e80 	call	19e8 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    1cd4:	000b883a 	mov	r5,zero
    1cd8:	0009883a 	mov	r4,zero
    1cdc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    1ce0:	000b883a 	mov	r5,zero
    1ce4:	0009883a 	mov	r4,zero
    1ce8:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    1cec:	01402404 	movi	r5,144
    1cf0:	0009883a 	mov	r4,zero
    1cf4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1cf8:	01401044 	movi	r5,65
    1cfc:	0009883a 	mov	r4,zero
    1d00:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1d04:	014004c4 	movi	r5,19
    1d08:	0009883a 	mov	r4,zero
    1d0c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1d10:	000b883a 	mov	r5,zero
    1d14:	0009883a 	mov	r4,zero
    1d18:	00019e80 	call	19e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1d1c:	01414004 	movi	r5,1280
    1d20:	01006c04 	movi	r4,432
    1d24:	0001af00 	call	1af0 <UsbWrite>
}
    1d28:	0001883a 	nop
    1d2c:	e037883a 	mov	sp,fp
    1d30:	dfc00117 	ldw	ra,4(sp)
    1d34:	df000017 	ldw	fp,0(sp)
    1d38:	dec00204 	addi	sp,sp,8
    1d3c:	f800283a 	ret

00001d40 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    1d40:	defffe04 	addi	sp,sp,-8
    1d44:	dfc00115 	stw	ra,4(sp)
    1d48:	df000015 	stw	fp,0(sp)
    1d4c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1d50:	01414004 	movi	r5,1280
    1d54:	01000084 	movi	r4,2
    1d58:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1d5c:	01414304 	movi	r5,1292
    1d60:	0009883a 	mov	r4,zero
    1d64:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1d68:	01400204 	movi	r5,8
    1d6c:	0009883a 	mov	r4,zero
    1d70:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1d74:	0140b404 	movi	r5,720
    1d78:	0009883a 	mov	r4,zero
    1d7c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1d80:	01400044 	movi	r5,1
    1d84:	0009883a 	mov	r4,zero
    1d88:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1d8c:	014004c4 	movi	r5,19
    1d90:	0009883a 	mov	r4,zero
    1d94:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1d98:	01414504 	movi	r5,1300
    1d9c:	0009883a 	mov	r4,zero
    1da0:	00019e80 	call	19e8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1da4:	0141a004 	movi	r5,1664
    1da8:	0009883a 	mov	r4,zero
    1dac:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    1db0:	01404004 	movi	r5,256
    1db4:	0009883a 	mov	r4,zero
    1db8:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1dbc:	000b883a 	mov	r5,zero
    1dc0:	0009883a 	mov	r4,zero
    1dc4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);
    1dc8:	01400204 	movi	r5,8
    1dcc:	0009883a 	mov	r4,zero
    1dd0:	00019e80 	call	19e8 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    1dd4:	01414b04 	movi	r5,1324
    1dd8:	0009883a 	mov	r4,zero
    1ddc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    1de0:	01400204 	movi	r5,8
    1de4:	0009883a 	mov	r4,zero
    1de8:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    1dec:	0140a404 	movi	r5,656
    1df0:	0009883a 	mov	r4,zero
    1df4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1df8:	01401044 	movi	r5,65
    1dfc:	0009883a 	mov	r4,zero
    1e00:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1e04:	014004c4 	movi	r5,19
    1e08:	0009883a 	mov	r4,zero
    1e0c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0520);
    1e10:	01414804 	movi	r5,1312
    1e14:	0009883a 	mov	r4,zero
    1e18:	00019e80 	call	19e8 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    1e1c:	000b883a 	mov	r5,zero
    1e20:	0009883a 	mov	r4,zero
    1e24:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1e28:	000b883a 	mov	r5,zero
    1e2c:	0009883a 	mov	r4,zero
    1e30:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    1e34:	01408404 	movi	r5,528
    1e38:	0009883a 	mov	r4,zero
    1e3c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1e40:	01401044 	movi	r5,65
    1e44:	0009883a 	mov	r4,zero
    1e48:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1e4c:	014004c4 	movi	r5,19
    1e50:	0009883a 	mov	r4,zero
    1e54:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1e58:	000b883a 	mov	r5,zero
    1e5c:	0009883a 	mov	r4,zero
    1e60:	00019e80 	call	19e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1e64:	01414004 	movi	r5,1280
    1e68:	01006c04 	movi	r4,432
    1e6c:	0001af00 	call	1af0 <UsbWrite>
}
    1e70:	0001883a 	nop
    1e74:	e037883a 	mov	sp,fp
    1e78:	dfc00117 	ldw	ra,4(sp)
    1e7c:	df000017 	ldw	fp,0(sp)
    1e80:	dec00204 	addi	sp,sp,8
    1e84:	f800283a 	ret

00001e88 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    1e88:	defffe04 	addi	sp,sp,-8
    1e8c:	dfc00115 	stw	ra,4(sp)
    1e90:	df000015 	stw	fp,0(sp)
    1e94:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1e98:	01414004 	movi	r5,1280
    1e9c:	01000084 	movi	r4,2
    1ea0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1ea4:	01414304 	movi	r5,1292
    1ea8:	0009883a 	mov	r4,zero
    1eac:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1eb0:	01400204 	movi	r5,8
    1eb4:	0009883a 	mov	r4,zero
    1eb8:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1ebc:	0140b404 	movi	r5,720
    1ec0:	0009883a 	mov	r4,zero
    1ec4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1ec8:	01400044 	movi	r5,1
    1ecc:	0009883a 	mov	r4,zero
    1ed0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1ed4:	014004c4 	movi	r5,19
    1ed8:	0009883a 	mov	r4,zero
    1edc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1ee0:	01414504 	movi	r5,1300
    1ee4:	0009883a 	mov	r4,zero
    1ee8:	00019e80 	call	19e8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1eec:	0141a004 	movi	r5,1664
    1ef0:	0009883a 	mov	r4,zero
    1ef4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    1ef8:	01404004 	movi	r5,256
    1efc:	0009883a 	mov	r4,zero
    1f00:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1f04:	000b883a 	mov	r5,zero
    1f08:	0009883a 	mov	r4,zero
    1f0c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    1f10:	01400484 	movi	r5,18
    1f14:	0009883a 	mov	r4,zero
    1f18:	00019e80 	call	19e8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1f1c:	01415104 	movi	r5,1348
    1f20:	0009883a 	mov	r4,zero
    1f24:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1f28:	01400204 	movi	r5,8
    1f2c:	0009883a 	mov	r4,zero
    1f30:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1f34:	0140a404 	movi	r5,656
    1f38:	0009883a 	mov	r4,zero
    1f3c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1f40:	01401044 	movi	r5,65
    1f44:	0009883a 	mov	r4,zero
    1f48:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1f4c:	014004c4 	movi	r5,19
    1f50:	0009883a 	mov	r4,zero
    1f54:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1f58:	01414804 	movi	r5,1312
    1f5c:	0009883a 	mov	r4,zero
    1f60:	00019e80 	call	19e8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1f64:	01415304 	movi	r5,1356
    1f68:	0009883a 	mov	r4,zero
    1f6c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1f70:	01400204 	movi	r5,8
    1f74:	0009883a 	mov	r4,zero
    1f78:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1f7c:	0140a404 	movi	r5,656
    1f80:	0009883a 	mov	r4,zero
    1f84:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    1f88:	01400044 	movi	r5,1
    1f8c:	0009883a 	mov	r4,zero
    1f90:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1f94:	014004c4 	movi	r5,19
    1f98:	0009883a 	mov	r4,zero
    1f9c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1fa0:	01414b04 	movi	r5,1324
    1fa4:	0009883a 	mov	r4,zero
    1fa8:	00019e80 	call	19e8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    1fac:	01415504 	movi	r5,1364
    1fb0:	0009883a 	mov	r4,zero
    1fb4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    1fb8:	01400084 	movi	r5,2
    1fbc:	0009883a 	mov	r4,zero
    1fc0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1fc4:	0140a404 	movi	r5,656
    1fc8:	0009883a 	mov	r4,zero
    1fcc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1fd0:	01401044 	movi	r5,65
    1fd4:	0009883a 	mov	r4,zero
    1fd8:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1fdc:	014004c4 	movi	r5,19
    1fe0:	0009883a 	mov	r4,zero
    1fe4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1fe8:	01414e04 	movi	r5,1336
    1fec:	0009883a 	mov	r4,zero
    1ff0:	00019e80 	call	19e8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    1ff4:	000b883a 	mov	r5,zero
    1ff8:	0009883a 	mov	r4,zero
    1ffc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    2000:	000b883a 	mov	r5,zero
    2004:	0009883a 	mov	r4,zero
    2008:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    200c:	01408404 	movi	r5,528
    2010:	0009883a 	mov	r4,zero
    2014:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    2018:	01401044 	movi	r5,65
    201c:	0009883a 	mov	r4,zero
    2020:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    2024:	014004c4 	movi	r5,19
    2028:	0009883a 	mov	r4,zero
    202c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    2030:	000b883a 	mov	r5,zero
    2034:	0009883a 	mov	r4,zero
    2038:	00019e80 	call	19e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    203c:	01414004 	movi	r5,1280
    2040:	01006c04 	movi	r4,432
    2044:	0001af00 	call	1af0 <UsbWrite>
}
    2048:	0001883a 	nop
    204c:	e037883a 	mov	sp,fp
    2050:	dfc00117 	ldw	ra,4(sp)
    2054:	df000017 	ldw	fp,0(sp)
    2058:	dec00204 	addi	sp,sp,8
    205c:	f800283a 	ret

00002060 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    2060:	defffe04 	addi	sp,sp,-8
    2064:	dfc00115 	stw	ra,4(sp)
    2068:	df000015 	stw	fp,0(sp)
    206c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2070:	01414004 	movi	r5,1280
    2074:	01000084 	movi	r4,2
    2078:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    207c:	01414304 	movi	r5,1292
    2080:	0009883a 	mov	r4,zero
    2084:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2088:	01400204 	movi	r5,8
    208c:	0009883a 	mov	r4,zero
    2090:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2094:	0140b404 	movi	r5,720
    2098:	0009883a 	mov	r4,zero
    209c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    20a0:	01400044 	movi	r5,1
    20a4:	0009883a 	mov	r4,zero
    20a8:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    20ac:	014004c4 	movi	r5,19
    20b0:	0009883a 	mov	r4,zero
    20b4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    20b8:	01414504 	movi	r5,1300
    20bc:	0009883a 	mov	r4,zero
    20c0:	00019e80 	call	19e8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    20c4:	0141a004 	movi	r5,1664
    20c8:	0009883a 	mov	r4,zero
    20cc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    20d0:	01408004 	movi	r5,512
    20d4:	0009883a 	mov	r4,zero
    20d8:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    20dc:	000b883a 	mov	r5,zero
    20e0:	0009883a 	mov	r4,zero
    20e4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    20e8:	01400244 	movi	r5,9
    20ec:	0009883a 	mov	r4,zero
    20f0:	00019e80 	call	19e8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    20f4:	01415104 	movi	r5,1348
    20f8:	0009883a 	mov	r4,zero
    20fc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2100:	01400204 	movi	r5,8
    2104:	0009883a 	mov	r4,zero
    2108:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    210c:	0140a404 	movi	r5,656
    2110:	0009883a 	mov	r4,zero
    2114:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2118:	01401044 	movi	r5,65
    211c:	0009883a 	mov	r4,zero
    2120:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2124:	014004c4 	movi	r5,19
    2128:	0009883a 	mov	r4,zero
    212c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2130:	01414804 	movi	r5,1312
    2134:	0009883a 	mov	r4,zero
    2138:	00019e80 	call	19e8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    213c:	01415304 	movi	r5,1356
    2140:	0009883a 	mov	r4,zero
    2144:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    2148:	01400044 	movi	r5,1
    214c:	0009883a 	mov	r4,zero
    2150:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2154:	0140a404 	movi	r5,656
    2158:	0009883a 	mov	r4,zero
    215c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    2160:	01400044 	movi	r5,1
    2164:	0009883a 	mov	r4,zero
    2168:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    216c:	014004c4 	movi	r5,19
    2170:	0009883a 	mov	r4,zero
    2174:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2178:	01414b04 	movi	r5,1324
    217c:	0009883a 	mov	r4,zero
    2180:	00019e80 	call	19e8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    2184:	000b883a 	mov	r5,zero
    2188:	0009883a 	mov	r4,zero
    218c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2190:	000b883a 	mov	r5,zero
    2194:	0009883a 	mov	r4,zero
    2198:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    219c:	01408404 	movi	r5,528
    21a0:	0009883a 	mov	r4,zero
    21a4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    21a8:	01401044 	movi	r5,65
    21ac:	0009883a 	mov	r4,zero
    21b0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    21b4:	014004c4 	movi	r5,19
    21b8:	0009883a 	mov	r4,zero
    21bc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    21c0:	000b883a 	mov	r5,zero
    21c4:	0009883a 	mov	r4,zero
    21c8:	00019e80 	call	19e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    21cc:	01414004 	movi	r5,1280
    21d0:	01006c04 	movi	r4,432
    21d4:	0001af00 	call	1af0 <UsbWrite>
}
    21d8:	0001883a 	nop
    21dc:	e037883a 	mov	sp,fp
    21e0:	dfc00117 	ldw	ra,4(sp)
    21e4:	df000017 	ldw	fp,0(sp)
    21e8:	dec00204 	addi	sp,sp,8
    21ec:	f800283a 	ret

000021f0 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    21f0:	defffe04 	addi	sp,sp,-8
    21f4:	dfc00115 	stw	ra,4(sp)
    21f8:	df000015 	stw	fp,0(sp)
    21fc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2200:	01414004 	movi	r5,1280
    2204:	01000084 	movi	r4,2
    2208:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    220c:	01414304 	movi	r5,1292
    2210:	0009883a 	mov	r4,zero
    2214:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2218:	01400204 	movi	r5,8
    221c:	0009883a 	mov	r4,zero
    2220:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    2224:	0140b404 	movi	r5,720
    2228:	0009883a 	mov	r4,zero
    222c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2230:	01400044 	movi	r5,1
    2234:	0009883a 	mov	r4,zero
    2238:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    223c:	014004c4 	movi	r5,19
    2240:	0009883a 	mov	r4,zero
    2244:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    2248:	01414504 	movi	r5,1300
    224c:	0009883a 	mov	r4,zero
    2250:	00019e80 	call	19e8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    2254:	0141a004 	movi	r5,1664
    2258:	0009883a 	mov	r4,zero
    225c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    2260:	01408004 	movi	r5,512
    2264:	0009883a 	mov	r4,zero
    2268:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    226c:	000b883a 	mov	r5,zero
    2270:	0009883a 	mov	r4,zero
    2274:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    2278:	01403fc4 	movi	r5,255
    227c:	0009883a 	mov	r4,zero
    2280:	00019e80 	call	19e8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    2284:	01415704 	movi	r5,1372
    2288:	0009883a 	mov	r4,zero
    228c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2290:	01400204 	movi	r5,8
    2294:	0009883a 	mov	r4,zero
    2298:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    229c:	0140a404 	movi	r5,656
    22a0:	0009883a 	mov	r4,zero
    22a4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    22a8:	01401044 	movi	r5,65
    22ac:	0009883a 	mov	r4,zero
    22b0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    22b4:	014004c4 	movi	r5,19
    22b8:	0009883a 	mov	r4,zero
    22bc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    22c0:	01414804 	movi	r5,1312
    22c4:	0009883a 	mov	r4,zero
    22c8:	00019e80 	call	19e8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    22cc:	01415904 	movi	r5,1380
    22d0:	0009883a 	mov	r4,zero
    22d4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    22d8:	01400204 	movi	r5,8
    22dc:	0009883a 	mov	r4,zero
    22e0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    22e4:	0140a404 	movi	r5,656
    22e8:	0009883a 	mov	r4,zero
    22ec:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    22f0:	01400044 	movi	r5,1
    22f4:	0009883a 	mov	r4,zero
    22f8:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    22fc:	014004c4 	movi	r5,19
    2300:	0009883a 	mov	r4,zero
    2304:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    2308:	01414b04 	movi	r5,1324
    230c:	0009883a 	mov	r4,zero
    2310:	00019e80 	call	19e8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    2314:	01415b04 	movi	r5,1388
    2318:	0009883a 	mov	r4,zero
    231c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2320:	01400204 	movi	r5,8
    2324:	0009883a 	mov	r4,zero
    2328:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    232c:	0140a404 	movi	r5,656
    2330:	0009883a 	mov	r4,zero
    2334:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2338:	01401044 	movi	r5,65
    233c:	0009883a 	mov	r4,zero
    2340:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2344:	014004c4 	movi	r5,19
    2348:	0009883a 	mov	r4,zero
    234c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2350:	01414e04 	movi	r5,1336
    2354:	0009883a 	mov	r4,zero
    2358:	00019e80 	call	19e8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    235c:	01415d04 	movi	r5,1396
    2360:	0009883a 	mov	r4,zero
    2364:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2368:	01400204 	movi	r5,8
    236c:	0009883a 	mov	r4,zero
    2370:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2374:	0140a404 	movi	r5,656
    2378:	0009883a 	mov	r4,zero
    237c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2380:	01400044 	movi	r5,1
    2384:	0009883a 	mov	r4,zero
    2388:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    238c:	014004c4 	movi	r5,19
    2390:	0009883a 	mov	r4,zero
    2394:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2398:	01415104 	movi	r5,1348
    239c:	0009883a 	mov	r4,zero
    23a0:	00019e80 	call	19e8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    23a4:	01415f04 	movi	r5,1404
    23a8:	0009883a 	mov	r4,zero
    23ac:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    23b0:	01400084 	movi	r5,2
    23b4:	0009883a 	mov	r4,zero
    23b8:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    23bc:	0140a404 	movi	r5,656
    23c0:	0009883a 	mov	r4,zero
    23c4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    23c8:	01401044 	movi	r5,65
    23cc:	0009883a 	mov	r4,zero
    23d0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    23d4:	014004c4 	movi	r5,19
    23d8:	0009883a 	mov	r4,zero
    23dc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    23e0:	01415404 	movi	r5,1360
    23e4:	0009883a 	mov	r4,zero
    23e8:	00019e80 	call	19e8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    23ec:	000b883a 	mov	r5,zero
    23f0:	0009883a 	mov	r4,zero
    23f4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    23f8:	000b883a 	mov	r5,zero
    23fc:	0009883a 	mov	r4,zero
    2400:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    2404:	01408404 	movi	r5,528
    2408:	0009883a 	mov	r4,zero
    240c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    2410:	01401044 	movi	r5,65
    2414:	0009883a 	mov	r4,zero
    2418:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    241c:	014004c4 	movi	r5,19
    2420:	0009883a 	mov	r4,zero
    2424:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    2428:	000b883a 	mov	r5,zero
    242c:	0009883a 	mov	r4,zero
    2430:	00019e80 	call	19e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2434:	01414004 	movi	r5,1280
    2438:	01006c04 	movi	r4,432
    243c:	0001af00 	call	1af0 <UsbWrite>
}
    2440:	0001883a 	nop
    2444:	e037883a 	mov	sp,fp
    2448:	dfc00117 	ldw	ra,4(sp)
    244c:	df000017 	ldw	fp,0(sp)
    2450:	dec00204 	addi	sp,sp,8
    2454:	f800283a 	ret

00002458 <UsbSetConfig>:

void UsbSetConfig()
{
    2458:	defffe04 	addi	sp,sp,-8
    245c:	dfc00115 	stw	ra,4(sp)
    2460:	df000015 	stw	fp,0(sp)
    2464:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2468:	01414004 	movi	r5,1280
    246c:	01000084 	movi	r4,2
    2470:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2474:	01414304 	movi	r5,1292
    2478:	0009883a 	mov	r4,zero
    247c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2480:	01400204 	movi	r5,8
    2484:	0009883a 	mov	r4,zero
    2488:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    248c:	0140b404 	movi	r5,720
    2490:	0009883a 	mov	r4,zero
    2494:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2498:	01400044 	movi	r5,1
    249c:	0009883a 	mov	r4,zero
    24a0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    24a4:	014004c4 	movi	r5,19
    24a8:	0009883a 	mov	r4,zero
    24ac:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    24b0:	01414504 	movi	r5,1300
    24b4:	0009883a 	mov	r4,zero
    24b8:	00019e80 	call	19e8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    24bc:	01424004 	movi	r5,2304
    24c0:	0009883a 	mov	r4,zero
    24c4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    24c8:	01400044 	movi	r5,1
    24cc:	0009883a 	mov	r4,zero
    24d0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    24d4:	000b883a 	mov	r5,zero
    24d8:	0009883a 	mov	r4,zero
    24dc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    24e0:	000b883a 	mov	r5,zero
    24e4:	0009883a 	mov	r4,zero
    24e8:	00019e80 	call	19e8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    24ec:	000b883a 	mov	r5,zero
    24f0:	0009883a 	mov	r4,zero
    24f4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    24f8:	000b883a 	mov	r5,zero
    24fc:	0009883a 	mov	r4,zero
    2500:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    2504:	0140a404 	movi	r5,656
    2508:	0009883a 	mov	r4,zero
    250c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2510:	01401044 	movi	r5,65
    2514:	0009883a 	mov	r4,zero
    2518:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    251c:	014004c4 	movi	r5,19
    2520:	0009883a 	mov	r4,zero
    2524:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2528:	000b883a 	mov	r5,zero
    252c:	0009883a 	mov	r4,zero
    2530:	00019e80 	call	19e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2534:	01414004 	movi	r5,1280
    2538:	01006c04 	movi	r4,432
    253c:	0001af00 	call	1af0 <UsbWrite>

}
    2540:	0001883a 	nop
    2544:	e037883a 	mov	sp,fp
    2548:	dfc00117 	ldw	ra,4(sp)
    254c:	df000017 	ldw	fp,0(sp)
    2550:	dec00204 	addi	sp,sp,8
    2554:	f800283a 	ret

00002558 <UsbClassRequest>:

void UsbClassRequest()
{
    2558:	defffe04 	addi	sp,sp,-8
    255c:	dfc00115 	stw	ra,4(sp)
    2560:	df000015 	stw	fp,0(sp)
    2564:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2568:	01414004 	movi	r5,1280
    256c:	01000084 	movi	r4,2
    2570:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2574:	01414304 	movi	r5,1292
    2578:	0009883a 	mov	r4,zero
    257c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2580:	01400204 	movi	r5,8
    2584:	0009883a 	mov	r4,zero
    2588:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    258c:	0140b404 	movi	r5,720
    2590:	0009883a 	mov	r4,zero
    2594:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2598:	01400044 	movi	r5,1
    259c:	0009883a 	mov	r4,zero
    25a0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    25a4:	014004c4 	movi	r5,19
    25a8:	0009883a 	mov	r4,zero
    25ac:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    25b0:	01414504 	movi	r5,1300
    25b4:	0009883a 	mov	r4,zero
    25b8:	00019e80 	call	19e8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    25bc:	01428844 	movi	r5,2593
    25c0:	0009883a 	mov	r4,zero
    25c4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    25c8:	000b883a 	mov	r5,zero
    25cc:	0009883a 	mov	r4,zero
    25d0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    25d4:	000b883a 	mov	r5,zero
    25d8:	0009883a 	mov	r4,zero
    25dc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    25e0:	000b883a 	mov	r5,zero
    25e4:	0009883a 	mov	r4,zero
    25e8:	00019e80 	call	19e8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    25ec:	000b883a 	mov	r5,zero
    25f0:	0009883a 	mov	r4,zero
    25f4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    25f8:	000b883a 	mov	r5,zero
    25fc:	0009883a 	mov	r4,zero
    2600:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    2604:	0140a404 	movi	r5,656
    2608:	0009883a 	mov	r4,zero
    260c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    2610:	01401044 	movi	r5,65
    2614:	0009883a 	mov	r4,zero
    2618:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    261c:	014004c4 	movi	r5,19
    2620:	0009883a 	mov	r4,zero
    2624:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
    2628:	000b883a 	mov	r5,zero
    262c:	0009883a 	mov	r4,zero
    2630:	00019e80 	call	19e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2634:	01414004 	movi	r5,1280
    2638:	01006c04 	movi	r4,432
    263c:	0001af00 	call	1af0 <UsbWrite>
}
    2640:	0001883a 	nop
    2644:	e037883a 	mov	sp,fp
    2648:	dfc00117 	ldw	ra,4(sp)
    264c:	df000017 	ldw	fp,0(sp)
    2650:	dec00204 	addi	sp,sp,8
    2654:	f800283a 	ret

00002658 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    2658:	defffe04 	addi	sp,sp,-8
    265c:	dfc00115 	stw	ra,4(sp)
    2660:	df000015 	stw	fp,0(sp)
    2664:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    2668:	01414004 	movi	r5,1280
    266c:	01000084 	movi	r4,2
    2670:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    2674:	01414304 	movi	r5,1292
    2678:	0009883a 	mov	r4,zero
    267c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    2680:	01400204 	movi	r5,8
    2684:	0009883a 	mov	r4,zero
    2688:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    268c:	0140b404 	movi	r5,720
    2690:	0009883a 	mov	r4,zero
    2694:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    2698:	01400044 	movi	r5,1
    269c:	0009883a 	mov	r4,zero
    26a0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    26a4:	014004c4 	movi	r5,19
    26a8:	0009883a 	mov	r4,zero
    26ac:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    26b0:	01414504 	movi	r5,1300
    26b4:	0009883a 	mov	r4,zero
    26b8:	00019e80 	call	19e8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    26bc:	0141a044 	movi	r5,1665
    26c0:	0009883a 	mov	r4,zero
    26c4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    26c8:	01484004 	movi	r5,8448
    26cc:	0009883a 	mov	r4,zero
    26d0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    26d4:	000b883a 	mov	r5,zero
    26d8:	0009883a 	mov	r4,zero
    26dc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    26e0:	01401ec4 	movi	r5,123
    26e4:	0009883a 	mov	r4,zero
    26e8:	00019e80 	call	19e8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    26ec:	01415104 	movi	r5,1348
    26f0:	0009883a 	mov	r4,zero
    26f4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    26f8:	01400204 	movi	r5,8
    26fc:	0009883a 	mov	r4,zero
    2700:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    2704:	0140a404 	movi	r5,656
    2708:	0009883a 	mov	r4,zero
    270c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2710:	01401044 	movi	r5,65
    2714:	0009883a 	mov	r4,zero
    2718:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    271c:	014004c4 	movi	r5,19
    2720:	0009883a 	mov	r4,zero
    2724:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2728:	01414804 	movi	r5,1312
    272c:	0009883a 	mov	r4,zero
    2730:	00019e80 	call	19e8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    2734:	000b883a 	mov	r5,zero
    2738:	0009883a 	mov	r4,zero
    273c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2740:	000b883a 	mov	r5,zero
    2744:	0009883a 	mov	r4,zero
    2748:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    274c:	01408404 	movi	r5,528
    2750:	0009883a 	mov	r4,zero
    2754:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2758:	01401044 	movi	r5,65
    275c:	0009883a 	mov	r4,zero
    2760:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2764:	014004c4 	movi	r5,19
    2768:	0009883a 	mov	r4,zero
    276c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2770:	000b883a 	mov	r5,zero
    2774:	0009883a 	mov	r4,zero
    2778:	00019e80 	call	19e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    277c:	01414004 	movi	r5,1280
    2780:	01006c04 	movi	r4,432
    2784:	0001af00 	call	1af0 <UsbWrite>

}
    2788:	0001883a 	nop
    278c:	e037883a 	mov	sp,fp
    2790:	dfc00117 	ldw	ra,4(sp)
    2794:	df000017 	ldw	fp,0(sp)
    2798:	dec00204 	addi	sp,sp,8
    279c:	f800283a 	ret

000027a0 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    27a0:	defffe04 	addi	sp,sp,-8
    27a4:	dfc00115 	stw	ra,4(sp)
    27a8:	df000015 	stw	fp,0(sp)
    27ac:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    27b0:	01414004 	movi	r5,1280
    27b4:	01000084 	movi	r4,2
    27b8:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x050C);
    27bc:	01414304 	movi	r5,1292
    27c0:	0009883a 	mov	r4,zero
    27c4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    27c8:	01400204 	movi	r5,8
    27cc:	0009883a 	mov	r4,zero
    27d0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    27d4:	0140b404 	movi	r5,720
    27d8:	0009883a 	mov	r4,zero
    27dc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
    27e0:	01400044 	movi	r5,1
    27e4:	0009883a 	mov	r4,zero
    27e8:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
    27ec:	014004c4 	movi	r5,19
    27f0:	0009883a 	mov	r4,zero
    27f4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
    27f8:	01414504 	movi	r5,1300
    27fc:	0009883a 	mov	r4,zero
    2800:	00019e80 	call	19e8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    2804:	0141a044 	movi	r5,1665
    2808:	0009883a 	mov	r4,zero
    280c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    2810:	01488004 	movi	r5,8704
    2814:	0009883a 	mov	r4,zero
    2818:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    281c:	000b883a 	mov	r5,zero
    2820:	0009883a 	mov	r4,zero
    2824:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    2828:	01401ec4 	movi	r5,123
    282c:	0009883a 	mov	r4,zero
    2830:	00019e80 	call	19e8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    2834:	01416004 	movi	r5,1408
    2838:	0009883a 	mov	r4,zero
    283c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2840:	01400204 	movi	r5,8
    2844:	0009883a 	mov	r4,zero
    2848:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    284c:	0140a404 	movi	r5,656
    2850:	0009883a 	mov	r4,zero
    2854:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2858:	01401044 	movi	r5,65
    285c:	0009883a 	mov	r4,zero
    2860:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2864:	014004c4 	movi	r5,19
    2868:	0009883a 	mov	r4,zero
    286c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    2870:	01414804 	movi	r5,1312
    2874:	0009883a 	mov	r4,zero
    2878:	00019e80 	call	19e8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    287c:	01416204 	movi	r5,1416
    2880:	0009883a 	mov	r4,zero
    2884:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    2888:	01400204 	movi	r5,8
    288c:	0009883a 	mov	r4,zero
    2890:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    2894:	0140a404 	movi	r5,656
    2898:	0009883a 	mov	r4,zero
    289c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    28a0:	01400044 	movi	r5,1
    28a4:	0009883a 	mov	r4,zero
    28a8:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    28ac:	014004c4 	movi	r5,19
    28b0:	0009883a 	mov	r4,zero
    28b4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    28b8:	01414b04 	movi	r5,1324
    28bc:	0009883a 	mov	r4,zero
    28c0:	00019e80 	call	19e8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    28c4:	01416404 	movi	r5,1424
    28c8:	0009883a 	mov	r4,zero
    28cc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    28d0:	01400204 	movi	r5,8
    28d4:	0009883a 	mov	r4,zero
    28d8:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    28dc:	0140a404 	movi	r5,656
    28e0:	0009883a 	mov	r4,zero
    28e4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    28e8:	01401044 	movi	r5,65
    28ec:	0009883a 	mov	r4,zero
    28f0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    28f4:	014004c4 	movi	r5,19
    28f8:	0009883a 	mov	r4,zero
    28fc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2900:	01414e04 	movi	r5,1336
    2904:	0009883a 	mov	r4,zero
    2908:	00019e80 	call	19e8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    290c:	01416604 	movi	r5,1432
    2910:	0009883a 	mov	r4,zero
    2914:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2918:	01400204 	movi	r5,8
    291c:	0009883a 	mov	r4,zero
    2920:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2924:	0140a404 	movi	r5,656
    2928:	0009883a 	mov	r4,zero
    292c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2930:	01400044 	movi	r5,1
    2934:	0009883a 	mov	r4,zero
    2938:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    293c:	014004c4 	movi	r5,19
    2940:	0009883a 	mov	r4,zero
    2944:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2948:	01415104 	movi	r5,1348
    294c:	0009883a 	mov	r4,zero
    2950:	00019e80 	call	19e8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    2954:	01416804 	movi	r5,1440
    2958:	0009883a 	mov	r4,zero
    295c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2960:	01400204 	movi	r5,8
    2964:	0009883a 	mov	r4,zero
    2968:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    296c:	0140a404 	movi	r5,656
    2970:	0009883a 	mov	r4,zero
    2974:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2978:	01401044 	movi	r5,65
    297c:	0009883a 	mov	r4,zero
    2980:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2984:	014004c4 	movi	r5,19
    2988:	0009883a 	mov	r4,zero
    298c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    2990:	01415404 	movi	r5,1360
    2994:	0009883a 	mov	r4,zero
    2998:	00019e80 	call	19e8 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    299c:	01416a04 	movi	r5,1448
    29a0:	0009883a 	mov	r4,zero
    29a4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    29a8:	01400204 	movi	r5,8
    29ac:	0009883a 	mov	r4,zero
    29b0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    29b4:	0140a404 	movi	r5,656
    29b8:	0009883a 	mov	r4,zero
    29bc:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    29c0:	01400044 	movi	r5,1
    29c4:	0009883a 	mov	r4,zero
    29c8:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    29cc:	014004c4 	movi	r5,19
    29d0:	0009883a 	mov	r4,zero
    29d4:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    29d8:	01415704 	movi	r5,1372
    29dc:	0009883a 	mov	r4,zero
    29e0:	00019e80 	call	19e8 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    29e4:	01416c04 	movi	r5,1456
    29e8:	0009883a 	mov	r4,zero
    29ec:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    29f0:	01400204 	movi	r5,8
    29f4:	0009883a 	mov	r4,zero
    29f8:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    29fc:	0140a404 	movi	r5,656
    2a00:	0009883a 	mov	r4,zero
    2a04:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    2a08:	01401044 	movi	r5,65
    2a0c:	0009883a 	mov	r4,zero
    2a10:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2a14:	014004c4 	movi	r5,19
    2a18:	0009883a 	mov	r4,zero
    2a1c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    2a20:	01415a04 	movi	r5,1384
    2a24:	0009883a 	mov	r4,zero
    2a28:	00019e80 	call	19e8 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    2a2c:	01416e04 	movi	r5,1464
    2a30:	0009883a 	mov	r4,zero
    2a34:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    2a38:	014000c4 	movi	r5,3
    2a3c:	0009883a 	mov	r4,zero
    2a40:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2a44:	0140a404 	movi	r5,656
    2a48:	0009883a 	mov	r4,zero
    2a4c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2a50:	01400044 	movi	r5,1
    2a54:	0009883a 	mov	r4,zero
    2a58:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    2a5c:	014004c4 	movi	r5,19
    2a60:	0009883a 	mov	r4,zero
    2a64:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    2a68:	01415d04 	movi	r5,1396
    2a6c:	0009883a 	mov	r4,zero
    2a70:	00019e80 	call	19e8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    2a74:	000b883a 	mov	r5,zero
    2a78:	0009883a 	mov	r4,zero
    2a7c:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2a80:	000b883a 	mov	r5,zero
    2a84:	0009883a 	mov	r4,zero
    2a88:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    2a8c:	01408404 	movi	r5,528
    2a90:	0009883a 	mov	r4,zero
    2a94:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    2a98:	01401044 	movi	r5,65
    2a9c:	0009883a 	mov	r4,zero
    2aa0:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    2aa4:	014004c4 	movi	r5,19
    2aa8:	0009883a 	mov	r4,zero
    2aac:	00019e80 	call	19e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    2ab0:	000b883a 	mov	r5,zero
    2ab4:	0009883a 	mov	r4,zero
    2ab8:	00019e80 	call	19e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2abc:	01414004 	movi	r5,1280
    2ac0:	01006c04 	movi	r4,432
    2ac4:	0001af00 	call	1af0 <UsbWrite>

}
    2ac8:	0001883a 	nop
    2acc:	e037883a 	mov	sp,fp
    2ad0:	dfc00117 	ldw	ra,4(sp)
    2ad4:	df000017 	ldw	fp,0(sp)
    2ad8:	dec00204 	addi	sp,sp,8
    2adc:	f800283a 	ret

00002ae0 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    2ae0:	defffd04 	addi	sp,sp,-12
    2ae4:	dfc00215 	stw	ra,8(sp)
    2ae8:	df000115 	stw	fp,4(sp)
    2aec:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    2af0:	01005104 	movi	r4,324
    2af4:	0001b480 	call	1b48 <UsbRead>
    2af8:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2afc:	000b883a 	mov	r5,zero
    2b00:	01005104 	movi	r4,324
    2b04:	0001af00 	call	1af0 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2b08:	00000d06 	br	2b40 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    2b0c:	e0bfff0b 	ldhu	r2,-4(fp)
    2b10:	10000526 	beq	r2,zero,2b28 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    2b14:	e0bfff0b 	ldhu	r2,-4(fp)
    2b18:	100b883a 	mov	r5,r2
    2b1c:	010000b4 	movhi	r4,2
    2b20:	2131db04 	addi	r4,r4,-14484
    2b24:	000e4980 	call	e498 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2b28:	01005104 	movi	r4,324
    2b2c:	0001b480 	call	1b48 <UsbRead>
    2b30:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2b34:	000b883a 	mov	r5,zero
    2b38:	01005104 	movi	r4,324
    2b3c:	0001af00 	call	1af0 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2b40:	e0bfff0b 	ldhu	r2,-4(fp)
    2b44:	10840018 	cmpnei	r2,r2,4096
    2b48:	103ff01e 	bne	r2,zero,2b0c <__alt_data_end+0xf8002b0c>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    2b4c:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2b50:	e037883a 	mov	sp,fp
    2b54:	dfc00117 	ldw	ra,4(sp)
    2b58:	df000017 	ldw	fp,0(sp)
    2b5c:	dec00204 	addi	sp,sp,8
    2b60:	f800283a 	ret

00002b64 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    2b64:	defffd04 	addi	sp,sp,-12
    2b68:	dfc00215 	stw	ra,8(sp)
    2b6c:	df000115 	stw	fp,4(sp)
    2b70:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    2b74:	010000c4 	movi	r4,3
    2b78:	0001a700 	call	1a70 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    2b7c:	01005104 	movi	r4,324
    2b80:	0001b480 	call	1b48 <UsbRead>
    2b84:	10bfffcc 	andi	r2,r2,65535
    2b88:	10840018 	cmpnei	r2,r2,4096
    2b8c:	1000091e 	bne	r2,zero,2bb4 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2b90:	000b883a 	mov	r5,zero
    2b94:	01005104 	movi	r4,324
    2b98:	0001af00 	call	1af0 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2b9c:	0001883a 	nop
    2ba0:	010000c4 	movi	r4,3
    2ba4:	0001a700 	call	1a70 <IO_read>
    2ba8:	10bfffcc 	andi	r2,r2,65535
    2bac:	1080040c 	andi	r2,r2,16
    2bb0:	103ffb26 	beq	r2,zero,2ba0 <__alt_data_end+0xf8002ba0>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
    2bb4:	01414204 	movi	r5,1288
    2bb8:	01000084 	movi	r4,2
    2bbc:	00019e80 	call	19e8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    2bc0:	0009883a 	mov	r4,zero
    2bc4:	0001a700 	call	1a70 <IO_read>
    2bc8:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    2bcc:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2bd0:	e037883a 	mov	sp,fp
    2bd4:	dfc00117 	ldw	ra,4(sp)
    2bd8:	df000017 	ldw	fp,0(sp)
    2bdc:	dec00204 	addi	sp,sp,8
    2be0:	f800283a 	ret

00002be4 <UsbPrintMem>:


void UsbPrintMem()
{
    2be4:	defffc04 	addi	sp,sp,-16
    2be8:	dfc00315 	stw	ra,12(sp)
    2bec:	df000215 	stw	fp,8(sp)
    2bf0:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    2bf4:	01414004 	movi	r5,1280
    2bf8:	01000084 	movi	r4,2
    2bfc:	00019e80 	call	19e8 <IO_write>
	for (i = 0; i <= 200; i += 2)
    2c00:	e03ffe15 	stw	zero,-8(fp)
    2c04:	00000e06 	br	2c40 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    2c08:	0009883a 	mov	r4,zero
    2c0c:	0001a700 	call	1a70 <IO_read>
    2c10:	10bfffcc 	andi	r2,r2,65535
    2c14:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    2c18:	e0bffe17 	ldw	r2,-8(fp)
    2c1c:	10814004 	addi	r2,r2,1280
    2c20:	e1bfff17 	ldw	r6,-4(fp)
    2c24:	100b883a 	mov	r5,r2
    2c28:	010000b4 	movhi	r4,2
    2c2c:	2131e304 	addi	r4,r4,-14452
    2c30:	000e4980 	call	e498 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    2c34:	e0bffe17 	ldw	r2,-8(fp)
    2c38:	10800084 	addi	r2,r2,2
    2c3c:	e0bffe15 	stw	r2,-8(fp)
    2c40:	e0bffe17 	ldw	r2,-8(fp)
    2c44:	10803250 	cmplti	r2,r2,201
    2c48:	103fef1e 	bne	r2,zero,2c08 <__alt_data_end+0xf8002c08>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    2c4c:	0001883a 	nop
    2c50:	e037883a 	mov	sp,fp
    2c54:	dfc00117 	ldw	ra,4(sp)
    2c58:	df000017 	ldw	fp,0(sp)
    2c5c:	dec00204 	addi	sp,sp,8
    2c60:	f800283a 	ret

00002c64 <changeBackVolume>:
volatile unsigned int* Back_Vol_ptr = (unsigned int*)0x08000080;
volatile unsigned int* Bomb_Vol_ptr = (unsigned int*)0x080000a0;
volatile unsigned int* Bomb_Act_ptr = (unsigned int*)0x08000090;
volatile unsigned int* Audio_Sel_ptr = (unsigned int*)0x080000c0;

void changeBackVolume(unsigned int vol){
    2c64:	defffd04 	addi	sp,sp,-12
    2c68:	dfc00215 	stw	ra,8(sp)
    2c6c:	df000115 	stw	fp,4(sp)
    2c70:	df000104 	addi	fp,sp,4
    2c74:	e13fff15 	stw	r4,-4(fp)

	if (vol >= 8)
    2c78:	e0bfff17 	ldw	r2,-4(fp)
    2c7c:	10800230 	cmpltui	r2,r2,8
    2c80:	1000041e 	bne	r2,zero,2c94 <changeBackVolume+0x30>
		printf("need a integer between 0-8");
    2c84:	010000b4 	movhi	r4,2
    2c88:	2131e804 	addi	r4,r4,-14432
    2c8c:	000e4980 	call	e498 <printf>
	else
		*Back_Vol_ptr = vol;

}
    2c90:	00000306 	br	2ca0 <changeBackVolume+0x3c>
void changeBackVolume(unsigned int vol){

	if (vol >= 8)
		printf("need a integer between 0-8");
	else
		*Back_Vol_ptr = vol;
    2c94:	d0a00017 	ldw	r2,-32768(gp)
    2c98:	e0ffff17 	ldw	r3,-4(fp)
    2c9c:	10c00015 	stw	r3,0(r2)

}
    2ca0:	0001883a 	nop
    2ca4:	e037883a 	mov	sp,fp
    2ca8:	dfc00117 	ldw	ra,4(sp)
    2cac:	df000017 	ldw	fp,0(sp)
    2cb0:	dec00204 	addi	sp,sp,8
    2cb4:	f800283a 	ret

00002cb8 <changeBombVolume>:

void changeBombVolume(unsigned int vol){
    2cb8:	defffd04 	addi	sp,sp,-12
    2cbc:	dfc00215 	stw	ra,8(sp)
    2cc0:	df000115 	stw	fp,4(sp)
    2cc4:	df000104 	addi	fp,sp,4
    2cc8:	e13fff15 	stw	r4,-4(fp)

	if (vol >= 8)
    2ccc:	e0bfff17 	ldw	r2,-4(fp)
    2cd0:	10800230 	cmpltui	r2,r2,8
    2cd4:	1000041e 	bne	r2,zero,2ce8 <changeBombVolume+0x30>
		printf("need a integer between 0-8");
    2cd8:	010000b4 	movhi	r4,2
    2cdc:	2131e804 	addi	r4,r4,-14432
    2ce0:	000e4980 	call	e498 <printf>
	else
		*Bomb_Vol_ptr = vol;

}
    2ce4:	00000306 	br	2cf4 <changeBombVolume+0x3c>
void changeBombVolume(unsigned int vol){

	if (vol >= 8)
		printf("need a integer between 0-8");
	else
		*Bomb_Vol_ptr = vol;
    2ce8:	d0a00117 	ldw	r2,-32764(gp)
    2cec:	e0ffff17 	ldw	r3,-4(fp)
    2cf0:	10c00015 	stw	r3,0(r2)

}
    2cf4:	0001883a 	nop
    2cf8:	e037883a 	mov	sp,fp
    2cfc:	dfc00117 	ldw	ra,4(sp)
    2d00:	df000017 	ldw	fp,0(sp)
    2d04:	dec00204 	addi	sp,sp,8
    2d08:	f800283a 	ret

00002d0c <Audio_init>:


void Audio_init(){
    2d0c:	defffe04 	addi	sp,sp,-8
    2d10:	dfc00115 	stw	ra,4(sp)
    2d14:	df000015 	stw	fp,0(sp)
    2d18:	d839883a 	mov	fp,sp

	changeBackVolume(0);
    2d1c:	0009883a 	mov	r4,zero
    2d20:	0002c640 	call	2c64 <changeBackVolume>
	changeBombVolume(3);
    2d24:	010000c4 	movi	r4,3
    2d28:	0002cb80 	call	2cb8 <changeBombVolume>
	*Bomb_Act_ptr = 0;
    2d2c:	d0a00217 	ldw	r2,-32760(gp)
    2d30:	10000015 	stw	zero,0(r2)
	Audio_Select('o');
    2d34:	01001bc4 	movi	r4,111
    2d38:	0002d880 	call	2d88 <Audio_Select>

}
    2d3c:	0001883a 	nop
    2d40:	e037883a 	mov	sp,fp
    2d44:	dfc00117 	ldw	ra,4(sp)
    2d48:	df000017 	ldw	fp,0(sp)
    2d4c:	dec00204 	addi	sp,sp,8
    2d50:	f800283a 	ret

00002d54 <Bomb>:

void Bomb(){
    2d54:	deffff04 	addi	sp,sp,-4
    2d58:	df000015 	stw	fp,0(sp)
    2d5c:	d839883a 	mov	fp,sp
	*Bomb_Act_ptr = 1;
    2d60:	d0a00217 	ldw	r2,-32760(gp)
    2d64:	00c00044 	movi	r3,1
    2d68:	10c00015 	stw	r3,0(r2)
	*Bomb_Act_ptr = 0;
    2d6c:	d0a00217 	ldw	r2,-32760(gp)
    2d70:	10000015 	stw	zero,0(r2)
}
    2d74:	0001883a 	nop
    2d78:	e037883a 	mov	sp,fp
    2d7c:	df000017 	ldw	fp,0(sp)
    2d80:	dec00104 	addi	sp,sp,4
    2d84:	f800283a 	ret

00002d88 <Audio_Select>:

void Audio_Select(char i){
    2d88:	defffe04 	addi	sp,sp,-8
    2d8c:	df000115 	stw	fp,4(sp)
    2d90:	df000104 	addi	fp,sp,4
    2d94:	2005883a 	mov	r2,r4
    2d98:	e0bfff05 	stb	r2,-4(fp)

	switch(i){
    2d9c:	e0bfff07 	ldb	r2,-4(fp)
    2da0:	10c017e0 	cmpeqi	r3,r2,95
    2da4:	1800191e 	bne	r3,zero,2e0c <Audio_Select+0x84>
    2da8:	10c01808 	cmpgei	r3,r2,96
    2dac:	1800051e 	bne	r3,zero,2dc4 <Audio_Select+0x3c>
    2db0:	10c00c60 	cmpeqi	r3,r2,49
    2db4:	18000e1e 	bne	r3,zero,2df0 <Audio_Select+0x68>
    2db8:	10800ca0 	cmpeqi	r2,r2,50
    2dbc:	1000171e 	bne	r2,zero,2e1c <Audio_Select+0x94>
		case 'w': *Audio_Sel_ptr = 4; *Audio_Sel_ptr = 5; break;			//Winner Music
	}



}
    2dc0:	00002106 	br	2e48 <Audio_Select+0xc0>
	*Bomb_Act_ptr = 0;
}

void Audio_Select(char i){

	switch(i){
    2dc4:	10c01be0 	cmpeqi	r3,r2,111
    2dc8:	1800031e 	bne	r3,zero,2dd8 <Audio_Select+0x50>
    2dcc:	10801de0 	cmpeqi	r2,r2,119
    2dd0:	1000161e 	bne	r2,zero,2e2c <Audio_Select+0xa4>
		case 'w': *Audio_Sel_ptr = 4; *Audio_Sel_ptr = 5; break;			//Winner Music
	}



}
    2dd4:	00001c06 	br	2e48 <Audio_Select+0xc0>

void Audio_Select(char i){

	switch(i){

		case 'o': *Audio_Sel_ptr = 0; *Audio_Sel_ptr = 5; break;			//OP //A
    2dd8:	d0a00317 	ldw	r2,-32756(gp)
    2ddc:	10000015 	stw	zero,0(r2)
    2de0:	d0a00317 	ldw	r2,-32756(gp)
    2de4:	00c00144 	movi	r3,5
    2de8:	10c00015 	stw	r3,0(r2)
    2dec:	00001606 	br	2e48 <Audio_Select+0xc0>
		case '1': *Audio_Sel_ptr = 1; *Audio_Sel_ptr = 7;break;			//Game0	//A
    2df0:	d0a00317 	ldw	r2,-32756(gp)
    2df4:	00c00044 	movi	r3,1
    2df8:	10c00015 	stw	r3,0(r2)
    2dfc:	d0a00317 	ldw	r2,-32756(gp)
    2e00:	00c001c4 	movi	r3,7
    2e04:	10c00015 	stw	r3,0(r2)
    2e08:	00000f06 	br	2e48 <Audio_Select+0xc0>
		case '_': *Audio_Sel_ptr = 2; break;			//Game0 to Game1 Transition
    2e0c:	d0a00317 	ldw	r2,-32756(gp)
    2e10:	00c00084 	movi	r3,2
    2e14:	10c00015 	stw	r3,0(r2)
    2e18:	00000b06 	br	2e48 <Audio_Select+0xc0>
		case '2': *Audio_Sel_ptr = 2; break;			//Game1
    2e1c:	d0a00317 	ldw	r2,-32756(gp)
    2e20:	00c00084 	movi	r3,2
    2e24:	10c00015 	stw	r3,0(r2)
    2e28:	00000706 	br	2e48 <Audio_Select+0xc0>
		case 'w': *Audio_Sel_ptr = 4; *Audio_Sel_ptr = 5; break;			//Winner Music
    2e2c:	d0a00317 	ldw	r2,-32756(gp)
    2e30:	00c00104 	movi	r3,4
    2e34:	10c00015 	stw	r3,0(r2)
    2e38:	d0a00317 	ldw	r2,-32756(gp)
    2e3c:	00c00144 	movi	r3,5
    2e40:	10c00015 	stw	r3,0(r2)
    2e44:	0001883a 	nop
	}



}
    2e48:	0001883a 	nop
    2e4c:	e037883a 	mov	sp,fp
    2e50:	df000017 	ldw	fp,0(sp)
    2e54:	dec00104 	addi	sp,sp,4
    2e58:	f800283a 	ret

00002e5c <deleteCoins>:
#include "./header_file/coins.h"

void deleteCoins(unsigned short int X, unsigned short int Y, cellXY **head, cellXY **tail, cell ***stage){
    2e5c:	defff704 	addi	sp,sp,-36
    2e60:	dfc00815 	stw	ra,32(sp)
    2e64:	df000715 	stw	fp,28(sp)
    2e68:	df000704 	addi	fp,sp,28
    2e6c:	2007883a 	mov	r3,r4
    2e70:	2805883a 	mov	r2,r5
    2e74:	e1bffe15 	stw	r6,-8(fp)
    2e78:	e1ffff15 	stw	r7,-4(fp)
    2e7c:	e0fffc0d 	sth	r3,-16(fp)
    2e80:	e0bffd0d 	sth	r2,-12(fp)
	if(*head==NULL){return;}
    2e84:	e0bffe17 	ldw	r2,-8(fp)
    2e88:	10800017 	ldw	r2,0(r2)
    2e8c:	10005726 	beq	r2,zero,2fec <deleteCoins+0x190>
	(*stage)[X][Y].type = 0;
    2e90:	e0800217 	ldw	r2,8(fp)
    2e94:	10c00017 	ldw	r3,0(r2)
    2e98:	e0bffc0b 	ldhu	r2,-16(fp)
    2e9c:	1085883a 	add	r2,r2,r2
    2ea0:	1085883a 	add	r2,r2,r2
    2ea4:	1885883a 	add	r2,r3,r2
    2ea8:	10c00017 	ldw	r3,0(r2)
    2eac:	e0bffd0b 	ldhu	r2,-12(fp)
    2eb0:	100490fa 	slli	r2,r2,3
    2eb4:	1885883a 	add	r2,r3,r2
    2eb8:	1000000d 	sth	zero,0(r2)
	if((*head)->X==X && (*head)->Y==Y){
    2ebc:	e0bffe17 	ldw	r2,-8(fp)
    2ec0:	10800017 	ldw	r2,0(r2)
    2ec4:	1080000b 	ldhu	r2,0(r2)
    2ec8:	10ffffcc 	andi	r3,r2,65535
    2ecc:	e0bffc0b 	ldhu	r2,-16(fp)
    2ed0:	18801a1e 	bne	r3,r2,2f3c <deleteCoins+0xe0>
    2ed4:	e0bffe17 	ldw	r2,-8(fp)
    2ed8:	10800017 	ldw	r2,0(r2)
    2edc:	1080008b 	ldhu	r2,2(r2)
    2ee0:	10ffffcc 	andi	r3,r2,65535
    2ee4:	e0bffd0b 	ldhu	r2,-12(fp)
    2ee8:	1880141e 	bne	r3,r2,2f3c <deleteCoins+0xe0>
		cellXY *temp = *head;
    2eec:	e0bffe17 	ldw	r2,-8(fp)
    2ef0:	10800017 	ldw	r2,0(r2)
    2ef4:	e0bffb15 	stw	r2,-20(fp)
		*head = (*head)->next;
    2ef8:	e0bffe17 	ldw	r2,-8(fp)
    2efc:	10800017 	ldw	r2,0(r2)
    2f00:	10c00217 	ldw	r3,8(r2)
    2f04:	e0bffe17 	ldw	r2,-8(fp)
    2f08:	10c00015 	stw	r3,0(r2)
		free(temp);
    2f0c:	e13ffb17 	ldw	r4,-20(fp)
    2f10:	000dc480 	call	dc48 <free>
		if(*head == NULL){*tail = NULL;}
    2f14:	e0bffe17 	ldw	r2,-8(fp)
    2f18:	10800017 	ldw	r2,0(r2)
    2f1c:	1000031e 	bne	r2,zero,2f2c <deleteCoins+0xd0>
    2f20:	e0bfff17 	ldw	r2,-4(fp)
    2f24:	10000015 	stw	zero,0(r2)
#include "./header_file/coins.h"

void deleteCoins(unsigned short int X, unsigned short int Y, cellXY **head, cellXY **tail, cell ***stage){
	if(*head==NULL){return;}
	(*stage)[X][Y].type = 0;
	if((*head)->X==X && (*head)->Y==Y){
    2f28:	00002a06 	br	2fd4 <deleteCoins+0x178>
		cellXY *temp = *head;
		*head = (*head)->next;
		free(temp);
		if(*head == NULL){*tail = NULL;}
		else{
			(*head)->prev = NULL;
    2f2c:	e0bffe17 	ldw	r2,-8(fp)
    2f30:	10800017 	ldw	r2,0(r2)
    2f34:	10000115 	stw	zero,4(r2)
#include "./header_file/coins.h"

void deleteCoins(unsigned short int X, unsigned short int Y, cellXY **head, cellXY **tail, cell ***stage){
	if(*head==NULL){return;}
	(*stage)[X][Y].type = 0;
	if((*head)->X==X && (*head)->Y==Y){
    2f38:	00002606 	br	2fd4 <deleteCoins+0x178>
		else{
			(*head)->prev = NULL;
		}
	}
	else{
		cellXY *pre = *head;
    2f3c:	e0bffe17 	ldw	r2,-8(fp)
    2f40:	10800017 	ldw	r2,0(r2)
    2f44:	e0bff915 	stw	r2,-28(fp)
		cellXY *nxt = (*head)->next;
    2f48:	e0bffe17 	ldw	r2,-8(fp)
    2f4c:	10800017 	ldw	r2,0(r2)
    2f50:	10800217 	ldw	r2,8(r2)
    2f54:	e0bffa15 	stw	r2,-24(fp)
        while(nxt){
    2f58:	00001c06 	br	2fcc <deleteCoins+0x170>
        	if(nxt->X == X && nxt->Y == Y){
    2f5c:	e0bffa17 	ldw	r2,-24(fp)
    2f60:	1080000b 	ldhu	r2,0(r2)
    2f64:	10ffffcc 	andi	r3,r2,65535
    2f68:	e0bffc0b 	ldhu	r2,-16(fp)
    2f6c:	1880121e 	bne	r3,r2,2fb8 <deleteCoins+0x15c>
    2f70:	e0bffa17 	ldw	r2,-24(fp)
    2f74:	1080008b 	ldhu	r2,2(r2)
    2f78:	10ffffcc 	andi	r3,r2,65535
    2f7c:	e0bffd0b 	ldhu	r2,-12(fp)
    2f80:	18800d1e 	bne	r3,r2,2fb8 <deleteCoins+0x15c>
        		pre->next = nxt->next;
    2f84:	e0bffa17 	ldw	r2,-24(fp)
    2f88:	10c00217 	ldw	r3,8(r2)
    2f8c:	e0bff917 	ldw	r2,-28(fp)
    2f90:	10c00215 	stw	r3,8(r2)
                if(pre->next){
    2f94:	e0bff917 	ldw	r2,-28(fp)
    2f98:	10800217 	ldw	r2,8(r2)
    2f9c:	10000426 	beq	r2,zero,2fb0 <deleteCoins+0x154>
                	pre->next->prev = pre;
    2fa0:	e0bff917 	ldw	r2,-28(fp)
    2fa4:	10800217 	ldw	r2,8(r2)
    2fa8:	e0fff917 	ldw	r3,-28(fp)
    2fac:	10c00115 	stw	r3,4(r2)
                }
                free(nxt);
    2fb0:	e13ffa17 	ldw	r4,-24(fp)
    2fb4:	000dc480 	call	dc48 <free>
        	}
        	pre = nxt;
    2fb8:	e0bffa17 	ldw	r2,-24(fp)
    2fbc:	e0bff915 	stw	r2,-28(fp)
        	nxt = nxt->next;
    2fc0:	e0bffa17 	ldw	r2,-24(fp)
    2fc4:	10800217 	ldw	r2,8(r2)
    2fc8:	e0bffa15 	stw	r2,-24(fp)
		}
	}
	else{
		cellXY *pre = *head;
		cellXY *nxt = (*head)->next;
        while(nxt){
    2fcc:	e0bffa17 	ldw	r2,-24(fp)
    2fd0:	103fe21e 	bne	r2,zero,2f5c <__alt_data_end+0xf8002f5c>
        	pre = nxt;
        	nxt = nxt->next;
        }

	}
	cleanCoin(X,Y);
    2fd4:	e0bffc0b 	ldhu	r2,-16(fp)
    2fd8:	e0fffd0b 	ldhu	r3,-12(fp)
    2fdc:	180b883a 	mov	r5,r3
    2fe0:	1009883a 	mov	r4,r2
    2fe4:	000814c0 	call	814c <cleanCoin>
    2fe8:	00000106 	br	2ff0 <deleteCoins+0x194>
#include "./header_file/coins.h"

void deleteCoins(unsigned short int X, unsigned short int Y, cellXY **head, cellXY **tail, cell ***stage){
	if(*head==NULL){return;}
    2fec:	0001883a 	nop
        	nxt = nxt->next;
        }

	}
	cleanCoin(X,Y);
}
    2ff0:	e037883a 	mov	sp,fp
    2ff4:	dfc00117 	ldw	ra,4(sp)
    2ff8:	df000017 	ldw	fp,0(sp)
    2ffc:	dec00204 	addi	sp,sp,8
    3000:	f800283a 	ret

00003004 <getCoins>:


unsigned int getCoins(unsigned short int x, unsigned short int y, cellXY **head, cellXY **tail, cell ***stage){
    3004:	defff704 	addi	sp,sp,-36
    3008:	dfc00815 	stw	ra,32(sp)
    300c:	df000715 	stw	fp,28(sp)
    3010:	df000704 	addi	fp,sp,28
    3014:	2007883a 	mov	r3,r4
    3018:	2805883a 	mov	r2,r5
    301c:	e1bffe15 	stw	r6,-8(fp)
    3020:	e1ffff15 	stw	r7,-4(fp)
    3024:	e0fffc0d 	sth	r3,-16(fp)
    3028:	e0bffd0d 	sth	r2,-12(fp)
	short int Ax0 = (short int)x;
    302c:	e0bffc0b 	ldhu	r2,-16(fp)
    3030:	e0bffa0d 	sth	r2,-24(fp)
	short int Ay0 = (short int)y;
    3034:	e0bffd0b 	ldhu	r2,-12(fp)
    3038:	e0bffa8d 	sth	r2,-22(fp)
	short int Ax1 = (short int)x+25;
    303c:	e0bffc0b 	ldhu	r2,-16(fp)
    3040:	10800644 	addi	r2,r2,25
    3044:	e0bffb0d 	sth	r2,-20(fp)
	short int Ay1 = (short int)y+25;
    3048:	e0bffd0b 	ldhu	r2,-12(fp)
    304c:	10800644 	addi	r2,r2,25
    3050:	e0bffb8d 	sth	r2,-18(fp)

	if((*stage)[Ax0/32][Ay0/32].type==6){(*stage)[Ax0/32][Ay0/32].type = 0;deleteCoins(Ax0/32, Ay0/32, head, tail, stage);return 1;}
    3054:	e0800217 	ldw	r2,8(fp)
    3058:	10c00017 	ldw	r3,0(r2)
    305c:	e0bffa0f 	ldh	r2,-24(fp)
    3060:	1000010e 	bge	r2,zero,3068 <getCoins+0x64>
    3064:	108007c4 	addi	r2,r2,31
    3068:	1005d17a 	srai	r2,r2,5
    306c:	10bfffcc 	andi	r2,r2,65535
    3070:	10a0001c 	xori	r2,r2,32768
    3074:	10a00004 	addi	r2,r2,-32768
    3078:	1085883a 	add	r2,r2,r2
    307c:	1085883a 	add	r2,r2,r2
    3080:	1885883a 	add	r2,r3,r2
    3084:	10c00017 	ldw	r3,0(r2)
    3088:	e0bffa8f 	ldh	r2,-22(fp)
    308c:	1000010e 	bge	r2,zero,3094 <getCoins+0x90>
    3090:	108007c4 	addi	r2,r2,31
    3094:	1005d17a 	srai	r2,r2,5
    3098:	10bfffcc 	andi	r2,r2,65535
    309c:	10a0001c 	xori	r2,r2,32768
    30a0:	10a00004 	addi	r2,r2,-32768
    30a4:	100490fa 	slli	r2,r2,3
    30a8:	1885883a 	add	r2,r3,r2
    30ac:	1080000b 	ldhu	r2,0(r2)
    30b0:	10bfffcc 	andi	r2,r2,65535
    30b4:	10800198 	cmpnei	r2,r2,6
    30b8:	10002a1e 	bne	r2,zero,3164 <getCoins+0x160>
    30bc:	e0800217 	ldw	r2,8(fp)
    30c0:	10c00017 	ldw	r3,0(r2)
    30c4:	e0bffa0f 	ldh	r2,-24(fp)
    30c8:	1000010e 	bge	r2,zero,30d0 <getCoins+0xcc>
    30cc:	108007c4 	addi	r2,r2,31
    30d0:	1005d17a 	srai	r2,r2,5
    30d4:	10bfffcc 	andi	r2,r2,65535
    30d8:	10a0001c 	xori	r2,r2,32768
    30dc:	10a00004 	addi	r2,r2,-32768
    30e0:	1085883a 	add	r2,r2,r2
    30e4:	1085883a 	add	r2,r2,r2
    30e8:	1885883a 	add	r2,r3,r2
    30ec:	10c00017 	ldw	r3,0(r2)
    30f0:	e0bffa8f 	ldh	r2,-22(fp)
    30f4:	1000010e 	bge	r2,zero,30fc <getCoins+0xf8>
    30f8:	108007c4 	addi	r2,r2,31
    30fc:	1005d17a 	srai	r2,r2,5
    3100:	10bfffcc 	andi	r2,r2,65535
    3104:	10a0001c 	xori	r2,r2,32768
    3108:	10a00004 	addi	r2,r2,-32768
    310c:	100490fa 	slli	r2,r2,3
    3110:	1885883a 	add	r2,r3,r2
    3114:	1000000d 	sth	zero,0(r2)
    3118:	e0bffa0f 	ldh	r2,-24(fp)
    311c:	1000010e 	bge	r2,zero,3124 <getCoins+0x120>
    3120:	108007c4 	addi	r2,r2,31
    3124:	1005d17a 	srai	r2,r2,5
    3128:	10ffffcc 	andi	r3,r2,65535
    312c:	e0bffa8f 	ldh	r2,-22(fp)
    3130:	1000010e 	bge	r2,zero,3138 <getCoins+0x134>
    3134:	108007c4 	addi	r2,r2,31
    3138:	1005d17a 	srai	r2,r2,5
    313c:	113fffcc 	andi	r4,r2,65535
    3140:	e0800217 	ldw	r2,8(fp)
    3144:	d8800015 	stw	r2,0(sp)
    3148:	e1ffff17 	ldw	r7,-4(fp)
    314c:	e1bffe17 	ldw	r6,-8(fp)
    3150:	200b883a 	mov	r5,r4
    3154:	1809883a 	mov	r4,r3
    3158:	0002e5c0 	call	2e5c <deleteCoins>
    315c:	00800044 	movi	r2,1
    3160:	0000cd06 	br	3498 <getCoins+0x494>
	if((*stage)[Ax0/32][Ay1/32].type==6){(*stage)[Ax0/32][Ay1/32].type = 0;deleteCoins(Ax0/32, Ay1/32, head, tail, stage);return 1;}
    3164:	e0800217 	ldw	r2,8(fp)
    3168:	10c00017 	ldw	r3,0(r2)
    316c:	e0bffa0f 	ldh	r2,-24(fp)
    3170:	1000010e 	bge	r2,zero,3178 <getCoins+0x174>
    3174:	108007c4 	addi	r2,r2,31
    3178:	1005d17a 	srai	r2,r2,5
    317c:	10bfffcc 	andi	r2,r2,65535
    3180:	10a0001c 	xori	r2,r2,32768
    3184:	10a00004 	addi	r2,r2,-32768
    3188:	1085883a 	add	r2,r2,r2
    318c:	1085883a 	add	r2,r2,r2
    3190:	1885883a 	add	r2,r3,r2
    3194:	10c00017 	ldw	r3,0(r2)
    3198:	e0bffb8f 	ldh	r2,-18(fp)
    319c:	1000010e 	bge	r2,zero,31a4 <getCoins+0x1a0>
    31a0:	108007c4 	addi	r2,r2,31
    31a4:	1005d17a 	srai	r2,r2,5
    31a8:	10bfffcc 	andi	r2,r2,65535
    31ac:	10a0001c 	xori	r2,r2,32768
    31b0:	10a00004 	addi	r2,r2,-32768
    31b4:	100490fa 	slli	r2,r2,3
    31b8:	1885883a 	add	r2,r3,r2
    31bc:	1080000b 	ldhu	r2,0(r2)
    31c0:	10bfffcc 	andi	r2,r2,65535
    31c4:	10800198 	cmpnei	r2,r2,6
    31c8:	10002a1e 	bne	r2,zero,3274 <getCoins+0x270>
    31cc:	e0800217 	ldw	r2,8(fp)
    31d0:	10c00017 	ldw	r3,0(r2)
    31d4:	e0bffa0f 	ldh	r2,-24(fp)
    31d8:	1000010e 	bge	r2,zero,31e0 <getCoins+0x1dc>
    31dc:	108007c4 	addi	r2,r2,31
    31e0:	1005d17a 	srai	r2,r2,5
    31e4:	10bfffcc 	andi	r2,r2,65535
    31e8:	10a0001c 	xori	r2,r2,32768
    31ec:	10a00004 	addi	r2,r2,-32768
    31f0:	1085883a 	add	r2,r2,r2
    31f4:	1085883a 	add	r2,r2,r2
    31f8:	1885883a 	add	r2,r3,r2
    31fc:	10c00017 	ldw	r3,0(r2)
    3200:	e0bffb8f 	ldh	r2,-18(fp)
    3204:	1000010e 	bge	r2,zero,320c <getCoins+0x208>
    3208:	108007c4 	addi	r2,r2,31
    320c:	1005d17a 	srai	r2,r2,5
    3210:	10bfffcc 	andi	r2,r2,65535
    3214:	10a0001c 	xori	r2,r2,32768
    3218:	10a00004 	addi	r2,r2,-32768
    321c:	100490fa 	slli	r2,r2,3
    3220:	1885883a 	add	r2,r3,r2
    3224:	1000000d 	sth	zero,0(r2)
    3228:	e0bffa0f 	ldh	r2,-24(fp)
    322c:	1000010e 	bge	r2,zero,3234 <getCoins+0x230>
    3230:	108007c4 	addi	r2,r2,31
    3234:	1005d17a 	srai	r2,r2,5
    3238:	10ffffcc 	andi	r3,r2,65535
    323c:	e0bffb8f 	ldh	r2,-18(fp)
    3240:	1000010e 	bge	r2,zero,3248 <getCoins+0x244>
    3244:	108007c4 	addi	r2,r2,31
    3248:	1005d17a 	srai	r2,r2,5
    324c:	113fffcc 	andi	r4,r2,65535
    3250:	e0800217 	ldw	r2,8(fp)
    3254:	d8800015 	stw	r2,0(sp)
    3258:	e1ffff17 	ldw	r7,-4(fp)
    325c:	e1bffe17 	ldw	r6,-8(fp)
    3260:	200b883a 	mov	r5,r4
    3264:	1809883a 	mov	r4,r3
    3268:	0002e5c0 	call	2e5c <deleteCoins>
    326c:	00800044 	movi	r2,1
    3270:	00008906 	br	3498 <getCoins+0x494>
	if((*stage)[Ax1/32][Ay0/32].type==6){(*stage)[Ax1/32][Ay0/32].type = 0;deleteCoins(Ax1/32, Ay0/32, head, tail, stage);return 1;}
    3274:	e0800217 	ldw	r2,8(fp)
    3278:	10c00017 	ldw	r3,0(r2)
    327c:	e0bffb0f 	ldh	r2,-20(fp)
    3280:	1000010e 	bge	r2,zero,3288 <getCoins+0x284>
    3284:	108007c4 	addi	r2,r2,31
    3288:	1005d17a 	srai	r2,r2,5
    328c:	10bfffcc 	andi	r2,r2,65535
    3290:	10a0001c 	xori	r2,r2,32768
    3294:	10a00004 	addi	r2,r2,-32768
    3298:	1085883a 	add	r2,r2,r2
    329c:	1085883a 	add	r2,r2,r2
    32a0:	1885883a 	add	r2,r3,r2
    32a4:	10c00017 	ldw	r3,0(r2)
    32a8:	e0bffa8f 	ldh	r2,-22(fp)
    32ac:	1000010e 	bge	r2,zero,32b4 <getCoins+0x2b0>
    32b0:	108007c4 	addi	r2,r2,31
    32b4:	1005d17a 	srai	r2,r2,5
    32b8:	10bfffcc 	andi	r2,r2,65535
    32bc:	10a0001c 	xori	r2,r2,32768
    32c0:	10a00004 	addi	r2,r2,-32768
    32c4:	100490fa 	slli	r2,r2,3
    32c8:	1885883a 	add	r2,r3,r2
    32cc:	1080000b 	ldhu	r2,0(r2)
    32d0:	10bfffcc 	andi	r2,r2,65535
    32d4:	10800198 	cmpnei	r2,r2,6
    32d8:	10002a1e 	bne	r2,zero,3384 <getCoins+0x380>
    32dc:	e0800217 	ldw	r2,8(fp)
    32e0:	10c00017 	ldw	r3,0(r2)
    32e4:	e0bffb0f 	ldh	r2,-20(fp)
    32e8:	1000010e 	bge	r2,zero,32f0 <getCoins+0x2ec>
    32ec:	108007c4 	addi	r2,r2,31
    32f0:	1005d17a 	srai	r2,r2,5
    32f4:	10bfffcc 	andi	r2,r2,65535
    32f8:	10a0001c 	xori	r2,r2,32768
    32fc:	10a00004 	addi	r2,r2,-32768
    3300:	1085883a 	add	r2,r2,r2
    3304:	1085883a 	add	r2,r2,r2
    3308:	1885883a 	add	r2,r3,r2
    330c:	10c00017 	ldw	r3,0(r2)
    3310:	e0bffa8f 	ldh	r2,-22(fp)
    3314:	1000010e 	bge	r2,zero,331c <getCoins+0x318>
    3318:	108007c4 	addi	r2,r2,31
    331c:	1005d17a 	srai	r2,r2,5
    3320:	10bfffcc 	andi	r2,r2,65535
    3324:	10a0001c 	xori	r2,r2,32768
    3328:	10a00004 	addi	r2,r2,-32768
    332c:	100490fa 	slli	r2,r2,3
    3330:	1885883a 	add	r2,r3,r2
    3334:	1000000d 	sth	zero,0(r2)
    3338:	e0bffb0f 	ldh	r2,-20(fp)
    333c:	1000010e 	bge	r2,zero,3344 <getCoins+0x340>
    3340:	108007c4 	addi	r2,r2,31
    3344:	1005d17a 	srai	r2,r2,5
    3348:	10ffffcc 	andi	r3,r2,65535
    334c:	e0bffa8f 	ldh	r2,-22(fp)
    3350:	1000010e 	bge	r2,zero,3358 <getCoins+0x354>
    3354:	108007c4 	addi	r2,r2,31
    3358:	1005d17a 	srai	r2,r2,5
    335c:	113fffcc 	andi	r4,r2,65535
    3360:	e0800217 	ldw	r2,8(fp)
    3364:	d8800015 	stw	r2,0(sp)
    3368:	e1ffff17 	ldw	r7,-4(fp)
    336c:	e1bffe17 	ldw	r6,-8(fp)
    3370:	200b883a 	mov	r5,r4
    3374:	1809883a 	mov	r4,r3
    3378:	0002e5c0 	call	2e5c <deleteCoins>
    337c:	00800044 	movi	r2,1
    3380:	00004506 	br	3498 <getCoins+0x494>
	if((*stage)[Ax1/32][Ay1/32].type==6){(*stage)[Ax1/32][Ay1/32].type = 0;deleteCoins(Ax1/32, Ay1/32, head, tail, stage);return 1;}
    3384:	e0800217 	ldw	r2,8(fp)
    3388:	10c00017 	ldw	r3,0(r2)
    338c:	e0bffb0f 	ldh	r2,-20(fp)
    3390:	1000010e 	bge	r2,zero,3398 <getCoins+0x394>
    3394:	108007c4 	addi	r2,r2,31
    3398:	1005d17a 	srai	r2,r2,5
    339c:	10bfffcc 	andi	r2,r2,65535
    33a0:	10a0001c 	xori	r2,r2,32768
    33a4:	10a00004 	addi	r2,r2,-32768
    33a8:	1085883a 	add	r2,r2,r2
    33ac:	1085883a 	add	r2,r2,r2
    33b0:	1885883a 	add	r2,r3,r2
    33b4:	10c00017 	ldw	r3,0(r2)
    33b8:	e0bffb8f 	ldh	r2,-18(fp)
    33bc:	1000010e 	bge	r2,zero,33c4 <getCoins+0x3c0>
    33c0:	108007c4 	addi	r2,r2,31
    33c4:	1005d17a 	srai	r2,r2,5
    33c8:	10bfffcc 	andi	r2,r2,65535
    33cc:	10a0001c 	xori	r2,r2,32768
    33d0:	10a00004 	addi	r2,r2,-32768
    33d4:	100490fa 	slli	r2,r2,3
    33d8:	1885883a 	add	r2,r3,r2
    33dc:	1080000b 	ldhu	r2,0(r2)
    33e0:	10bfffcc 	andi	r2,r2,65535
    33e4:	10800198 	cmpnei	r2,r2,6
    33e8:	10002a1e 	bne	r2,zero,3494 <getCoins+0x490>
    33ec:	e0800217 	ldw	r2,8(fp)
    33f0:	10c00017 	ldw	r3,0(r2)
    33f4:	e0bffb0f 	ldh	r2,-20(fp)
    33f8:	1000010e 	bge	r2,zero,3400 <getCoins+0x3fc>
    33fc:	108007c4 	addi	r2,r2,31
    3400:	1005d17a 	srai	r2,r2,5
    3404:	10bfffcc 	andi	r2,r2,65535
    3408:	10a0001c 	xori	r2,r2,32768
    340c:	10a00004 	addi	r2,r2,-32768
    3410:	1085883a 	add	r2,r2,r2
    3414:	1085883a 	add	r2,r2,r2
    3418:	1885883a 	add	r2,r3,r2
    341c:	10c00017 	ldw	r3,0(r2)
    3420:	e0bffb8f 	ldh	r2,-18(fp)
    3424:	1000010e 	bge	r2,zero,342c <getCoins+0x428>
    3428:	108007c4 	addi	r2,r2,31
    342c:	1005d17a 	srai	r2,r2,5
    3430:	10bfffcc 	andi	r2,r2,65535
    3434:	10a0001c 	xori	r2,r2,32768
    3438:	10a00004 	addi	r2,r2,-32768
    343c:	100490fa 	slli	r2,r2,3
    3440:	1885883a 	add	r2,r3,r2
    3444:	1000000d 	sth	zero,0(r2)
    3448:	e0bffb0f 	ldh	r2,-20(fp)
    344c:	1000010e 	bge	r2,zero,3454 <getCoins+0x450>
    3450:	108007c4 	addi	r2,r2,31
    3454:	1005d17a 	srai	r2,r2,5
    3458:	10ffffcc 	andi	r3,r2,65535
    345c:	e0bffb8f 	ldh	r2,-18(fp)
    3460:	1000010e 	bge	r2,zero,3468 <getCoins+0x464>
    3464:	108007c4 	addi	r2,r2,31
    3468:	1005d17a 	srai	r2,r2,5
    346c:	113fffcc 	andi	r4,r2,65535
    3470:	e0800217 	ldw	r2,8(fp)
    3474:	d8800015 	stw	r2,0(sp)
    3478:	e1ffff17 	ldw	r7,-4(fp)
    347c:	e1bffe17 	ldw	r6,-8(fp)
    3480:	200b883a 	mov	r5,r4
    3484:	1809883a 	mov	r4,r3
    3488:	0002e5c0 	call	2e5c <deleteCoins>
    348c:	00800044 	movi	r2,1
    3490:	00000106 	br	3498 <getCoins+0x494>
	return 0;
    3494:	0005883a 	mov	r2,zero
}
    3498:	e037883a 	mov	sp,fp
    349c:	dfc00117 	ldw	ra,4(sp)
    34a0:	df000017 	ldw	fp,0(sp)
    34a4:	dec00204 	addi	sp,sp,8
    34a8:	f800283a 	ret

000034ac <UpdateCoins>:

void UpdateCoins(cellXY **head, cellXY **tail, cell***stage){
    34ac:	defff904 	addi	sp,sp,-28
    34b0:	dfc00615 	stw	ra,24(sp)
    34b4:	df000515 	stw	fp,20(sp)
    34b8:	df000504 	addi	fp,sp,20
    34bc:	e13ffd15 	stw	r4,-12(fp)
    34c0:	e17ffe15 	stw	r5,-8(fp)
    34c4:	e1bfff15 	stw	r6,-4(fp)
	if(*head == NULL){return;}
    34c8:	e0bffd17 	ldw	r2,-12(fp)
    34cc:	10800017 	ldw	r2,0(r2)
    34d0:	10004626 	beq	r2,zero,35ec <UpdateCoins+0x140>
	//printf("Seem the coin list is not empty\n");
	cellXY *temp = *head;
    34d4:	e0bffd17 	ldw	r2,-12(fp)
    34d8:	10800017 	ldw	r2,0(r2)
    34dc:	e0bffb15 	stw	r2,-20(fp)
	while(temp!=NULL){
    34e0:	00003f06 	br	35e0 <UpdateCoins+0x134>
		unsigned short int X = temp->X;
    34e4:	e0bffb17 	ldw	r2,-20(fp)
    34e8:	1080000b 	ldhu	r2,0(r2)
    34ec:	e0bffc0d 	sth	r2,-16(fp)
		unsigned short int Y = temp->Y;
    34f0:	e0bffb17 	ldw	r2,-20(fp)
    34f4:	1080008b 	ldhu	r2,2(r2)
    34f8:	e0bffc8d 	sth	r2,-14(fp)
		if((*stage)[X][Y].ptr->counter%10!=0){
    34fc:	e0bfff17 	ldw	r2,-4(fp)
    3500:	10c00017 	ldw	r3,0(r2)
    3504:	e0bffc0b 	ldhu	r2,-16(fp)
    3508:	1085883a 	add	r2,r2,r2
    350c:	1085883a 	add	r2,r2,r2
    3510:	1885883a 	add	r2,r3,r2
    3514:	10c00017 	ldw	r3,0(r2)
    3518:	e0bffc8b 	ldhu	r2,-14(fp)
    351c:	100490fa 	slli	r2,r2,3
    3520:	1885883a 	add	r2,r3,r2
    3524:	10800117 	ldw	r2,4(r2)
    3528:	10800017 	ldw	r2,0(r2)
    352c:	01400284 	movi	r5,10
    3530:	1009883a 	mov	r4,r2
    3534:	000c6340 	call	c634 <__umodsi3>
    3538:	10001226 	beq	r2,zero,3584 <UpdateCoins+0xd8>
			temp = temp->next;
    353c:	e0bffb17 	ldw	r2,-20(fp)
    3540:	10800217 	ldw	r2,8(r2)
    3544:	e0bffb15 	stw	r2,-20(fp)
			(*stage)[X][Y].ptr->counter++;
    3548:	e0bfff17 	ldw	r2,-4(fp)
    354c:	10c00017 	ldw	r3,0(r2)
    3550:	e0bffc0b 	ldhu	r2,-16(fp)
    3554:	1085883a 	add	r2,r2,r2
    3558:	1085883a 	add	r2,r2,r2
    355c:	1885883a 	add	r2,r3,r2
    3560:	10c00017 	ldw	r3,0(r2)
    3564:	e0bffc8b 	ldhu	r2,-14(fp)
    3568:	100490fa 	slli	r2,r2,3
    356c:	1885883a 	add	r2,r3,r2
    3570:	10800117 	ldw	r2,4(r2)
    3574:	10c00017 	ldw	r3,0(r2)
    3578:	18c00044 	addi	r3,r3,1
    357c:	10c00015 	stw	r3,0(r2)
			continue;
    3580:	00001706 	br	35e0 <UpdateCoins+0x134>
		}
		cleanCoin(X,Y);
    3584:	e0bffc0b 	ldhu	r2,-16(fp)
    3588:	e0fffc8b 	ldhu	r3,-14(fp)
    358c:	180b883a 	mov	r5,r3
    3590:	1009883a 	mov	r4,r2
    3594:	000814c0 	call	814c <cleanCoin>
		drawCoin(X, Y, ((*stage)[X][Y]).ptr);
    3598:	e13ffc0b 	ldhu	r4,-16(fp)
    359c:	e17ffc8b 	ldhu	r5,-14(fp)
    35a0:	e0bfff17 	ldw	r2,-4(fp)
    35a4:	10c00017 	ldw	r3,0(r2)
    35a8:	e0bffc0b 	ldhu	r2,-16(fp)
    35ac:	1085883a 	add	r2,r2,r2
    35b0:	1085883a 	add	r2,r2,r2
    35b4:	1885883a 	add	r2,r3,r2
    35b8:	10c00017 	ldw	r3,0(r2)
    35bc:	e0bffc8b 	ldhu	r2,-14(fp)
    35c0:	100490fa 	slli	r2,r2,3
    35c4:	1885883a 	add	r2,r3,r2
    35c8:	10800117 	ldw	r2,4(r2)
    35cc:	100d883a 	mov	r6,r2
    35d0:	0007e940 	call	7e94 <drawCoin>
		temp = temp->next;
    35d4:	e0bffb17 	ldw	r2,-20(fp)
    35d8:	10800217 	ldw	r2,8(r2)
    35dc:	e0bffb15 	stw	r2,-20(fp)

void UpdateCoins(cellXY **head, cellXY **tail, cell***stage){
	if(*head == NULL){return;}
	//printf("Seem the coin list is not empty\n");
	cellXY *temp = *head;
	while(temp!=NULL){
    35e0:	e0bffb17 	ldw	r2,-20(fp)
    35e4:	103fbf1e 	bne	r2,zero,34e4 <__alt_data_end+0xf80034e4>
    35e8:	00000106 	br	35f0 <UpdateCoins+0x144>
	if((*stage)[Ax1/32][Ay1/32].type==6){(*stage)[Ax1/32][Ay1/32].type = 0;deleteCoins(Ax1/32, Ay1/32, head, tail, stage);return 1;}
	return 0;
}

void UpdateCoins(cellXY **head, cellXY **tail, cell***stage){
	if(*head == NULL){return;}
    35ec:	0001883a 	nop
		}
		cleanCoin(X,Y);
		drawCoin(X, Y, ((*stage)[X][Y]).ptr);
		temp = temp->next;
	}
}
    35f0:	e037883a 	mov	sp,fp
    35f4:	dfc00117 	ldw	ra,4(sp)
    35f8:	df000017 	ldw	fp,0(sp)
    35fc:	dec00204 	addi	sp,sp,8
    3600:	f800283a 	ret

00003604 <draw_driver>:
//     starting x on screen, starting y on screen
//     sheet index 0(0004B000), 1(00070800), 2, 3)
//    x and y belongs to [640, 480]
int draw_driver(	unsigned int Sx, unsigned int Sy, unsigned int Ex,
					unsigned int Ey, unsigned int Tx, unsigned int Ty,
					unsigned int Mem_index){
    3604:	defff704 	addi	sp,sp,-36
    3608:	dfc00815 	stw	ra,32(sp)
    360c:	df000715 	stw	fp,28(sp)
    3610:	df000704 	addi	fp,sp,28
    3614:	e13ffc15 	stw	r4,-16(fp)
    3618:	e17ffd15 	stw	r5,-12(fp)
    361c:	e1bffe15 	stw	r6,-8(fp)
    3620:	e1ffff15 	stw	r7,-4(fp)

	unsigned int Mem_index1 = Mem_index >> 2;
    3624:	e0800417 	ldw	r2,16(fp)
    3628:	1004d0ba 	srli	r2,r2,2
    362c:	e0bff915 	stw	r2,-28(fp)


	unsigned int Hex1 = (Mem_index1 << 30) + (Sx << 20) + (Sy << 10) + (Ex);
    3630:	e0bff917 	ldw	r2,-28(fp)
    3634:	100697ba 	slli	r3,r2,30
    3638:	e0bffc17 	ldw	r2,-16(fp)
    363c:	1004953a 	slli	r2,r2,20
    3640:	1887883a 	add	r3,r3,r2
    3644:	e0bffd17 	ldw	r2,-12(fp)
    3648:	100492ba 	slli	r2,r2,10
    364c:	1887883a 	add	r3,r3,r2
    3650:	e0bffe17 	ldw	r2,-8(fp)
    3654:	1885883a 	add	r2,r3,r2
    3658:	e0bffa15 	stw	r2,-24(fp)
	unsigned int Hex0 = (Mem_index << 30) +(Ey << 20) + (Tx << 10) + (Ty);
    365c:	e0800417 	ldw	r2,16(fp)
    3660:	100697ba 	slli	r3,r2,30
    3664:	e0bfff17 	ldw	r2,-4(fp)
    3668:	1004953a 	slli	r2,r2,20
    366c:	1887883a 	add	r3,r3,r2
    3670:	e0800217 	ldw	r2,8(fp)
    3674:	100492ba 	slli	r2,r2,10
    3678:	1887883a 	add	r3,r3,r2
    367c:	e0800317 	ldw	r2,12(fp)
    3680:	1885883a 	add	r2,r3,r2
    3684:	e0bffb15 	stw	r2,-20(fp)

	//If Blitter Buffer is full, return error
	if(BI[16] == 0xff){
    3688:	d0a00417 	ldw	r2,-32752(gp)
    368c:	10801004 	addi	r2,r2,64
    3690:	10800017 	ldw	r2,0(r2)
    3694:	10803fd8 	cmpnei	r2,r2,255
    3698:	1000051e 	bne	r2,zero,36b0 <draw_driver+0xac>
		printf("Buffer Full");
    369c:	010000b4 	movhi	r4,2
    36a0:	2131ef04 	addi	r4,r4,-14404
    36a4:	000e4980 	call	e498 <printf>
		return -1;
    36a8:	00bfffc4 	movi	r2,-1
    36ac:	00001206 	br	36f8 <draw_driver+0xf4>
	}

	//If still have space:
	BI[2*BI_counter] = Hex1;
    36b0:	d0e00417 	ldw	r3,-32752(gp)
    36b4:	d0a6f817 	ldw	r2,-25632(gp)
    36b8:	100490fa 	slli	r2,r2,3
    36bc:	1885883a 	add	r2,r3,r2
    36c0:	e0fffa17 	ldw	r3,-24(fp)
    36c4:	10c00015 	stw	r3,0(r2)
	BI[2*BI_counter + 1] = Hex0;
    36c8:	d0e00417 	ldw	r3,-32752(gp)
    36cc:	d0a6f817 	ldw	r2,-25632(gp)
    36d0:	100490fa 	slli	r2,r2,3
    36d4:	10800104 	addi	r2,r2,4
    36d8:	1885883a 	add	r2,r3,r2
    36dc:	e0fffb17 	ldw	r3,-20(fp)
    36e0:	10c00015 	stw	r3,0(r2)

	BI_counter = (BI_counter + 1) % 8;
    36e4:	d0a6f817 	ldw	r2,-25632(gp)
    36e8:	10800044 	addi	r2,r2,1
    36ec:	108001cc 	andi	r2,r2,7
    36f0:	d0a6f815 	stw	r2,-25632(gp)


	return 0;
    36f4:	0005883a 	mov	r2,zero
}
    36f8:	e037883a 	mov	sp,fp
    36fc:	dfc00117 	ldw	ra,4(sp)
    3700:	df000017 	ldw	fp,0(sp)
    3704:	dec00204 	addi	sp,sp,8
    3708:	f800283a 	ret

0000370c <draw_driver_init>:

int draw_driver_init(){
    370c:	defffd04 	addi	sp,sp,-12
    3710:	dfc00215 	stw	ra,8(sp)
    3714:	df000115 	stw	fp,4(sp)
    3718:	df000104 	addi	fp,sp,4
	BI[31] = 0xff;
    371c:	d0a00417 	ldw	r2,-32752(gp)
    3720:	10801f04 	addi	r2,r2,124
    3724:	00c03fc4 	movi	r3,255
    3728:	10c00015 	stw	r3,0(r2)

	//Detect Data Initialization
	for (int i = 0; i <8;i++){
    372c:	e03fff15 	stw	zero,-4(fp)
    3730:	00002106 	br	37b8 <draw_driver_init+0xac>
		if (BI[2*i] != 0x0){
    3734:	d0a00417 	ldw	r2,-32752(gp)
    3738:	e0ffff17 	ldw	r3,-4(fp)
    373c:	180690fa 	slli	r3,r3,3
    3740:	10c5883a 	add	r2,r2,r3
    3744:	10800017 	ldw	r2,0(r2)
    3748:	10000826 	beq	r2,zero,376c <draw_driver_init+0x60>
			printf("Data register %i cannot be initialized\n", 2*i);
    374c:	e0bfff17 	ldw	r2,-4(fp)
    3750:	1085883a 	add	r2,r2,r2
    3754:	100b883a 	mov	r5,r2
    3758:	010000b4 	movhi	r4,2
    375c:	2131f204 	addi	r4,r4,-14392
    3760:	000e4980 	call	e498 <printf>
			return -1;
    3764:	00bfffc4 	movi	r2,-1
    3768:	00002a06 	br	3814 <draw_driver_init+0x108>
		}
		else if(BI[2*i+1] != 0x0){
    376c:	d0e00417 	ldw	r3,-32752(gp)
    3770:	e0bfff17 	ldw	r2,-4(fp)
    3774:	100490fa 	slli	r2,r2,3
    3778:	10800104 	addi	r2,r2,4
    377c:	1885883a 	add	r2,r3,r2
    3780:	10800017 	ldw	r2,0(r2)
    3784:	10000926 	beq	r2,zero,37ac <draw_driver_init+0xa0>
			printf("Data register %i cannot be initialized\n", 2*i+1);
    3788:	e0bfff17 	ldw	r2,-4(fp)
    378c:	1085883a 	add	r2,r2,r2
    3790:	10800044 	addi	r2,r2,1
    3794:	100b883a 	mov	r5,r2
    3798:	010000b4 	movhi	r4,2
    379c:	2131f204 	addi	r4,r4,-14392
    37a0:	000e4980 	call	e498 <printf>
			return -1;
    37a4:	00bfffc4 	movi	r2,-1
    37a8:	00001a06 	br	3814 <draw_driver_init+0x108>

int draw_driver_init(){
	BI[31] = 0xff;

	//Detect Data Initialization
	for (int i = 0; i <8;i++){
    37ac:	e0bfff17 	ldw	r2,-4(fp)
    37b0:	10800044 	addi	r2,r2,1
    37b4:	e0bfff15 	stw	r2,-4(fp)
    37b8:	e0bfff17 	ldw	r2,-4(fp)
    37bc:	10800210 	cmplti	r2,r2,8
    37c0:	103fdc1e 	bne	r2,zero,3734 <__alt_data_end+0xf8003734>
			printf("Data register %i cannot be initialized\n", 2*i+1);
			return -1;
		}
	}

	printf("Data register initialization successful\n");
    37c4:	010000b4 	movhi	r4,2
    37c8:	2131fc04 	addi	r4,r4,-14352
    37cc:	000e5940 	call	e594 <puts>

	//Detect Status Initialization
	if (BI[16] != 0x0){
    37d0:	d0a00417 	ldw	r2,-32752(gp)
    37d4:	10801004 	addi	r2,r2,64
    37d8:	10800017 	ldw	r2,0(r2)
    37dc:	10000926 	beq	r2,zero,3804 <draw_driver_init+0xf8>
		printf("Status register cannot be initialized, the content is %02x\n", BI[16]);
    37e0:	d0a00417 	ldw	r2,-32752(gp)
    37e4:	10801004 	addi	r2,r2,64
    37e8:	10800017 	ldw	r2,0(r2)
    37ec:	100b883a 	mov	r5,r2
    37f0:	010000b4 	movhi	r4,2
    37f4:	21320604 	addi	r4,r4,-14312
    37f8:	000e4980 	call	e498 <printf>
		return -1;
    37fc:	00bfffc4 	movi	r2,-1
    3800:	00000406 	br	3814 <draw_driver_init+0x108>
	}
	else
		printf("Status register initialization successful!\n");
    3804:	010000b4 	movhi	r4,2
    3808:	21321504 	addi	r4,r4,-14252
    380c:	000e5940 	call	e594 <puts>

	return 0;
    3810:	0005883a 	mov	r2,zero

}
    3814:	e037883a 	mov	sp,fp
    3818:	dfc00117 	ldw	ra,4(sp)
    381c:	df000017 	ldw	fp,0(sp)
    3820:	dec00204 	addi	sp,sp,8
    3824:	f800283a 	ret

00003828 <draw_driver_speed>:


int draw_driver_speed(){
    3828:	deffff04 	addi	sp,sp,-4
    382c:	df000015 	stw	fp,0(sp)
    3830:	d839883a 	mov	fp,sp
	//BI = 0x1111 => full
	return BI[16];
    3834:	d0a00417 	ldw	r2,-32752(gp)
    3838:	10801004 	addi	r2,r2,64
    383c:	10800017 	ldw	r2,0(r2)
}
    3840:	e037883a 	mov	sp,fp
    3844:	df000017 	ldw	fp,0(sp)
    3848:	dec00104 	addi	sp,sp,4
    384c:	f800283a 	ret

00003850 <delay>:



//very good function
void delay(int milli_seconds)
{
    3850:	defffc04 	addi	sp,sp,-16
    3854:	dfc00315 	stw	ra,12(sp)
    3858:	df000215 	stw	fp,8(sp)
    385c:	df000204 	addi	fp,sp,8
    3860:	e13fff15 	stw	r4,-4(fp)
    // Converting time into milli_seconds
//    int milli_seconds = 1000 * number_of_seconds;

    // Stroing start time
    clock_t start_time = clock();
    3864:	000dbe80 	call	dbe8 <clock>
    3868:	e0bffe15 	stw	r2,-8(fp)

    // looping till required time is not acheived
    while (clock() < start_time + milli_seconds);
    386c:	0001883a 	nop
    3870:	000dbe80 	call	dbe8 <clock>
    3874:	1009883a 	mov	r4,r2
    3878:	e0ffff17 	ldw	r3,-4(fp)
    387c:	e0bffe17 	ldw	r2,-8(fp)
    3880:	1885883a 	add	r2,r3,r2
    3884:	20bffa36 	bltu	r4,r2,3870 <__alt_data_end+0xf8003870>
}
    3888:	0001883a 	nop
    388c:	e037883a 	mov	sp,fp
    3890:	dfc00117 	ldw	ra,4(sp)
    3894:	df000017 	ldw	fp,0(sp)
    3898:	dec00204 	addi	sp,sp,8
    389c:	f800283a 	ret

000038a0 <cleanCell>:
#include "./header_file/drawing.h"

//notice that X and Y corresponds to cell index not pixel index
void cleanCell(unsigned short int X, unsigned short int Y){
    38a0:	defff904 	addi	sp,sp,-28
    38a4:	dfc00615 	stw	ra,24(sp)
    38a8:	df000515 	stw	fp,20(sp)
    38ac:	df000504 	addi	fp,sp,20
    38b0:	2007883a 	mov	r3,r4
    38b4:	2805883a 	mov	r2,r5
    38b8:	e0fffe0d 	sth	r3,-8(fp)
    38bc:	e0bfff0d 	sth	r2,-4(fp)
	draw_driver(X*32, Y*32, X*32+31, Y*32+31, X*32, Y*32,0);
    38c0:	e0bffe0b 	ldhu	r2,-8(fp)
    38c4:	1004917a 	slli	r2,r2,5
    38c8:	1009883a 	mov	r4,r2
    38cc:	e0bfff0b 	ldhu	r2,-4(fp)
    38d0:	1004917a 	slli	r2,r2,5
    38d4:	100b883a 	mov	r5,r2
    38d8:	e0bffe0b 	ldhu	r2,-8(fp)
    38dc:	1004917a 	slli	r2,r2,5
    38e0:	108007c4 	addi	r2,r2,31
    38e4:	100d883a 	mov	r6,r2
    38e8:	e0bfff0b 	ldhu	r2,-4(fp)
    38ec:	1004917a 	slli	r2,r2,5
    38f0:	108007c4 	addi	r2,r2,31
    38f4:	100f883a 	mov	r7,r2
    38f8:	e0bffe0b 	ldhu	r2,-8(fp)
    38fc:	1004917a 	slli	r2,r2,5
    3900:	1007883a 	mov	r3,r2
    3904:	e0bfff0b 	ldhu	r2,-4(fp)
    3908:	1004917a 	slli	r2,r2,5
    390c:	d8000215 	stw	zero,8(sp)
    3910:	d8800115 	stw	r2,4(sp)
    3914:	d8c00015 	stw	r3,0(sp)
    3918:	00036040 	call	3604 <draw_driver>
}
    391c:	0001883a 	nop
    3920:	e037883a 	mov	sp,fp
    3924:	dfc00117 	ldw	ra,4(sp)
    3928:	df000017 	ldw	fp,0(sp)
    392c:	dec00204 	addi	sp,sp,8
    3930:	f800283a 	ret

00003934 <drawSolidWall>:

void drawSolidWall(unsigned short int X, unsigned short int Y, cell **stage){
    3934:	defff804 	addi	sp,sp,-32
    3938:	dfc00715 	stw	ra,28(sp)
    393c:	df000615 	stw	fp,24(sp)
    3940:	df000604 	addi	fp,sp,24
    3944:	2007883a 	mov	r3,r4
    3948:	2805883a 	mov	r2,r5
    394c:	e1bfff15 	stw	r6,-4(fp)
    3950:	e0fffd0d 	sth	r3,-12(fp)
    3954:	e0bffe0d 	sth	r2,-8(fp)
	draw_driver(solid_wall_x0, solid_wall_y0, solid_wall_x1, solid_wall_y1, X*32, Y*32,1);
    3958:	e0bffd0b 	ldhu	r2,-12(fp)
    395c:	1004917a 	slli	r2,r2,5
    3960:	1007883a 	mov	r3,r2
    3964:	e0bffe0b 	ldhu	r2,-8(fp)
    3968:	1004917a 	slli	r2,r2,5
    396c:	1009883a 	mov	r4,r2
    3970:	00800044 	movi	r2,1
    3974:	d8800215 	stw	r2,8(sp)
    3978:	d9000115 	stw	r4,4(sp)
    397c:	d8c00015 	stw	r3,0(sp)
    3980:	01c020c4 	movi	r7,131
    3984:	01801484 	movi	r6,82
    3988:	01401904 	movi	r5,100
    398c:	01000cc4 	movi	r4,51
    3990:	00036040 	call	3604 <draw_driver>
	stage[X][Y].type = 1;
    3994:	e0bffd0b 	ldhu	r2,-12(fp)
    3998:	1085883a 	add	r2,r2,r2
    399c:	1085883a 	add	r2,r2,r2
    39a0:	1007883a 	mov	r3,r2
    39a4:	e0bfff17 	ldw	r2,-4(fp)
    39a8:	10c5883a 	add	r2,r2,r3
    39ac:	10c00017 	ldw	r3,0(r2)
    39b0:	e0bffe0b 	ldhu	r2,-8(fp)
    39b4:	100490fa 	slli	r2,r2,3
    39b8:	1885883a 	add	r2,r3,r2
    39bc:	00c00044 	movi	r3,1
    39c0:	10c0000d 	sth	r3,0(r2)

}
    39c4:	0001883a 	nop
    39c8:	e037883a 	mov	sp,fp
    39cc:	dfc00117 	ldw	ra,4(sp)
    39d0:	df000017 	ldw	fp,0(sp)
    39d4:	dec00204 	addi	sp,sp,8
    39d8:	f800283a 	ret

000039dc <drawSoftWall>:


void drawSoftWall(unsigned short int X, unsigned short int Y, cell **stage){
    39dc:	defff804 	addi	sp,sp,-32
    39e0:	dfc00715 	stw	ra,28(sp)
    39e4:	df000615 	stw	fp,24(sp)
    39e8:	df000604 	addi	fp,sp,24
    39ec:	2007883a 	mov	r3,r4
    39f0:	2805883a 	mov	r2,r5
    39f4:	e1bfff15 	stw	r6,-4(fp)
    39f8:	e0fffd0d 	sth	r3,-12(fp)
    39fc:	e0bffe0d 	sth	r2,-8(fp)
	draw_driver(soft_wall_x0, soft_wall_y0, soft_wall_x1, soft_wall_y1, X*32, Y*32, 1);
    3a00:	e0bffd0b 	ldhu	r2,-12(fp)
    3a04:	1004917a 	slli	r2,r2,5
    3a08:	1007883a 	mov	r3,r2
    3a0c:	e0bffe0b 	ldhu	r2,-8(fp)
    3a10:	1004917a 	slli	r2,r2,5
    3a14:	1009883a 	mov	r4,r2
    3a18:	00800044 	movi	r2,1
    3a1c:	d8800215 	stw	r2,8(sp)
    3a20:	d9000115 	stw	r4,4(sp)
    3a24:	d8c00015 	stw	r3,0(sp)
    3a28:	01c02d44 	movi	r7,181
    3a2c:	01801484 	movi	r6,82
    3a30:	01402584 	movi	r5,150
    3a34:	01000cc4 	movi	r4,51
    3a38:	00036040 	call	3604 <draw_driver>
	stage[X][Y].type = 2;
    3a3c:	e0bffd0b 	ldhu	r2,-12(fp)
    3a40:	1085883a 	add	r2,r2,r2
    3a44:	1085883a 	add	r2,r2,r2
    3a48:	1007883a 	mov	r3,r2
    3a4c:	e0bfff17 	ldw	r2,-4(fp)
    3a50:	10c5883a 	add	r2,r2,r3
    3a54:	10c00017 	ldw	r3,0(r2)
    3a58:	e0bffe0b 	ldhu	r2,-8(fp)
    3a5c:	100490fa 	slli	r2,r2,3
    3a60:	1885883a 	add	r2,r3,r2
    3a64:	00c00084 	movi	r3,2
    3a68:	10c0000d 	sth	r3,0(r2)
}
    3a6c:	0001883a 	nop
    3a70:	e037883a 	mov	sp,fp
    3a74:	dfc00117 	ldw	ra,4(sp)
    3a78:	df000017 	ldw	fp,0(sp)
    3a7c:	dec00204 	addi	sp,sp,8
    3a80:	f800283a 	ret

00003a84 <cleanPlayer>:


void cleanPlayer(player *player1){
    3a84:	defffa04 	addi	sp,sp,-24
    3a88:	dfc00515 	stw	ra,20(sp)
    3a8c:	df000415 	stw	fp,16(sp)
    3a90:	df000404 	addi	fp,sp,16
    3a94:	e13fff15 	stw	r4,-4(fp)
	if(player1->moveCounter==100){player1->moveCounter=0;}
    3a98:	e0bfff17 	ldw	r2,-4(fp)
    3a9c:	1080078b 	ldhu	r2,30(r2)
    3aa0:	10bfffcc 	andi	r2,r2,65535
    3aa4:	10801918 	cmpnei	r2,r2,100
    3aa8:	1000031e 	bne	r2,zero,3ab8 <cleanPlayer+0x34>
    3aac:	e0bfff17 	ldw	r2,-4(fp)
    3ab0:	1000078d 	sth	zero,30(r2)
    3ab4:	00000606 	br	3ad0 <cleanPlayer+0x4c>
	else{player1->moveCounter++;}
    3ab8:	e0bfff17 	ldw	r2,-4(fp)
    3abc:	1080078b 	ldhu	r2,30(r2)
    3ac0:	10800044 	addi	r2,r2,1
    3ac4:	1007883a 	mov	r3,r2
    3ac8:	e0bfff17 	ldw	r2,-4(fp)
    3acc:	10c0078d 	sth	r3,30(r2)
	draw_driver(player1->x, player1->y, player1->x+25, player1->y+25, player1->x, player1->y, 0);
    3ad0:	e0bfff17 	ldw	r2,-4(fp)
    3ad4:	1080008b 	ldhu	r2,2(r2)
    3ad8:	113fffcc 	andi	r4,r2,65535
    3adc:	e0bfff17 	ldw	r2,-4(fp)
    3ae0:	1080010b 	ldhu	r2,4(r2)
    3ae4:	117fffcc 	andi	r5,r2,65535
    3ae8:	e0bfff17 	ldw	r2,-4(fp)
    3aec:	1080008b 	ldhu	r2,2(r2)
    3af0:	10bfffcc 	andi	r2,r2,65535
    3af4:	10800644 	addi	r2,r2,25
    3af8:	100d883a 	mov	r6,r2
    3afc:	e0bfff17 	ldw	r2,-4(fp)
    3b00:	1080010b 	ldhu	r2,4(r2)
    3b04:	10bfffcc 	andi	r2,r2,65535
    3b08:	10800644 	addi	r2,r2,25
    3b0c:	100f883a 	mov	r7,r2
    3b10:	e0bfff17 	ldw	r2,-4(fp)
    3b14:	1080008b 	ldhu	r2,2(r2)
    3b18:	10bfffcc 	andi	r2,r2,65535
    3b1c:	e0ffff17 	ldw	r3,-4(fp)
    3b20:	18c0010b 	ldhu	r3,4(r3)
    3b24:	18ffffcc 	andi	r3,r3,65535
    3b28:	d8000215 	stw	zero,8(sp)
    3b2c:	d8c00115 	stw	r3,4(sp)
    3b30:	d8800015 	stw	r2,0(sp)
    3b34:	00036040 	call	3604 <draw_driver>
}
    3b38:	0001883a 	nop
    3b3c:	e037883a 	mov	sp,fp
    3b40:	dfc00117 	ldw	ra,4(sp)
    3b44:	df000017 	ldw	fp,0(sp)
    3b48:	dec00204 	addi	sp,sp,8
    3b4c:	f800283a 	ret

00003b50 <drawPlayer>:

void drawPlayer(unsigned short int dir, player *player1, unsigned short int moving){
    3b50:	defff704 	addi	sp,sp,-36
    3b54:	dfc00815 	stw	ra,32(sp)
    3b58:	df000715 	stw	fp,28(sp)
    3b5c:	df000704 	addi	fp,sp,28
    3b60:	2007883a 	mov	r3,r4
    3b64:	e17ffe15 	stw	r5,-8(fp)
    3b68:	3005883a 	mov	r2,r6
    3b6c:	e0fffd0d 	sth	r3,-12(fp)
    3b70:	e0bfff0d 	sth	r2,-4(fp)
	unsigned short int index = player1->index;
    3b74:	e0bffe17 	ldw	r2,-8(fp)
    3b78:	1080000b 	ldhu	r2,0(r2)
    3b7c:	e0bffc0d 	sth	r2,-16(fp)
	if(moving == 1){
    3b80:	e0bfff0b 	ldhu	r2,-4(fp)
    3b84:	10800058 	cmpnei	r2,r2,1
    3b88:	1001401e 	bne	r2,zero,408c <drawPlayer+0x53c>
		if(index == 0){
    3b8c:	e0bffc0b 	ldhu	r2,-16(fp)
    3b90:	10009f1e 	bne	r2,zero,3e10 <drawPlayer+0x2c0>
		     if(player1->moveCounter<50){
    3b94:	e0bffe17 	ldw	r2,-8(fp)
    3b98:	1080078b 	ldhu	r2,30(r2)
    3b9c:	10bfffcc 	andi	r2,r2,65535
    3ba0:	10800ca8 	cmpgeui	r2,r2,50
    3ba4:	10004d1e 	bne	r2,zero,3cdc <drawPlayer+0x18c>
				switch(dir){
    3ba8:	e0bffd0b 	ldhu	r2,-12(fp)
    3bac:	10c00060 	cmpeqi	r3,r2,1
    3bb0:	1800191e 	bne	r3,zero,3c18 <drawPlayer+0xc8>
    3bb4:	10c00088 	cmpgei	r3,r2,2
    3bb8:	1800021e 	bne	r3,zero,3bc4 <drawPlayer+0x74>
    3bbc:	10000626 	beq	r2,zero,3bd8 <drawPlayer+0x88>
					draw_driver(player2_right0_x0, player2_right0_y0, player2_right0_x1, player2_right0_y1, player1->x, player1->y, 1);
					break;
			}
		}
	}
}
    3bc0:	0001cd06 	br	42f8 <drawPlayer+0x7a8>
void drawPlayer(unsigned short int dir, player *player1, unsigned short int moving){
	unsigned short int index = player1->index;
	if(moving == 1){
		if(index == 0){
		     if(player1->moveCounter<50){
				switch(dir){
    3bc4:	10c000a0 	cmpeqi	r3,r2,2
    3bc8:	1800231e 	bne	r3,zero,3c58 <drawPlayer+0x108>
    3bcc:	108000e0 	cmpeqi	r2,r2,3
    3bd0:	1000311e 	bne	r2,zero,3c98 <drawPlayer+0x148>
					draw_driver(player2_right0_x0, player2_right0_y0, player2_right0_x1, player2_right0_y1, player1->x, player1->y, 1);
					break;
			}
		}
	}
}
    3bd4:	0001c806 	br	42f8 <drawPlayer+0x7a8>
	if(moving == 1){
		if(index == 0){
		     if(player1->moveCounter<50){
				switch(dir){
					case 0:
						draw_driver(player1_back1_x0, player1_back1_y0, player1_back1_x1, player1_back1_y1, player1->x, player1->y, 1);
    3bd8:	e0bffe17 	ldw	r2,-8(fp)
    3bdc:	1080008b 	ldhu	r2,2(r2)
    3be0:	10bfffcc 	andi	r2,r2,65535
    3be4:	e0fffe17 	ldw	r3,-8(fp)
    3be8:	18c0010b 	ldhu	r3,4(r3)
    3bec:	18ffffcc 	andi	r3,r3,65535
    3bf0:	01000044 	movi	r4,1
    3bf4:	d9000215 	stw	r4,8(sp)
    3bf8:	d8c00115 	stw	r3,4(sp)
    3bfc:	d8800015 	stw	r2,0(sp)
    3c00:	01c05704 	movi	r7,348
    3c04:	018051c4 	movi	r6,327
    3c08:	014050c4 	movi	r5,323
    3c0c:	01004b84 	movi	r4,302
    3c10:	00036040 	call	3604 <draw_driver>
						break;
    3c14:	0001b806 	br	42f8 <drawPlayer+0x7a8>
					case 1:
						draw_driver(player1_front1_x0, player1_front1_y0, player1_front1_x1, player1_front1_y1, player1->x, player1->y, 1);
    3c18:	e0bffe17 	ldw	r2,-8(fp)
    3c1c:	1080008b 	ldhu	r2,2(r2)
    3c20:	10bfffcc 	andi	r2,r2,65535
    3c24:	e0fffe17 	ldw	r3,-8(fp)
    3c28:	18c0010b 	ldhu	r3,4(r3)
    3c2c:	18ffffcc 	andi	r3,r3,65535
    3c30:	01000044 	movi	r4,1
    3c34:	d9000215 	stw	r4,8(sp)
    3c38:	d8c00115 	stw	r3,4(sp)
    3c3c:	d8800015 	stw	r2,0(sp)
    3c40:	01c00f04 	movi	r7,60
    3c44:	01805244 	movi	r6,329
    3c48:	014008c4 	movi	r5,35
    3c4c:	01004c04 	movi	r4,304
    3c50:	00036040 	call	3604 <draw_driver>
						break;
    3c54:	0001a806 	br	42f8 <drawPlayer+0x7a8>
					case 2:
						draw_driver(player1_left1_x0, player1_left1_y0, player1_left1_x1, player1_left1_y1, player1->x, player1->y, 1);
    3c58:	e0bffe17 	ldw	r2,-8(fp)
    3c5c:	1080008b 	ldhu	r2,2(r2)
    3c60:	10bfffcc 	andi	r2,r2,65535
    3c64:	e0fffe17 	ldw	r3,-8(fp)
    3c68:	18c0010b 	ldhu	r3,4(r3)
    3c6c:	18ffffcc 	andi	r3,r3,65535
    3c70:	01000044 	movi	r4,1
    3c74:	d9000215 	stw	r4,8(sp)
    3c78:	d8c00115 	stw	r3,4(sp)
    3c7c:	d8800015 	stw	r2,0(sp)
    3c80:	01c03f04 	movi	r7,252
    3c84:	018051c4 	movi	r6,327
    3c88:	014038c4 	movi	r5,227
    3c8c:	01004b84 	movi	r4,302
    3c90:	00036040 	call	3604 <draw_driver>
						break;
    3c94:	00019806 	br	42f8 <drawPlayer+0x7a8>
					case 3:
						draw_driver(player1_right1_x0, player1_right1_y0, player1_right1_x1, player1_right1_y1, player1->x, player1->y, 1);
    3c98:	e0bffe17 	ldw	r2,-8(fp)
    3c9c:	1080008b 	ldhu	r2,2(r2)
    3ca0:	10bfffcc 	andi	r2,r2,65535
    3ca4:	e0fffe17 	ldw	r3,-8(fp)
    3ca8:	18c0010b 	ldhu	r3,4(r3)
    3cac:	18ffffcc 	andi	r3,r3,65535
    3cb0:	01000044 	movi	r4,1
    3cb4:	d9000215 	stw	r4,8(sp)
    3cb8:	d8c00115 	stw	r3,4(sp)
    3cbc:	d8800015 	stw	r2,0(sp)
    3cc0:	01c02704 	movi	r7,156
    3cc4:	018051c4 	movi	r6,327
    3cc8:	014020c4 	movi	r5,131
    3ccc:	01004b84 	movi	r4,302
    3cd0:	00036040 	call	3604 <draw_driver>
						break;
    3cd4:	0001883a 	nop
    3cd8:	00018706 	br	42f8 <drawPlayer+0x7a8>
				}
			}
			else{
				switch(dir){
    3cdc:	e0bffd0b 	ldhu	r2,-12(fp)
    3ce0:	10c00060 	cmpeqi	r3,r2,1
    3ce4:	1800191e 	bne	r3,zero,3d4c <drawPlayer+0x1fc>
    3ce8:	10c00088 	cmpgei	r3,r2,2
    3cec:	1800021e 	bne	r3,zero,3cf8 <drawPlayer+0x1a8>
    3cf0:	10000626 	beq	r2,zero,3d0c <drawPlayer+0x1bc>
					draw_driver(player2_right0_x0, player2_right0_y0, player2_right0_x1, player2_right0_y1, player1->x, player1->y, 1);
					break;
			}
		}
	}
}
    3cf4:	00018006 	br	42f8 <drawPlayer+0x7a8>
						draw_driver(player1_right1_x0, player1_right1_y0, player1_right1_x1, player1_right1_y1, player1->x, player1->y, 1);
						break;
				}
			}
			else{
				switch(dir){
    3cf8:	10c000a0 	cmpeqi	r3,r2,2
    3cfc:	1800231e 	bne	r3,zero,3d8c <drawPlayer+0x23c>
    3d00:	108000e0 	cmpeqi	r2,r2,3
    3d04:	1000311e 	bne	r2,zero,3dcc <drawPlayer+0x27c>
					draw_driver(player2_right0_x0, player2_right0_y0, player2_right0_x1, player2_right0_y1, player1->x, player1->y, 1);
					break;
			}
		}
	}
}
    3d08:	00017b06 	br	42f8 <drawPlayer+0x7a8>
				}
			}
			else{
				switch(dir){
					case 0:
						draw_driver(player1_back2_x0, player1_back2_y0, player1_back2_x1, player1_back2_y1, player1->x, player1->y, 1);
    3d0c:	e0bffe17 	ldw	r2,-8(fp)
    3d10:	1080008b 	ldhu	r2,2(r2)
    3d14:	10bfffcc 	andi	r2,r2,65535
    3d18:	e0fffe17 	ldw	r3,-8(fp)
    3d1c:	18c0010b 	ldhu	r3,4(r3)
    3d20:	18ffffcc 	andi	r3,r3,65535
    3d24:	01000044 	movi	r4,1
    3d28:	d9000215 	stw	r4,8(sp)
    3d2c:	d8c00115 	stw	r3,4(sp)
    3d30:	d8800015 	stw	r2,0(sp)
    3d34:	01c05f04 	movi	r7,380
    3d38:	01805244 	movi	r6,329
    3d3c:	014058c4 	movi	r5,355
    3d40:	01004c04 	movi	r4,304
    3d44:	00036040 	call	3604 <draw_driver>
						break;
    3d48:	00016b06 	br	42f8 <drawPlayer+0x7a8>
					case 1:
						draw_driver(player1_front2_x0, player1_front2_y0, player1_front2_x1, player1_front2_y1, player1->x, player1->y, 1);
    3d4c:	e0bffe17 	ldw	r2,-8(fp)
    3d50:	1080008b 	ldhu	r2,2(r2)
    3d54:	10bfffcc 	andi	r2,r2,65535
    3d58:	e0fffe17 	ldw	r3,-8(fp)
    3d5c:	18c0010b 	ldhu	r3,4(r3)
    3d60:	18ffffcc 	andi	r3,r3,65535
    3d64:	01000044 	movi	r4,1
    3d68:	d9000215 	stw	r4,8(sp)
    3d6c:	d8c00115 	stw	r3,4(sp)
    3d70:	d8800015 	stw	r2,0(sp)
    3d74:	01c01704 	movi	r7,92
    3d78:	018051c4 	movi	r6,327
    3d7c:	014010c4 	movi	r5,67
    3d80:	01004b84 	movi	r4,302
    3d84:	00036040 	call	3604 <draw_driver>
						break;
    3d88:	00015b06 	br	42f8 <drawPlayer+0x7a8>
					case 2:
						draw_driver(player1_left2_x0, player1_left2_y0, player1_left2_x1, player1_left2_y1, player1->x, player1->y, 1);
    3d8c:	e0bffe17 	ldw	r2,-8(fp)
    3d90:	1080008b 	ldhu	r2,2(r2)
    3d94:	10bfffcc 	andi	r2,r2,65535
    3d98:	e0fffe17 	ldw	r3,-8(fp)
    3d9c:	18c0010b 	ldhu	r3,4(r3)
    3da0:	18ffffcc 	andi	r3,r3,65535
    3da4:	01000044 	movi	r4,1
    3da8:	d9000215 	stw	r4,8(sp)
    3dac:	d8c00115 	stw	r3,4(sp)
    3db0:	d8800015 	stw	r2,0(sp)
    3db4:	01c04704 	movi	r7,284
    3db8:	018051c4 	movi	r6,327
    3dbc:	014040c4 	movi	r5,259
    3dc0:	01004b84 	movi	r4,302
    3dc4:	00036040 	call	3604 <draw_driver>
						break;
    3dc8:	00014b06 	br	42f8 <drawPlayer+0x7a8>
					case 3:
						draw_driver(player1_right2_x0, player1_right2_y0, player1_right2_x1, player1_right2_y1, player1->x, player1->y, 1);
    3dcc:	e0bffe17 	ldw	r2,-8(fp)
    3dd0:	1080008b 	ldhu	r2,2(r2)
    3dd4:	10bfffcc 	andi	r2,r2,65535
    3dd8:	e0fffe17 	ldw	r3,-8(fp)
    3ddc:	18c0010b 	ldhu	r3,4(r3)
    3de0:	18ffffcc 	andi	r3,r3,65535
    3de4:	01000044 	movi	r4,1
    3de8:	d9000215 	stw	r4,8(sp)
    3dec:	d8c00115 	stw	r3,4(sp)
    3df0:	d8800015 	stw	r2,0(sp)
    3df4:	01c02f04 	movi	r7,188
    3df8:	018051c4 	movi	r6,327
    3dfc:	014028c4 	movi	r5,163
    3e00:	01004b84 	movi	r4,302
    3e04:	00036040 	call	3604 <draw_driver>
						break;
    3e08:	0001883a 	nop
    3e0c:	00013a06 	br	42f8 <drawPlayer+0x7a8>
				}
			}
		}
		else{
		     if(player1->moveCounter<50){
    3e10:	e0bffe17 	ldw	r2,-8(fp)
    3e14:	1080078b 	ldhu	r2,30(r2)
    3e18:	10bfffcc 	andi	r2,r2,65535
    3e1c:	10800ca8 	cmpgeui	r2,r2,50
    3e20:	10004d1e 	bne	r2,zero,3f58 <drawPlayer+0x408>
				switch(dir){
    3e24:	e0bffd0b 	ldhu	r2,-12(fp)
    3e28:	10c00060 	cmpeqi	r3,r2,1
    3e2c:	1800191e 	bne	r3,zero,3e94 <drawPlayer+0x344>
    3e30:	10c00088 	cmpgei	r3,r2,2
    3e34:	1800021e 	bne	r3,zero,3e40 <drawPlayer+0x2f0>
    3e38:	10000626 	beq	r2,zero,3e54 <drawPlayer+0x304>
					draw_driver(player2_right0_x0, player2_right0_y0, player2_right0_x1, player2_right0_y1, player1->x, player1->y, 1);
					break;
			}
		}
	}
}
    3e3c:	00012e06 	br	42f8 <drawPlayer+0x7a8>
				}
			}
		}
		else{
		     if(player1->moveCounter<50){
				switch(dir){
    3e40:	10c000a0 	cmpeqi	r3,r2,2
    3e44:	1800231e 	bne	r3,zero,3ed4 <drawPlayer+0x384>
    3e48:	108000e0 	cmpeqi	r2,r2,3
    3e4c:	1000311e 	bne	r2,zero,3f14 <drawPlayer+0x3c4>
					draw_driver(player2_right0_x0, player2_right0_y0, player2_right0_x1, player2_right0_y1, player1->x, player1->y, 1);
					break;
			}
		}
	}
}
    3e50:	00012906 	br	42f8 <drawPlayer+0x7a8>
		}
		else{
		     if(player1->moveCounter<50){
				switch(dir){
					case 0:
						draw_driver(player2_back1_x0, player2_back1_y0, player2_back1_x1, player2_back1_y1, player1->x, player1->y, 1);
    3e54:	e0bffe17 	ldw	r2,-8(fp)
    3e58:	1080008b 	ldhu	r2,2(r2)
    3e5c:	10bfffcc 	andi	r2,r2,65535
    3e60:	e0fffe17 	ldw	r3,-8(fp)
    3e64:	18c0010b 	ldhu	r3,4(r3)
    3e68:	18ffffcc 	andi	r3,r3,65535
    3e6c:	01000044 	movi	r4,1
    3e70:	d9000215 	stw	r4,8(sp)
    3e74:	d8c00115 	stw	r3,4(sp)
    3e78:	d8800015 	stw	r2,0(sp)
    3e7c:	01c05704 	movi	r7,348
    3e80:	01805a44 	movi	r6,361
    3e84:	014050c4 	movi	r5,323
    3e88:	01005404 	movi	r4,336
    3e8c:	00036040 	call	3604 <draw_driver>
						break;
    3e90:	00011906 	br	42f8 <drawPlayer+0x7a8>
					case 1:
						draw_driver(player2_front1_x0, player2_front1_y0, player2_front1_x1, player2_front1_y1, player1->x, player1->y, 1);
    3e94:	e0bffe17 	ldw	r2,-8(fp)
    3e98:	1080008b 	ldhu	r2,2(r2)
    3e9c:	10bfffcc 	andi	r2,r2,65535
    3ea0:	e0fffe17 	ldw	r3,-8(fp)
    3ea4:	18c0010b 	ldhu	r3,4(r3)
    3ea8:	18ffffcc 	andi	r3,r3,65535
    3eac:	01000044 	movi	r4,1
    3eb0:	d9000215 	stw	r4,8(sp)
    3eb4:	d8c00115 	stw	r3,4(sp)
    3eb8:	d8800015 	stw	r2,0(sp)
    3ebc:	01c00f04 	movi	r7,60
    3ec0:	01805a44 	movi	r6,361
    3ec4:	014008c4 	movi	r5,35
    3ec8:	01005404 	movi	r4,336
    3ecc:	00036040 	call	3604 <draw_driver>
						break;
    3ed0:	00010906 	br	42f8 <drawPlayer+0x7a8>
					case 2:
						draw_driver(player2_left1_x0, player2_left1_y0, player2_left1_x1, player2_left1_y1, player1->x, player1->y, 1);
    3ed4:	e0bffe17 	ldw	r2,-8(fp)
    3ed8:	1080008b 	ldhu	r2,2(r2)
    3edc:	10bfffcc 	andi	r2,r2,65535
    3ee0:	e0fffe17 	ldw	r3,-8(fp)
    3ee4:	18c0010b 	ldhu	r3,4(r3)
    3ee8:	18ffffcc 	andi	r3,r3,65535
    3eec:	01000044 	movi	r4,1
    3ef0:	d9000215 	stw	r4,8(sp)
    3ef4:	d8c00115 	stw	r3,4(sp)
    3ef8:	d8800015 	stw	r2,0(sp)
    3efc:	01c03f04 	movi	r7,252
    3f00:	01805a44 	movi	r6,361
    3f04:	014038c4 	movi	r5,227
    3f08:	01005404 	movi	r4,336
    3f0c:	00036040 	call	3604 <draw_driver>
						break;
    3f10:	0000f906 	br	42f8 <drawPlayer+0x7a8>
					case 3:
						draw_driver(player2_right1_x0, player2_right1_y0, player2_right1_x1, player2_right1_y1, player1->x, player1->y, 1);
    3f14:	e0bffe17 	ldw	r2,-8(fp)
    3f18:	1080008b 	ldhu	r2,2(r2)
    3f1c:	10bfffcc 	andi	r2,r2,65535
    3f20:	e0fffe17 	ldw	r3,-8(fp)
    3f24:	18c0010b 	ldhu	r3,4(r3)
    3f28:	18ffffcc 	andi	r3,r3,65535
    3f2c:	01000044 	movi	r4,1
    3f30:	d9000215 	stw	r4,8(sp)
    3f34:	d8c00115 	stw	r3,4(sp)
    3f38:	d8800015 	stw	r2,0(sp)
    3f3c:	01c02704 	movi	r7,156
    3f40:	01805a44 	movi	r6,361
    3f44:	014020c4 	movi	r5,131
    3f48:	01005404 	movi	r4,336
    3f4c:	00036040 	call	3604 <draw_driver>
						break;
    3f50:	0001883a 	nop
    3f54:	0000e806 	br	42f8 <drawPlayer+0x7a8>
				}
			}
			else{
				switch(dir){
    3f58:	e0bffd0b 	ldhu	r2,-12(fp)
    3f5c:	10c00060 	cmpeqi	r3,r2,1
    3f60:	1800191e 	bne	r3,zero,3fc8 <drawPlayer+0x478>
    3f64:	10c00088 	cmpgei	r3,r2,2
    3f68:	1800021e 	bne	r3,zero,3f74 <drawPlayer+0x424>
    3f6c:	10000626 	beq	r2,zero,3f88 <drawPlayer+0x438>
					draw_driver(player2_right0_x0, player2_right0_y0, player2_right0_x1, player2_right0_y1, player1->x, player1->y, 1);
					break;
			}
		}
	}
}
    3f70:	0000e106 	br	42f8 <drawPlayer+0x7a8>
						draw_driver(player2_right1_x0, player2_right1_y0, player2_right1_x1, player2_right1_y1, player1->x, player1->y, 1);
						break;
				}
			}
			else{
				switch(dir){
    3f74:	10c000a0 	cmpeqi	r3,r2,2
    3f78:	1800231e 	bne	r3,zero,4008 <drawPlayer+0x4b8>
    3f7c:	108000e0 	cmpeqi	r2,r2,3
    3f80:	1000311e 	bne	r2,zero,4048 <drawPlayer+0x4f8>
					draw_driver(player2_right0_x0, player2_right0_y0, player2_right0_x1, player2_right0_y1, player1->x, player1->y, 1);
					break;
			}
		}
	}
}
    3f84:	0000dc06 	br	42f8 <drawPlayer+0x7a8>
				}
			}
			else{
				switch(dir){
					case 0:
						draw_driver(player2_back2_x0, player2_back2_y0, player2_back2_x1, player2_back2_y1, player1->x, player1->y, 1);
    3f88:	e0bffe17 	ldw	r2,-8(fp)
    3f8c:	1080008b 	ldhu	r2,2(r2)
    3f90:	10bfffcc 	andi	r2,r2,65535
    3f94:	e0fffe17 	ldw	r3,-8(fp)
    3f98:	18c0010b 	ldhu	r3,4(r3)
    3f9c:	18ffffcc 	andi	r3,r3,65535
    3fa0:	01000044 	movi	r4,1
    3fa4:	d9000215 	stw	r4,8(sp)
    3fa8:	d8c00115 	stw	r3,4(sp)
    3fac:	d8800015 	stw	r2,0(sp)
    3fb0:	01c05f04 	movi	r7,380
    3fb4:	01805a44 	movi	r6,361
    3fb8:	014058c4 	movi	r5,355
    3fbc:	01005404 	movi	r4,336
    3fc0:	00036040 	call	3604 <draw_driver>
						break;
    3fc4:	0000cc06 	br	42f8 <drawPlayer+0x7a8>
					case 1:
						draw_driver(player2_front2_x0, player2_front2_y0, player2_front2_x1, player2_front2_y1, player1->x, player1->y, 1);
    3fc8:	e0bffe17 	ldw	r2,-8(fp)
    3fcc:	1080008b 	ldhu	r2,2(r2)
    3fd0:	10bfffcc 	andi	r2,r2,65535
    3fd4:	e0fffe17 	ldw	r3,-8(fp)
    3fd8:	18c0010b 	ldhu	r3,4(r3)
    3fdc:	18ffffcc 	andi	r3,r3,65535
    3fe0:	01000044 	movi	r4,1
    3fe4:	d9000215 	stw	r4,8(sp)
    3fe8:	d8c00115 	stw	r3,4(sp)
    3fec:	d8800015 	stw	r2,0(sp)
    3ff0:	01c01704 	movi	r7,92
    3ff4:	01805a44 	movi	r6,361
    3ff8:	014010c4 	movi	r5,67
    3ffc:	01005404 	movi	r4,336
    4000:	00036040 	call	3604 <draw_driver>
						break;
    4004:	0000bc06 	br	42f8 <drawPlayer+0x7a8>
					case 2:
						draw_driver(player2_left2_x0, player2_left2_y0, player2_left2_x1, player2_left2_y1, player1->x, player1->y, 1);
    4008:	e0bffe17 	ldw	r2,-8(fp)
    400c:	1080008b 	ldhu	r2,2(r2)
    4010:	10bfffcc 	andi	r2,r2,65535
    4014:	e0fffe17 	ldw	r3,-8(fp)
    4018:	18c0010b 	ldhu	r3,4(r3)
    401c:	18ffffcc 	andi	r3,r3,65535
    4020:	01000044 	movi	r4,1
    4024:	d9000215 	stw	r4,8(sp)
    4028:	d8c00115 	stw	r3,4(sp)
    402c:	d8800015 	stw	r2,0(sp)
    4030:	01c04704 	movi	r7,284
    4034:	01805a44 	movi	r6,361
    4038:	014040c4 	movi	r5,259
    403c:	01005404 	movi	r4,336
    4040:	00036040 	call	3604 <draw_driver>
						break;
    4044:	0000ac06 	br	42f8 <drawPlayer+0x7a8>
					case 3:
						draw_driver(player2_right2_x0, player2_right2_y0, player2_right2_x1, player2_right2_y1, player1->x, player1->y, 1);
    4048:	e0bffe17 	ldw	r2,-8(fp)
    404c:	1080008b 	ldhu	r2,2(r2)
    4050:	10bfffcc 	andi	r2,r2,65535
    4054:	e0fffe17 	ldw	r3,-8(fp)
    4058:	18c0010b 	ldhu	r3,4(r3)
    405c:	18ffffcc 	andi	r3,r3,65535
    4060:	01000044 	movi	r4,1
    4064:	d9000215 	stw	r4,8(sp)
    4068:	d8c00115 	stw	r3,4(sp)
    406c:	d8800015 	stw	r2,0(sp)
    4070:	01c02f04 	movi	r7,188
    4074:	01805a44 	movi	r6,361
    4078:	014028c4 	movi	r5,163
    407c:	01005404 	movi	r4,336
    4080:	00036040 	call	3604 <draw_driver>
						break;
    4084:	0001883a 	nop
    4088:	00009b06 	br	42f8 <drawPlayer+0x7a8>
				}
			}
		}
	}
	else{
		if(index == 0){
    408c:	e0bffc0b 	ldhu	r2,-16(fp)
    4090:	10004d1e 	bne	r2,zero,41c8 <drawPlayer+0x678>
			switch(dir){
    4094:	e0bffd0b 	ldhu	r2,-12(fp)
    4098:	10c00060 	cmpeqi	r3,r2,1
    409c:	1800191e 	bne	r3,zero,4104 <drawPlayer+0x5b4>
    40a0:	10c00088 	cmpgei	r3,r2,2
    40a4:	1800021e 	bne	r3,zero,40b0 <drawPlayer+0x560>
    40a8:	10000626 	beq	r2,zero,40c4 <drawPlayer+0x574>
					draw_driver(player2_right0_x0, player2_right0_y0, player2_right0_x1, player2_right0_y1, player1->x, player1->y, 1);
					break;
			}
		}
	}
}
    40ac:	00009206 	br	42f8 <drawPlayer+0x7a8>
			}
		}
	}
	else{
		if(index == 0){
			switch(dir){
    40b0:	10c000a0 	cmpeqi	r3,r2,2
    40b4:	1800231e 	bne	r3,zero,4144 <drawPlayer+0x5f4>
    40b8:	108000e0 	cmpeqi	r2,r2,3
    40bc:	1000311e 	bne	r2,zero,4184 <drawPlayer+0x634>
					draw_driver(player2_right0_x0, player2_right0_y0, player2_right0_x1, player2_right0_y1, player1->x, player1->y, 1);
					break;
			}
		}
	}
}
    40c0:	00008d06 	br	42f8 <drawPlayer+0x7a8>
	}
	else{
		if(index == 0){
			switch(dir){
				case 0:
					draw_driver(player1_back0_x0, player1_back0_y0, player1_back0_x1, player1_back0_y1, player1->x, player1->y, 1);
    40c4:	e0bffe17 	ldw	r2,-8(fp)
    40c8:	1080008b 	ldhu	r2,2(r2)
    40cc:	10bfffcc 	andi	r2,r2,65535
    40d0:	e0fffe17 	ldw	r3,-8(fp)
    40d4:	18c0010b 	ldhu	r3,4(r3)
    40d8:	18ffffcc 	andi	r3,r3,65535
    40dc:	01000044 	movi	r4,1
    40e0:	d9000215 	stw	r4,8(sp)
    40e4:	d8c00115 	stw	r3,4(sp)
    40e8:	d8800015 	stw	r2,0(sp)
    40ec:	01c04f04 	movi	r7,316
    40f0:	018051c4 	movi	r6,327
    40f4:	014048c4 	movi	r5,291
    40f8:	01004b84 	movi	r4,302
    40fc:	00036040 	call	3604 <draw_driver>
					break;
    4100:	00007d06 	br	42f8 <drawPlayer+0x7a8>
				case 1:
					draw_driver(player1_front0_x0, player1_front0_y0, player1_front0_x1, player1_front0_y1, player1->x, player1->y, 1);
    4104:	e0bffe17 	ldw	r2,-8(fp)
    4108:	1080008b 	ldhu	r2,2(r2)
    410c:	10bfffcc 	andi	r2,r2,65535
    4110:	e0fffe17 	ldw	r3,-8(fp)
    4114:	18c0010b 	ldhu	r3,4(r3)
    4118:	18ffffcc 	andi	r3,r3,65535
    411c:	01000044 	movi	r4,1
    4120:	d9000215 	stw	r4,8(sp)
    4124:	d8c00115 	stw	r3,4(sp)
    4128:	d8800015 	stw	r2,0(sp)
    412c:	01c00704 	movi	r7,28
    4130:	018051c4 	movi	r6,327
    4134:	014000c4 	movi	r5,3
    4138:	01004b84 	movi	r4,302
    413c:	00036040 	call	3604 <draw_driver>
					break;
    4140:	00006d06 	br	42f8 <drawPlayer+0x7a8>
				case 2:
					draw_driver(player1_left0_x0, player1_left0_y0, player1_left0_x1, player1_left0_y1, player1->x, player1->y, 1);
    4144:	e0bffe17 	ldw	r2,-8(fp)
    4148:	1080008b 	ldhu	r2,2(r2)
    414c:	10bfffcc 	andi	r2,r2,65535
    4150:	e0fffe17 	ldw	r3,-8(fp)
    4154:	18c0010b 	ldhu	r3,4(r3)
    4158:	18ffffcc 	andi	r3,r3,65535
    415c:	01000044 	movi	r4,1
    4160:	d9000215 	stw	r4,8(sp)
    4164:	d8c00115 	stw	r3,4(sp)
    4168:	d8800015 	stw	r2,0(sp)
    416c:	01c03704 	movi	r7,220
    4170:	01805244 	movi	r6,329
    4174:	014030c4 	movi	r5,195
    4178:	01004c04 	movi	r4,304
    417c:	00036040 	call	3604 <draw_driver>
					break;
    4180:	00005d06 	br	42f8 <drawPlayer+0x7a8>
				case 3:
					draw_driver(player1_right0_x0, player1_right0_y0, player1_right0_x1, player1_right0_y1, player1->x, player1->y, 1);
    4184:	e0bffe17 	ldw	r2,-8(fp)
    4188:	1080008b 	ldhu	r2,2(r2)
    418c:	10bfffcc 	andi	r2,r2,65535
    4190:	e0fffe17 	ldw	r3,-8(fp)
    4194:	18c0010b 	ldhu	r3,4(r3)
    4198:	18ffffcc 	andi	r3,r3,65535
    419c:	01000044 	movi	r4,1
    41a0:	d9000215 	stw	r4,8(sp)
    41a4:	d8c00115 	stw	r3,4(sp)
    41a8:	d8800015 	stw	r2,0(sp)
    41ac:	01c01f04 	movi	r7,124
    41b0:	018051c4 	movi	r6,327
    41b4:	014018c4 	movi	r5,99
    41b8:	01004b84 	movi	r4,302
    41bc:	00036040 	call	3604 <draw_driver>
					break;
    41c0:	0001883a 	nop
    41c4:	00004c06 	br	42f8 <drawPlayer+0x7a8>
			}
		}
		else{
			switch(dir){
    41c8:	e0bffd0b 	ldhu	r2,-12(fp)
    41cc:	10c00060 	cmpeqi	r3,r2,1
    41d0:	1800191e 	bne	r3,zero,4238 <drawPlayer+0x6e8>
    41d4:	10c00088 	cmpgei	r3,r2,2
    41d8:	1800021e 	bne	r3,zero,41e4 <drawPlayer+0x694>
    41dc:	10000626 	beq	r2,zero,41f8 <drawPlayer+0x6a8>
					draw_driver(player2_right0_x0, player2_right0_y0, player2_right0_x1, player2_right0_y1, player1->x, player1->y, 1);
					break;
			}
		}
	}
}
    41e0:	00004506 	br	42f8 <drawPlayer+0x7a8>
					draw_driver(player1_right0_x0, player1_right0_y0, player1_right0_x1, player1_right0_y1, player1->x, player1->y, 1);
					break;
			}
		}
		else{
			switch(dir){
    41e4:	10c000a0 	cmpeqi	r3,r2,2
    41e8:	1800231e 	bne	r3,zero,4278 <drawPlayer+0x728>
    41ec:	108000e0 	cmpeqi	r2,r2,3
    41f0:	1000311e 	bne	r2,zero,42b8 <drawPlayer+0x768>
					draw_driver(player2_right0_x0, player2_right0_y0, player2_right0_x1, player2_right0_y1, player1->x, player1->y, 1);
					break;
			}
		}
	}
}
    41f4:	00004006 	br	42f8 <drawPlayer+0x7a8>
			}
		}
		else{
			switch(dir){
				case 0:
					draw_driver(player2_back0_x0, player2_back0_y0, player2_back0_x1, player2_back0_y1, player1->x, player1->y, 1);
    41f8:	e0bffe17 	ldw	r2,-8(fp)
    41fc:	1080008b 	ldhu	r2,2(r2)
    4200:	10bfffcc 	andi	r2,r2,65535
    4204:	e0fffe17 	ldw	r3,-8(fp)
    4208:	18c0010b 	ldhu	r3,4(r3)
    420c:	18ffffcc 	andi	r3,r3,65535
    4210:	01000044 	movi	r4,1
    4214:	d9000215 	stw	r4,8(sp)
    4218:	d8c00115 	stw	r3,4(sp)
    421c:	d8800015 	stw	r2,0(sp)
    4220:	01c04f04 	movi	r7,316
    4224:	01805a44 	movi	r6,361
    4228:	014048c4 	movi	r5,291
    422c:	01005404 	movi	r4,336
    4230:	00036040 	call	3604 <draw_driver>
					break;
    4234:	00003006 	br	42f8 <drawPlayer+0x7a8>
				case 1:
					draw_driver(player2_front0_x0, player2_front0_y0, player2_front0_x1, player2_front0_y1, player1->x, player1->y, 1);
    4238:	e0bffe17 	ldw	r2,-8(fp)
    423c:	1080008b 	ldhu	r2,2(r2)
    4240:	10bfffcc 	andi	r2,r2,65535
    4244:	e0fffe17 	ldw	r3,-8(fp)
    4248:	18c0010b 	ldhu	r3,4(r3)
    424c:	18ffffcc 	andi	r3,r3,65535
    4250:	01000044 	movi	r4,1
    4254:	d9000215 	stw	r4,8(sp)
    4258:	d8c00115 	stw	r3,4(sp)
    425c:	d8800015 	stw	r2,0(sp)
    4260:	01c00704 	movi	r7,28
    4264:	01805a44 	movi	r6,361
    4268:	014000c4 	movi	r5,3
    426c:	01005404 	movi	r4,336
    4270:	00036040 	call	3604 <draw_driver>
					break;
    4274:	00002006 	br	42f8 <drawPlayer+0x7a8>
				case 2:
					draw_driver(player2_left0_x0, player2_left0_y0, player2_left0_x1, player2_left0_y1, player1->x, player1->y, 1);
    4278:	e0bffe17 	ldw	r2,-8(fp)
    427c:	1080008b 	ldhu	r2,2(r2)
    4280:	10bfffcc 	andi	r2,r2,65535
    4284:	e0fffe17 	ldw	r3,-8(fp)
    4288:	18c0010b 	ldhu	r3,4(r3)
    428c:	18ffffcc 	andi	r3,r3,65535
    4290:	01000044 	movi	r4,1
    4294:	d9000215 	stw	r4,8(sp)
    4298:	d8c00115 	stw	r3,4(sp)
    429c:	d8800015 	stw	r2,0(sp)
    42a0:	01c03704 	movi	r7,220
    42a4:	01805a44 	movi	r6,361
    42a8:	014030c4 	movi	r5,195
    42ac:	01005404 	movi	r4,336
    42b0:	00036040 	call	3604 <draw_driver>
					break;
    42b4:	00001006 	br	42f8 <drawPlayer+0x7a8>
				case 3:
					draw_driver(player2_right0_x0, player2_right0_y0, player2_right0_x1, player2_right0_y1, player1->x, player1->y, 1);
    42b8:	e0bffe17 	ldw	r2,-8(fp)
    42bc:	1080008b 	ldhu	r2,2(r2)
    42c0:	10bfffcc 	andi	r2,r2,65535
    42c4:	e0fffe17 	ldw	r3,-8(fp)
    42c8:	18c0010b 	ldhu	r3,4(r3)
    42cc:	18ffffcc 	andi	r3,r3,65535
    42d0:	01000044 	movi	r4,1
    42d4:	d9000215 	stw	r4,8(sp)
    42d8:	d8c00115 	stw	r3,4(sp)
    42dc:	d8800015 	stw	r2,0(sp)
    42e0:	01c01f04 	movi	r7,124
    42e4:	01805a44 	movi	r6,361
    42e8:	014018c4 	movi	r5,99
    42ec:	01005404 	movi	r4,336
    42f0:	00036040 	call	3604 <draw_driver>
					break;
    42f4:	0001883a 	nop
			}
		}
	}
}
    42f8:	0001883a 	nop
    42fc:	e037883a 	mov	sp,fp
    4300:	dfc00117 	ldw	ra,4(sp)
    4304:	df000017 	ldw	fp,0(sp)
    4308:	dec00204 	addi	sp,sp,8
    430c:	f800283a 	ret

00004310 <drawPlayerHurt>:

void drawPlayerHurt(player *playerA){
    4310:	defffa04 	addi	sp,sp,-24
    4314:	dfc00515 	stw	ra,20(sp)
    4318:	df000415 	stw	fp,16(sp)
    431c:	df000404 	addi	fp,sp,16
    4320:	e13fff15 	stw	r4,-4(fp)
	cleanPlayer(playerA);
    4324:	e13fff17 	ldw	r4,-4(fp)
    4328:	0003a840 	call	3a84 <cleanPlayer>
	if(playerA->index==0){
    432c:	e0bfff17 	ldw	r2,-4(fp)
    4330:	1080000b 	ldhu	r2,0(r2)
    4334:	10bfffcc 	andi	r2,r2,65535
    4338:	1000101e 	bne	r2,zero,437c <drawPlayerHurt+0x6c>
		draw_driver(player1_hurt_x0, player1_hurt_y0, player1_hurt_x1, player1_hurt_y1, playerA->x, playerA->y, 1);
    433c:	e0bfff17 	ldw	r2,-4(fp)
    4340:	1080008b 	ldhu	r2,2(r2)
    4344:	10bfffcc 	andi	r2,r2,65535
    4348:	e0ffff17 	ldw	r3,-4(fp)
    434c:	18c0010b 	ldhu	r3,4(r3)
    4350:	18ffffcc 	andi	r3,r3,65535
    4354:	01000044 	movi	r4,1
    4358:	d9000215 	stw	r4,8(sp)
    435c:	d8c00115 	stw	r3,4(sp)
    4360:	d8800015 	stw	r2,0(sp)
    4364:	01c06704 	movi	r7,412
    4368:	018051c4 	movi	r6,327
    436c:	014060c4 	movi	r5,387
    4370:	01004b84 	movi	r4,302
    4374:	00036040 	call	3604 <draw_driver>
	}
	else{
		draw_driver(player2_hurt_x0, player2_hurt_y0, player2_hurt_x1, player2_hurt_y1, playerA->x, playerA->y, 1);
	}
}
    4378:	00000f06 	br	43b8 <drawPlayerHurt+0xa8>
	cleanPlayer(playerA);
	if(playerA->index==0){
		draw_driver(player1_hurt_x0, player1_hurt_y0, player1_hurt_x1, player1_hurt_y1, playerA->x, playerA->y, 1);
	}
	else{
		draw_driver(player2_hurt_x0, player2_hurt_y0, player2_hurt_x1, player2_hurt_y1, playerA->x, playerA->y, 1);
    437c:	e0bfff17 	ldw	r2,-4(fp)
    4380:	1080008b 	ldhu	r2,2(r2)
    4384:	10bfffcc 	andi	r2,r2,65535
    4388:	e0ffff17 	ldw	r3,-4(fp)
    438c:	18c0010b 	ldhu	r3,4(r3)
    4390:	18ffffcc 	andi	r3,r3,65535
    4394:	01000044 	movi	r4,1
    4398:	d9000215 	stw	r4,8(sp)
    439c:	d8c00115 	stw	r3,4(sp)
    43a0:	d8800015 	stw	r2,0(sp)
    43a4:	01c06704 	movi	r7,412
    43a8:	01805a44 	movi	r6,361
    43ac:	014060c4 	movi	r5,387
    43b0:	01005404 	movi	r4,336
    43b4:	00036040 	call	3604 <draw_driver>
	}
}
    43b8:	0001883a 	nop
    43bc:	e037883a 	mov	sp,fp
    43c0:	dfc00117 	ldw	ra,4(sp)
    43c4:	df000017 	ldw	fp,0(sp)
    43c8:	dec00204 	addi	sp,sp,8
    43cc:	f800283a 	ret

000043d0 <drawExplosion>:

//notice that X and Y corresponds to cell index not pixel index
void drawExplosion(unsigned short int counter, unsigned short int X, unsigned short int Y){
    43d0:	defff804 	addi	sp,sp,-32
    43d4:	dfc00715 	stw	ra,28(sp)
    43d8:	df000615 	stw	fp,24(sp)
    43dc:	df000604 	addi	fp,sp,24
    43e0:	2807883a 	mov	r3,r5
    43e4:	3005883a 	mov	r2,r6
    43e8:	e13ffd0d 	sth	r4,-12(fp)
    43ec:	e0fffe0d 	sth	r3,-8(fp)
    43f0:	e0bfff0d 	sth	r2,-4(fp)
	switch(counter){
    43f4:	e0bffd0b 	ldhu	r2,-12(fp)
    43f8:	10c00928 	cmpgeui	r3,r2,36
    43fc:	18026a1e 	bne	r3,zero,4da8 <drawExplosion+0x9d8>
    4400:	100690ba 	slli	r3,r2,2
    4404:	00800034 	movhi	r2,0
    4408:	10910604 	addi	r2,r2,17432
    440c:	1885883a 	add	r2,r3,r2
    4410:	10800017 	ldw	r2,0(r2)
    4414:	1000683a 	jmp	r2
    4418:	000044a8 	cmpgeui	zero,zero,274
    441c:	000044e8 	cmpgeui	zero,zero,275
    4420:	00004528 	cmpgeui	zero,zero,276
    4424:	00004568 	cmpgeui	zero,zero,277
    4428:	000045a8 	cmpgeui	zero,zero,278
    442c:	000045e8 	cmpgeui	zero,zero,279
    4430:	00004628 	cmpgeui	zero,zero,280
    4434:	00004668 	cmpgeui	zero,zero,281
    4438:	000046a8 	cmpgeui	zero,zero,282
    443c:	000046e8 	cmpgeui	zero,zero,283
    4440:	00004728 	cmpgeui	zero,zero,284
    4444:	00004768 	cmpgeui	zero,zero,285
    4448:	000047a8 	cmpgeui	zero,zero,286
    444c:	000047e8 	cmpgeui	zero,zero,287
    4450:	00004828 	cmpgeui	zero,zero,288
    4454:	00004868 	cmpgeui	zero,zero,289
    4458:	000048a8 	cmpgeui	zero,zero,290
    445c:	000048e8 	cmpgeui	zero,zero,291
    4460:	00004928 	cmpgeui	zero,zero,292
    4464:	00004968 	cmpgeui	zero,zero,293
    4468:	000049a8 	cmpgeui	zero,zero,294
    446c:	000049e8 	cmpgeui	zero,zero,295
    4470:	00004a28 	cmpgeui	zero,zero,296
    4474:	00004a68 	cmpgeui	zero,zero,297
    4478:	00004aa8 	cmpgeui	zero,zero,298
    447c:	00004ae8 	cmpgeui	zero,zero,299
    4480:	00004b28 	cmpgeui	zero,zero,300
    4484:	00004b68 	cmpgeui	zero,zero,301
    4488:	00004ba8 	cmpgeui	zero,zero,302
    448c:	00004be8 	cmpgeui	zero,zero,303
    4490:	00004c28 	cmpgeui	zero,zero,304
    4494:	00004c68 	cmpgeui	zero,zero,305
    4498:	00004ca8 	cmpgeui	zero,zero,306
    449c:	00004ce8 	cmpgeui	zero,zero,307
    44a0:	00004d28 	cmpgeui	zero,zero,308
    44a4:	00004d68 	cmpgeui	zero,zero,309
		case 0:
			draw_driver(explosion0_x0, explosion0_y0, explosion0_x1, explosion0_y1, X*32, Y*32, 1);
    44a8:	e0bffe0b 	ldhu	r2,-8(fp)
    44ac:	1004917a 	slli	r2,r2,5
    44b0:	1007883a 	mov	r3,r2
    44b4:	e0bfff0b 	ldhu	r2,-4(fp)
    44b8:	1004917a 	slli	r2,r2,5
    44bc:	1009883a 	mov	r4,r2
    44c0:	00800044 	movi	r2,1
    44c4:	d8800215 	stw	r2,8(sp)
    44c8:	d9000115 	stw	r4,4(sp)
    44cc:	d8c00015 	stw	r3,0(sp)
    44d0:	01c007c4 	movi	r7,31
    44d4:	01802384 	movi	r6,142
    44d8:	000b883a 	mov	r5,zero
    44dc:	01001bc4 	movi	r4,111
    44e0:	00036040 	call	3604 <draw_driver>
			break;
    44e4:	00023106 	br	4dac <drawExplosion+0x9dc>
		case 1:
			draw_driver(explosion1_x0, explosion1_y0, explosion1_x1, explosion1_y1, X*32, Y*32, 1);
    44e8:	e0bffe0b 	ldhu	r2,-8(fp)
    44ec:	1004917a 	slli	r2,r2,5
    44f0:	1007883a 	mov	r3,r2
    44f4:	e0bfff0b 	ldhu	r2,-4(fp)
    44f8:	1004917a 	slli	r2,r2,5
    44fc:	1009883a 	mov	r4,r2
    4500:	00800044 	movi	r2,1
    4504:	d8800215 	stw	r2,8(sp)
    4508:	d9000115 	stw	r4,4(sp)
    450c:	d8c00015 	stw	r3,0(sp)
    4510:	01c007c4 	movi	r7,31
    4514:	01802c04 	movi	r6,176
    4518:	000b883a 	mov	r5,zero
    451c:	01002444 	movi	r4,145
    4520:	00036040 	call	3604 <draw_driver>
			break;
    4524:	00022106 	br	4dac <drawExplosion+0x9dc>
		case 2:
			draw_driver(explosion2_x0, explosion2_y0, explosion2_x1, explosion2_y1, X*32, Y*32, 1);
    4528:	e0bffe0b 	ldhu	r2,-8(fp)
    452c:	1004917a 	slli	r2,r2,5
    4530:	1007883a 	mov	r3,r2
    4534:	e0bfff0b 	ldhu	r2,-4(fp)
    4538:	1004917a 	slli	r2,r2,5
    453c:	1009883a 	mov	r4,r2
    4540:	00800044 	movi	r2,1
    4544:	d8800215 	stw	r2,8(sp)
    4548:	d9000115 	stw	r4,4(sp)
    454c:	d8c00015 	stw	r3,0(sp)
    4550:	01c007c4 	movi	r7,31
    4554:	01803404 	movi	r6,208
    4558:	000b883a 	mov	r5,zero
    455c:	01002c44 	movi	r4,177
    4560:	00036040 	call	3604 <draw_driver>
			break;
    4564:	00021106 	br	4dac <drawExplosion+0x9dc>
		case 3:
			draw_driver(explosion3_x0, explosion3_y0, explosion3_x1, explosion3_y1, X*32, Y*32, 1);
    4568:	e0bffe0b 	ldhu	r2,-8(fp)
    456c:	1004917a 	slli	r2,r2,5
    4570:	1007883a 	mov	r3,r2
    4574:	e0bfff0b 	ldhu	r2,-4(fp)
    4578:	1004917a 	slli	r2,r2,5
    457c:	1009883a 	mov	r4,r2
    4580:	00800044 	movi	r2,1
    4584:	d8800215 	stw	r2,8(sp)
    4588:	d9000115 	stw	r4,4(sp)
    458c:	d8c00015 	stw	r3,0(sp)
    4590:	01c007c4 	movi	r7,31
    4594:	01803c04 	movi	r6,240
    4598:	000b883a 	mov	r5,zero
    459c:	01003444 	movi	r4,209
    45a0:	00036040 	call	3604 <draw_driver>
			break;
    45a4:	00020106 	br	4dac <drawExplosion+0x9dc>
		case 4:
			draw_driver(explosion4_x0, explosion4_y0, explosion4_x1, explosion4_y1, X*32, Y*32, 1);
    45a8:	e0bffe0b 	ldhu	r2,-8(fp)
    45ac:	1004917a 	slli	r2,r2,5
    45b0:	1007883a 	mov	r3,r2
    45b4:	e0bfff0b 	ldhu	r2,-4(fp)
    45b8:	1004917a 	slli	r2,r2,5
    45bc:	1009883a 	mov	r4,r2
    45c0:	00800044 	movi	r2,1
    45c4:	d8800215 	stw	r2,8(sp)
    45c8:	d9000115 	stw	r4,4(sp)
    45cc:	d8c00015 	stw	r3,0(sp)
    45d0:	01c00fc4 	movi	r7,63
    45d4:	01802404 	movi	r6,144
    45d8:	01400804 	movi	r5,32
    45dc:	01001c44 	movi	r4,113
    45e0:	00036040 	call	3604 <draw_driver>
			break;
    45e4:	0001f106 	br	4dac <drawExplosion+0x9dc>
		case 5:
			draw_driver(explosion5_x0, explosion5_y0, explosion5_x1, explosion5_y1, X*32, Y*32, 1);
    45e8:	e0bffe0b 	ldhu	r2,-8(fp)
    45ec:	1004917a 	slli	r2,r2,5
    45f0:	1007883a 	mov	r3,r2
    45f4:	e0bfff0b 	ldhu	r2,-4(fp)
    45f8:	1004917a 	slli	r2,r2,5
    45fc:	1009883a 	mov	r4,r2
    4600:	00800044 	movi	r2,1
    4604:	d8800215 	stw	r2,8(sp)
    4608:	d9000115 	stw	r4,4(sp)
    460c:	d8c00015 	stw	r3,0(sp)
    4610:	01c00fc4 	movi	r7,63
    4614:	01802c44 	movi	r6,177
    4618:	01400804 	movi	r5,32
    461c:	01002484 	movi	r4,146
    4620:	00036040 	call	3604 <draw_driver>
			break;
    4624:	0001e106 	br	4dac <drawExplosion+0x9dc>
		case 6:
			draw_driver(explosion6_x0, explosion6_y0, explosion6_x1, explosion6_y1, X*32, Y*32, 1);
    4628:	e0bffe0b 	ldhu	r2,-8(fp)
    462c:	1004917a 	slli	r2,r2,5
    4630:	1007883a 	mov	r3,r2
    4634:	e0bfff0b 	ldhu	r2,-4(fp)
    4638:	1004917a 	slli	r2,r2,5
    463c:	1009883a 	mov	r4,r2
    4640:	00800044 	movi	r2,1
    4644:	d8800215 	stw	r2,8(sp)
    4648:	d9000115 	stw	r4,4(sp)
    464c:	d8c00015 	stw	r3,0(sp)
    4650:	01c00fc4 	movi	r7,63
    4654:	01803444 	movi	r6,209
    4658:	01400804 	movi	r5,32
    465c:	01002c84 	movi	r4,178
    4660:	00036040 	call	3604 <draw_driver>
			break;
    4664:	0001d106 	br	4dac <drawExplosion+0x9dc>
		case 7:
			draw_driver(explosion7_x0, explosion7_y0, explosion7_x1, explosion7_y1, X*32, Y*32, 1);
    4668:	e0bffe0b 	ldhu	r2,-8(fp)
    466c:	1004917a 	slli	r2,r2,5
    4670:	1007883a 	mov	r3,r2
    4674:	e0bfff0b 	ldhu	r2,-4(fp)
    4678:	1004917a 	slli	r2,r2,5
    467c:	1009883a 	mov	r4,r2
    4680:	00800044 	movi	r2,1
    4684:	d8800215 	stw	r2,8(sp)
    4688:	d9000115 	stw	r4,4(sp)
    468c:	d8c00015 	stw	r3,0(sp)
    4690:	01c00fc4 	movi	r7,63
    4694:	01803c44 	movi	r6,241
    4698:	01400804 	movi	r5,32
    469c:	01003484 	movi	r4,210
    46a0:	00036040 	call	3604 <draw_driver>
			break;
    46a4:	0001c106 	br	4dac <drawExplosion+0x9dc>
		case 8:
			draw_driver(explosion8_x0, explosion8_y0, explosion8_x1, explosion8_y1, X*32, Y*32, 1);
    46a8:	e0bffe0b 	ldhu	r2,-8(fp)
    46ac:	1004917a 	slli	r2,r2,5
    46b0:	1007883a 	mov	r3,r2
    46b4:	e0bfff0b 	ldhu	r2,-4(fp)
    46b8:	1004917a 	slli	r2,r2,5
    46bc:	1009883a 	mov	r4,r2
    46c0:	00800044 	movi	r2,1
    46c4:	d8800215 	stw	r2,8(sp)
    46c8:	d9000115 	stw	r4,4(sp)
    46cc:	d8c00015 	stw	r3,0(sp)
    46d0:	01c017c4 	movi	r7,95
    46d4:	01802484 	movi	r6,146
    46d8:	01400fc4 	movi	r5,63
    46dc:	01001cc4 	movi	r4,115
    46e0:	00036040 	call	3604 <draw_driver>
			break;
    46e4:	0001b106 	br	4dac <drawExplosion+0x9dc>
		case 9:
			draw_driver(explosion9_x0, explosion9_y0, explosion9_x1, explosion9_y1, X*32, Y*32, 1);
    46e8:	e0bffe0b 	ldhu	r2,-8(fp)
    46ec:	1004917a 	slli	r2,r2,5
    46f0:	1007883a 	mov	r3,r2
    46f4:	e0bfff0b 	ldhu	r2,-4(fp)
    46f8:	1004917a 	slli	r2,r2,5
    46fc:	1009883a 	mov	r4,r2
    4700:	00800044 	movi	r2,1
    4704:	d8800215 	stw	r2,8(sp)
    4708:	d9000115 	stw	r4,4(sp)
    470c:	d8c00015 	stw	r3,0(sp)
    4710:	01c01784 	movi	r7,94
    4714:	01802c84 	movi	r6,178
    4718:	01400fc4 	movi	r5,63
    471c:	010024c4 	movi	r4,147
    4720:	00036040 	call	3604 <draw_driver>
			break;
    4724:	0001a106 	br	4dac <drawExplosion+0x9dc>
		case 10:
			draw_driver(explosion10_x0, explosion10_y0, explosion10_x1, explosion10_y1, X*32, Y*32, 1);
    4728:	e0bffe0b 	ldhu	r2,-8(fp)
    472c:	1004917a 	slli	r2,r2,5
    4730:	1007883a 	mov	r3,r2
    4734:	e0bfff0b 	ldhu	r2,-4(fp)
    4738:	1004917a 	slli	r2,r2,5
    473c:	1009883a 	mov	r4,r2
    4740:	00800044 	movi	r2,1
    4744:	d8800215 	stw	r2,8(sp)
    4748:	d9000115 	stw	r4,4(sp)
    474c:	d8c00015 	stw	r3,0(sp)
    4750:	01c01784 	movi	r7,94
    4754:	01803484 	movi	r6,210
    4758:	01400fc4 	movi	r5,63
    475c:	01002cc4 	movi	r4,179
    4760:	00036040 	call	3604 <draw_driver>
			break;
    4764:	00019106 	br	4dac <drawExplosion+0x9dc>
		case 11:
			draw_driver(explosion11_x0, explosion11_y0, explosion11_x1, explosion11_y1, X*32, Y*32, 1);
    4768:	e0bffe0b 	ldhu	r2,-8(fp)
    476c:	1004917a 	slli	r2,r2,5
    4770:	1007883a 	mov	r3,r2
    4774:	e0bfff0b 	ldhu	r2,-4(fp)
    4778:	1004917a 	slli	r2,r2,5
    477c:	1009883a 	mov	r4,r2
    4780:	00800044 	movi	r2,1
    4784:	d8800215 	stw	r2,8(sp)
    4788:	d9000115 	stw	r4,4(sp)
    478c:	d8c00015 	stw	r3,0(sp)
    4790:	01c01784 	movi	r7,94
    4794:	01803c84 	movi	r6,242
    4798:	01400fc4 	movi	r5,63
    479c:	010034c4 	movi	r4,211
    47a0:	00036040 	call	3604 <draw_driver>
			break;
    47a4:	00018106 	br	4dac <drawExplosion+0x9dc>
		case 12:
			draw_driver(explosion12_x0, explosion12_y0, explosion12_x1, explosion12_y1, X*32, Y*32, 1);
    47a8:	e0bffe0b 	ldhu	r2,-8(fp)
    47ac:	1004917a 	slli	r2,r2,5
    47b0:	1007883a 	mov	r3,r2
    47b4:	e0bfff0b 	ldhu	r2,-4(fp)
    47b8:	1004917a 	slli	r2,r2,5
    47bc:	1009883a 	mov	r4,r2
    47c0:	00800044 	movi	r2,1
    47c4:	d8800215 	stw	r2,8(sp)
    47c8:	d9000115 	stw	r4,4(sp)
    47cc:	d8c00015 	stw	r3,0(sp)
    47d0:	01c01f44 	movi	r7,125
    47d4:	018024c4 	movi	r6,147
    47d8:	01401784 	movi	r5,94
    47dc:	01001d04 	movi	r4,116
    47e0:	00036040 	call	3604 <draw_driver>
			break;
    47e4:	00017106 	br	4dac <drawExplosion+0x9dc>
		case 13:
			draw_driver(explosion13_x0, explosion13_y0, explosion13_x1, explosion13_y1, X*32, Y*32, 1);
    47e8:	e0bffe0b 	ldhu	r2,-8(fp)
    47ec:	1004917a 	slli	r2,r2,5
    47f0:	1007883a 	mov	r3,r2
    47f4:	e0bfff0b 	ldhu	r2,-4(fp)
    47f8:	1004917a 	slli	r2,r2,5
    47fc:	1009883a 	mov	r4,r2
    4800:	00800044 	movi	r2,1
    4804:	d8800215 	stw	r2,8(sp)
    4808:	d9000115 	stw	r4,4(sp)
    480c:	d8c00015 	stw	r3,0(sp)
    4810:	01c01f44 	movi	r7,125
    4814:	01802cc4 	movi	r6,179
    4818:	01401784 	movi	r5,94
    481c:	01002504 	movi	r4,148
    4820:	00036040 	call	3604 <draw_driver>
			break;
    4824:	00016106 	br	4dac <drawExplosion+0x9dc>
		case 14:
			draw_driver(explosion14_x0, explosion14_y0, explosion14_x1, explosion14_y1, X*32, Y*32, 1);
    4828:	e0bffe0b 	ldhu	r2,-8(fp)
    482c:	1004917a 	slli	r2,r2,5
    4830:	1007883a 	mov	r3,r2
    4834:	e0bfff0b 	ldhu	r2,-4(fp)
    4838:	1004917a 	slli	r2,r2,5
    483c:	1009883a 	mov	r4,r2
    4840:	00800044 	movi	r2,1
    4844:	d8800215 	stw	r2,8(sp)
    4848:	d9000115 	stw	r4,4(sp)
    484c:	d8c00015 	stw	r3,0(sp)
    4850:	01c01f44 	movi	r7,125
    4854:	018034c4 	movi	r6,211
    4858:	01401784 	movi	r5,94
    485c:	01002d04 	movi	r4,180
    4860:	00036040 	call	3604 <draw_driver>
			break;
    4864:	00015106 	br	4dac <drawExplosion+0x9dc>
		case 15:
			draw_driver(explosion15_x0, explosion15_y0, explosion15_x1, explosion15_y1, X*32, Y*32, 1);
    4868:	e0bffe0b 	ldhu	r2,-8(fp)
    486c:	1004917a 	slli	r2,r2,5
    4870:	1007883a 	mov	r3,r2
    4874:	e0bfff0b 	ldhu	r2,-4(fp)
    4878:	1004917a 	slli	r2,r2,5
    487c:	1009883a 	mov	r4,r2
    4880:	00800044 	movi	r2,1
    4884:	d8800215 	stw	r2,8(sp)
    4888:	d9000115 	stw	r4,4(sp)
    488c:	d8c00015 	stw	r3,0(sp)
    4890:	01c01f44 	movi	r7,125
    4894:	01803cc4 	movi	r6,243
    4898:	01401784 	movi	r5,94
    489c:	01003504 	movi	r4,212
    48a0:	00036040 	call	3604 <draw_driver>
			break;
    48a4:	00014106 	br	4dac <drawExplosion+0x9dc>
		case 16:
			draw_driver(explosion16_x0, explosion16_y0, explosion16_x1, explosion16_y1, X*32, Y*32, 1);
    48a8:	e0bffe0b 	ldhu	r2,-8(fp)
    48ac:	1004917a 	slli	r2,r2,5
    48b0:	1007883a 	mov	r3,r2
    48b4:	e0bfff0b 	ldhu	r2,-4(fp)
    48b8:	1004917a 	slli	r2,r2,5
    48bc:	1009883a 	mov	r4,r2
    48c0:	00800044 	movi	r2,1
    48c4:	d8800215 	stw	r2,8(sp)
    48c8:	d9000115 	stw	r4,4(sp)
    48cc:	d8c00015 	stw	r3,0(sp)
    48d0:	01c02744 	movi	r7,157
    48d4:	01802504 	movi	r6,148
    48d8:	01401f84 	movi	r5,126
    48dc:	01001d44 	movi	r4,117
    48e0:	00036040 	call	3604 <draw_driver>
			break;
    48e4:	00013106 	br	4dac <drawExplosion+0x9dc>
		case 17:
			draw_driver(explosion17_x0, explosion17_y0, explosion17_x1, explosion17_y1, X*32, Y*32, 1);
    48e8:	e0bffe0b 	ldhu	r2,-8(fp)
    48ec:	1004917a 	slli	r2,r2,5
    48f0:	1007883a 	mov	r3,r2
    48f4:	e0bfff0b 	ldhu	r2,-4(fp)
    48f8:	1004917a 	slli	r2,r2,5
    48fc:	1009883a 	mov	r4,r2
    4900:	00800044 	movi	r2,1
    4904:	d8800215 	stw	r2,8(sp)
    4908:	d9000115 	stw	r4,4(sp)
    490c:	d8c00015 	stw	r3,0(sp)
    4910:	01c02744 	movi	r7,157
    4914:	01802d04 	movi	r6,180
    4918:	01401f84 	movi	r5,126
    491c:	01002544 	movi	r4,149
    4920:	00036040 	call	3604 <draw_driver>
			break;
    4924:	00012106 	br	4dac <drawExplosion+0x9dc>
		case 18:
			draw_driver(explosion18_x0, explosion18_y0, explosion18_x1, explosion18_y1, X*32, Y*32, 1);
    4928:	e0bffe0b 	ldhu	r2,-8(fp)
    492c:	1004917a 	slli	r2,r2,5
    4930:	1007883a 	mov	r3,r2
    4934:	e0bfff0b 	ldhu	r2,-4(fp)
    4938:	1004917a 	slli	r2,r2,5
    493c:	1009883a 	mov	r4,r2
    4940:	00800044 	movi	r2,1
    4944:	d8800215 	stw	r2,8(sp)
    4948:	d9000115 	stw	r4,4(sp)
    494c:	d8c00015 	stw	r3,0(sp)
    4950:	01c02744 	movi	r7,157
    4954:	01803504 	movi	r6,212
    4958:	01401f84 	movi	r5,126
    495c:	01002d44 	movi	r4,181
    4960:	00036040 	call	3604 <draw_driver>
			break;
    4964:	00011106 	br	4dac <drawExplosion+0x9dc>
		case 19:
			draw_driver(explosion19_x0, explosion19_y0, explosion19_x1, explosion19_y1, X*32, Y*32, 1);
    4968:	e0bffe0b 	ldhu	r2,-8(fp)
    496c:	1004917a 	slli	r2,r2,5
    4970:	1007883a 	mov	r3,r2
    4974:	e0bfff0b 	ldhu	r2,-4(fp)
    4978:	1004917a 	slli	r2,r2,5
    497c:	1009883a 	mov	r4,r2
    4980:	00800044 	movi	r2,1
    4984:	d8800215 	stw	r2,8(sp)
    4988:	d9000115 	stw	r4,4(sp)
    498c:	d8c00015 	stw	r3,0(sp)
    4990:	01c02744 	movi	r7,157
    4994:	01803d04 	movi	r6,244
    4998:	01401f84 	movi	r5,126
    499c:	01003544 	movi	r4,213
    49a0:	00036040 	call	3604 <draw_driver>
			break;
    49a4:	00010106 	br	4dac <drawExplosion+0x9dc>
		case 20:
			draw_driver(explosion20_x0, explosion20_y0, explosion20_x1, explosion20_y1, X*32, Y*32, 1);
    49a8:	e0bffe0b 	ldhu	r2,-8(fp)
    49ac:	1004917a 	slli	r2,r2,5
    49b0:	1007883a 	mov	r3,r2
    49b4:	e0bfff0b 	ldhu	r2,-4(fp)
    49b8:	1004917a 	slli	r2,r2,5
    49bc:	1009883a 	mov	r4,r2
    49c0:	00800044 	movi	r2,1
    49c4:	d8800215 	stw	r2,8(sp)
    49c8:	d9000115 	stw	r4,4(sp)
    49cc:	d8c00015 	stw	r3,0(sp)
    49d0:	01c02f04 	movi	r7,188
    49d4:	01802544 	movi	r6,149
    49d8:	01402744 	movi	r5,157
    49dc:	01001d84 	movi	r4,118
    49e0:	00036040 	call	3604 <draw_driver>
			break;
    49e4:	0000f106 	br	4dac <drawExplosion+0x9dc>
		case 21:
			draw_driver(explosion21_x0, explosion21_y0, explosion21_x1, explosion21_y1, X*32, Y*32, 1);
    49e8:	e0bffe0b 	ldhu	r2,-8(fp)
    49ec:	1004917a 	slli	r2,r2,5
    49f0:	1007883a 	mov	r3,r2
    49f4:	e0bfff0b 	ldhu	r2,-4(fp)
    49f8:	1004917a 	slli	r2,r2,5
    49fc:	1009883a 	mov	r4,r2
    4a00:	00800044 	movi	r2,1
    4a04:	d8800215 	stw	r2,8(sp)
    4a08:	d9000115 	stw	r4,4(sp)
    4a0c:	d8c00015 	stw	r3,0(sp)
    4a10:	01c02f04 	movi	r7,188
    4a14:	01802d44 	movi	r6,181
    4a18:	01402744 	movi	r5,157
    4a1c:	01002584 	movi	r4,150
    4a20:	00036040 	call	3604 <draw_driver>
			break;
    4a24:	0000e106 	br	4dac <drawExplosion+0x9dc>
		case 22:
			draw_driver(explosion22_x0, explosion22_y0, explosion22_x1, explosion22_y1, X*32, Y*32, 1);
    4a28:	e0bffe0b 	ldhu	r2,-8(fp)
    4a2c:	1004917a 	slli	r2,r2,5
    4a30:	1007883a 	mov	r3,r2
    4a34:	e0bfff0b 	ldhu	r2,-4(fp)
    4a38:	1004917a 	slli	r2,r2,5
    4a3c:	1009883a 	mov	r4,r2
    4a40:	00800044 	movi	r2,1
    4a44:	d8800215 	stw	r2,8(sp)
    4a48:	d9000115 	stw	r4,4(sp)
    4a4c:	d8c00015 	stw	r3,0(sp)
    4a50:	01c02f04 	movi	r7,188
    4a54:	01803544 	movi	r6,213
    4a58:	01402744 	movi	r5,157
    4a5c:	01002d84 	movi	r4,182
    4a60:	00036040 	call	3604 <draw_driver>
			break;
    4a64:	0000d106 	br	4dac <drawExplosion+0x9dc>
		case 23:
			draw_driver(explosion23_x0, explosion23_y0, explosion23_x1, explosion23_y1, X*32, Y*32, 1);
    4a68:	e0bffe0b 	ldhu	r2,-8(fp)
    4a6c:	1004917a 	slli	r2,r2,5
    4a70:	1007883a 	mov	r3,r2
    4a74:	e0bfff0b 	ldhu	r2,-4(fp)
    4a78:	1004917a 	slli	r2,r2,5
    4a7c:	1009883a 	mov	r4,r2
    4a80:	00800044 	movi	r2,1
    4a84:	d8800215 	stw	r2,8(sp)
    4a88:	d9000115 	stw	r4,4(sp)
    4a8c:	d8c00015 	stw	r3,0(sp)
    4a90:	01c02f04 	movi	r7,188
    4a94:	01803d44 	movi	r6,245
    4a98:	01402744 	movi	r5,157
    4a9c:	01003584 	movi	r4,214
    4aa0:	00036040 	call	3604 <draw_driver>
			break;
    4aa4:	0000c106 	br	4dac <drawExplosion+0x9dc>
		case 24:
			draw_driver(explosion24_x0, explosion24_y0, explosion24_x1, explosion24_y1, X*32, Y*32, 1);
    4aa8:	e0bffe0b 	ldhu	r2,-8(fp)
    4aac:	1004917a 	slli	r2,r2,5
    4ab0:	1007883a 	mov	r3,r2
    4ab4:	e0bfff0b 	ldhu	r2,-4(fp)
    4ab8:	1004917a 	slli	r2,r2,5
    4abc:	1009883a 	mov	r4,r2
    4ac0:	00800044 	movi	r2,1
    4ac4:	d8800215 	stw	r2,8(sp)
    4ac8:	d9000115 	stw	r4,4(sp)
    4acc:	d8c00015 	stw	r3,0(sp)
    4ad0:	01c03704 	movi	r7,220
    4ad4:	01802584 	movi	r6,150
    4ad8:	01402f44 	movi	r5,189
    4adc:	01001dc4 	movi	r4,119
    4ae0:	00036040 	call	3604 <draw_driver>
			break;
    4ae4:	0000b106 	br	4dac <drawExplosion+0x9dc>
		case 25:
			draw_driver(explosion25_x0, explosion25_y0, explosion25_x1, explosion25_y1, X*32, Y*32, 1);
    4ae8:	e0bffe0b 	ldhu	r2,-8(fp)
    4aec:	1004917a 	slli	r2,r2,5
    4af0:	1007883a 	mov	r3,r2
    4af4:	e0bfff0b 	ldhu	r2,-4(fp)
    4af8:	1004917a 	slli	r2,r2,5
    4afc:	1009883a 	mov	r4,r2
    4b00:	00800044 	movi	r2,1
    4b04:	d8800215 	stw	r2,8(sp)
    4b08:	d9000115 	stw	r4,4(sp)
    4b0c:	d8c00015 	stw	r3,0(sp)
    4b10:	01c03704 	movi	r7,220
    4b14:	01802d84 	movi	r6,182
    4b18:	01402f44 	movi	r5,189
    4b1c:	010025c4 	movi	r4,151
    4b20:	00036040 	call	3604 <draw_driver>
			break;
    4b24:	0000a106 	br	4dac <drawExplosion+0x9dc>
		case 26:
			draw_driver(explosion26_x0, explosion26_y0, explosion26_x1, explosion26_y1, X*32, Y*32, 1);
    4b28:	e0bffe0b 	ldhu	r2,-8(fp)
    4b2c:	1004917a 	slli	r2,r2,5
    4b30:	1007883a 	mov	r3,r2
    4b34:	e0bfff0b 	ldhu	r2,-4(fp)
    4b38:	1004917a 	slli	r2,r2,5
    4b3c:	1009883a 	mov	r4,r2
    4b40:	00800044 	movi	r2,1
    4b44:	d8800215 	stw	r2,8(sp)
    4b48:	d9000115 	stw	r4,4(sp)
    4b4c:	d8c00015 	stw	r3,0(sp)
    4b50:	01c03704 	movi	r7,220
    4b54:	01803584 	movi	r6,214
    4b58:	01402f44 	movi	r5,189
    4b5c:	01002dc4 	movi	r4,183
    4b60:	00036040 	call	3604 <draw_driver>
			break;
    4b64:	00009106 	br	4dac <drawExplosion+0x9dc>
		case 27:
			draw_driver(explosion27_x0, explosion27_y0, explosion27_x1, explosion27_y1, X*32, Y*32, 1);
    4b68:	e0bffe0b 	ldhu	r2,-8(fp)
    4b6c:	1004917a 	slli	r2,r2,5
    4b70:	1007883a 	mov	r3,r2
    4b74:	e0bfff0b 	ldhu	r2,-4(fp)
    4b78:	1004917a 	slli	r2,r2,5
    4b7c:	1009883a 	mov	r4,r2
    4b80:	00800044 	movi	r2,1
    4b84:	d8800215 	stw	r2,8(sp)
    4b88:	d9000115 	stw	r4,4(sp)
    4b8c:	d8c00015 	stw	r3,0(sp)
    4b90:	01c03704 	movi	r7,220
    4b94:	01803d84 	movi	r6,246
    4b98:	01402f44 	movi	r5,189
    4b9c:	010035c4 	movi	r4,215
    4ba0:	00036040 	call	3604 <draw_driver>
			break;
    4ba4:	00008106 	br	4dac <drawExplosion+0x9dc>
		case 28:
			draw_driver(explosion28_x0, explosion28_y0, explosion28_x1, explosion28_y1, X*32, Y*32, 1);
    4ba8:	e0bffe0b 	ldhu	r2,-8(fp)
    4bac:	1004917a 	slli	r2,r2,5
    4bb0:	1007883a 	mov	r3,r2
    4bb4:	e0bfff0b 	ldhu	r2,-4(fp)
    4bb8:	1004917a 	slli	r2,r2,5
    4bbc:	1009883a 	mov	r4,r2
    4bc0:	00800044 	movi	r2,1
    4bc4:	d8800215 	stw	r2,8(sp)
    4bc8:	d9000115 	stw	r4,4(sp)
    4bcc:	d8c00015 	stw	r3,0(sp)
    4bd0:	01c03f04 	movi	r7,252
    4bd4:	018025c4 	movi	r6,151
    4bd8:	01403744 	movi	r5,221
    4bdc:	01001e04 	movi	r4,120
    4be0:	00036040 	call	3604 <draw_driver>
			break;
    4be4:	00007106 	br	4dac <drawExplosion+0x9dc>
		case 29:
			draw_driver(explosion29_x0, explosion29_y0, explosion29_x1, explosion29_y1, X*32, Y*32, 1);
    4be8:	e0bffe0b 	ldhu	r2,-8(fp)
    4bec:	1004917a 	slli	r2,r2,5
    4bf0:	1007883a 	mov	r3,r2
    4bf4:	e0bfff0b 	ldhu	r2,-4(fp)
    4bf8:	1004917a 	slli	r2,r2,5
    4bfc:	1009883a 	mov	r4,r2
    4c00:	00800044 	movi	r2,1
    4c04:	d8800215 	stw	r2,8(sp)
    4c08:	d9000115 	stw	r4,4(sp)
    4c0c:	d8c00015 	stw	r3,0(sp)
    4c10:	01c03f04 	movi	r7,252
    4c14:	01802dc4 	movi	r6,183
    4c18:	01403744 	movi	r5,221
    4c1c:	01002604 	movi	r4,152
    4c20:	00036040 	call	3604 <draw_driver>
			break;
    4c24:	00006106 	br	4dac <drawExplosion+0x9dc>
		case 30:
			draw_driver(explosion30_x0, explosion30_y0, explosion30_x1, explosion30_y1, X*32, Y*32, 1);
    4c28:	e0bffe0b 	ldhu	r2,-8(fp)
    4c2c:	1004917a 	slli	r2,r2,5
    4c30:	1007883a 	mov	r3,r2
    4c34:	e0bfff0b 	ldhu	r2,-4(fp)
    4c38:	1004917a 	slli	r2,r2,5
    4c3c:	1009883a 	mov	r4,r2
    4c40:	00800044 	movi	r2,1
    4c44:	d8800215 	stw	r2,8(sp)
    4c48:	d9000115 	stw	r4,4(sp)
    4c4c:	d8c00015 	stw	r3,0(sp)
    4c50:	01c03f04 	movi	r7,252
    4c54:	018035c4 	movi	r6,215
    4c58:	01403744 	movi	r5,221
    4c5c:	01002e04 	movi	r4,184
    4c60:	00036040 	call	3604 <draw_driver>
			break;
    4c64:	00005106 	br	4dac <drawExplosion+0x9dc>
		case 31:
			draw_driver(explosion31_x0, explosion31_y0, explosion31_x1, explosion31_y1, X*32, Y*32, 1);
    4c68:	e0bffe0b 	ldhu	r2,-8(fp)
    4c6c:	1004917a 	slli	r2,r2,5
    4c70:	1007883a 	mov	r3,r2
    4c74:	e0bfff0b 	ldhu	r2,-4(fp)
    4c78:	1004917a 	slli	r2,r2,5
    4c7c:	1009883a 	mov	r4,r2
    4c80:	00800044 	movi	r2,1
    4c84:	d8800215 	stw	r2,8(sp)
    4c88:	d9000115 	stw	r4,4(sp)
    4c8c:	d8c00015 	stw	r3,0(sp)
    4c90:	01c03f04 	movi	r7,252
    4c94:	01803dc4 	movi	r6,247
    4c98:	01403744 	movi	r5,221
    4c9c:	01003604 	movi	r4,216
    4ca0:	00036040 	call	3604 <draw_driver>
			break;
    4ca4:	00004106 	br	4dac <drawExplosion+0x9dc>
		case 32:
			draw_driver(explosion32_x0, explosion32_y0, explosion32_x1, explosion32_y1, X*32, Y*32, 1);
    4ca8:	e0bffe0b 	ldhu	r2,-8(fp)
    4cac:	1004917a 	slli	r2,r2,5
    4cb0:	1007883a 	mov	r3,r2
    4cb4:	e0bfff0b 	ldhu	r2,-4(fp)
    4cb8:	1004917a 	slli	r2,r2,5
    4cbc:	1009883a 	mov	r4,r2
    4cc0:	00800044 	movi	r2,1
    4cc4:	d8800215 	stw	r2,8(sp)
    4cc8:	d9000115 	stw	r4,4(sp)
    4ccc:	d8c00015 	stw	r3,0(sp)
    4cd0:	01c046c4 	movi	r7,283
    4cd4:	01802644 	movi	r6,153
    4cd8:	01403f04 	movi	r5,252
    4cdc:	01001e84 	movi	r4,122
    4ce0:	00036040 	call	3604 <draw_driver>
			break;
    4ce4:	00003106 	br	4dac <drawExplosion+0x9dc>
		case 33:
			draw_driver(explosion33_x0, explosion33_y0, explosion33_x1, explosion33_y1, X*32, Y*32, 1);
    4ce8:	e0bffe0b 	ldhu	r2,-8(fp)
    4cec:	1004917a 	slli	r2,r2,5
    4cf0:	1007883a 	mov	r3,r2
    4cf4:	e0bfff0b 	ldhu	r2,-4(fp)
    4cf8:	1004917a 	slli	r2,r2,5
    4cfc:	1009883a 	mov	r4,r2
    4d00:	00800044 	movi	r2,1
    4d04:	d8800215 	stw	r2,8(sp)
    4d08:	d9000115 	stw	r4,4(sp)
    4d0c:	d8c00015 	stw	r3,0(sp)
    4d10:	01c046c4 	movi	r7,283
    4d14:	01802e44 	movi	r6,185
    4d18:	01403f04 	movi	r5,252
    4d1c:	01002684 	movi	r4,154
    4d20:	00036040 	call	3604 <draw_driver>
			break;
    4d24:	00002106 	br	4dac <drawExplosion+0x9dc>
		case 34:
			draw_driver(explosion34_x0, explosion34_y0, explosion34_x1, explosion34_y1, X*32, Y*32, 1);
    4d28:	e0bffe0b 	ldhu	r2,-8(fp)
    4d2c:	1004917a 	slli	r2,r2,5
    4d30:	1007883a 	mov	r3,r2
    4d34:	e0bfff0b 	ldhu	r2,-4(fp)
    4d38:	1004917a 	slli	r2,r2,5
    4d3c:	1009883a 	mov	r4,r2
    4d40:	00800044 	movi	r2,1
    4d44:	d8800215 	stw	r2,8(sp)
    4d48:	d9000115 	stw	r4,4(sp)
    4d4c:	d8c00015 	stw	r3,0(sp)
    4d50:	01c046c4 	movi	r7,283
    4d54:	01803644 	movi	r6,217
    4d58:	01403f04 	movi	r5,252
    4d5c:	01002e84 	movi	r4,186
    4d60:	00036040 	call	3604 <draw_driver>
			break;
    4d64:	00001106 	br	4dac <drawExplosion+0x9dc>
		case 35:
			draw_driver(explosion35_x0, explosion35_y0, explosion35_x1, explosion35_y1, X*32, Y*32, 1);
    4d68:	e0bffe0b 	ldhu	r2,-8(fp)
    4d6c:	1004917a 	slli	r2,r2,5
    4d70:	1007883a 	mov	r3,r2
    4d74:	e0bfff0b 	ldhu	r2,-4(fp)
    4d78:	1004917a 	slli	r2,r2,5
    4d7c:	1009883a 	mov	r4,r2
    4d80:	00800044 	movi	r2,1
    4d84:	d8800215 	stw	r2,8(sp)
    4d88:	d9000115 	stw	r4,4(sp)
    4d8c:	d8c00015 	stw	r3,0(sp)
    4d90:	01c046c4 	movi	r7,283
    4d94:	01803e44 	movi	r6,249
    4d98:	01403f04 	movi	r5,252
    4d9c:	01003684 	movi	r4,218
    4da0:	00036040 	call	3604 <draw_driver>
			break;
    4da4:	00000106 	br	4dac <drawExplosion+0x9dc>
		default:
			break;
    4da8:	0001883a 	nop
	}
}
    4dac:	0001883a 	nop
    4db0:	e037883a 	mov	sp,fp
    4db4:	dfc00117 	ldw	ra,4(sp)
    4db8:	df000017 	ldw	fp,0(sp)
    4dbc:	dec00204 	addi	sp,sp,8
    4dc0:	f800283a 	ret

00004dc4 <drawBomb>:

//notice that X and Y corresponds to cell index not pixel index
void drawBomb(unsigned short int counter, unsigned short int X, unsigned short int Y){
    4dc4:	defff804 	addi	sp,sp,-32
    4dc8:	dfc00715 	stw	ra,28(sp)
    4dcc:	df000615 	stw	fp,24(sp)
    4dd0:	df000604 	addi	fp,sp,24
    4dd4:	2807883a 	mov	r3,r5
    4dd8:	3005883a 	mov	r2,r6
    4ddc:	e13ffd0d 	sth	r4,-12(fp)
    4de0:	e0fffe0d 	sth	r3,-8(fp)
    4de4:	e0bfff0d 	sth	r2,-4(fp)
	switch(counter){
    4de8:	e0bffd0b 	ldhu	r2,-12(fp)
    4dec:	10c00c68 	cmpgeui	r3,r2,49
    4df0:	1803471e 	bne	r3,zero,5b10 <drawBomb+0xd4c>
    4df4:	100690ba 	slli	r3,r2,2
    4df8:	00800034 	movhi	r2,0
    4dfc:	10938304 	addi	r2,r2,19980
    4e00:	1885883a 	add	r2,r3,r2
    4e04:	10800017 	ldw	r2,0(r2)
    4e08:	1000683a 	jmp	r2
    4e0c:	00004ed0 	cmplti	zero,zero,315
    4e10:	00004f10 	cmplti	zero,zero,316
    4e14:	00004f50 	cmplti	zero,zero,317
    4e18:	00004f90 	cmplti	zero,zero,318
    4e1c:	00004fd0 	cmplti	zero,zero,319
    4e20:	00005010 	cmplti	zero,zero,320
    4e24:	00005050 	cmplti	zero,zero,321
    4e28:	00005090 	cmplti	zero,zero,322
    4e2c:	000050d0 	cmplti	zero,zero,323
    4e30:	00005110 	cmplti	zero,zero,324
    4e34:	00005150 	cmplti	zero,zero,325
    4e38:	00005190 	cmplti	zero,zero,326
    4e3c:	000051d0 	cmplti	zero,zero,327
    4e40:	00005210 	cmplti	zero,zero,328
    4e44:	00005250 	cmplti	zero,zero,329
    4e48:	00005290 	cmplti	zero,zero,330
    4e4c:	000052d0 	cmplti	zero,zero,331
    4e50:	00005310 	cmplti	zero,zero,332
    4e54:	00005350 	cmplti	zero,zero,333
    4e58:	00005390 	cmplti	zero,zero,334
    4e5c:	000053d0 	cmplti	zero,zero,335
    4e60:	00005410 	cmplti	zero,zero,336
    4e64:	00005450 	cmplti	zero,zero,337
    4e68:	00005490 	cmplti	zero,zero,338
    4e6c:	000054d0 	cmplti	zero,zero,339
    4e70:	00005510 	cmplti	zero,zero,340
    4e74:	00005550 	cmplti	zero,zero,341
    4e78:	00005590 	cmplti	zero,zero,342
    4e7c:	000055d0 	cmplti	zero,zero,343
    4e80:	00005610 	cmplti	zero,zero,344
    4e84:	00005650 	cmplti	zero,zero,345
    4e88:	00005690 	cmplti	zero,zero,346
    4e8c:	000056d0 	cmplti	zero,zero,347
    4e90:	00005710 	cmplti	zero,zero,348
    4e94:	00005750 	cmplti	zero,zero,349
    4e98:	00005790 	cmplti	zero,zero,350
    4e9c:	000057d0 	cmplti	zero,zero,351
    4ea0:	00005810 	cmplti	zero,zero,352
    4ea4:	00005850 	cmplti	zero,zero,353
    4ea8:	00005890 	cmplti	zero,zero,354
    4eac:	000058d0 	cmplti	zero,zero,355
    4eb0:	00005910 	cmplti	zero,zero,356
    4eb4:	00005950 	cmplti	zero,zero,357
    4eb8:	00005990 	cmplti	zero,zero,358
    4ebc:	000059d0 	cmplti	zero,zero,359
    4ec0:	00005a10 	cmplti	zero,zero,360
    4ec4:	00005a50 	cmplti	zero,zero,361
    4ec8:	00005a90 	cmplti	zero,zero,362
    4ecc:	00005ad0 	cmplti	zero,zero,363
		case 0:
			draw_driver(bomb0_x0, bomb0_y0, bomb0_x1, bomb0_y1, X*32, Y*32, 1);
    4ed0:	e0bffe0b 	ldhu	r2,-8(fp)
    4ed4:	1004917a 	slli	r2,r2,5
    4ed8:	1007883a 	mov	r3,r2
    4edc:	e0bfff0b 	ldhu	r2,-4(fp)
    4ee0:	1004917a 	slli	r2,r2,5
    4ee4:	1009883a 	mov	r4,r2
    4ee8:	00800044 	movi	r2,1
    4eec:	d8800215 	stw	r2,8(sp)
    4ef0:	d9000115 	stw	r4,4(sp)
    4ef4:	d8c00015 	stw	r3,0(sp)
    4ef8:	01c007c4 	movi	r7,31
    4efc:	01808b04 	movi	r6,556
    4f00:	000b883a 	mov	r5,zero
    4f04:	01008344 	movi	r4,525
    4f08:	00036040 	call	3604 <draw_driver>
			break;
    4f0c:	00030106 	br	5b14 <drawBomb+0xd50>
		case 1:
			draw_driver(bomb1_x0, bomb1_y0, bomb1_x1, bomb1_y1, X*32, Y*32, 1);
    4f10:	e0bffe0b 	ldhu	r2,-8(fp)
    4f14:	1004917a 	slli	r2,r2,5
    4f18:	1007883a 	mov	r3,r2
    4f1c:	e0bfff0b 	ldhu	r2,-4(fp)
    4f20:	1004917a 	slli	r2,r2,5
    4f24:	1009883a 	mov	r4,r2
    4f28:	00800044 	movi	r2,1
    4f2c:	d8800215 	stw	r2,8(sp)
    4f30:	d9000115 	stw	r4,4(sp)
    4f34:	d8c00015 	stw	r3,0(sp)
    4f38:	01c007c4 	movi	r7,31
    4f3c:	01809304 	movi	r6,588
    4f40:	000b883a 	mov	r5,zero
    4f44:	01008b44 	movi	r4,557
    4f48:	00036040 	call	3604 <draw_driver>
			break;
    4f4c:	0002f106 	br	5b14 <drawBomb+0xd50>
		case 2:
			draw_driver(bomb2_x0, bomb2_y0, bomb2_x1, bomb2_y1, X*32, Y*32, 1);
    4f50:	e0bffe0b 	ldhu	r2,-8(fp)
    4f54:	1004917a 	slli	r2,r2,5
    4f58:	1007883a 	mov	r3,r2
    4f5c:	e0bfff0b 	ldhu	r2,-4(fp)
    4f60:	1004917a 	slli	r2,r2,5
    4f64:	1009883a 	mov	r4,r2
    4f68:	00800044 	movi	r2,1
    4f6c:	d8800215 	stw	r2,8(sp)
    4f70:	d9000115 	stw	r4,4(sp)
    4f74:	d8c00015 	stw	r3,0(sp)
    4f78:	01c007c4 	movi	r7,31
    4f7c:	01809b04 	movi	r6,620
    4f80:	000b883a 	mov	r5,zero
    4f84:	01009344 	movi	r4,589
    4f88:	00036040 	call	3604 <draw_driver>
			break;
    4f8c:	0002e106 	br	5b14 <drawBomb+0xd50>
		case 3:
			draw_driver(bomb3_x0, bomb3_y0, bomb3_x1, bomb3_y1, X*32, Y*32, 1);
    4f90:	e0bffe0b 	ldhu	r2,-8(fp)
    4f94:	1004917a 	slli	r2,r2,5
    4f98:	1007883a 	mov	r3,r2
    4f9c:	e0bfff0b 	ldhu	r2,-4(fp)
    4fa0:	1004917a 	slli	r2,r2,5
    4fa4:	1009883a 	mov	r4,r2
    4fa8:	00800044 	movi	r2,1
    4fac:	d8800215 	stw	r2,8(sp)
    4fb0:	d9000115 	stw	r4,4(sp)
    4fb4:	d8c00015 	stw	r3,0(sp)
    4fb8:	01c00fc4 	movi	r7,63
    4fbc:	01806304 	movi	r6,396
    4fc0:	01400804 	movi	r5,32
    4fc4:	01005b44 	movi	r4,365
    4fc8:	00036040 	call	3604 <draw_driver>
			break;
    4fcc:	0002d106 	br	5b14 <drawBomb+0xd50>
		case 4:
			draw_driver(bomb4_x0, bomb4_y0, bomb4_x1, bomb4_y1, X*32, Y*32, 1);
    4fd0:	e0bffe0b 	ldhu	r2,-8(fp)
    4fd4:	1004917a 	slli	r2,r2,5
    4fd8:	1007883a 	mov	r3,r2
    4fdc:	e0bfff0b 	ldhu	r2,-4(fp)
    4fe0:	1004917a 	slli	r2,r2,5
    4fe4:	1009883a 	mov	r4,r2
    4fe8:	00800044 	movi	r2,1
    4fec:	d8800215 	stw	r2,8(sp)
    4ff0:	d9000115 	stw	r4,4(sp)
    4ff4:	d8c00015 	stw	r3,0(sp)
    4ff8:	01c00fc4 	movi	r7,63
    4ffc:	01806b04 	movi	r6,428
    5000:	01400804 	movi	r5,32
    5004:	01006344 	movi	r4,397
    5008:	00036040 	call	3604 <draw_driver>
			break;
    500c:	0002c106 	br	5b14 <drawBomb+0xd50>
		case 5:
			draw_driver(bomb5_x0, bomb5_y0, bomb5_x1, bomb5_y1, X*32, Y*32, 1);
    5010:	e0bffe0b 	ldhu	r2,-8(fp)
    5014:	1004917a 	slli	r2,r2,5
    5018:	1007883a 	mov	r3,r2
    501c:	e0bfff0b 	ldhu	r2,-4(fp)
    5020:	1004917a 	slli	r2,r2,5
    5024:	1009883a 	mov	r4,r2
    5028:	00800044 	movi	r2,1
    502c:	d8800215 	stw	r2,8(sp)
    5030:	d9000115 	stw	r4,4(sp)
    5034:	d8c00015 	stw	r3,0(sp)
    5038:	01c00fc4 	movi	r7,63
    503c:	01807304 	movi	r6,460
    5040:	01400804 	movi	r5,32
    5044:	01006b44 	movi	r4,429
    5048:	00036040 	call	3604 <draw_driver>
			break;
    504c:	0002b106 	br	5b14 <drawBomb+0xd50>
		case 6:
			draw_driver(bomb6_x0, bomb6_y0, bomb6_x1, bomb6_y1, X*32, Y*32, 1);
    5050:	e0bffe0b 	ldhu	r2,-8(fp)
    5054:	1004917a 	slli	r2,r2,5
    5058:	1007883a 	mov	r3,r2
    505c:	e0bfff0b 	ldhu	r2,-4(fp)
    5060:	1004917a 	slli	r2,r2,5
    5064:	1009883a 	mov	r4,r2
    5068:	00800044 	movi	r2,1
    506c:	d8800215 	stw	r2,8(sp)
    5070:	d9000115 	stw	r4,4(sp)
    5074:	d8c00015 	stw	r3,0(sp)
    5078:	01c00fc4 	movi	r7,63
    507c:	01807b04 	movi	r6,492
    5080:	01400804 	movi	r5,32
    5084:	01007344 	movi	r4,461
    5088:	00036040 	call	3604 <draw_driver>
			break;
    508c:	0002a106 	br	5b14 <drawBomb+0xd50>
		case 7:
			draw_driver(bomb7_x0, bomb7_y0, bomb7_x1, bomb7_y1, X*32, Y*32, 1);
    5090:	e0bffe0b 	ldhu	r2,-8(fp)
    5094:	1004917a 	slli	r2,r2,5
    5098:	1007883a 	mov	r3,r2
    509c:	e0bfff0b 	ldhu	r2,-4(fp)
    50a0:	1004917a 	slli	r2,r2,5
    50a4:	1009883a 	mov	r4,r2
    50a8:	00800044 	movi	r2,1
    50ac:	d8800215 	stw	r2,8(sp)
    50b0:	d9000115 	stw	r4,4(sp)
    50b4:	d8c00015 	stw	r3,0(sp)
    50b8:	01c007c4 	movi	r7,31
    50bc:	01809304 	movi	r6,588
    50c0:	000b883a 	mov	r5,zero
    50c4:	01008b44 	movi	r4,557
    50c8:	00036040 	call	3604 <draw_driver>
			break;
    50cc:	00029106 	br	5b14 <drawBomb+0xd50>
		case 8:
			draw_driver(bomb8_x0, bomb8_y0, bomb8_x1, bomb8_y1, X*32, Y*32, 1);
    50d0:	e0bffe0b 	ldhu	r2,-8(fp)
    50d4:	1004917a 	slli	r2,r2,5
    50d8:	1007883a 	mov	r3,r2
    50dc:	e0bfff0b 	ldhu	r2,-4(fp)
    50e0:	1004917a 	slli	r2,r2,5
    50e4:	1009883a 	mov	r4,r2
    50e8:	00800044 	movi	r2,1
    50ec:	d8800215 	stw	r2,8(sp)
    50f0:	d9000115 	stw	r4,4(sp)
    50f4:	d8c00015 	stw	r3,0(sp)
    50f8:	01c007c4 	movi	r7,31
    50fc:	01809b04 	movi	r6,620
    5100:	000b883a 	mov	r5,zero
    5104:	01009344 	movi	r4,589
    5108:	00036040 	call	3604 <draw_driver>
			break;
    510c:	00028106 	br	5b14 <drawBomb+0xd50>
		case 9:
			draw_driver(bomb9_x0, bomb9_y0, bomb9_x1, bomb9_y1, X*32, Y*32, 1);
    5110:	e0bffe0b 	ldhu	r2,-8(fp)
    5114:	1004917a 	slli	r2,r2,5
    5118:	1007883a 	mov	r3,r2
    511c:	e0bfff0b 	ldhu	r2,-4(fp)
    5120:	1004917a 	slli	r2,r2,5
    5124:	1009883a 	mov	r4,r2
    5128:	00800044 	movi	r2,1
    512c:	d8800215 	stw	r2,8(sp)
    5130:	d9000115 	stw	r4,4(sp)
    5134:	d8c00015 	stw	r3,0(sp)
    5138:	01c00fc4 	movi	r7,63
    513c:	01806304 	movi	r6,396
    5140:	01400804 	movi	r5,32
    5144:	01005b44 	movi	r4,365
    5148:	00036040 	call	3604 <draw_driver>
			break;
    514c:	00027106 	br	5b14 <drawBomb+0xd50>
		case 10:
			draw_driver(bomb10_x0, bomb10_y0, bomb10_x1, bomb10_y1, X*32, Y*32, 1);
    5150:	e0bffe0b 	ldhu	r2,-8(fp)
    5154:	1004917a 	slli	r2,r2,5
    5158:	1007883a 	mov	r3,r2
    515c:	e0bfff0b 	ldhu	r2,-4(fp)
    5160:	1004917a 	slli	r2,r2,5
    5164:	1009883a 	mov	r4,r2
    5168:	00800044 	movi	r2,1
    516c:	d8800215 	stw	r2,8(sp)
    5170:	d9000115 	stw	r4,4(sp)
    5174:	d8c00015 	stw	r3,0(sp)
    5178:	01c00fc4 	movi	r7,63
    517c:	01806b04 	movi	r6,428
    5180:	01400804 	movi	r5,32
    5184:	01006344 	movi	r4,397
    5188:	00036040 	call	3604 <draw_driver>
			break;
    518c:	00026106 	br	5b14 <drawBomb+0xd50>
		case 11:
			draw_driver(bomb11_x0, bomb11_y0, bomb11_x1, bomb11_y1, X*32, Y*32, 1);
    5190:	e0bffe0b 	ldhu	r2,-8(fp)
    5194:	1004917a 	slli	r2,r2,5
    5198:	1007883a 	mov	r3,r2
    519c:	e0bfff0b 	ldhu	r2,-4(fp)
    51a0:	1004917a 	slli	r2,r2,5
    51a4:	1009883a 	mov	r4,r2
    51a8:	00800044 	movi	r2,1
    51ac:	d8800215 	stw	r2,8(sp)
    51b0:	d9000115 	stw	r4,4(sp)
    51b4:	d8c00015 	stw	r3,0(sp)
    51b8:	01c00fc4 	movi	r7,63
    51bc:	01807304 	movi	r6,460
    51c0:	01400804 	movi	r5,32
    51c4:	01006b44 	movi	r4,429
    51c8:	00036040 	call	3604 <draw_driver>
			break;
    51cc:	00025106 	br	5b14 <drawBomb+0xd50>
		case 12:
			draw_driver(bomb12_x0, bomb12_y0, bomb12_x1, bomb12_y1, X*32, Y*32, 1);
    51d0:	e0bffe0b 	ldhu	r2,-8(fp)
    51d4:	1004917a 	slli	r2,r2,5
    51d8:	1007883a 	mov	r3,r2
    51dc:	e0bfff0b 	ldhu	r2,-4(fp)
    51e0:	1004917a 	slli	r2,r2,5
    51e4:	1009883a 	mov	r4,r2
    51e8:	00800044 	movi	r2,1
    51ec:	d8800215 	stw	r2,8(sp)
    51f0:	d9000115 	stw	r4,4(sp)
    51f4:	d8c00015 	stw	r3,0(sp)
    51f8:	01c00fc4 	movi	r7,63
    51fc:	01807b04 	movi	r6,492
    5200:	01400804 	movi	r5,32
    5204:	01007344 	movi	r4,461
    5208:	00036040 	call	3604 <draw_driver>
			break;
    520c:	00024106 	br	5b14 <drawBomb+0xd50>
		case 13:
			draw_driver(bomb13_x0, bomb13_y0, bomb13_x1, bomb13_y1, X*32, Y*32, 1);
    5210:	e0bffe0b 	ldhu	r2,-8(fp)
    5214:	1004917a 	slli	r2,r2,5
    5218:	1007883a 	mov	r3,r2
    521c:	e0bfff0b 	ldhu	r2,-4(fp)
    5220:	1004917a 	slli	r2,r2,5
    5224:	1009883a 	mov	r4,r2
    5228:	00800044 	movi	r2,1
    522c:	d8800215 	stw	r2,8(sp)
    5230:	d9000115 	stw	r4,4(sp)
    5234:	d8c00015 	stw	r3,0(sp)
    5238:	01c007c4 	movi	r7,31
    523c:	01809304 	movi	r6,588
    5240:	000b883a 	mov	r5,zero
    5244:	01008b44 	movi	r4,557
    5248:	00036040 	call	3604 <draw_driver>
			break;
    524c:	00023106 	br	5b14 <drawBomb+0xd50>
		case 14:
			draw_driver(bomb14_x0, bomb14_y0, bomb14_x1, bomb14_y1, X*32, Y*32, 1);
    5250:	e0bffe0b 	ldhu	r2,-8(fp)
    5254:	1004917a 	slli	r2,r2,5
    5258:	1007883a 	mov	r3,r2
    525c:	e0bfff0b 	ldhu	r2,-4(fp)
    5260:	1004917a 	slli	r2,r2,5
    5264:	1009883a 	mov	r4,r2
    5268:	00800044 	movi	r2,1
    526c:	d8800215 	stw	r2,8(sp)
    5270:	d9000115 	stw	r4,4(sp)
    5274:	d8c00015 	stw	r3,0(sp)
    5278:	01c007c4 	movi	r7,31
    527c:	01809b04 	movi	r6,620
    5280:	000b883a 	mov	r5,zero
    5284:	01009344 	movi	r4,589
    5288:	00036040 	call	3604 <draw_driver>
			break;
    528c:	00022106 	br	5b14 <drawBomb+0xd50>
		case 15:
			draw_driver(bomb15_x0, bomb15_y0, bomb15_x1, bomb15_y1, X*32, Y*32, 1);
    5290:	e0bffe0b 	ldhu	r2,-8(fp)
    5294:	1004917a 	slli	r2,r2,5
    5298:	1007883a 	mov	r3,r2
    529c:	e0bfff0b 	ldhu	r2,-4(fp)
    52a0:	1004917a 	slli	r2,r2,5
    52a4:	1009883a 	mov	r4,r2
    52a8:	00800044 	movi	r2,1
    52ac:	d8800215 	stw	r2,8(sp)
    52b0:	d9000115 	stw	r4,4(sp)
    52b4:	d8c00015 	stw	r3,0(sp)
    52b8:	01c00fc4 	movi	r7,63
    52bc:	01806304 	movi	r6,396
    52c0:	01400804 	movi	r5,32
    52c4:	01005b44 	movi	r4,365
    52c8:	00036040 	call	3604 <draw_driver>
			break;
    52cc:	00021106 	br	5b14 <drawBomb+0xd50>
		case 16:
			draw_driver(bomb16_x0, bomb16_y0, bomb16_x1, bomb16_y1, X*32, Y*32, 1);
    52d0:	e0bffe0b 	ldhu	r2,-8(fp)
    52d4:	1004917a 	slli	r2,r2,5
    52d8:	1007883a 	mov	r3,r2
    52dc:	e0bfff0b 	ldhu	r2,-4(fp)
    52e0:	1004917a 	slli	r2,r2,5
    52e4:	1009883a 	mov	r4,r2
    52e8:	00800044 	movi	r2,1
    52ec:	d8800215 	stw	r2,8(sp)
    52f0:	d9000115 	stw	r4,4(sp)
    52f4:	d8c00015 	stw	r3,0(sp)
    52f8:	01c00fc4 	movi	r7,63
    52fc:	01806b04 	movi	r6,428
    5300:	01400804 	movi	r5,32
    5304:	01006344 	movi	r4,397
    5308:	00036040 	call	3604 <draw_driver>
			break;
    530c:	00020106 	br	5b14 <drawBomb+0xd50>
		case 17:
			draw_driver(bomb17_x0, bomb17_y0, bomb17_x1, bomb17_y1, X*32, Y*32, 1);
    5310:	e0bffe0b 	ldhu	r2,-8(fp)
    5314:	1004917a 	slli	r2,r2,5
    5318:	1007883a 	mov	r3,r2
    531c:	e0bfff0b 	ldhu	r2,-4(fp)
    5320:	1004917a 	slli	r2,r2,5
    5324:	1009883a 	mov	r4,r2
    5328:	00800044 	movi	r2,1
    532c:	d8800215 	stw	r2,8(sp)
    5330:	d9000115 	stw	r4,4(sp)
    5334:	d8c00015 	stw	r3,0(sp)
    5338:	01c00fc4 	movi	r7,63
    533c:	01807304 	movi	r6,460
    5340:	01400804 	movi	r5,32
    5344:	01006b44 	movi	r4,429
    5348:	00036040 	call	3604 <draw_driver>
			break;
    534c:	0001f106 	br	5b14 <drawBomb+0xd50>
		case 18:
			draw_driver(bomb18_x0, bomb18_y0, bomb18_x1, bomb18_y1, X*32, Y*32, 1);
    5350:	e0bffe0b 	ldhu	r2,-8(fp)
    5354:	1004917a 	slli	r2,r2,5
    5358:	1007883a 	mov	r3,r2
    535c:	e0bfff0b 	ldhu	r2,-4(fp)
    5360:	1004917a 	slli	r2,r2,5
    5364:	1009883a 	mov	r4,r2
    5368:	00800044 	movi	r2,1
    536c:	d8800215 	stw	r2,8(sp)
    5370:	d9000115 	stw	r4,4(sp)
    5374:	d8c00015 	stw	r3,0(sp)
    5378:	01c00fc4 	movi	r7,63
    537c:	01807b04 	movi	r6,492
    5380:	01400804 	movi	r5,32
    5384:	01007344 	movi	r4,461
    5388:	00036040 	call	3604 <draw_driver>
			break;
    538c:	0001e106 	br	5b14 <drawBomb+0xd50>
		case 19:
			draw_driver(bomb19_x0, bomb19_y0, bomb19_x1, bomb19_y1, X*32, Y*32, 1);
    5390:	e0bffe0b 	ldhu	r2,-8(fp)
    5394:	1004917a 	slli	r2,r2,5
    5398:	1007883a 	mov	r3,r2
    539c:	e0bfff0b 	ldhu	r2,-4(fp)
    53a0:	1004917a 	slli	r2,r2,5
    53a4:	1009883a 	mov	r4,r2
    53a8:	00800044 	movi	r2,1
    53ac:	d8800215 	stw	r2,8(sp)
    53b0:	d9000115 	stw	r4,4(sp)
    53b4:	d8c00015 	stw	r3,0(sp)
    53b8:	01c007c4 	movi	r7,31
    53bc:	01809304 	movi	r6,588
    53c0:	000b883a 	mov	r5,zero
    53c4:	01008b44 	movi	r4,557
    53c8:	00036040 	call	3604 <draw_driver>
			break;
    53cc:	0001d106 	br	5b14 <drawBomb+0xd50>
		case 20:
			draw_driver(bomb20_x0, bomb20_y0, bomb20_x1, bomb20_y1, X*32, Y*32, 1);
    53d0:	e0bffe0b 	ldhu	r2,-8(fp)
    53d4:	1004917a 	slli	r2,r2,5
    53d8:	1007883a 	mov	r3,r2
    53dc:	e0bfff0b 	ldhu	r2,-4(fp)
    53e0:	1004917a 	slli	r2,r2,5
    53e4:	1009883a 	mov	r4,r2
    53e8:	00800044 	movi	r2,1
    53ec:	d8800215 	stw	r2,8(sp)
    53f0:	d9000115 	stw	r4,4(sp)
    53f4:	d8c00015 	stw	r3,0(sp)
    53f8:	01c007c4 	movi	r7,31
    53fc:	01809b04 	movi	r6,620
    5400:	000b883a 	mov	r5,zero
    5404:	01009344 	movi	r4,589
    5408:	00036040 	call	3604 <draw_driver>
			break;
    540c:	0001c106 	br	5b14 <drawBomb+0xd50>
		case 21:
			draw_driver(bomb21_x0, bomb21_y0, bomb21_x1, bomb21_y1, X*32, Y*32, 1);
    5410:	e0bffe0b 	ldhu	r2,-8(fp)
    5414:	1004917a 	slli	r2,r2,5
    5418:	1007883a 	mov	r3,r2
    541c:	e0bfff0b 	ldhu	r2,-4(fp)
    5420:	1004917a 	slli	r2,r2,5
    5424:	1009883a 	mov	r4,r2
    5428:	00800044 	movi	r2,1
    542c:	d8800215 	stw	r2,8(sp)
    5430:	d9000115 	stw	r4,4(sp)
    5434:	d8c00015 	stw	r3,0(sp)
    5438:	01c00fc4 	movi	r7,63
    543c:	01806304 	movi	r6,396
    5440:	01400804 	movi	r5,32
    5444:	01005b44 	movi	r4,365
    5448:	00036040 	call	3604 <draw_driver>
			break;
    544c:	0001b106 	br	5b14 <drawBomb+0xd50>
		case 22:
			draw_driver(bomb22_x0, bomb22_y0, bomb22_x1, bomb22_y1, X*32, Y*32, 1);
    5450:	e0bffe0b 	ldhu	r2,-8(fp)
    5454:	1004917a 	slli	r2,r2,5
    5458:	1007883a 	mov	r3,r2
    545c:	e0bfff0b 	ldhu	r2,-4(fp)
    5460:	1004917a 	slli	r2,r2,5
    5464:	1009883a 	mov	r4,r2
    5468:	00800044 	movi	r2,1
    546c:	d8800215 	stw	r2,8(sp)
    5470:	d9000115 	stw	r4,4(sp)
    5474:	d8c00015 	stw	r3,0(sp)
    5478:	01c00fc4 	movi	r7,63
    547c:	01806b04 	movi	r6,428
    5480:	01400804 	movi	r5,32
    5484:	01006344 	movi	r4,397
    5488:	00036040 	call	3604 <draw_driver>
			break;
    548c:	0001a106 	br	5b14 <drawBomb+0xd50>
		case 23:
			draw_driver(bomb23_x0, bomb23_y0, bomb23_x1, bomb23_y1, X*32, Y*32, 1);
    5490:	e0bffe0b 	ldhu	r2,-8(fp)
    5494:	1004917a 	slli	r2,r2,5
    5498:	1007883a 	mov	r3,r2
    549c:	e0bfff0b 	ldhu	r2,-4(fp)
    54a0:	1004917a 	slli	r2,r2,5
    54a4:	1009883a 	mov	r4,r2
    54a8:	00800044 	movi	r2,1
    54ac:	d8800215 	stw	r2,8(sp)
    54b0:	d9000115 	stw	r4,4(sp)
    54b4:	d8c00015 	stw	r3,0(sp)
    54b8:	01c00fc4 	movi	r7,63
    54bc:	01807304 	movi	r6,460
    54c0:	01400804 	movi	r5,32
    54c4:	01006b44 	movi	r4,429
    54c8:	00036040 	call	3604 <draw_driver>
			break;
    54cc:	00019106 	br	5b14 <drawBomb+0xd50>
		case 24:
			draw_driver(bomb24_x0, bomb24_y0, bomb24_x1, bomb24_y1, X*32, Y*32, 1);
    54d0:	e0bffe0b 	ldhu	r2,-8(fp)
    54d4:	1004917a 	slli	r2,r2,5
    54d8:	1007883a 	mov	r3,r2
    54dc:	e0bfff0b 	ldhu	r2,-4(fp)
    54e0:	1004917a 	slli	r2,r2,5
    54e4:	1009883a 	mov	r4,r2
    54e8:	00800044 	movi	r2,1
    54ec:	d8800215 	stw	r2,8(sp)
    54f0:	d9000115 	stw	r4,4(sp)
    54f4:	d8c00015 	stw	r3,0(sp)
    54f8:	01c00fc4 	movi	r7,63
    54fc:	01807b04 	movi	r6,492
    5500:	01400804 	movi	r5,32
    5504:	01007344 	movi	r4,461
    5508:	00036040 	call	3604 <draw_driver>
			break;
    550c:	00018106 	br	5b14 <drawBomb+0xd50>
		case 25:
			draw_driver(bomb25_x0, bomb25_y0, bomb25_x1, bomb25_y1, X*32, Y*32, 1);
    5510:	e0bffe0b 	ldhu	r2,-8(fp)
    5514:	1004917a 	slli	r2,r2,5
    5518:	1007883a 	mov	r3,r2
    551c:	e0bfff0b 	ldhu	r2,-4(fp)
    5520:	1004917a 	slli	r2,r2,5
    5524:	1009883a 	mov	r4,r2
    5528:	00800044 	movi	r2,1
    552c:	d8800215 	stw	r2,8(sp)
    5530:	d9000115 	stw	r4,4(sp)
    5534:	d8c00015 	stw	r3,0(sp)
    5538:	01c007c4 	movi	r7,31
    553c:	01809304 	movi	r6,588
    5540:	000b883a 	mov	r5,zero
    5544:	01008b44 	movi	r4,557
    5548:	00036040 	call	3604 <draw_driver>
			break;
    554c:	00017106 	br	5b14 <drawBomb+0xd50>
		case 26:
			draw_driver(bomb26_x0, bomb26_y0, bomb26_x1, bomb26_y1, X*32, Y*32, 1);
    5550:	e0bffe0b 	ldhu	r2,-8(fp)
    5554:	1004917a 	slli	r2,r2,5
    5558:	1007883a 	mov	r3,r2
    555c:	e0bfff0b 	ldhu	r2,-4(fp)
    5560:	1004917a 	slli	r2,r2,5
    5564:	1009883a 	mov	r4,r2
    5568:	00800044 	movi	r2,1
    556c:	d8800215 	stw	r2,8(sp)
    5570:	d9000115 	stw	r4,4(sp)
    5574:	d8c00015 	stw	r3,0(sp)
    5578:	01c007c4 	movi	r7,31
    557c:	01809b04 	movi	r6,620
    5580:	000b883a 	mov	r5,zero
    5584:	01009344 	movi	r4,589
    5588:	00036040 	call	3604 <draw_driver>
			break;
    558c:	00016106 	br	5b14 <drawBomb+0xd50>
		case 27:
			draw_driver(bomb27_x0, bomb27_y0, bomb27_x1, bomb27_y1, X*32, Y*32, 1);
    5590:	e0bffe0b 	ldhu	r2,-8(fp)
    5594:	1004917a 	slli	r2,r2,5
    5598:	1007883a 	mov	r3,r2
    559c:	e0bfff0b 	ldhu	r2,-4(fp)
    55a0:	1004917a 	slli	r2,r2,5
    55a4:	1009883a 	mov	r4,r2
    55a8:	00800044 	movi	r2,1
    55ac:	d8800215 	stw	r2,8(sp)
    55b0:	d9000115 	stw	r4,4(sp)
    55b4:	d8c00015 	stw	r3,0(sp)
    55b8:	01c00fc4 	movi	r7,63
    55bc:	01806304 	movi	r6,396
    55c0:	01400804 	movi	r5,32
    55c4:	01005b44 	movi	r4,365
    55c8:	00036040 	call	3604 <draw_driver>
			break;
    55cc:	00015106 	br	5b14 <drawBomb+0xd50>
		case 28:
			draw_driver(bomb28_x0, bomb28_y0, bomb28_x1, bomb28_y1, X*32, Y*32, 1);
    55d0:	e0bffe0b 	ldhu	r2,-8(fp)
    55d4:	1004917a 	slli	r2,r2,5
    55d8:	1007883a 	mov	r3,r2
    55dc:	e0bfff0b 	ldhu	r2,-4(fp)
    55e0:	1004917a 	slli	r2,r2,5
    55e4:	1009883a 	mov	r4,r2
    55e8:	00800044 	movi	r2,1
    55ec:	d8800215 	stw	r2,8(sp)
    55f0:	d9000115 	stw	r4,4(sp)
    55f4:	d8c00015 	stw	r3,0(sp)
    55f8:	01c00fc4 	movi	r7,63
    55fc:	01806b04 	movi	r6,428
    5600:	01400804 	movi	r5,32
    5604:	01006344 	movi	r4,397
    5608:	00036040 	call	3604 <draw_driver>
			break;
    560c:	00014106 	br	5b14 <drawBomb+0xd50>
		case 29:
			draw_driver(bomb29_x0, bomb29_y0, bomb29_x1, bomb29_y1, X*32, Y*32, 1);
    5610:	e0bffe0b 	ldhu	r2,-8(fp)
    5614:	1004917a 	slli	r2,r2,5
    5618:	1007883a 	mov	r3,r2
    561c:	e0bfff0b 	ldhu	r2,-4(fp)
    5620:	1004917a 	slli	r2,r2,5
    5624:	1009883a 	mov	r4,r2
    5628:	00800044 	movi	r2,1
    562c:	d8800215 	stw	r2,8(sp)
    5630:	d9000115 	stw	r4,4(sp)
    5634:	d8c00015 	stw	r3,0(sp)
    5638:	01c00fc4 	movi	r7,63
    563c:	01807304 	movi	r6,460
    5640:	01400804 	movi	r5,32
    5644:	01006b44 	movi	r4,429
    5648:	00036040 	call	3604 <draw_driver>
			break;
    564c:	00013106 	br	5b14 <drawBomb+0xd50>
		case 30:
			draw_driver(bomb30_x0, bomb30_y0, bomb30_x1, bomb30_y1, X*32, Y*32, 1);
    5650:	e0bffe0b 	ldhu	r2,-8(fp)
    5654:	1004917a 	slli	r2,r2,5
    5658:	1007883a 	mov	r3,r2
    565c:	e0bfff0b 	ldhu	r2,-4(fp)
    5660:	1004917a 	slli	r2,r2,5
    5664:	1009883a 	mov	r4,r2
    5668:	00800044 	movi	r2,1
    566c:	d8800215 	stw	r2,8(sp)
    5670:	d9000115 	stw	r4,4(sp)
    5674:	d8c00015 	stw	r3,0(sp)
    5678:	01c00fc4 	movi	r7,63
    567c:	01807b04 	movi	r6,492
    5680:	01400804 	movi	r5,32
    5684:	01007344 	movi	r4,461
    5688:	00036040 	call	3604 <draw_driver>
			break;
    568c:	00012106 	br	5b14 <drawBomb+0xd50>
		case 31:
			draw_driver(bomb31_x0, bomb31_y0, bomb31_x1, bomb31_y1, X*32, Y*32, 1);
    5690:	e0bffe0b 	ldhu	r2,-8(fp)
    5694:	1004917a 	slli	r2,r2,5
    5698:	1007883a 	mov	r3,r2
    569c:	e0bfff0b 	ldhu	r2,-4(fp)
    56a0:	1004917a 	slli	r2,r2,5
    56a4:	1009883a 	mov	r4,r2
    56a8:	00800044 	movi	r2,1
    56ac:	d8800215 	stw	r2,8(sp)
    56b0:	d9000115 	stw	r4,4(sp)
    56b4:	d8c00015 	stw	r3,0(sp)
    56b8:	01c007c4 	movi	r7,31
    56bc:	01809304 	movi	r6,588
    56c0:	000b883a 	mov	r5,zero
    56c4:	01008b44 	movi	r4,557
    56c8:	00036040 	call	3604 <draw_driver>
			break;
    56cc:	00011106 	br	5b14 <drawBomb+0xd50>
		case 32:
			draw_driver(bomb32_x0, bomb32_y0, bomb32_x1, bomb32_y1, X*32, Y*32, 1);
    56d0:	e0bffe0b 	ldhu	r2,-8(fp)
    56d4:	1004917a 	slli	r2,r2,5
    56d8:	1007883a 	mov	r3,r2
    56dc:	e0bfff0b 	ldhu	r2,-4(fp)
    56e0:	1004917a 	slli	r2,r2,5
    56e4:	1009883a 	mov	r4,r2
    56e8:	00800044 	movi	r2,1
    56ec:	d8800215 	stw	r2,8(sp)
    56f0:	d9000115 	stw	r4,4(sp)
    56f4:	d8c00015 	stw	r3,0(sp)
    56f8:	01c007c4 	movi	r7,31
    56fc:	01809b04 	movi	r6,620
    5700:	000b883a 	mov	r5,zero
    5704:	01009344 	movi	r4,589
    5708:	00036040 	call	3604 <draw_driver>
			break;
    570c:	00010106 	br	5b14 <drawBomb+0xd50>
		case 33:
			draw_driver(bomb33_x0, bomb33_y0, bomb33_x1, bomb33_y1, X*32, Y*32, 1);
    5710:	e0bffe0b 	ldhu	r2,-8(fp)
    5714:	1004917a 	slli	r2,r2,5
    5718:	1007883a 	mov	r3,r2
    571c:	e0bfff0b 	ldhu	r2,-4(fp)
    5720:	1004917a 	slli	r2,r2,5
    5724:	1009883a 	mov	r4,r2
    5728:	00800044 	movi	r2,1
    572c:	d8800215 	stw	r2,8(sp)
    5730:	d9000115 	stw	r4,4(sp)
    5734:	d8c00015 	stw	r3,0(sp)
    5738:	01c00fc4 	movi	r7,63
    573c:	01806304 	movi	r6,396
    5740:	01400804 	movi	r5,32
    5744:	01005b44 	movi	r4,365
    5748:	00036040 	call	3604 <draw_driver>
			break;
    574c:	0000f106 	br	5b14 <drawBomb+0xd50>
		case 34:
			draw_driver(bomb34_x0, bomb34_y0, bomb34_x1, bomb34_y1, X*32, Y*32, 1);
    5750:	e0bffe0b 	ldhu	r2,-8(fp)
    5754:	1004917a 	slli	r2,r2,5
    5758:	1007883a 	mov	r3,r2
    575c:	e0bfff0b 	ldhu	r2,-4(fp)
    5760:	1004917a 	slli	r2,r2,5
    5764:	1009883a 	mov	r4,r2
    5768:	00800044 	movi	r2,1
    576c:	d8800215 	stw	r2,8(sp)
    5770:	d9000115 	stw	r4,4(sp)
    5774:	d8c00015 	stw	r3,0(sp)
    5778:	01c00fc4 	movi	r7,63
    577c:	01806b04 	movi	r6,428
    5780:	01400804 	movi	r5,32
    5784:	01006344 	movi	r4,397
    5788:	00036040 	call	3604 <draw_driver>
			break;
    578c:	0000e106 	br	5b14 <drawBomb+0xd50>
		case 35:
			draw_driver(bomb35_x0, bomb35_y0, bomb35_x1, bomb35_y1, X*32, Y*32, 1);
    5790:	e0bffe0b 	ldhu	r2,-8(fp)
    5794:	1004917a 	slli	r2,r2,5
    5798:	1007883a 	mov	r3,r2
    579c:	e0bfff0b 	ldhu	r2,-4(fp)
    57a0:	1004917a 	slli	r2,r2,5
    57a4:	1009883a 	mov	r4,r2
    57a8:	00800044 	movi	r2,1
    57ac:	d8800215 	stw	r2,8(sp)
    57b0:	d9000115 	stw	r4,4(sp)
    57b4:	d8c00015 	stw	r3,0(sp)
    57b8:	01c00fc4 	movi	r7,63
    57bc:	01807304 	movi	r6,460
    57c0:	01400804 	movi	r5,32
    57c4:	01006b44 	movi	r4,429
    57c8:	00036040 	call	3604 <draw_driver>
			break;
    57cc:	0000d106 	br	5b14 <drawBomb+0xd50>
		case 36:
			draw_driver(bomb36_x0, bomb36_y0, bomb36_x1, bomb36_y1, X*32, Y*32, 1);
    57d0:	e0bffe0b 	ldhu	r2,-8(fp)
    57d4:	1004917a 	slli	r2,r2,5
    57d8:	1007883a 	mov	r3,r2
    57dc:	e0bfff0b 	ldhu	r2,-4(fp)
    57e0:	1004917a 	slli	r2,r2,5
    57e4:	1009883a 	mov	r4,r2
    57e8:	00800044 	movi	r2,1
    57ec:	d8800215 	stw	r2,8(sp)
    57f0:	d9000115 	stw	r4,4(sp)
    57f4:	d8c00015 	stw	r3,0(sp)
    57f8:	01c00fc4 	movi	r7,63
    57fc:	01807b04 	movi	r6,492
    5800:	01400804 	movi	r5,32
    5804:	01007344 	movi	r4,461
    5808:	00036040 	call	3604 <draw_driver>
			break;
    580c:	0000c106 	br	5b14 <drawBomb+0xd50>
		case 37:
			draw_driver(bomb37_x0, bomb37_y0, bomb37_x1, bomb37_y1, X*32, Y*32, 1);
    5810:	e0bffe0b 	ldhu	r2,-8(fp)
    5814:	1004917a 	slli	r2,r2,5
    5818:	1007883a 	mov	r3,r2
    581c:	e0bfff0b 	ldhu	r2,-4(fp)
    5820:	1004917a 	slli	r2,r2,5
    5824:	1009883a 	mov	r4,r2
    5828:	00800044 	movi	r2,1
    582c:	d8800215 	stw	r2,8(sp)
    5830:	d9000115 	stw	r4,4(sp)
    5834:	d8c00015 	stw	r3,0(sp)
    5838:	01c017c4 	movi	r7,95
    583c:	01806304 	movi	r6,396
    5840:	01401004 	movi	r5,64
    5844:	01005b44 	movi	r4,365
    5848:	00036040 	call	3604 <draw_driver>
			break;
    584c:	0000b106 	br	5b14 <drawBomb+0xd50>
		case 38:
			draw_driver(bomb38_x0, bomb38_y0, bomb38_x1, bomb38_y1, X*32, Y*32, 1);
    5850:	e0bffe0b 	ldhu	r2,-8(fp)
    5854:	1004917a 	slli	r2,r2,5
    5858:	1007883a 	mov	r3,r2
    585c:	e0bfff0b 	ldhu	r2,-4(fp)
    5860:	1004917a 	slli	r2,r2,5
    5864:	1009883a 	mov	r4,r2
    5868:	00800044 	movi	r2,1
    586c:	d8800215 	stw	r2,8(sp)
    5870:	d9000115 	stw	r4,4(sp)
    5874:	d8c00015 	stw	r3,0(sp)
    5878:	01c00fc4 	movi	r7,63
    587c:	01809304 	movi	r6,588
    5880:	01400804 	movi	r5,32
    5884:	01008b44 	movi	r4,557
    5888:	00036040 	call	3604 <draw_driver>
			break;
    588c:	0000a106 	br	5b14 <drawBomb+0xd50>
		case 39:
			draw_driver(bomb39_x0, bomb39_y0, bomb39_x1, bomb39_y1, X*32, Y*32, 1);
    5890:	e0bffe0b 	ldhu	r2,-8(fp)
    5894:	1004917a 	slli	r2,r2,5
    5898:	1007883a 	mov	r3,r2
    589c:	e0bfff0b 	ldhu	r2,-4(fp)
    58a0:	1004917a 	slli	r2,r2,5
    58a4:	1009883a 	mov	r4,r2
    58a8:	00800044 	movi	r2,1
    58ac:	d8800215 	stw	r2,8(sp)
    58b0:	d9000115 	stw	r4,4(sp)
    58b4:	d8c00015 	stw	r3,0(sp)
    58b8:	01c00fc4 	movi	r7,63
    58bc:	01809b04 	movi	r6,620
    58c0:	01400804 	movi	r5,32
    58c4:	01009344 	movi	r4,589
    58c8:	00036040 	call	3604 <draw_driver>
			break;
    58cc:	00009106 	br	5b14 <drawBomb+0xd50>
		case 40:
			draw_driver(bomb40_x0, bomb40_y0, bomb40_x1, bomb40_y1, X*32, Y*32, 1);
    58d0:	e0bffe0b 	ldhu	r2,-8(fp)
    58d4:	1004917a 	slli	r2,r2,5
    58d8:	1007883a 	mov	r3,r2
    58dc:	e0bfff0b 	ldhu	r2,-4(fp)
    58e0:	1004917a 	slli	r2,r2,5
    58e4:	1009883a 	mov	r4,r2
    58e8:	00800044 	movi	r2,1
    58ec:	d8800215 	stw	r2,8(sp)
    58f0:	d9000115 	stw	r4,4(sp)
    58f4:	d8c00015 	stw	r3,0(sp)
    58f8:	01c017c4 	movi	r7,95
    58fc:	01806304 	movi	r6,396
    5900:	01401004 	movi	r5,64
    5904:	01005b44 	movi	r4,365
    5908:	00036040 	call	3604 <draw_driver>
			break;
    590c:	00008106 	br	5b14 <drawBomb+0xd50>
		case 41:
			draw_driver(bomb41_x0, bomb41_y0, bomb41_x1, bomb41_y1, X*32, Y*32, 1);
    5910:	e0bffe0b 	ldhu	r2,-8(fp)
    5914:	1004917a 	slli	r2,r2,5
    5918:	1007883a 	mov	r3,r2
    591c:	e0bfff0b 	ldhu	r2,-4(fp)
    5920:	1004917a 	slli	r2,r2,5
    5924:	1009883a 	mov	r4,r2
    5928:	00800044 	movi	r2,1
    592c:	d8800215 	stw	r2,8(sp)
    5930:	d9000115 	stw	r4,4(sp)
    5934:	d8c00015 	stw	r3,0(sp)
    5938:	01c00fc4 	movi	r7,63
    593c:	01809304 	movi	r6,588
    5940:	01400804 	movi	r5,32
    5944:	01008b44 	movi	r4,557
    5948:	00036040 	call	3604 <draw_driver>
			break;
    594c:	00007106 	br	5b14 <drawBomb+0xd50>
		case 42:
			draw_driver(bomb42_x0, bomb42_y0, bomb42_x1, bomb42_y1, X*32, Y*32, 1);
    5950:	e0bffe0b 	ldhu	r2,-8(fp)
    5954:	1004917a 	slli	r2,r2,5
    5958:	1007883a 	mov	r3,r2
    595c:	e0bfff0b 	ldhu	r2,-4(fp)
    5960:	1004917a 	slli	r2,r2,5
    5964:	1009883a 	mov	r4,r2
    5968:	00800044 	movi	r2,1
    596c:	d8800215 	stw	r2,8(sp)
    5970:	d9000115 	stw	r4,4(sp)
    5974:	d8c00015 	stw	r3,0(sp)
    5978:	01c00fc4 	movi	r7,63
    597c:	01809b04 	movi	r6,620
    5980:	01400804 	movi	r5,32
    5984:	01009344 	movi	r4,589
    5988:	00036040 	call	3604 <draw_driver>
			break;
    598c:	00006106 	br	5b14 <drawBomb+0xd50>
		case 43:
			draw_driver(bomb43_x0, bomb43_y0, bomb43_x1, bomb43_y1, X*32, Y*32, 1);
    5990:	e0bffe0b 	ldhu	r2,-8(fp)
    5994:	1004917a 	slli	r2,r2,5
    5998:	1007883a 	mov	r3,r2
    599c:	e0bfff0b 	ldhu	r2,-4(fp)
    59a0:	1004917a 	slli	r2,r2,5
    59a4:	1009883a 	mov	r4,r2
    59a8:	00800044 	movi	r2,1
    59ac:	d8800215 	stw	r2,8(sp)
    59b0:	d9000115 	stw	r4,4(sp)
    59b4:	d8c00015 	stw	r3,0(sp)
    59b8:	01c017c4 	movi	r7,95
    59bc:	01806304 	movi	r6,396
    59c0:	01401004 	movi	r5,64
    59c4:	01005b44 	movi	r4,365
    59c8:	00036040 	call	3604 <draw_driver>
			break;
    59cc:	00005106 	br	5b14 <drawBomb+0xd50>
		case 44:
			draw_driver(bomb44_x0, bomb44_y0, bomb44_x1, bomb44_y1, X*32, Y*32, 1);
    59d0:	e0bffe0b 	ldhu	r2,-8(fp)
    59d4:	1004917a 	slli	r2,r2,5
    59d8:	1007883a 	mov	r3,r2
    59dc:	e0bfff0b 	ldhu	r2,-4(fp)
    59e0:	1004917a 	slli	r2,r2,5
    59e4:	1009883a 	mov	r4,r2
    59e8:	00800044 	movi	r2,1
    59ec:	d8800215 	stw	r2,8(sp)
    59f0:	d9000115 	stw	r4,4(sp)
    59f4:	d8c00015 	stw	r3,0(sp)
    59f8:	01c00fc4 	movi	r7,63
    59fc:	01809304 	movi	r6,588
    5a00:	01400804 	movi	r5,32
    5a04:	01008b44 	movi	r4,557
    5a08:	00036040 	call	3604 <draw_driver>
			break;
    5a0c:	00004106 	br	5b14 <drawBomb+0xd50>
		case 45:
			draw_driver(bomb45_x0, bomb45_y0, bomb45_x1, bomb45_y1, X*32, Y*32, 1);
    5a10:	e0bffe0b 	ldhu	r2,-8(fp)
    5a14:	1004917a 	slli	r2,r2,5
    5a18:	1007883a 	mov	r3,r2
    5a1c:	e0bfff0b 	ldhu	r2,-4(fp)
    5a20:	1004917a 	slli	r2,r2,5
    5a24:	1009883a 	mov	r4,r2
    5a28:	00800044 	movi	r2,1
    5a2c:	d8800215 	stw	r2,8(sp)
    5a30:	d9000115 	stw	r4,4(sp)
    5a34:	d8c00015 	stw	r3,0(sp)
    5a38:	01c00fc4 	movi	r7,63
    5a3c:	01809b04 	movi	r6,620
    5a40:	01400804 	movi	r5,32
    5a44:	01009344 	movi	r4,589
    5a48:	00036040 	call	3604 <draw_driver>
			break;
    5a4c:	00003106 	br	5b14 <drawBomb+0xd50>
		case 46:
			draw_driver(bomb46_x0, bomb46_y0, bomb46_x1, bomb46_y1, X*32, Y*32, 1);
    5a50:	e0bffe0b 	ldhu	r2,-8(fp)
    5a54:	1004917a 	slli	r2,r2,5
    5a58:	1007883a 	mov	r3,r2
    5a5c:	e0bfff0b 	ldhu	r2,-4(fp)
    5a60:	1004917a 	slli	r2,r2,5
    5a64:	1009883a 	mov	r4,r2
    5a68:	00800044 	movi	r2,1
    5a6c:	d8800215 	stw	r2,8(sp)
    5a70:	d9000115 	stw	r4,4(sp)
    5a74:	d8c00015 	stw	r3,0(sp)
    5a78:	01c017c4 	movi	r7,95
    5a7c:	01806b04 	movi	r6,428
    5a80:	01401004 	movi	r5,64
    5a84:	01006344 	movi	r4,397
    5a88:	00036040 	call	3604 <draw_driver>
			break;
    5a8c:	00002106 	br	5b14 <drawBomb+0xd50>
		case 47:
			draw_driver(bomb47_x0, bomb47_y0, bomb47_x1, bomb47_y1, X*32, Y*32, 1);
    5a90:	e0bffe0b 	ldhu	r2,-8(fp)
    5a94:	1004917a 	slli	r2,r2,5
    5a98:	1007883a 	mov	r3,r2
    5a9c:	e0bfff0b 	ldhu	r2,-4(fp)
    5aa0:	1004917a 	slli	r2,r2,5
    5aa4:	1009883a 	mov	r4,r2
    5aa8:	00800044 	movi	r2,1
    5aac:	d8800215 	stw	r2,8(sp)
    5ab0:	d9000115 	stw	r4,4(sp)
    5ab4:	d8c00015 	stw	r3,0(sp)
    5ab8:	01c017c4 	movi	r7,95
    5abc:	01806b04 	movi	r6,428
    5ac0:	01401004 	movi	r5,64
    5ac4:	01006344 	movi	r4,397
    5ac8:	00036040 	call	3604 <draw_driver>
			break;
    5acc:	00001106 	br	5b14 <drawBomb+0xd50>
		case 48:
			draw_driver(bomb48_x0, bomb48_y0, bomb48_x1, bomb48_y1, X*32, Y*32, 1);
    5ad0:	e0bffe0b 	ldhu	r2,-8(fp)
    5ad4:	1004917a 	slli	r2,r2,5
    5ad8:	1007883a 	mov	r3,r2
    5adc:	e0bfff0b 	ldhu	r2,-4(fp)
    5ae0:	1004917a 	slli	r2,r2,5
    5ae4:	1009883a 	mov	r4,r2
    5ae8:	00800044 	movi	r2,1
    5aec:	d8800215 	stw	r2,8(sp)
    5af0:	d9000115 	stw	r4,4(sp)
    5af4:	d8c00015 	stw	r3,0(sp)
    5af8:	01c017c4 	movi	r7,95
    5afc:	01806b04 	movi	r6,428
    5b00:	01401004 	movi	r5,64
    5b04:	01006344 	movi	r4,397
    5b08:	00036040 	call	3604 <draw_driver>
			break;
    5b0c:	00000106 	br	5b14 <drawBomb+0xd50>

		default:
			break;
    5b10:	0001883a 	nop
	}
}
    5b14:	0001883a 	nop
    5b18:	e037883a 	mov	sp,fp
    5b1c:	dfc00117 	ldw	ra,4(sp)
    5b20:	df000017 	ldw	fp,0(sp)
    5b24:	dec00204 	addi	sp,sp,8
    5b28:	f800283a 	ret

00005b2c <drawFiringWall>:



//notice that X and Y corresponds to cell index not pixel index
void drawFiringWall(unsigned short int counter, unsigned short int X, unsigned short int Y){
    5b2c:	defff804 	addi	sp,sp,-32
    5b30:	dfc00715 	stw	ra,28(sp)
    5b34:	df000615 	stw	fp,24(sp)
    5b38:	df000604 	addi	fp,sp,24
    5b3c:	2807883a 	mov	r3,r5
    5b40:	3005883a 	mov	r2,r6
    5b44:	e13ffd0d 	sth	r4,-12(fp)
    5b48:	e0fffe0d 	sth	r3,-8(fp)
    5b4c:	e0bfff0d 	sth	r2,-4(fp)
	switch(counter){
    5b50:	e0bffd0b 	ldhu	r2,-12(fp)
    5b54:	10c00928 	cmpgeui	r3,r2,36
    5b58:	18026a1e 	bne	r3,zero,6504 <drawFiringWall+0x9d8>
    5b5c:	100690ba 	slli	r3,r2,2
    5b60:	00800034 	movhi	r2,0
    5b64:	1096dd04 	addi	r2,r2,23412
    5b68:	1885883a 	add	r2,r3,r2
    5b6c:	10800017 	ldw	r2,0(r2)
    5b70:	1000683a 	jmp	r2
    5b74:	00005c04 	movi	zero,368
    5b78:	00005c44 	movi	zero,369
    5b7c:	00005c84 	movi	zero,370
    5b80:	00005cc4 	movi	zero,371
    5b84:	00005d04 	movi	zero,372
    5b88:	00005d44 	movi	zero,373
    5b8c:	00005d84 	movi	zero,374
    5b90:	00005dc4 	movi	zero,375
    5b94:	00005e04 	movi	zero,376
    5b98:	00005e44 	movi	zero,377
    5b9c:	00005e84 	movi	zero,378
    5ba0:	00005ec4 	movi	zero,379
    5ba4:	00005f04 	movi	zero,380
    5ba8:	00005f44 	movi	zero,381
    5bac:	00005f84 	movi	zero,382
    5bb0:	00005fc4 	movi	zero,383
    5bb4:	00006004 	movi	zero,384
    5bb8:	00006044 	movi	zero,385
    5bbc:	00006084 	movi	zero,386
    5bc0:	000060c4 	movi	zero,387
    5bc4:	00006104 	movi	zero,388
    5bc8:	00006144 	movi	zero,389
    5bcc:	00006184 	movi	zero,390
    5bd0:	000061c4 	movi	zero,391
    5bd4:	00006204 	movi	zero,392
    5bd8:	00006244 	movi	zero,393
    5bdc:	00006284 	movi	zero,394
    5be0:	000062c4 	movi	zero,395
    5be4:	00006304 	movi	zero,396
    5be8:	00006344 	movi	zero,397
    5bec:	00006384 	movi	zero,398
    5bf0:	000063c4 	movi	zero,399
    5bf4:	00006404 	movi	zero,400
    5bf8:	00006444 	movi	zero,401
    5bfc:	00006484 	movi	zero,402
    5c00:	000064c4 	movi	zero,403
		case 0:
			draw_driver(firingWall0_x0, firingWall0_y0, firingWall0_x1, firingWall0_y1, X*32, Y*32, 1);
    5c04:	e0bffe0b 	ldhu	r2,-8(fp)
    5c08:	1004917a 	slli	r2,r2,5
    5c0c:	1007883a 	mov	r3,r2
    5c10:	e0bfff0b 	ldhu	r2,-4(fp)
    5c14:	1004917a 	slli	r2,r2,5
    5c18:	1009883a 	mov	r4,r2
    5c1c:	00800044 	movi	r2,1
    5c20:	d8800215 	stw	r2,8(sp)
    5c24:	d9000115 	stw	r4,4(sp)
    5c28:	d8c00015 	stw	r3,0(sp)
    5c2c:	01c02844 	movi	r7,161
    5c30:	01806444 	movi	r6,401
    5c34:	01402084 	movi	r5,130
    5c38:	01005c84 	movi	r4,370
    5c3c:	00036040 	call	3604 <draw_driver>
			break;
    5c40:	00023106 	br	6508 <drawFiringWall+0x9dc>
		case 1:
			draw_driver(firingWall1_x0, firingWall1_y0, firingWall1_x1, firingWall1_y1, X*32, Y*32, 1);
    5c44:	e0bffe0b 	ldhu	r2,-8(fp)
    5c48:	1004917a 	slli	r2,r2,5
    5c4c:	1007883a 	mov	r3,r2
    5c50:	e0bfff0b 	ldhu	r2,-4(fp)
    5c54:	1004917a 	slli	r2,r2,5
    5c58:	1009883a 	mov	r4,r2
    5c5c:	00800044 	movi	r2,1
    5c60:	d8800215 	stw	r2,8(sp)
    5c64:	d9000115 	stw	r4,4(sp)
    5c68:	d8c00015 	stw	r3,0(sp)
    5c6c:	01c02844 	movi	r7,161
    5c70:	01806c44 	movi	r6,433
    5c74:	01402084 	movi	r5,130
    5c78:	01006484 	movi	r4,402
    5c7c:	00036040 	call	3604 <draw_driver>
			break;
    5c80:	00022106 	br	6508 <drawFiringWall+0x9dc>
		case 2:
			draw_driver(firingWall2_x0, firingWall2_y0, firingWall2_x1, firingWall2_y1, X*32, Y*32, 1);
    5c84:	e0bffe0b 	ldhu	r2,-8(fp)
    5c88:	1004917a 	slli	r2,r2,5
    5c8c:	1007883a 	mov	r3,r2
    5c90:	e0bfff0b 	ldhu	r2,-4(fp)
    5c94:	1004917a 	slli	r2,r2,5
    5c98:	1009883a 	mov	r4,r2
    5c9c:	00800044 	movi	r2,1
    5ca0:	d8800215 	stw	r2,8(sp)
    5ca4:	d9000115 	stw	r4,4(sp)
    5ca8:	d8c00015 	stw	r3,0(sp)
    5cac:	01c02844 	movi	r7,161
    5cb0:	01807444 	movi	r6,465
    5cb4:	01402084 	movi	r5,130
    5cb8:	01006c84 	movi	r4,434
    5cbc:	00036040 	call	3604 <draw_driver>
			break;
    5cc0:	00021106 	br	6508 <drawFiringWall+0x9dc>
		case 3:
			draw_driver(firingWall3_x0, firingWall3_y0, firingWall3_x1, firingWall3_y1, X*32, Y*32, 1);
    5cc4:	e0bffe0b 	ldhu	r2,-8(fp)
    5cc8:	1004917a 	slli	r2,r2,5
    5ccc:	1007883a 	mov	r3,r2
    5cd0:	e0bfff0b 	ldhu	r2,-4(fp)
    5cd4:	1004917a 	slli	r2,r2,5
    5cd8:	1009883a 	mov	r4,r2
    5cdc:	00800044 	movi	r2,1
    5ce0:	d8800215 	stw	r2,8(sp)
    5ce4:	d9000115 	stw	r4,4(sp)
    5ce8:	d8c00015 	stw	r3,0(sp)
    5cec:	01c02844 	movi	r7,161
    5cf0:	01807c44 	movi	r6,497
    5cf4:	01402084 	movi	r5,130
    5cf8:	01007484 	movi	r4,466
    5cfc:	00036040 	call	3604 <draw_driver>
			break;
    5d00:	00020106 	br	6508 <drawFiringWall+0x9dc>
		case 4:
			draw_driver(firingWall4_x0, firingWall4_y0, firingWall4_x1, firingWall4_y1, X*32, Y*32, 1);
    5d04:	e0bffe0b 	ldhu	r2,-8(fp)
    5d08:	1004917a 	slli	r2,r2,5
    5d0c:	1007883a 	mov	r3,r2
    5d10:	e0bfff0b 	ldhu	r2,-4(fp)
    5d14:	1004917a 	slli	r2,r2,5
    5d18:	1009883a 	mov	r4,r2
    5d1c:	00800044 	movi	r2,1
    5d20:	d8800215 	stw	r2,8(sp)
    5d24:	d9000115 	stw	r4,4(sp)
    5d28:	d8c00015 	stw	r3,0(sp)
    5d2c:	01c02844 	movi	r7,161
    5d30:	01808444 	movi	r6,529
    5d34:	01402084 	movi	r5,130
    5d38:	01007c84 	movi	r4,498
    5d3c:	00036040 	call	3604 <draw_driver>
			break;
    5d40:	0001f106 	br	6508 <drawFiringWall+0x9dc>
		case 5:
			draw_driver(firingWall5_x0, firingWall5_y0, firingWall5_x1, firingWall5_y1, X*32, Y*32, 1);
    5d44:	e0bffe0b 	ldhu	r2,-8(fp)
    5d48:	1004917a 	slli	r2,r2,5
    5d4c:	1007883a 	mov	r3,r2
    5d50:	e0bfff0b 	ldhu	r2,-4(fp)
    5d54:	1004917a 	slli	r2,r2,5
    5d58:	1009883a 	mov	r4,r2
    5d5c:	00800044 	movi	r2,1
    5d60:	d8800215 	stw	r2,8(sp)
    5d64:	d9000115 	stw	r4,4(sp)
    5d68:	d8c00015 	stw	r3,0(sp)
    5d6c:	01c02844 	movi	r7,161
    5d70:	01808c44 	movi	r6,561
    5d74:	01402084 	movi	r5,130
    5d78:	01008484 	movi	r4,530
    5d7c:	00036040 	call	3604 <draw_driver>
			break;
    5d80:	0001e106 	br	6508 <drawFiringWall+0x9dc>
		case 6:
			draw_driver(firingWall6_x0, firingWall6_y0, firingWall6_x1, firingWall6_y1, X*32, Y*32, 1);
    5d84:	e0bffe0b 	ldhu	r2,-8(fp)
    5d88:	1004917a 	slli	r2,r2,5
    5d8c:	1007883a 	mov	r3,r2
    5d90:	e0bfff0b 	ldhu	r2,-4(fp)
    5d94:	1004917a 	slli	r2,r2,5
    5d98:	1009883a 	mov	r4,r2
    5d9c:	00800044 	movi	r2,1
    5da0:	d8800215 	stw	r2,8(sp)
    5da4:	d9000115 	stw	r4,4(sp)
    5da8:	d8c00015 	stw	r3,0(sp)
    5dac:	01c02844 	movi	r7,161
    5db0:	01809444 	movi	r6,593
    5db4:	01402084 	movi	r5,130
    5db8:	01008c84 	movi	r4,562
    5dbc:	00036040 	call	3604 <draw_driver>
			break;
    5dc0:	0001d106 	br	6508 <drawFiringWall+0x9dc>
		case 7:
			draw_driver(firingWall7_x0, firingWall7_y0, firingWall7_x1, firingWall7_y1, X*32, Y*32, 1);
    5dc4:	e0bffe0b 	ldhu	r2,-8(fp)
    5dc8:	1004917a 	slli	r2,r2,5
    5dcc:	1007883a 	mov	r3,r2
    5dd0:	e0bfff0b 	ldhu	r2,-4(fp)
    5dd4:	1004917a 	slli	r2,r2,5
    5dd8:	1009883a 	mov	r4,r2
    5ddc:	00800044 	movi	r2,1
    5de0:	d8800215 	stw	r2,8(sp)
    5de4:	d9000115 	stw	r4,4(sp)
    5de8:	d8c00015 	stw	r3,0(sp)
    5dec:	01c02844 	movi	r7,161
    5df0:	01809c44 	movi	r6,625
    5df4:	01402084 	movi	r5,130
    5df8:	01009484 	movi	r4,594
    5dfc:	00036040 	call	3604 <draw_driver>
			break;
    5e00:	0001c106 	br	6508 <drawFiringWall+0x9dc>
		case 8:
			draw_driver(firingWall8_x0, firingWall8_y0, firingWall8_x1, firingWall8_y1, X*32, Y*32, 1);
    5e04:	e0bffe0b 	ldhu	r2,-8(fp)
    5e08:	1004917a 	slli	r2,r2,5
    5e0c:	1007883a 	mov	r3,r2
    5e10:	e0bfff0b 	ldhu	r2,-4(fp)
    5e14:	1004917a 	slli	r2,r2,5
    5e18:	1009883a 	mov	r4,r2
    5e1c:	00800044 	movi	r2,1
    5e20:	d8800215 	stw	r2,8(sp)
    5e24:	d9000115 	stw	r4,4(sp)
    5e28:	d8c00015 	stw	r3,0(sp)
    5e2c:	01c03044 	movi	r7,193
    5e30:	018063c4 	movi	r6,399
    5e34:	01402884 	movi	r5,162
    5e38:	01005c04 	movi	r4,368
    5e3c:	00036040 	call	3604 <draw_driver>
			break;
    5e40:	0001b106 	br	6508 <drawFiringWall+0x9dc>
		case 9:
			draw_driver(firingWall9_x0, firingWall9_y0, firingWall9_x1, firingWall9_y1, X*32, Y*32, 1);
    5e44:	e0bffe0b 	ldhu	r2,-8(fp)
    5e48:	1004917a 	slli	r2,r2,5
    5e4c:	1007883a 	mov	r3,r2
    5e50:	e0bfff0b 	ldhu	r2,-4(fp)
    5e54:	1004917a 	slli	r2,r2,5
    5e58:	1009883a 	mov	r4,r2
    5e5c:	00800044 	movi	r2,1
    5e60:	d8800215 	stw	r2,8(sp)
    5e64:	d9000115 	stw	r4,4(sp)
    5e68:	d8c00015 	stw	r3,0(sp)
    5e6c:	01c03044 	movi	r7,193
    5e70:	01806bc4 	movi	r6,431
    5e74:	01402884 	movi	r5,162
    5e78:	01006404 	movi	r4,400
    5e7c:	00036040 	call	3604 <draw_driver>
			break;
    5e80:	0001a106 	br	6508 <drawFiringWall+0x9dc>
		case 10:
			draw_driver(firingWall10_x0, firingWall10_y0, firingWall10_x1, firingWall10_y1, X*32, Y*32, 1);
    5e84:	e0bffe0b 	ldhu	r2,-8(fp)
    5e88:	1004917a 	slli	r2,r2,5
    5e8c:	1007883a 	mov	r3,r2
    5e90:	e0bfff0b 	ldhu	r2,-4(fp)
    5e94:	1004917a 	slli	r2,r2,5
    5e98:	1009883a 	mov	r4,r2
    5e9c:	00800044 	movi	r2,1
    5ea0:	d8800215 	stw	r2,8(sp)
    5ea4:	d9000115 	stw	r4,4(sp)
    5ea8:	d8c00015 	stw	r3,0(sp)
    5eac:	01c03044 	movi	r7,193
    5eb0:	018073c4 	movi	r6,463
    5eb4:	01402884 	movi	r5,162
    5eb8:	01006c04 	movi	r4,432
    5ebc:	00036040 	call	3604 <draw_driver>
			break;
    5ec0:	00019106 	br	6508 <drawFiringWall+0x9dc>
		case 11:
			draw_driver(firingWall11_x0, firingWall11_y0, firingWall11_x1, firingWall11_y1, X*32, Y*32, 1);
    5ec4:	e0bffe0b 	ldhu	r2,-8(fp)
    5ec8:	1004917a 	slli	r2,r2,5
    5ecc:	1007883a 	mov	r3,r2
    5ed0:	e0bfff0b 	ldhu	r2,-4(fp)
    5ed4:	1004917a 	slli	r2,r2,5
    5ed8:	1009883a 	mov	r4,r2
    5edc:	00800044 	movi	r2,1
    5ee0:	d8800215 	stw	r2,8(sp)
    5ee4:	d9000115 	stw	r4,4(sp)
    5ee8:	d8c00015 	stw	r3,0(sp)
    5eec:	01c03044 	movi	r7,193
    5ef0:	01807c44 	movi	r6,497
    5ef4:	01402884 	movi	r5,162
    5ef8:	01007484 	movi	r4,466
    5efc:	00036040 	call	3604 <draw_driver>
			break;
    5f00:	00018106 	br	6508 <drawFiringWall+0x9dc>
		case 12:
			draw_driver(firingWall12_x0, firingWall12_y0, firingWall12_x1, firingWall12_y1, X*32, Y*32, 1);
    5f04:	e0bffe0b 	ldhu	r2,-8(fp)
    5f08:	1004917a 	slli	r2,r2,5
    5f0c:	1007883a 	mov	r3,r2
    5f10:	e0bfff0b 	ldhu	r2,-4(fp)
    5f14:	1004917a 	slli	r2,r2,5
    5f18:	1009883a 	mov	r4,r2
    5f1c:	00800044 	movi	r2,1
    5f20:	d8800215 	stw	r2,8(sp)
    5f24:	d9000115 	stw	r4,4(sp)
    5f28:	d8c00015 	stw	r3,0(sp)
    5f2c:	01c03044 	movi	r7,193
    5f30:	01808484 	movi	r6,530
    5f34:	01402884 	movi	r5,162
    5f38:	01007cc4 	movi	r4,499
    5f3c:	00036040 	call	3604 <draw_driver>
			break;
    5f40:	00017106 	br	6508 <drawFiringWall+0x9dc>
		case 13:
			draw_driver(firingWall13_x0, firingWall13_y0, firingWall13_x1, firingWall13_y1, X*32, Y*32, 1);
    5f44:	e0bffe0b 	ldhu	r2,-8(fp)
    5f48:	1004917a 	slli	r2,r2,5
    5f4c:	1007883a 	mov	r3,r2
    5f50:	e0bfff0b 	ldhu	r2,-4(fp)
    5f54:	1004917a 	slli	r2,r2,5
    5f58:	1009883a 	mov	r4,r2
    5f5c:	00800044 	movi	r2,1
    5f60:	d8800215 	stw	r2,8(sp)
    5f64:	d9000115 	stw	r4,4(sp)
    5f68:	d8c00015 	stw	r3,0(sp)
    5f6c:	01c03044 	movi	r7,193
    5f70:	01808cc4 	movi	r6,563
    5f74:	01402884 	movi	r5,162
    5f78:	01008504 	movi	r4,532
    5f7c:	00036040 	call	3604 <draw_driver>
			break;
    5f80:	00016106 	br	6508 <drawFiringWall+0x9dc>
		case 14:
			draw_driver(firingWall14_x0, firingWall14_y0, firingWall14_x1, firingWall14_y1, X*32, Y*32, 1);
    5f84:	e0bffe0b 	ldhu	r2,-8(fp)
    5f88:	1004917a 	slli	r2,r2,5
    5f8c:	1007883a 	mov	r3,r2
    5f90:	e0bfff0b 	ldhu	r2,-4(fp)
    5f94:	1004917a 	slli	r2,r2,5
    5f98:	1009883a 	mov	r4,r2
    5f9c:	00800044 	movi	r2,1
    5fa0:	d8800215 	stw	r2,8(sp)
    5fa4:	d9000115 	stw	r4,4(sp)
    5fa8:	d8c00015 	stw	r3,0(sp)
    5fac:	01c03044 	movi	r7,193
    5fb0:	018094c4 	movi	r6,595
    5fb4:	01402884 	movi	r5,162
    5fb8:	01008d04 	movi	r4,564
    5fbc:	00036040 	call	3604 <draw_driver>
			break;
    5fc0:	00015106 	br	6508 <drawFiringWall+0x9dc>
		case 15:
			draw_driver(firingWall15_x0, firingWall15_y0, firingWall15_x1, firingWall15_y1, X*32, Y*32, 1);
    5fc4:	e0bffe0b 	ldhu	r2,-8(fp)
    5fc8:	1004917a 	slli	r2,r2,5
    5fcc:	1007883a 	mov	r3,r2
    5fd0:	e0bfff0b 	ldhu	r2,-4(fp)
    5fd4:	1004917a 	slli	r2,r2,5
    5fd8:	1009883a 	mov	r4,r2
    5fdc:	00800044 	movi	r2,1
    5fe0:	d8800215 	stw	r2,8(sp)
    5fe4:	d9000115 	stw	r4,4(sp)
    5fe8:	d8c00015 	stw	r3,0(sp)
    5fec:	01c03044 	movi	r7,193
    5ff0:	01809cc4 	movi	r6,627
    5ff4:	01402884 	movi	r5,162
    5ff8:	01009504 	movi	r4,596
    5ffc:	00036040 	call	3604 <draw_driver>
			break;
    6000:	00014106 	br	6508 <drawFiringWall+0x9dc>
		case 16:
			draw_driver(firingWall16_x0, firingWall16_y0, firingWall16_x1, firingWall16_y1, X*32, Y*32, 1);
    6004:	e0bffe0b 	ldhu	r2,-8(fp)
    6008:	1004917a 	slli	r2,r2,5
    600c:	1007883a 	mov	r3,r2
    6010:	e0bfff0b 	ldhu	r2,-4(fp)
    6014:	1004917a 	slli	r2,r2,5
    6018:	1009883a 	mov	r4,r2
    601c:	00800044 	movi	r2,1
    6020:	d8800215 	stw	r2,8(sp)
    6024:	d9000115 	stw	r4,4(sp)
    6028:	d8c00015 	stw	r3,0(sp)
    602c:	01c03844 	movi	r7,225
    6030:	018063c4 	movi	r6,399
    6034:	01403084 	movi	r5,194
    6038:	01005c04 	movi	r4,368
    603c:	00036040 	call	3604 <draw_driver>
			break;
    6040:	00013106 	br	6508 <drawFiringWall+0x9dc>
		case 17:
			draw_driver(firingWall17_x0, firingWall17_y0, firingWall17_x1, firingWall17_y1, X*32, Y*32, 1);
    6044:	e0bffe0b 	ldhu	r2,-8(fp)
    6048:	1004917a 	slli	r2,r2,5
    604c:	1007883a 	mov	r3,r2
    6050:	e0bfff0b 	ldhu	r2,-4(fp)
    6054:	1004917a 	slli	r2,r2,5
    6058:	1009883a 	mov	r4,r2
    605c:	00800044 	movi	r2,1
    6060:	d8800215 	stw	r2,8(sp)
    6064:	d9000115 	stw	r4,4(sp)
    6068:	d8c00015 	stw	r3,0(sp)
    606c:	01c03844 	movi	r7,225
    6070:	01806c04 	movi	r6,432
    6074:	01403084 	movi	r5,194
    6078:	01006444 	movi	r4,401
    607c:	00036040 	call	3604 <draw_driver>
			break;
    6080:	00012106 	br	6508 <drawFiringWall+0x9dc>
		case 18:
			draw_driver(firingWall18_x0, firingWall18_y0, firingWall18_x1, firingWall18_y1, X*32, Y*32, 1);
    6084:	e0bffe0b 	ldhu	r2,-8(fp)
    6088:	1004917a 	slli	r2,r2,5
    608c:	1007883a 	mov	r3,r2
    6090:	e0bfff0b 	ldhu	r2,-4(fp)
    6094:	1004917a 	slli	r2,r2,5
    6098:	1009883a 	mov	r4,r2
    609c:	00800044 	movi	r2,1
    60a0:	d8800215 	stw	r2,8(sp)
    60a4:	d9000115 	stw	r4,4(sp)
    60a8:	d8c00015 	stw	r3,0(sp)
    60ac:	01c03844 	movi	r7,225
    60b0:	01807444 	movi	r6,465
    60b4:	01403084 	movi	r5,194
    60b8:	01006c84 	movi	r4,434
    60bc:	00036040 	call	3604 <draw_driver>
			break;
    60c0:	00011106 	br	6508 <drawFiringWall+0x9dc>
		case 19:
			draw_driver(firingWall19_x0, firingWall19_y0, firingWall19_x1, firingWall19_y1, X*32, Y*32, 1);
    60c4:	e0bffe0b 	ldhu	r2,-8(fp)
    60c8:	1004917a 	slli	r2,r2,5
    60cc:	1007883a 	mov	r3,r2
    60d0:	e0bfff0b 	ldhu	r2,-4(fp)
    60d4:	1004917a 	slli	r2,r2,5
    60d8:	1009883a 	mov	r4,r2
    60dc:	00800044 	movi	r2,1
    60e0:	d8800215 	stw	r2,8(sp)
    60e4:	d9000115 	stw	r4,4(sp)
    60e8:	d8c00015 	stw	r3,0(sp)
    60ec:	01c03844 	movi	r7,225
    60f0:	01807c44 	movi	r6,497
    60f4:	01403084 	movi	r5,194
    60f8:	01007484 	movi	r4,466
    60fc:	00036040 	call	3604 <draw_driver>
			break;
    6100:	00010106 	br	6508 <drawFiringWall+0x9dc>
		case 20:
			draw_driver(firingWall20_x0, firingWall20_y0, firingWall20_x1, firingWall20_y1, X*32, Y*32, 1);
    6104:	e0bffe0b 	ldhu	r2,-8(fp)
    6108:	1004917a 	slli	r2,r2,5
    610c:	1007883a 	mov	r3,r2
    6110:	e0bfff0b 	ldhu	r2,-4(fp)
    6114:	1004917a 	slli	r2,r2,5
    6118:	1009883a 	mov	r4,r2
    611c:	00800044 	movi	r2,1
    6120:	d8800215 	stw	r2,8(sp)
    6124:	d9000115 	stw	r4,4(sp)
    6128:	d8c00015 	stw	r3,0(sp)
    612c:	01c03844 	movi	r7,225
    6130:	01808444 	movi	r6,529
    6134:	01403084 	movi	r5,194
    6138:	01007c84 	movi	r4,498
    613c:	00036040 	call	3604 <draw_driver>
			break;
    6140:	0000f106 	br	6508 <drawFiringWall+0x9dc>
		case 21:
			draw_driver(firingWall21_x0, firingWall21_y0, firingWall21_x1, firingWall21_y1, X*32, Y*32, 1);
    6144:	e0bffe0b 	ldhu	r2,-8(fp)
    6148:	1004917a 	slli	r2,r2,5
    614c:	1007883a 	mov	r3,r2
    6150:	e0bfff0b 	ldhu	r2,-4(fp)
    6154:	1004917a 	slli	r2,r2,5
    6158:	1009883a 	mov	r4,r2
    615c:	00800044 	movi	r2,1
    6160:	d8800215 	stw	r2,8(sp)
    6164:	d9000115 	stw	r4,4(sp)
    6168:	d8c00015 	stw	r3,0(sp)
    616c:	01c03844 	movi	r7,225
    6170:	01808c84 	movi	r6,562
    6174:	01403084 	movi	r5,194
    6178:	010084c4 	movi	r4,531
    617c:	00036040 	call	3604 <draw_driver>
			break;
    6180:	0000e106 	br	6508 <drawFiringWall+0x9dc>
		case 22:
			draw_driver(firingWall22_x0, firingWall22_y0, firingWall22_x1, firingWall22_y1, X*32, Y*32, 1);
    6184:	e0bffe0b 	ldhu	r2,-8(fp)
    6188:	1004917a 	slli	r2,r2,5
    618c:	1007883a 	mov	r3,r2
    6190:	e0bfff0b 	ldhu	r2,-4(fp)
    6194:	1004917a 	slli	r2,r2,5
    6198:	1009883a 	mov	r4,r2
    619c:	00800044 	movi	r2,1
    61a0:	d8800215 	stw	r2,8(sp)
    61a4:	d9000115 	stw	r4,4(sp)
    61a8:	d8c00015 	stw	r3,0(sp)
    61ac:	01c03844 	movi	r7,225
    61b0:	018094c4 	movi	r6,595
    61b4:	01403084 	movi	r5,194
    61b8:	01008d04 	movi	r4,564
    61bc:	00036040 	call	3604 <draw_driver>
			break;
    61c0:	0000d106 	br	6508 <drawFiringWall+0x9dc>
		case 23:
			draw_driver(firingWall23_x0, firingWall23_y0, firingWall23_x1, firingWall23_y1, X*32, Y*32, 1);
    61c4:	e0bffe0b 	ldhu	r2,-8(fp)
    61c8:	1004917a 	slli	r2,r2,5
    61cc:	1007883a 	mov	r3,r2
    61d0:	e0bfff0b 	ldhu	r2,-4(fp)
    61d4:	1004917a 	slli	r2,r2,5
    61d8:	1009883a 	mov	r4,r2
    61dc:	00800044 	movi	r2,1
    61e0:	d8800215 	stw	r2,8(sp)
    61e4:	d9000115 	stw	r4,4(sp)
    61e8:	d8c00015 	stw	r3,0(sp)
    61ec:	01c03844 	movi	r7,225
    61f0:	01809d04 	movi	r6,628
    61f4:	01403084 	movi	r5,194
    61f8:	01009544 	movi	r4,597
    61fc:	00036040 	call	3604 <draw_driver>
			break;
    6200:	0000c106 	br	6508 <drawFiringWall+0x9dc>
		case 24:
			draw_driver(firingWall24_x0, firingWall24_y0, firingWall24_x1, firingWall24_y1, X*32, Y*32, 1);
    6204:	e0bffe0b 	ldhu	r2,-8(fp)
    6208:	1004917a 	slli	r2,r2,5
    620c:	1007883a 	mov	r3,r2
    6210:	e0bfff0b 	ldhu	r2,-4(fp)
    6214:	1004917a 	slli	r2,r2,5
    6218:	1009883a 	mov	r4,r2
    621c:	00800044 	movi	r2,1
    6220:	d8800215 	stw	r2,8(sp)
    6224:	d9000115 	stw	r4,4(sp)
    6228:	d8c00015 	stw	r3,0(sp)
    622c:	01c04044 	movi	r7,257
    6230:	018063c4 	movi	r6,399
    6234:	01403884 	movi	r5,226
    6238:	01005c04 	movi	r4,368
    623c:	00036040 	call	3604 <draw_driver>
			break;
    6240:	0000b106 	br	6508 <drawFiringWall+0x9dc>
		case 25:
			draw_driver(firingWall25_x0, firingWall25_y0, firingWall25_x1, firingWall25_y1, X*32, Y*32, 1);
    6244:	e0bffe0b 	ldhu	r2,-8(fp)
    6248:	1004917a 	slli	r2,r2,5
    624c:	1007883a 	mov	r3,r2
    6250:	e0bfff0b 	ldhu	r2,-4(fp)
    6254:	1004917a 	slli	r2,r2,5
    6258:	1009883a 	mov	r4,r2
    625c:	00800044 	movi	r2,1
    6260:	d8800215 	stw	r2,8(sp)
    6264:	d9000115 	stw	r4,4(sp)
    6268:	d8c00015 	stw	r3,0(sp)
    626c:	01c04044 	movi	r7,257
    6270:	01806bc4 	movi	r6,431
    6274:	01403884 	movi	r5,226
    6278:	01006404 	movi	r4,400
    627c:	00036040 	call	3604 <draw_driver>
			break;
    6280:	0000a106 	br	6508 <drawFiringWall+0x9dc>
		case 26:
			draw_driver(firingWall26_x0, firingWall26_y0, firingWall26_x1, firingWall26_y1, X*32, Y*32, 1);
    6284:	e0bffe0b 	ldhu	r2,-8(fp)
    6288:	1004917a 	slli	r2,r2,5
    628c:	1007883a 	mov	r3,r2
    6290:	e0bfff0b 	ldhu	r2,-4(fp)
    6294:	1004917a 	slli	r2,r2,5
    6298:	1009883a 	mov	r4,r2
    629c:	00800044 	movi	r2,1
    62a0:	d8800215 	stw	r2,8(sp)
    62a4:	d9000115 	stw	r4,4(sp)
    62a8:	d8c00015 	stw	r3,0(sp)
    62ac:	01c04044 	movi	r7,257
    62b0:	018073c4 	movi	r6,463
    62b4:	01403884 	movi	r5,226
    62b8:	01006c04 	movi	r4,432
    62bc:	00036040 	call	3604 <draw_driver>
			break;
    62c0:	00009106 	br	6508 <drawFiringWall+0x9dc>
		case 27:
			draw_driver(firingWall27_x0, firingWall27_y0, firingWall27_x1, firingWall27_y1, X*32, Y*32, 1);
    62c4:	e0bffe0b 	ldhu	r2,-8(fp)
    62c8:	1004917a 	slli	r2,r2,5
    62cc:	1007883a 	mov	r3,r2
    62d0:	e0bfff0b 	ldhu	r2,-4(fp)
    62d4:	1004917a 	slli	r2,r2,5
    62d8:	1009883a 	mov	r4,r2
    62dc:	00800044 	movi	r2,1
    62e0:	d8800215 	stw	r2,8(sp)
    62e4:	d9000115 	stw	r4,4(sp)
    62e8:	d8c00015 	stw	r3,0(sp)
    62ec:	01c04044 	movi	r7,257
    62f0:	01807bc4 	movi	r6,495
    62f4:	01403884 	movi	r5,226
    62f8:	01007404 	movi	r4,464
    62fc:	00036040 	call	3604 <draw_driver>
			break;
    6300:	00008106 	br	6508 <drawFiringWall+0x9dc>
		case 28:
			draw_driver(firingWall28_x0, firingWall28_y0, firingWall28_x1, firingWall28_y1, X*32, Y*32, 1);
    6304:	e0bffe0b 	ldhu	r2,-8(fp)
    6308:	1004917a 	slli	r2,r2,5
    630c:	1007883a 	mov	r3,r2
    6310:	e0bfff0b 	ldhu	r2,-4(fp)
    6314:	1004917a 	slli	r2,r2,5
    6318:	1009883a 	mov	r4,r2
    631c:	00800044 	movi	r2,1
    6320:	d8800215 	stw	r2,8(sp)
    6324:	d9000115 	stw	r4,4(sp)
    6328:	d8c00015 	stw	r3,0(sp)
    632c:	01c04844 	movi	r7,289
    6330:	018063c4 	movi	r6,399
    6334:	01404084 	movi	r5,258
    6338:	01005c04 	movi	r4,368
    633c:	00036040 	call	3604 <draw_driver>
			break;
    6340:	00007106 	br	6508 <drawFiringWall+0x9dc>
		case 29:
			draw_driver(firingWall29_x0, firingWall29_y0, firingWall29_x1, firingWall29_y1, X*32, Y*32, 1);
    6344:	e0bffe0b 	ldhu	r2,-8(fp)
    6348:	1004917a 	slli	r2,r2,5
    634c:	1007883a 	mov	r3,r2
    6350:	e0bfff0b 	ldhu	r2,-4(fp)
    6354:	1004917a 	slli	r2,r2,5
    6358:	1009883a 	mov	r4,r2
    635c:	00800044 	movi	r2,1
    6360:	d8800215 	stw	r2,8(sp)
    6364:	d9000115 	stw	r4,4(sp)
    6368:	d8c00015 	stw	r3,0(sp)
    636c:	01c04844 	movi	r7,289
    6370:	01806bc4 	movi	r6,431
    6374:	01404084 	movi	r5,258
    6378:	01006404 	movi	r4,400
    637c:	00036040 	call	3604 <draw_driver>
			break;
    6380:	00006106 	br	6508 <drawFiringWall+0x9dc>
		case 30:
			draw_driver(firingWall30_x0, firingWall30_y0, firingWall30_x1, firingWall30_y1, X*32, Y*32, 1);
    6384:	e0bffe0b 	ldhu	r2,-8(fp)
    6388:	1004917a 	slli	r2,r2,5
    638c:	1007883a 	mov	r3,r2
    6390:	e0bfff0b 	ldhu	r2,-4(fp)
    6394:	1004917a 	slli	r2,r2,5
    6398:	1009883a 	mov	r4,r2
    639c:	00800044 	movi	r2,1
    63a0:	d8800215 	stw	r2,8(sp)
    63a4:	d9000115 	stw	r4,4(sp)
    63a8:	d8c00015 	stw	r3,0(sp)
    63ac:	01c04844 	movi	r7,289
    63b0:	01807404 	movi	r6,464
    63b4:	01404084 	movi	r5,258
    63b8:	01006c44 	movi	r4,433
    63bc:	00036040 	call	3604 <draw_driver>
			break;
    63c0:	00005106 	br	6508 <drawFiringWall+0x9dc>
		case 31:
			draw_driver(firingWall31_x0, firingWall31_y0, firingWall31_x1, firingWall31_y1, X*32, Y*32, 1);
    63c4:	e0bffe0b 	ldhu	r2,-8(fp)
    63c8:	1004917a 	slli	r2,r2,5
    63cc:	1007883a 	mov	r3,r2
    63d0:	e0bfff0b 	ldhu	r2,-4(fp)
    63d4:	1004917a 	slli	r2,r2,5
    63d8:	1009883a 	mov	r4,r2
    63dc:	00800044 	movi	r2,1
    63e0:	d8800215 	stw	r2,8(sp)
    63e4:	d9000115 	stw	r4,4(sp)
    63e8:	d8c00015 	stw	r3,0(sp)
    63ec:	01c04844 	movi	r7,289
    63f0:	01807c44 	movi	r6,497
    63f4:	01404084 	movi	r5,258
    63f8:	01007484 	movi	r4,466
    63fc:	00036040 	call	3604 <draw_driver>
			break;
    6400:	00004106 	br	6508 <drawFiringWall+0x9dc>
		case 32:
			draw_driver(firingWall32_x0, firingWall32_y0, firingWall32_x1, firingWall32_y1, X*32, Y*32, 1);
    6404:	e0bffe0b 	ldhu	r2,-8(fp)
    6408:	1004917a 	slli	r2,r2,5
    640c:	1007883a 	mov	r3,r2
    6410:	e0bfff0b 	ldhu	r2,-4(fp)
    6414:	1004917a 	slli	r2,r2,5
    6418:	1009883a 	mov	r4,r2
    641c:	00800044 	movi	r2,1
    6420:	d8800215 	stw	r2,8(sp)
    6424:	d9000115 	stw	r4,4(sp)
    6428:	d8c00015 	stw	r3,0(sp)
    642c:	01c04844 	movi	r7,289
    6430:	01808484 	movi	r6,530
    6434:	01404084 	movi	r5,258
    6438:	01007cc4 	movi	r4,499
    643c:	00036040 	call	3604 <draw_driver>
			break;
    6440:	00003106 	br	6508 <drawFiringWall+0x9dc>
		case 33:
			draw_driver(firingWall33_x0, firingWall33_y0, firingWall33_x1, firingWall33_y1, X*32, Y*32, 1);
    6444:	e0bffe0b 	ldhu	r2,-8(fp)
    6448:	1004917a 	slli	r2,r2,5
    644c:	1007883a 	mov	r3,r2
    6450:	e0bfff0b 	ldhu	r2,-4(fp)
    6454:	1004917a 	slli	r2,r2,5
    6458:	1009883a 	mov	r4,r2
    645c:	00800044 	movi	r2,1
    6460:	d8800215 	stw	r2,8(sp)
    6464:	d9000115 	stw	r4,4(sp)
    6468:	d8c00015 	stw	r3,0(sp)
    646c:	01c04844 	movi	r7,289
    6470:	01808cc4 	movi	r6,563
    6474:	01404084 	movi	r5,258
    6478:	01008504 	movi	r4,532
    647c:	00036040 	call	3604 <draw_driver>
			break;
    6480:	00002106 	br	6508 <drawFiringWall+0x9dc>
		case 34:
			draw_driver(firingWall34_x0, firingWall34_y0, firingWall34_x1, firingWall34_y1, X*32, Y*32, 1);
    6484:	e0bffe0b 	ldhu	r2,-8(fp)
    6488:	1004917a 	slli	r2,r2,5
    648c:	1007883a 	mov	r3,r2
    6490:	e0bfff0b 	ldhu	r2,-4(fp)
    6494:	1004917a 	slli	r2,r2,5
    6498:	1009883a 	mov	r4,r2
    649c:	00800044 	movi	r2,1
    64a0:	d8800215 	stw	r2,8(sp)
    64a4:	d9000115 	stw	r4,4(sp)
    64a8:	d8c00015 	stw	r3,0(sp)
    64ac:	01c04844 	movi	r7,289
    64b0:	01809504 	movi	r6,596
    64b4:	01404084 	movi	r5,258
    64b8:	01008d44 	movi	r4,565
    64bc:	00036040 	call	3604 <draw_driver>
			break;
    64c0:	00001106 	br	6508 <drawFiringWall+0x9dc>
		case 35:
			draw_driver(firingWall35_x0, firingWall35_y0, firingWall35_x1, firingWall35_y1, X*32, Y*32, 1);
    64c4:	e0bffe0b 	ldhu	r2,-8(fp)
    64c8:	1004917a 	slli	r2,r2,5
    64cc:	1007883a 	mov	r3,r2
    64d0:	e0bfff0b 	ldhu	r2,-4(fp)
    64d4:	1004917a 	slli	r2,r2,5
    64d8:	1009883a 	mov	r4,r2
    64dc:	00800044 	movi	r2,1
    64e0:	d8800215 	stw	r2,8(sp)
    64e4:	d9000115 	stw	r4,4(sp)
    64e8:	d8c00015 	stw	r3,0(sp)
    64ec:	01c04844 	movi	r7,289
    64f0:	01809d04 	movi	r6,628
    64f4:	01404084 	movi	r5,258
    64f8:	01009544 	movi	r4,597
    64fc:	00036040 	call	3604 <draw_driver>
			break;
    6500:	00000106 	br	6508 <drawFiringWall+0x9dc>
		default:
			break;
    6504:	0001883a 	nop
	}
}
    6508:	0001883a 	nop
    650c:	e037883a 	mov	sp,fp
    6510:	dfc00117 	ldw	ra,4(sp)
    6514:	df000017 	ldw	fp,0(sp)
    6518:	dec00204 	addi	sp,sp,8
    651c:	f800283a 	ret

00006520 <drawBombAndExplosion>:



void drawBombAndExplosion(unsigned short int index, unsigned short int counter, unsigned short int X, unsigned short int Y,
cell**stage, cellXY**head, cellXY **tail){
    6520:	defff504 	addi	sp,sp,-44
    6524:	dfc00a15 	stw	ra,40(sp)
    6528:	df000915 	stw	fp,36(sp)
    652c:	dc000815 	stw	r16,32(sp)
    6530:	df000904 	addi	fp,sp,36
    6534:	2011883a 	mov	r8,r4
    6538:	2809883a 	mov	r4,r5
    653c:	3007883a 	mov	r3,r6
    6540:	3805883a 	mov	r2,r7
    6544:	e23ffb0d 	sth	r8,-20(fp)
    6548:	e13ffc0d 	sth	r4,-16(fp)
    654c:	e0fffd0d 	sth	r3,-12(fp)
    6550:	e0bffe0d 	sth	r2,-8(fp)
	if(counter < 0){return;}
	if(counter <= 48){
    6554:	e0bffc0b 	ldhu	r2,-16(fp)
    6558:	10800c68 	cmpgeui	r2,r2,49
    655c:	1000111e 	bne	r2,zero,65a4 <drawBombAndExplosion+0x84>
		cleanCell(X, Y);
    6560:	e0bffd0b 	ldhu	r2,-12(fp)
    6564:	e0fffe0b 	ldhu	r3,-8(fp)
    6568:	180b883a 	mov	r5,r3
    656c:	1009883a 	mov	r4,r2
    6570:	00038a00 	call	38a0 <cleanCell>
		drawBomb(counter, X, Y);
    6574:	e0bffc0b 	ldhu	r2,-16(fp)
    6578:	e0fffd0b 	ldhu	r3,-12(fp)
    657c:	e13ffe0b 	ldhu	r4,-8(fp)
    6580:	200d883a 	mov	r6,r4
    6584:	180b883a 	mov	r5,r3
    6588:	1009883a 	mov	r4,r2
    658c:	0004dc40 	call	4dc4 <drawBomb>
		if(counter == 47){Bomb();}
    6590:	e0bffc0b 	ldhu	r2,-16(fp)
    6594:	10800bd8 	cmpnei	r2,r2,47
    6598:	1006041e 	bne	r2,zero,7dac <drawBombAndExplosion+0x188c>
    659c:	0002d540 	call	2d54 <Bomb>
    65a0:	00060206 	br	7dac <drawBombAndExplosion+0x188c>
	}
	else if (counter >900){
    65a4:	e0bffc0b 	ldhu	r2,-16(fp)
    65a8:	1080e170 	cmpltui	r2,r2,901
    65ac:	10021f1e 	bne	r2,zero,6e2c <drawBombAndExplosion+0x90c>
		stage[X][Y].type=0;
    65b0:	e0bffd0b 	ldhu	r2,-12(fp)
    65b4:	1085883a 	add	r2,r2,r2
    65b8:	1085883a 	add	r2,r2,r2
    65bc:	1007883a 	mov	r3,r2
    65c0:	e0800217 	ldw	r2,8(fp)
    65c4:	10c5883a 	add	r2,r2,r3
    65c8:	10c00017 	ldw	r3,0(r2)
    65cc:	e0bffe0b 	ldhu	r2,-8(fp)
    65d0:	100490fa 	slli	r2,r2,3
    65d4:	1885883a 	add	r2,r3,r2
    65d8:	1000000d 	sth	zero,0(r2)
		cleanCell(X, Y);
    65dc:	e0bffd0b 	ldhu	r2,-12(fp)
    65e0:	e0fffe0b 	ldhu	r3,-8(fp)
    65e4:	180b883a 	mov	r5,r3
    65e8:	1009883a 	mov	r4,r2
    65ec:	00038a00 	call	38a0 <cleanCell>
		for(short int X0 = (short int)X-1; X0>=(short int)X-2; X0--){
    65f0:	e0bffd0b 	ldhu	r2,-12(fp)
    65f4:	10bfffc4 	addi	r2,r2,-1
    65f8:	e0bff70d 	sth	r2,-36(fp)
    65fc:	00007506 	br	67d4 <drawBombAndExplosion+0x2b4>
			if(X0<0){break;}
    6600:	e0bff70f 	ldh	r2,-36(fp)
    6604:	10007b16 	blt	r2,zero,67f4 <drawBombAndExplosion+0x2d4>
			if(stage[X0][Y].type==index){stage[X0][Y].type=0;cleanCell(X0,Y);}
    6608:	e0bff70f 	ldh	r2,-36(fp)
    660c:	1085883a 	add	r2,r2,r2
    6610:	1085883a 	add	r2,r2,r2
    6614:	1007883a 	mov	r3,r2
    6618:	e0800217 	ldw	r2,8(fp)
    661c:	10c5883a 	add	r2,r2,r3
    6620:	10c00017 	ldw	r3,0(r2)
    6624:	e0bffe0b 	ldhu	r2,-8(fp)
    6628:	100490fa 	slli	r2,r2,3
    662c:	1885883a 	add	r2,r3,r2
    6630:	1080000b 	ldhu	r2,0(r2)
    6634:	10ffffcc 	andi	r3,r2,65535
    6638:	e0bffb0b 	ldhu	r2,-20(fp)
    663c:	1880121e 	bne	r3,r2,6688 <drawBombAndExplosion+0x168>
    6640:	e0bff70f 	ldh	r2,-36(fp)
    6644:	1085883a 	add	r2,r2,r2
    6648:	1085883a 	add	r2,r2,r2
    664c:	1007883a 	mov	r3,r2
    6650:	e0800217 	ldw	r2,8(fp)
    6654:	10c5883a 	add	r2,r2,r3
    6658:	10c00017 	ldw	r3,0(r2)
    665c:	e0bffe0b 	ldhu	r2,-8(fp)
    6660:	100490fa 	slli	r2,r2,3
    6664:	1885883a 	add	r2,r3,r2
    6668:	1000000d 	sth	zero,0(r2)
    666c:	e0bff70b 	ldhu	r2,-36(fp)
    6670:	10bfffcc 	andi	r2,r2,65535
    6674:	e0fffe0b 	ldhu	r3,-8(fp)
    6678:	180b883a 	mov	r5,r3
    667c:	1009883a 	mov	r4,r2
    6680:	00038a00 	call	38a0 <cleanCell>
    6684:	00005006 	br	67c8 <drawBombAndExplosion+0x2a8>
			else if(stage[X0][Y].type==1){break;}
    6688:	e0bff70f 	ldh	r2,-36(fp)
    668c:	1085883a 	add	r2,r2,r2
    6690:	1085883a 	add	r2,r2,r2
    6694:	1007883a 	mov	r3,r2
    6698:	e0800217 	ldw	r2,8(fp)
    669c:	10c5883a 	add	r2,r2,r3
    66a0:	10c00017 	ldw	r3,0(r2)
    66a4:	e0bffe0b 	ldhu	r2,-8(fp)
    66a8:	100490fa 	slli	r2,r2,3
    66ac:	1885883a 	add	r2,r3,r2
    66b0:	1080000b 	ldhu	r2,0(r2)
    66b4:	10bfffcc 	andi	r2,r2,65535
    66b8:	10800058 	cmpnei	r2,r2,1
    66bc:	10004f26 	beq	r2,zero,67fc <drawBombAndExplosion+0x2dc>
			else if(stage[X0][Y].type>=234){
    66c0:	e0bff70f 	ldh	r2,-36(fp)
    66c4:	1085883a 	add	r2,r2,r2
    66c8:	1085883a 	add	r2,r2,r2
    66cc:	1007883a 	mov	r3,r2
    66d0:	e0800217 	ldw	r2,8(fp)
    66d4:	10c5883a 	add	r2,r2,r3
    66d8:	10c00017 	ldw	r3,0(r2)
    66dc:	e0bffe0b 	ldhu	r2,-8(fp)
    66e0:	100490fa 	slli	r2,r2,3
    66e4:	1885883a 	add	r2,r3,r2
    66e8:	1080000b 	ldhu	r2,0(r2)
    66ec:	10bfffcc 	andi	r2,r2,65535
    66f0:	10803ab0 	cmpltui	r2,r2,234
    66f4:	1000341e 	bne	r2,zero,67c8 <drawBombAndExplosion+0x2a8>
				stage[X0][Y].type=6;
    66f8:	e0bff70f 	ldh	r2,-36(fp)
    66fc:	1085883a 	add	r2,r2,r2
    6700:	1085883a 	add	r2,r2,r2
    6704:	1007883a 	mov	r3,r2
    6708:	e0800217 	ldw	r2,8(fp)
    670c:	10c5883a 	add	r2,r2,r3
    6710:	10c00017 	ldw	r3,0(r2)
    6714:	e0bffe0b 	ldhu	r2,-8(fp)
    6718:	100490fa 	slli	r2,r2,3
    671c:	1885883a 	add	r2,r3,r2
    6720:	00c00184 	movi	r3,6
    6724:	10c0000d 	sth	r3,0(r2)
				stage[X0][Y].ptr =(coin*)malloc(sizeof(coin));
    6728:	e0bff70f 	ldh	r2,-36(fp)
    672c:	1085883a 	add	r2,r2,r2
    6730:	1085883a 	add	r2,r2,r2
    6734:	1007883a 	mov	r3,r2
    6738:	e0800217 	ldw	r2,8(fp)
    673c:	10c5883a 	add	r2,r2,r3
    6740:	10c00017 	ldw	r3,0(r2)
    6744:	e0bffe0b 	ldhu	r2,-8(fp)
    6748:	100490fa 	slli	r2,r2,3
    674c:	18a1883a 	add	r16,r3,r2
    6750:	01000104 	movi	r4,4
    6754:	000dc340 	call	dc34 <malloc>
    6758:	80800115 	stw	r2,4(r16)
				stage[X0][Y].ptr->counter=0;
    675c:	e0bff70f 	ldh	r2,-36(fp)
    6760:	1085883a 	add	r2,r2,r2
    6764:	1085883a 	add	r2,r2,r2
    6768:	1007883a 	mov	r3,r2
    676c:	e0800217 	ldw	r2,8(fp)
    6770:	10c5883a 	add	r2,r2,r3
    6774:	10c00017 	ldw	r3,0(r2)
    6778:	e0bffe0b 	ldhu	r2,-8(fp)
    677c:	100490fa 	slli	r2,r2,3
    6780:	1885883a 	add	r2,r3,r2
    6784:	10800117 	ldw	r2,4(r2)
    6788:	10000015 	stw	zero,0(r2)
				pushToCoinList(X0, Y, head, tail);
    678c:	e0bff70b 	ldhu	r2,-36(fp)
    6790:	10bfffcc 	andi	r2,r2,65535
    6794:	e0fffe0b 	ldhu	r3,-8(fp)
    6798:	e1c00417 	ldw	r7,16(fp)
    679c:	e1800317 	ldw	r6,12(fp)
    67a0:	180b883a 	mov	r5,r3
    67a4:	1009883a 	mov	r4,r2
    67a8:	0007dc40 	call	7dc4 <pushToCoinList>
				cleanCell(X0,Y);
    67ac:	e0bff70b 	ldhu	r2,-36(fp)
    67b0:	10bfffcc 	andi	r2,r2,65535
    67b4:	e0fffe0b 	ldhu	r3,-8(fp)
    67b8:	180b883a 	mov	r5,r3
    67bc:	1009883a 	mov	r4,r2
    67c0:	00038a00 	call	38a0 <cleanCell>
				break;}
    67c4:	00000e06 	br	6800 <drawBombAndExplosion+0x2e0>
		if(counter == 47){Bomb();}
	}
	else if (counter >900){
		stage[X][Y].type=0;
		cleanCell(X, Y);
		for(short int X0 = (short int)X-1; X0>=(short int)X-2; X0--){
    67c8:	e0bff70b 	ldhu	r2,-36(fp)
    67cc:	10bfffc4 	addi	r2,r2,-1
    67d0:	e0bff70d 	sth	r2,-36(fp)
    67d4:	e0fff70f 	ldh	r3,-36(fp)
    67d8:	e0bffd0b 	ldhu	r2,-12(fp)
    67dc:	10bfffcc 	andi	r2,r2,65535
    67e0:	10a0001c 	xori	r2,r2,32768
    67e4:	10a00004 	addi	r2,r2,-32768
    67e8:	10bfff84 	addi	r2,r2,-2
    67ec:	18bf840e 	bge	r3,r2,6600 <__alt_data_end+0xf8006600>
    67f0:	00000306 	br	6800 <drawBombAndExplosion+0x2e0>
			if(X0<0){break;}
    67f4:	0001883a 	nop
    67f8:	00000106 	br	6800 <drawBombAndExplosion+0x2e0>
			if(stage[X0][Y].type==index){stage[X0][Y].type=0;cleanCell(X0,Y);}
			else if(stage[X0][Y].type==1){break;}
    67fc:	0001883a 	nop
				stage[X0][Y].ptr->counter=0;
				pushToCoinList(X0, Y, head, tail);
				cleanCell(X0,Y);
				break;}
		}
		for(short int X0 = (short int)X+1; X0<=(short int)X+2; X0++){
    6800:	e0bffd0b 	ldhu	r2,-12(fp)
    6804:	10800044 	addi	r2,r2,1
    6808:	e0bff78d 	sth	r2,-34(fp)
    680c:	00007606 	br	69e8 <drawBombAndExplosion+0x4c8>
			if(X0>19){break;}
    6810:	e0bff78f 	ldh	r2,-34(fp)
    6814:	10800510 	cmplti	r2,r2,20
    6818:	10007b26 	beq	r2,zero,6a08 <drawBombAndExplosion+0x4e8>
			if(stage[X0][Y].type==index){stage[X0][Y].type=0;cleanCell(X0,Y);}
    681c:	e0bff78f 	ldh	r2,-34(fp)
    6820:	1085883a 	add	r2,r2,r2
    6824:	1085883a 	add	r2,r2,r2
    6828:	1007883a 	mov	r3,r2
    682c:	e0800217 	ldw	r2,8(fp)
    6830:	10c5883a 	add	r2,r2,r3
    6834:	10c00017 	ldw	r3,0(r2)
    6838:	e0bffe0b 	ldhu	r2,-8(fp)
    683c:	100490fa 	slli	r2,r2,3
    6840:	1885883a 	add	r2,r3,r2
    6844:	1080000b 	ldhu	r2,0(r2)
    6848:	10ffffcc 	andi	r3,r2,65535
    684c:	e0bffb0b 	ldhu	r2,-20(fp)
    6850:	1880121e 	bne	r3,r2,689c <drawBombAndExplosion+0x37c>
    6854:	e0bff78f 	ldh	r2,-34(fp)
    6858:	1085883a 	add	r2,r2,r2
    685c:	1085883a 	add	r2,r2,r2
    6860:	1007883a 	mov	r3,r2
    6864:	e0800217 	ldw	r2,8(fp)
    6868:	10c5883a 	add	r2,r2,r3
    686c:	10c00017 	ldw	r3,0(r2)
    6870:	e0bffe0b 	ldhu	r2,-8(fp)
    6874:	100490fa 	slli	r2,r2,3
    6878:	1885883a 	add	r2,r3,r2
    687c:	1000000d 	sth	zero,0(r2)
    6880:	e0bff78b 	ldhu	r2,-34(fp)
    6884:	10bfffcc 	andi	r2,r2,65535
    6888:	e0fffe0b 	ldhu	r3,-8(fp)
    688c:	180b883a 	mov	r5,r3
    6890:	1009883a 	mov	r4,r2
    6894:	00038a00 	call	38a0 <cleanCell>
    6898:	00005006 	br	69dc <drawBombAndExplosion+0x4bc>
			else if(stage[X0][Y].type==1){break;}
    689c:	e0bff78f 	ldh	r2,-34(fp)
    68a0:	1085883a 	add	r2,r2,r2
    68a4:	1085883a 	add	r2,r2,r2
    68a8:	1007883a 	mov	r3,r2
    68ac:	e0800217 	ldw	r2,8(fp)
    68b0:	10c5883a 	add	r2,r2,r3
    68b4:	10c00017 	ldw	r3,0(r2)
    68b8:	e0bffe0b 	ldhu	r2,-8(fp)
    68bc:	100490fa 	slli	r2,r2,3
    68c0:	1885883a 	add	r2,r3,r2
    68c4:	1080000b 	ldhu	r2,0(r2)
    68c8:	10bfffcc 	andi	r2,r2,65535
    68cc:	10800058 	cmpnei	r2,r2,1
    68d0:	10004f26 	beq	r2,zero,6a10 <drawBombAndExplosion+0x4f0>
			else if(stage[X0][Y].type>=234){
    68d4:	e0bff78f 	ldh	r2,-34(fp)
    68d8:	1085883a 	add	r2,r2,r2
    68dc:	1085883a 	add	r2,r2,r2
    68e0:	1007883a 	mov	r3,r2
    68e4:	e0800217 	ldw	r2,8(fp)
    68e8:	10c5883a 	add	r2,r2,r3
    68ec:	10c00017 	ldw	r3,0(r2)
    68f0:	e0bffe0b 	ldhu	r2,-8(fp)
    68f4:	100490fa 	slli	r2,r2,3
    68f8:	1885883a 	add	r2,r3,r2
    68fc:	1080000b 	ldhu	r2,0(r2)
    6900:	10bfffcc 	andi	r2,r2,65535
    6904:	10803ab0 	cmpltui	r2,r2,234
    6908:	1000341e 	bne	r2,zero,69dc <drawBombAndExplosion+0x4bc>
				stage[X0][Y].type=6;
    690c:	e0bff78f 	ldh	r2,-34(fp)
    6910:	1085883a 	add	r2,r2,r2
    6914:	1085883a 	add	r2,r2,r2
    6918:	1007883a 	mov	r3,r2
    691c:	e0800217 	ldw	r2,8(fp)
    6920:	10c5883a 	add	r2,r2,r3
    6924:	10c00017 	ldw	r3,0(r2)
    6928:	e0bffe0b 	ldhu	r2,-8(fp)
    692c:	100490fa 	slli	r2,r2,3
    6930:	1885883a 	add	r2,r3,r2
    6934:	00c00184 	movi	r3,6
    6938:	10c0000d 	sth	r3,0(r2)
				stage[X0][Y].ptr =(coin*)malloc(sizeof(coin));
    693c:	e0bff78f 	ldh	r2,-34(fp)
    6940:	1085883a 	add	r2,r2,r2
    6944:	1085883a 	add	r2,r2,r2
    6948:	1007883a 	mov	r3,r2
    694c:	e0800217 	ldw	r2,8(fp)
    6950:	10c5883a 	add	r2,r2,r3
    6954:	10c00017 	ldw	r3,0(r2)
    6958:	e0bffe0b 	ldhu	r2,-8(fp)
    695c:	100490fa 	slli	r2,r2,3
    6960:	18a1883a 	add	r16,r3,r2
    6964:	01000104 	movi	r4,4
    6968:	000dc340 	call	dc34 <malloc>
    696c:	80800115 	stw	r2,4(r16)
				stage[X0][Y].ptr->counter=0;
    6970:	e0bff78f 	ldh	r2,-34(fp)
    6974:	1085883a 	add	r2,r2,r2
    6978:	1085883a 	add	r2,r2,r2
    697c:	1007883a 	mov	r3,r2
    6980:	e0800217 	ldw	r2,8(fp)
    6984:	10c5883a 	add	r2,r2,r3
    6988:	10c00017 	ldw	r3,0(r2)
    698c:	e0bffe0b 	ldhu	r2,-8(fp)
    6990:	100490fa 	slli	r2,r2,3
    6994:	1885883a 	add	r2,r3,r2
    6998:	10800117 	ldw	r2,4(r2)
    699c:	10000015 	stw	zero,0(r2)
				pushToCoinList(X0, Y, head, tail);
    69a0:	e0bff78b 	ldhu	r2,-34(fp)
    69a4:	10bfffcc 	andi	r2,r2,65535
    69a8:	e0fffe0b 	ldhu	r3,-8(fp)
    69ac:	e1c00417 	ldw	r7,16(fp)
    69b0:	e1800317 	ldw	r6,12(fp)
    69b4:	180b883a 	mov	r5,r3
    69b8:	1009883a 	mov	r4,r2
    69bc:	0007dc40 	call	7dc4 <pushToCoinList>
				cleanCell(X0,Y);
    69c0:	e0bff78b 	ldhu	r2,-34(fp)
    69c4:	10bfffcc 	andi	r2,r2,65535
    69c8:	e0fffe0b 	ldhu	r3,-8(fp)
    69cc:	180b883a 	mov	r5,r3
    69d0:	1009883a 	mov	r4,r2
    69d4:	00038a00 	call	38a0 <cleanCell>
				break;
    69d8:	00000e06 	br	6a14 <drawBombAndExplosion+0x4f4>
				stage[X0][Y].ptr->counter=0;
				pushToCoinList(X0, Y, head, tail);
				cleanCell(X0,Y);
				break;}
		}
		for(short int X0 = (short int)X+1; X0<=(short int)X+2; X0++){
    69dc:	e0bff78b 	ldhu	r2,-34(fp)
    69e0:	10800044 	addi	r2,r2,1
    69e4:	e0bff78d 	sth	r2,-34(fp)
    69e8:	e0bff78f 	ldh	r2,-34(fp)
    69ec:	e0fffd0b 	ldhu	r3,-12(fp)
    69f0:	18ffffcc 	andi	r3,r3,65535
    69f4:	18e0001c 	xori	r3,r3,32768
    69f8:	18e00004 	addi	r3,r3,-32768
    69fc:	18c00084 	addi	r3,r3,2
    6a00:	18bf830e 	bge	r3,r2,6810 <__alt_data_end+0xf8006810>
    6a04:	00000306 	br	6a14 <drawBombAndExplosion+0x4f4>
			if(X0>19){break;}
    6a08:	0001883a 	nop
    6a0c:	00000106 	br	6a14 <drawBombAndExplosion+0x4f4>
			if(stage[X0][Y].type==index){stage[X0][Y].type=0;cleanCell(X0,Y);}
			else if(stage[X0][Y].type==1){break;}
    6a10:	0001883a 	nop
				pushToCoinList(X0, Y, head, tail);
				cleanCell(X0,Y);
				break;
			}
		}
		for(short int Y0 = (short int)Y-1; Y0>=(short int)Y-2; Y0--){
    6a14:	e0bffe0b 	ldhu	r2,-8(fp)
    6a18:	10bfffc4 	addi	r2,r2,-1
    6a1c:	e0bff80d 	sth	r2,-32(fp)
    6a20:	00007506 	br	6bf8 <drawBombAndExplosion+0x6d8>
			if(Y0<0){break;}
    6a24:	e0bff80f 	ldh	r2,-32(fp)
    6a28:	10007b16 	blt	r2,zero,6c18 <drawBombAndExplosion+0x6f8>
			if(stage[X][Y0].type==index){stage[X][Y0].type=0;cleanCell(X,Y0);}
    6a2c:	e0bffd0b 	ldhu	r2,-12(fp)
    6a30:	1085883a 	add	r2,r2,r2
    6a34:	1085883a 	add	r2,r2,r2
    6a38:	1007883a 	mov	r3,r2
    6a3c:	e0800217 	ldw	r2,8(fp)
    6a40:	10c5883a 	add	r2,r2,r3
    6a44:	10c00017 	ldw	r3,0(r2)
    6a48:	e0bff80f 	ldh	r2,-32(fp)
    6a4c:	100490fa 	slli	r2,r2,3
    6a50:	1885883a 	add	r2,r3,r2
    6a54:	1080000b 	ldhu	r2,0(r2)
    6a58:	10ffffcc 	andi	r3,r2,65535
    6a5c:	e0bffb0b 	ldhu	r2,-20(fp)
    6a60:	1880121e 	bne	r3,r2,6aac <drawBombAndExplosion+0x58c>
    6a64:	e0bffd0b 	ldhu	r2,-12(fp)
    6a68:	1085883a 	add	r2,r2,r2
    6a6c:	1085883a 	add	r2,r2,r2
    6a70:	1007883a 	mov	r3,r2
    6a74:	e0800217 	ldw	r2,8(fp)
    6a78:	10c5883a 	add	r2,r2,r3
    6a7c:	10c00017 	ldw	r3,0(r2)
    6a80:	e0bff80f 	ldh	r2,-32(fp)
    6a84:	100490fa 	slli	r2,r2,3
    6a88:	1885883a 	add	r2,r3,r2
    6a8c:	1000000d 	sth	zero,0(r2)
    6a90:	e0bffd0b 	ldhu	r2,-12(fp)
    6a94:	e0fff80b 	ldhu	r3,-32(fp)
    6a98:	18ffffcc 	andi	r3,r3,65535
    6a9c:	180b883a 	mov	r5,r3
    6aa0:	1009883a 	mov	r4,r2
    6aa4:	00038a00 	call	38a0 <cleanCell>
    6aa8:	00005006 	br	6bec <drawBombAndExplosion+0x6cc>
			else if(stage[X][Y0].type==1){break;}
    6aac:	e0bffd0b 	ldhu	r2,-12(fp)
    6ab0:	1085883a 	add	r2,r2,r2
    6ab4:	1085883a 	add	r2,r2,r2
    6ab8:	1007883a 	mov	r3,r2
    6abc:	e0800217 	ldw	r2,8(fp)
    6ac0:	10c5883a 	add	r2,r2,r3
    6ac4:	10c00017 	ldw	r3,0(r2)
    6ac8:	e0bff80f 	ldh	r2,-32(fp)
    6acc:	100490fa 	slli	r2,r2,3
    6ad0:	1885883a 	add	r2,r3,r2
    6ad4:	1080000b 	ldhu	r2,0(r2)
    6ad8:	10bfffcc 	andi	r2,r2,65535
    6adc:	10800058 	cmpnei	r2,r2,1
    6ae0:	10004f26 	beq	r2,zero,6c20 <drawBombAndExplosion+0x700>
			else if(stage[X][Y0].type>=234){
    6ae4:	e0bffd0b 	ldhu	r2,-12(fp)
    6ae8:	1085883a 	add	r2,r2,r2
    6aec:	1085883a 	add	r2,r2,r2
    6af0:	1007883a 	mov	r3,r2
    6af4:	e0800217 	ldw	r2,8(fp)
    6af8:	10c5883a 	add	r2,r2,r3
    6afc:	10c00017 	ldw	r3,0(r2)
    6b00:	e0bff80f 	ldh	r2,-32(fp)
    6b04:	100490fa 	slli	r2,r2,3
    6b08:	1885883a 	add	r2,r3,r2
    6b0c:	1080000b 	ldhu	r2,0(r2)
    6b10:	10bfffcc 	andi	r2,r2,65535
    6b14:	10803ab0 	cmpltui	r2,r2,234
    6b18:	1000341e 	bne	r2,zero,6bec <drawBombAndExplosion+0x6cc>
				stage[X][Y0].type=6;
    6b1c:	e0bffd0b 	ldhu	r2,-12(fp)
    6b20:	1085883a 	add	r2,r2,r2
    6b24:	1085883a 	add	r2,r2,r2
    6b28:	1007883a 	mov	r3,r2
    6b2c:	e0800217 	ldw	r2,8(fp)
    6b30:	10c5883a 	add	r2,r2,r3
    6b34:	10c00017 	ldw	r3,0(r2)
    6b38:	e0bff80f 	ldh	r2,-32(fp)
    6b3c:	100490fa 	slli	r2,r2,3
    6b40:	1885883a 	add	r2,r3,r2
    6b44:	00c00184 	movi	r3,6
    6b48:	10c0000d 	sth	r3,0(r2)
				stage[X][Y0].ptr =(coin*)malloc(sizeof(coin));
    6b4c:	e0bffd0b 	ldhu	r2,-12(fp)
    6b50:	1085883a 	add	r2,r2,r2
    6b54:	1085883a 	add	r2,r2,r2
    6b58:	1007883a 	mov	r3,r2
    6b5c:	e0800217 	ldw	r2,8(fp)
    6b60:	10c5883a 	add	r2,r2,r3
    6b64:	10c00017 	ldw	r3,0(r2)
    6b68:	e0bff80f 	ldh	r2,-32(fp)
    6b6c:	100490fa 	slli	r2,r2,3
    6b70:	18a1883a 	add	r16,r3,r2
    6b74:	01000104 	movi	r4,4
    6b78:	000dc340 	call	dc34 <malloc>
    6b7c:	80800115 	stw	r2,4(r16)
				stage[X][Y0].ptr->counter=0;
    6b80:	e0bffd0b 	ldhu	r2,-12(fp)
    6b84:	1085883a 	add	r2,r2,r2
    6b88:	1085883a 	add	r2,r2,r2
    6b8c:	1007883a 	mov	r3,r2
    6b90:	e0800217 	ldw	r2,8(fp)
    6b94:	10c5883a 	add	r2,r2,r3
    6b98:	10c00017 	ldw	r3,0(r2)
    6b9c:	e0bff80f 	ldh	r2,-32(fp)
    6ba0:	100490fa 	slli	r2,r2,3
    6ba4:	1885883a 	add	r2,r3,r2
    6ba8:	10800117 	ldw	r2,4(r2)
    6bac:	10000015 	stw	zero,0(r2)
				pushToCoinList(X, Y0, head, tail);
    6bb0:	e0bffd0b 	ldhu	r2,-12(fp)
    6bb4:	e0fff80b 	ldhu	r3,-32(fp)
    6bb8:	18ffffcc 	andi	r3,r3,65535
    6bbc:	e1c00417 	ldw	r7,16(fp)
    6bc0:	e1800317 	ldw	r6,12(fp)
    6bc4:	180b883a 	mov	r5,r3
    6bc8:	1009883a 	mov	r4,r2
    6bcc:	0007dc40 	call	7dc4 <pushToCoinList>
				cleanCell(X,Y0);
    6bd0:	e0bffd0b 	ldhu	r2,-12(fp)
    6bd4:	e0fff80b 	ldhu	r3,-32(fp)
    6bd8:	18ffffcc 	andi	r3,r3,65535
    6bdc:	180b883a 	mov	r5,r3
    6be0:	1009883a 	mov	r4,r2
    6be4:	00038a00 	call	38a0 <cleanCell>
				break;
    6be8:	00000e06 	br	6c24 <drawBombAndExplosion+0x704>
				pushToCoinList(X0, Y, head, tail);
				cleanCell(X0,Y);
				break;
			}
		}
		for(short int Y0 = (short int)Y-1; Y0>=(short int)Y-2; Y0--){
    6bec:	e0bff80b 	ldhu	r2,-32(fp)
    6bf0:	10bfffc4 	addi	r2,r2,-1
    6bf4:	e0bff80d 	sth	r2,-32(fp)
    6bf8:	e0fff80f 	ldh	r3,-32(fp)
    6bfc:	e0bffe0b 	ldhu	r2,-8(fp)
    6c00:	10bfffcc 	andi	r2,r2,65535
    6c04:	10a0001c 	xori	r2,r2,32768
    6c08:	10a00004 	addi	r2,r2,-32768
    6c0c:	10bfff84 	addi	r2,r2,-2
    6c10:	18bf840e 	bge	r3,r2,6a24 <__alt_data_end+0xf8006a24>
    6c14:	00000306 	br	6c24 <drawBombAndExplosion+0x704>
			if(Y0<0){break;}
    6c18:	0001883a 	nop
    6c1c:	00000106 	br	6c24 <drawBombAndExplosion+0x704>
			if(stage[X][Y0].type==index){stage[X][Y0].type=0;cleanCell(X,Y0);}
			else if(stage[X][Y0].type==1){break;}
    6c20:	0001883a 	nop
				pushToCoinList(X, Y0, head, tail);
				cleanCell(X,Y0);
				break;
			}
		}
		for(short int Y0 = (short int)Y+1; Y0<=(short int)Y+2; Y0++){
    6c24:	e0bffe0b 	ldhu	r2,-8(fp)
    6c28:	10800044 	addi	r2,r2,1
    6c2c:	e0bff88d 	sth	r2,-30(fp)
    6c30:	00007606 	br	6e0c <drawBombAndExplosion+0x8ec>
			if(Y0>14){break;}
    6c34:	e0bff88f 	ldh	r2,-30(fp)
    6c38:	108003d0 	cmplti	r2,r2,15
    6c3c:	10045026 	beq	r2,zero,7d80 <drawBombAndExplosion+0x1860>
			if(stage[X][Y0].type==index){stage[X][Y0].type=0;cleanCell(X,Y0);}
    6c40:	e0bffd0b 	ldhu	r2,-12(fp)
    6c44:	1085883a 	add	r2,r2,r2
    6c48:	1085883a 	add	r2,r2,r2
    6c4c:	1007883a 	mov	r3,r2
    6c50:	e0800217 	ldw	r2,8(fp)
    6c54:	10c5883a 	add	r2,r2,r3
    6c58:	10c00017 	ldw	r3,0(r2)
    6c5c:	e0bff88f 	ldh	r2,-30(fp)
    6c60:	100490fa 	slli	r2,r2,3
    6c64:	1885883a 	add	r2,r3,r2
    6c68:	1080000b 	ldhu	r2,0(r2)
    6c6c:	10ffffcc 	andi	r3,r2,65535
    6c70:	e0bffb0b 	ldhu	r2,-20(fp)
    6c74:	1880121e 	bne	r3,r2,6cc0 <drawBombAndExplosion+0x7a0>
    6c78:	e0bffd0b 	ldhu	r2,-12(fp)
    6c7c:	1085883a 	add	r2,r2,r2
    6c80:	1085883a 	add	r2,r2,r2
    6c84:	1007883a 	mov	r3,r2
    6c88:	e0800217 	ldw	r2,8(fp)
    6c8c:	10c5883a 	add	r2,r2,r3
    6c90:	10c00017 	ldw	r3,0(r2)
    6c94:	e0bff88f 	ldh	r2,-30(fp)
    6c98:	100490fa 	slli	r2,r2,3
    6c9c:	1885883a 	add	r2,r3,r2
    6ca0:	1000000d 	sth	zero,0(r2)
    6ca4:	e0bffd0b 	ldhu	r2,-12(fp)
    6ca8:	e0fff88b 	ldhu	r3,-30(fp)
    6cac:	18ffffcc 	andi	r3,r3,65535
    6cb0:	180b883a 	mov	r5,r3
    6cb4:	1009883a 	mov	r4,r2
    6cb8:	00038a00 	call	38a0 <cleanCell>
    6cbc:	00005006 	br	6e00 <drawBombAndExplosion+0x8e0>
			else if(stage[X][Y0].type==1){break;}
    6cc0:	e0bffd0b 	ldhu	r2,-12(fp)
    6cc4:	1085883a 	add	r2,r2,r2
    6cc8:	1085883a 	add	r2,r2,r2
    6ccc:	1007883a 	mov	r3,r2
    6cd0:	e0800217 	ldw	r2,8(fp)
    6cd4:	10c5883a 	add	r2,r2,r3
    6cd8:	10c00017 	ldw	r3,0(r2)
    6cdc:	e0bff88f 	ldh	r2,-30(fp)
    6ce0:	100490fa 	slli	r2,r2,3
    6ce4:	1885883a 	add	r2,r3,r2
    6ce8:	1080000b 	ldhu	r2,0(r2)
    6cec:	10bfffcc 	andi	r2,r2,65535
    6cf0:	10800058 	cmpnei	r2,r2,1
    6cf4:	10042426 	beq	r2,zero,7d88 <drawBombAndExplosion+0x1868>
			else if(stage[X][Y0].type>=234){
    6cf8:	e0bffd0b 	ldhu	r2,-12(fp)
    6cfc:	1085883a 	add	r2,r2,r2
    6d00:	1085883a 	add	r2,r2,r2
    6d04:	1007883a 	mov	r3,r2
    6d08:	e0800217 	ldw	r2,8(fp)
    6d0c:	10c5883a 	add	r2,r2,r3
    6d10:	10c00017 	ldw	r3,0(r2)
    6d14:	e0bff88f 	ldh	r2,-30(fp)
    6d18:	100490fa 	slli	r2,r2,3
    6d1c:	1885883a 	add	r2,r3,r2
    6d20:	1080000b 	ldhu	r2,0(r2)
    6d24:	10bfffcc 	andi	r2,r2,65535
    6d28:	10803ab0 	cmpltui	r2,r2,234
    6d2c:	1000341e 	bne	r2,zero,6e00 <drawBombAndExplosion+0x8e0>
				stage[X][Y0].type=6;
    6d30:	e0bffd0b 	ldhu	r2,-12(fp)
    6d34:	1085883a 	add	r2,r2,r2
    6d38:	1085883a 	add	r2,r2,r2
    6d3c:	1007883a 	mov	r3,r2
    6d40:	e0800217 	ldw	r2,8(fp)
    6d44:	10c5883a 	add	r2,r2,r3
    6d48:	10c00017 	ldw	r3,0(r2)
    6d4c:	e0bff88f 	ldh	r2,-30(fp)
    6d50:	100490fa 	slli	r2,r2,3
    6d54:	1885883a 	add	r2,r3,r2
    6d58:	00c00184 	movi	r3,6
    6d5c:	10c0000d 	sth	r3,0(r2)
				stage[X][Y0].ptr =(coin*)malloc(sizeof(coin));
    6d60:	e0bffd0b 	ldhu	r2,-12(fp)
    6d64:	1085883a 	add	r2,r2,r2
    6d68:	1085883a 	add	r2,r2,r2
    6d6c:	1007883a 	mov	r3,r2
    6d70:	e0800217 	ldw	r2,8(fp)
    6d74:	10c5883a 	add	r2,r2,r3
    6d78:	10c00017 	ldw	r3,0(r2)
    6d7c:	e0bff88f 	ldh	r2,-30(fp)
    6d80:	100490fa 	slli	r2,r2,3
    6d84:	18a1883a 	add	r16,r3,r2
    6d88:	01000104 	movi	r4,4
    6d8c:	000dc340 	call	dc34 <malloc>
    6d90:	80800115 	stw	r2,4(r16)
				stage[X][Y0].ptr->counter=0;
    6d94:	e0bffd0b 	ldhu	r2,-12(fp)
    6d98:	1085883a 	add	r2,r2,r2
    6d9c:	1085883a 	add	r2,r2,r2
    6da0:	1007883a 	mov	r3,r2
    6da4:	e0800217 	ldw	r2,8(fp)
    6da8:	10c5883a 	add	r2,r2,r3
    6dac:	10c00017 	ldw	r3,0(r2)
    6db0:	e0bff88f 	ldh	r2,-30(fp)
    6db4:	100490fa 	slli	r2,r2,3
    6db8:	1885883a 	add	r2,r3,r2
    6dbc:	10800117 	ldw	r2,4(r2)
    6dc0:	10000015 	stw	zero,0(r2)
				pushToCoinList(X, Y0, head, tail);
    6dc4:	e0bffd0b 	ldhu	r2,-12(fp)
    6dc8:	e0fff88b 	ldhu	r3,-30(fp)
    6dcc:	18ffffcc 	andi	r3,r3,65535
    6dd0:	e1c00417 	ldw	r7,16(fp)
    6dd4:	e1800317 	ldw	r6,12(fp)
    6dd8:	180b883a 	mov	r5,r3
    6ddc:	1009883a 	mov	r4,r2
    6de0:	0007dc40 	call	7dc4 <pushToCoinList>
				cleanCell(X,Y0);
    6de4:	e0bffd0b 	ldhu	r2,-12(fp)
    6de8:	e0fff88b 	ldhu	r3,-30(fp)
    6dec:	18ffffcc 	andi	r3,r3,65535
    6df0:	180b883a 	mov	r5,r3
    6df4:	1009883a 	mov	r4,r2
    6df8:	00038a00 	call	38a0 <cleanCell>
				break;
    6dfc:	0003eb06 	br	7dac <drawBombAndExplosion+0x188c>
				pushToCoinList(X, Y0, head, tail);
				cleanCell(X,Y0);
				break;
			}
		}
		for(short int Y0 = (short int)Y+1; Y0<=(short int)Y+2; Y0++){
    6e00:	e0bff88b 	ldhu	r2,-30(fp)
    6e04:	10800044 	addi	r2,r2,1
    6e08:	e0bff88d 	sth	r2,-30(fp)
    6e0c:	e0bff88f 	ldh	r2,-30(fp)
    6e10:	e0fffe0b 	ldhu	r3,-8(fp)
    6e14:	18ffffcc 	andi	r3,r3,65535
    6e18:	18e0001c 	xori	r3,r3,32768
    6e1c:	18e00004 	addi	r3,r3,-32768
    6e20:	18c00084 	addi	r3,r3,2
    6e24:	18bf830e 	bge	r3,r2,6c34 <__alt_data_end+0xf8006c34>
    6e28:	0003e006 	br	7dac <drawBombAndExplosion+0x188c>
				break;
			}
		}
	}
	else{
		cleanCell(X, Y);
    6e2c:	e0bffd0b 	ldhu	r2,-12(fp)
    6e30:	e0fffe0b 	ldhu	r3,-8(fp)
    6e34:	180b883a 	mov	r5,r3
    6e38:	1009883a 	mov	r4,r2
    6e3c:	00038a00 	call	38a0 <cleanCell>
		drawExplosion(counter-49, X, Y);
    6e40:	e0bffc0b 	ldhu	r2,-16(fp)
    6e44:	10bff3c4 	addi	r2,r2,-49
    6e48:	10bfffcc 	andi	r2,r2,65535
    6e4c:	e0fffd0b 	ldhu	r3,-12(fp)
    6e50:	e13ffe0b 	ldhu	r4,-8(fp)
    6e54:	200d883a 	mov	r6,r4
    6e58:	180b883a 	mov	r5,r3
    6e5c:	1009883a 	mov	r4,r2
    6e60:	00043d00 	call	43d0 <drawExplosion>
		stage[X][Y].type=index;
    6e64:	e0bffd0b 	ldhu	r2,-12(fp)
    6e68:	1085883a 	add	r2,r2,r2
    6e6c:	1085883a 	add	r2,r2,r2
    6e70:	1007883a 	mov	r3,r2
    6e74:	e0800217 	ldw	r2,8(fp)
    6e78:	10c5883a 	add	r2,r2,r3
    6e7c:	10c00017 	ldw	r3,0(r2)
    6e80:	e0bffe0b 	ldhu	r2,-8(fp)
    6e84:	100490fa 	slli	r2,r2,3
    6e88:	1885883a 	add	r2,r3,r2
    6e8c:	e0fffb0b 	ldhu	r3,-20(fp)
    6e90:	10c0000d 	sth	r3,0(r2)
        for(short int X0 = (short int)X-1; X0>=(short int)X-2; X0--){
    6e94:	e0bffd0b 	ldhu	r2,-12(fp)
    6e98:	10bfffc4 	addi	r2,r2,-1
    6e9c:	e0bff90d 	sth	r2,-28(fp)
    6ea0:	0000dd06 	br	7218 <drawBombAndExplosion+0xcf8>
            if(X0<0){break;}
    6ea4:	e0bff90f 	ldh	r2,-28(fp)
    6ea8:	1000e316 	blt	r2,zero,7238 <drawBombAndExplosion+0xd18>
            //nothing
            else if(stage[X0][Y].type==0){
    6eac:	e0bff90f 	ldh	r2,-28(fp)
    6eb0:	1085883a 	add	r2,r2,r2
    6eb4:	1085883a 	add	r2,r2,r2
    6eb8:	1007883a 	mov	r3,r2
    6ebc:	e0800217 	ldw	r2,8(fp)
    6ec0:	10c5883a 	add	r2,r2,r3
    6ec4:	10c00017 	ldw	r3,0(r2)
    6ec8:	e0bffe0b 	ldhu	r2,-8(fp)
    6ecc:	100490fa 	slli	r2,r2,3
    6ed0:	1885883a 	add	r2,r3,r2
    6ed4:	1080000b 	ldhu	r2,0(r2)
    6ed8:	10bfffcc 	andi	r2,r2,65535
    6edc:	10001d1e 	bne	r2,zero,6f54 <drawBombAndExplosion+0xa34>
            	stage[X0][Y].type=index;
    6ee0:	e0bff90f 	ldh	r2,-28(fp)
    6ee4:	1085883a 	add	r2,r2,r2
    6ee8:	1085883a 	add	r2,r2,r2
    6eec:	1007883a 	mov	r3,r2
    6ef0:	e0800217 	ldw	r2,8(fp)
    6ef4:	10c5883a 	add	r2,r2,r3
    6ef8:	10c00017 	ldw	r3,0(r2)
    6efc:	e0bffe0b 	ldhu	r2,-8(fp)
    6f00:	100490fa 	slli	r2,r2,3
    6f04:	1885883a 	add	r2,r3,r2
    6f08:	e0fffb0b 	ldhu	r3,-20(fp)
    6f0c:	10c0000d 	sth	r3,0(r2)
                cleanCell(X0,Y);
    6f10:	e0bff90b 	ldhu	r2,-28(fp)
    6f14:	10bfffcc 	andi	r2,r2,65535
    6f18:	e0fffe0b 	ldhu	r3,-8(fp)
    6f1c:	180b883a 	mov	r5,r3
    6f20:	1009883a 	mov	r4,r2
    6f24:	00038a00 	call	38a0 <cleanCell>
                drawExplosion(counter-49, X0, Y);
    6f28:	e0bffc0b 	ldhu	r2,-16(fp)
    6f2c:	10bff3c4 	addi	r2,r2,-49
    6f30:	10bfffcc 	andi	r2,r2,65535
    6f34:	e0fff90b 	ldhu	r3,-28(fp)
    6f38:	18ffffcc 	andi	r3,r3,65535
    6f3c:	e13ffe0b 	ldhu	r4,-8(fp)
    6f40:	200d883a 	mov	r6,r4
    6f44:	180b883a 	mov	r5,r3
    6f48:	1009883a 	mov	r4,r2
    6f4c:	00043d00 	call	43d0 <drawExplosion>
    6f50:	0000ae06 	br	720c <drawBombAndExplosion+0xcec>
            }
            //solid wall
            else if(stage[X0][Y].type==1){break;}
    6f54:	e0bff90f 	ldh	r2,-28(fp)
    6f58:	1085883a 	add	r2,r2,r2
    6f5c:	1085883a 	add	r2,r2,r2
    6f60:	1007883a 	mov	r3,r2
    6f64:	e0800217 	ldw	r2,8(fp)
    6f68:	10c5883a 	add	r2,r2,r3
    6f6c:	10c00017 	ldw	r3,0(r2)
    6f70:	e0bffe0b 	ldhu	r2,-8(fp)
    6f74:	100490fa 	slli	r2,r2,3
    6f78:	1885883a 	add	r2,r3,r2
    6f7c:	1080000b 	ldhu	r2,0(r2)
    6f80:	10bfffcc 	andi	r2,r2,65535
    6f84:	10800058 	cmpnei	r2,r2,1
    6f88:	1000ad26 	beq	r2,zero,7240 <drawBombAndExplosion+0xd20>
            //soft wall
            else if(stage[X0][Y].type==2){
    6f8c:	e0bff90f 	ldh	r2,-28(fp)
    6f90:	1085883a 	add	r2,r2,r2
    6f94:	1085883a 	add	r2,r2,r2
    6f98:	1007883a 	mov	r3,r2
    6f9c:	e0800217 	ldw	r2,8(fp)
    6fa0:	10c5883a 	add	r2,r2,r3
    6fa4:	10c00017 	ldw	r3,0(r2)
    6fa8:	e0bffe0b 	ldhu	r2,-8(fp)
    6fac:	100490fa 	slli	r2,r2,3
    6fb0:	1885883a 	add	r2,r3,r2
    6fb4:	1080000b 	ldhu	r2,0(r2)
    6fb8:	10bfffcc 	andi	r2,r2,65535
    6fbc:	10800098 	cmpnei	r2,r2,2
    6fc0:	10001d1e 	bne	r2,zero,7038 <drawBombAndExplosion+0xb18>
                cleanCell(X0,Y);
    6fc4:	e0bff90b 	ldhu	r2,-28(fp)
    6fc8:	10bfffcc 	andi	r2,r2,65535
    6fcc:	e0fffe0b 	ldhu	r3,-8(fp)
    6fd0:	180b883a 	mov	r5,r3
    6fd4:	1009883a 	mov	r4,r2
    6fd8:	00038a00 	call	38a0 <cleanCell>
                drawFiringWall(counter-49, X0, Y);
    6fdc:	e0bffc0b 	ldhu	r2,-16(fp)
    6fe0:	10bff3c4 	addi	r2,r2,-49
    6fe4:	10bfffcc 	andi	r2,r2,65535
    6fe8:	e0fff90b 	ldhu	r3,-28(fp)
    6fec:	18ffffcc 	andi	r3,r3,65535
    6ff0:	e13ffe0b 	ldhu	r4,-8(fp)
    6ff4:	200d883a 	mov	r6,r4
    6ff8:	180b883a 	mov	r5,r3
    6ffc:	1009883a 	mov	r4,r2
    7000:	0005b2c0 	call	5b2c <drawFiringWall>
                stage[X0][Y].type = 200;
    7004:	e0bff90f 	ldh	r2,-28(fp)
    7008:	1085883a 	add	r2,r2,r2
    700c:	1085883a 	add	r2,r2,r2
    7010:	1007883a 	mov	r3,r2
    7014:	e0800217 	ldw	r2,8(fp)
    7018:	10c5883a 	add	r2,r2,r3
    701c:	10c00017 	ldw	r3,0(r2)
    7020:	e0bffe0b 	ldhu	r2,-8(fp)
    7024:	100490fa 	slli	r2,r2,3
    7028:	1885883a 	add	r2,r3,r2
    702c:	00c03204 	movi	r3,200
    7030:	10c0000d 	sth	r3,0(r2)
            	break;
    7034:	00008706 	br	7254 <drawBombAndExplosion+0xd34>
            }
            else if(stage[X0][Y].type>=200 && stage[X0][Y].type<300){
    7038:	e0bff90f 	ldh	r2,-28(fp)
    703c:	1085883a 	add	r2,r2,r2
    7040:	1085883a 	add	r2,r2,r2
    7044:	1007883a 	mov	r3,r2
    7048:	e0800217 	ldw	r2,8(fp)
    704c:	10c5883a 	add	r2,r2,r3
    7050:	10c00017 	ldw	r3,0(r2)
    7054:	e0bffe0b 	ldhu	r2,-8(fp)
    7058:	100490fa 	slli	r2,r2,3
    705c:	1885883a 	add	r2,r3,r2
    7060:	1080000b 	ldhu	r2,0(r2)
    7064:	10bfffcc 	andi	r2,r2,65535
    7068:	10803230 	cmpltui	r2,r2,200
    706c:	10003b1e 	bne	r2,zero,715c <drawBombAndExplosion+0xc3c>
    7070:	e0bff90f 	ldh	r2,-28(fp)
    7074:	1085883a 	add	r2,r2,r2
    7078:	1085883a 	add	r2,r2,r2
    707c:	1007883a 	mov	r3,r2
    7080:	e0800217 	ldw	r2,8(fp)
    7084:	10c5883a 	add	r2,r2,r3
    7088:	10c00017 	ldw	r3,0(r2)
    708c:	e0bffe0b 	ldhu	r2,-8(fp)
    7090:	100490fa 	slli	r2,r2,3
    7094:	1885883a 	add	r2,r3,r2
    7098:	1080000b 	ldhu	r2,0(r2)
    709c:	10bfffcc 	andi	r2,r2,65535
    70a0:	10804b28 	cmpgeui	r2,r2,300
    70a4:	10002d1e 	bne	r2,zero,715c <drawBombAndExplosion+0xc3c>
            	if(counter-49+200 < stage[X0][Y].type){break;}
    70a8:	e0bffc0b 	ldhu	r2,-16(fp)
    70ac:	10c025c4 	addi	r3,r2,151
    70b0:	e0bff90f 	ldh	r2,-28(fp)
    70b4:	1085883a 	add	r2,r2,r2
    70b8:	1085883a 	add	r2,r2,r2
    70bc:	1009883a 	mov	r4,r2
    70c0:	e0800217 	ldw	r2,8(fp)
    70c4:	1105883a 	add	r2,r2,r4
    70c8:	11000017 	ldw	r4,0(r2)
    70cc:	e0bffe0b 	ldhu	r2,-8(fp)
    70d0:	100490fa 	slli	r2,r2,3
    70d4:	2085883a 	add	r2,r4,r2
    70d8:	1080000b 	ldhu	r2,0(r2)
    70dc:	10bfffcc 	andi	r2,r2,65535
    70e0:	18805916 	blt	r3,r2,7248 <drawBombAndExplosion+0xd28>
                cleanCell(X0,Y);
    70e4:	e0bff90b 	ldhu	r2,-28(fp)
    70e8:	10bfffcc 	andi	r2,r2,65535
    70ec:	e0fffe0b 	ldhu	r3,-8(fp)
    70f0:	180b883a 	mov	r5,r3
    70f4:	1009883a 	mov	r4,r2
    70f8:	00038a00 	call	38a0 <cleanCell>
                drawFiringWall(counter-49, X0, Y);
    70fc:	e0bffc0b 	ldhu	r2,-16(fp)
    7100:	10bff3c4 	addi	r2,r2,-49
    7104:	10bfffcc 	andi	r2,r2,65535
    7108:	e0fff90b 	ldhu	r3,-28(fp)
    710c:	18ffffcc 	andi	r3,r3,65535
    7110:	e13ffe0b 	ldhu	r4,-8(fp)
    7114:	200d883a 	mov	r6,r4
    7118:	180b883a 	mov	r5,r3
    711c:	1009883a 	mov	r4,r2
    7120:	0005b2c0 	call	5b2c <drawFiringWall>
                stage[X0][Y].type++;
    7124:	e0bff90f 	ldh	r2,-28(fp)
    7128:	1085883a 	add	r2,r2,r2
    712c:	1085883a 	add	r2,r2,r2
    7130:	1007883a 	mov	r3,r2
    7134:	e0800217 	ldw	r2,8(fp)
    7138:	10c5883a 	add	r2,r2,r3
    713c:	10c00017 	ldw	r3,0(r2)
    7140:	e0bffe0b 	ldhu	r2,-8(fp)
    7144:	100490fa 	slli	r2,r2,3
    7148:	1885883a 	add	r2,r3,r2
    714c:	10c0000b 	ldhu	r3,0(r2)
    7150:	18c00044 	addi	r3,r3,1
    7154:	10c0000d 	sth	r3,0(r2)
            	break;
    7158:	00003e06 	br	7254 <drawBombAndExplosion+0xd34>
            }
            //bomb
            else if(stage[X0][Y].type==3){break;}
    715c:	e0bff90f 	ldh	r2,-28(fp)
    7160:	1085883a 	add	r2,r2,r2
    7164:	1085883a 	add	r2,r2,r2
    7168:	1007883a 	mov	r3,r2
    716c:	e0800217 	ldw	r2,8(fp)
    7170:	10c5883a 	add	r2,r2,r3
    7174:	10c00017 	ldw	r3,0(r2)
    7178:	e0bffe0b 	ldhu	r2,-8(fp)
    717c:	100490fa 	slli	r2,r2,3
    7180:	1885883a 	add	r2,r3,r2
    7184:	1080000b 	ldhu	r2,0(r2)
    7188:	10bfffcc 	andi	r2,r2,65535
    718c:	108000d8 	cmpnei	r2,r2,3
    7190:	10002f26 	beq	r2,zero,7250 <drawBombAndExplosion+0xd30>
            //explosion
            else if(stage[X0][Y].type==index){
    7194:	e0bff90f 	ldh	r2,-28(fp)
    7198:	1085883a 	add	r2,r2,r2
    719c:	1085883a 	add	r2,r2,r2
    71a0:	1007883a 	mov	r3,r2
    71a4:	e0800217 	ldw	r2,8(fp)
    71a8:	10c5883a 	add	r2,r2,r3
    71ac:	10c00017 	ldw	r3,0(r2)
    71b0:	e0bffe0b 	ldhu	r2,-8(fp)
    71b4:	100490fa 	slli	r2,r2,3
    71b8:	1885883a 	add	r2,r3,r2
    71bc:	1080000b 	ldhu	r2,0(r2)
    71c0:	10ffffcc 	andi	r3,r2,65535
    71c4:	e0bffb0b 	ldhu	r2,-20(fp)
    71c8:	1880101e 	bne	r3,r2,720c <drawBombAndExplosion+0xcec>
            	cleanCell(X0,Y);
    71cc:	e0bff90b 	ldhu	r2,-28(fp)
    71d0:	10bfffcc 	andi	r2,r2,65535
    71d4:	e0fffe0b 	ldhu	r3,-8(fp)
    71d8:	180b883a 	mov	r5,r3
    71dc:	1009883a 	mov	r4,r2
    71e0:	00038a00 	call	38a0 <cleanCell>
            	drawExplosion(counter-49, X0, Y);
    71e4:	e0bffc0b 	ldhu	r2,-16(fp)
    71e8:	10bff3c4 	addi	r2,r2,-49
    71ec:	10bfffcc 	andi	r2,r2,65535
    71f0:	e0fff90b 	ldhu	r3,-28(fp)
    71f4:	18ffffcc 	andi	r3,r3,65535
    71f8:	e13ffe0b 	ldhu	r4,-8(fp)
    71fc:	200d883a 	mov	r6,r4
    7200:	180b883a 	mov	r5,r3
    7204:	1009883a 	mov	r4,r2
    7208:	00043d00 	call	43d0 <drawExplosion>
	}
	else{
		cleanCell(X, Y);
		drawExplosion(counter-49, X, Y);
		stage[X][Y].type=index;
        for(short int X0 = (short int)X-1; X0>=(short int)X-2; X0--){
    720c:	e0bff90b 	ldhu	r2,-28(fp)
    7210:	10bfffc4 	addi	r2,r2,-1
    7214:	e0bff90d 	sth	r2,-28(fp)
    7218:	e0fff90f 	ldh	r3,-28(fp)
    721c:	e0bffd0b 	ldhu	r2,-12(fp)
    7220:	10bfffcc 	andi	r2,r2,65535
    7224:	10a0001c 	xori	r2,r2,32768
    7228:	10a00004 	addi	r2,r2,-32768
    722c:	10bfff84 	addi	r2,r2,-2
    7230:	18bf1c0e 	bge	r3,r2,6ea4 <__alt_data_end+0xf8006ea4>
    7234:	00000706 	br	7254 <drawBombAndExplosion+0xd34>
            if(X0<0){break;}
    7238:	0001883a 	nop
    723c:	00000506 	br	7254 <drawBombAndExplosion+0xd34>
            	stage[X0][Y].type=index;
                cleanCell(X0,Y);
                drawExplosion(counter-49, X0, Y);
            }
            //solid wall
            else if(stage[X0][Y].type==1){break;}
    7240:	0001883a 	nop
    7244:	00000306 	br	7254 <drawBombAndExplosion+0xd34>
                drawFiringWall(counter-49, X0, Y);
                stage[X0][Y].type = 200;
            	break;
            }
            else if(stage[X0][Y].type>=200 && stage[X0][Y].type<300){
            	if(counter-49+200 < stage[X0][Y].type){break;}
    7248:	0001883a 	nop
    724c:	00000106 	br	7254 <drawBombAndExplosion+0xd34>
                drawFiringWall(counter-49, X0, Y);
                stage[X0][Y].type++;
            	break;
            }
            //bomb
            else if(stage[X0][Y].type==3){break;}
    7250:	0001883a 	nop
            else if(stage[X0][Y].type==index){
            	cleanCell(X0,Y);
            	drawExplosion(counter-49, X0, Y);
            }
        }
        for(short int X0 = (short int)X+1; X0<=(short int)X+2; X0++){
    7254:	e0bffd0b 	ldhu	r2,-12(fp)
    7258:	10800044 	addi	r2,r2,1
    725c:	e0bff98d 	sth	r2,-26(fp)
    7260:	0000de06 	br	75dc <drawBombAndExplosion+0x10bc>
            if(X0>19){break;}
    7264:	e0bff98f 	ldh	r2,-26(fp)
    7268:	10800510 	cmplti	r2,r2,20
    726c:	1000e326 	beq	r2,zero,75fc <drawBombAndExplosion+0x10dc>
            //nothing
			else if(stage[X0][Y].type==0){
    7270:	e0bff98f 	ldh	r2,-26(fp)
    7274:	1085883a 	add	r2,r2,r2
    7278:	1085883a 	add	r2,r2,r2
    727c:	1007883a 	mov	r3,r2
    7280:	e0800217 	ldw	r2,8(fp)
    7284:	10c5883a 	add	r2,r2,r3
    7288:	10c00017 	ldw	r3,0(r2)
    728c:	e0bffe0b 	ldhu	r2,-8(fp)
    7290:	100490fa 	slli	r2,r2,3
    7294:	1885883a 	add	r2,r3,r2
    7298:	1080000b 	ldhu	r2,0(r2)
    729c:	10bfffcc 	andi	r2,r2,65535
    72a0:	10001d1e 	bne	r2,zero,7318 <drawBombAndExplosion+0xdf8>
				stage[X0][Y].type=index;
    72a4:	e0bff98f 	ldh	r2,-26(fp)
    72a8:	1085883a 	add	r2,r2,r2
    72ac:	1085883a 	add	r2,r2,r2
    72b0:	1007883a 	mov	r3,r2
    72b4:	e0800217 	ldw	r2,8(fp)
    72b8:	10c5883a 	add	r2,r2,r3
    72bc:	10c00017 	ldw	r3,0(r2)
    72c0:	e0bffe0b 	ldhu	r2,-8(fp)
    72c4:	100490fa 	slli	r2,r2,3
    72c8:	1885883a 	add	r2,r3,r2
    72cc:	e0fffb0b 	ldhu	r3,-20(fp)
    72d0:	10c0000d 	sth	r3,0(r2)
				cleanCell(X0,Y);
    72d4:	e0bff98b 	ldhu	r2,-26(fp)
    72d8:	10bfffcc 	andi	r2,r2,65535
    72dc:	e0fffe0b 	ldhu	r3,-8(fp)
    72e0:	180b883a 	mov	r5,r3
    72e4:	1009883a 	mov	r4,r2
    72e8:	00038a00 	call	38a0 <cleanCell>
				drawExplosion(counter-49, X0, Y);
    72ec:	e0bffc0b 	ldhu	r2,-16(fp)
    72f0:	10bff3c4 	addi	r2,r2,-49
    72f4:	10bfffcc 	andi	r2,r2,65535
    72f8:	e0fff98b 	ldhu	r3,-26(fp)
    72fc:	18ffffcc 	andi	r3,r3,65535
    7300:	e13ffe0b 	ldhu	r4,-8(fp)
    7304:	200d883a 	mov	r6,r4
    7308:	180b883a 	mov	r5,r3
    730c:	1009883a 	mov	r4,r2
    7310:	00043d00 	call	43d0 <drawExplosion>
    7314:	0000ae06 	br	75d0 <drawBombAndExplosion+0x10b0>

			}
			//solid wall
			else if(stage[X0][Y].type==1){break;}
    7318:	e0bff98f 	ldh	r2,-26(fp)
    731c:	1085883a 	add	r2,r2,r2
    7320:	1085883a 	add	r2,r2,r2
    7324:	1007883a 	mov	r3,r2
    7328:	e0800217 	ldw	r2,8(fp)
    732c:	10c5883a 	add	r2,r2,r3
    7330:	10c00017 	ldw	r3,0(r2)
    7334:	e0bffe0b 	ldhu	r2,-8(fp)
    7338:	100490fa 	slli	r2,r2,3
    733c:	1885883a 	add	r2,r3,r2
    7340:	1080000b 	ldhu	r2,0(r2)
    7344:	10bfffcc 	andi	r2,r2,65535
    7348:	10800058 	cmpnei	r2,r2,1
    734c:	1000ad26 	beq	r2,zero,7604 <drawBombAndExplosion+0x10e4>
			//soft wall
			else if(stage[X0][Y].type==2){
    7350:	e0bff98f 	ldh	r2,-26(fp)
    7354:	1085883a 	add	r2,r2,r2
    7358:	1085883a 	add	r2,r2,r2
    735c:	1007883a 	mov	r3,r2
    7360:	e0800217 	ldw	r2,8(fp)
    7364:	10c5883a 	add	r2,r2,r3
    7368:	10c00017 	ldw	r3,0(r2)
    736c:	e0bffe0b 	ldhu	r2,-8(fp)
    7370:	100490fa 	slli	r2,r2,3
    7374:	1885883a 	add	r2,r3,r2
    7378:	1080000b 	ldhu	r2,0(r2)
    737c:	10bfffcc 	andi	r2,r2,65535
    7380:	10800098 	cmpnei	r2,r2,2
    7384:	10001d1e 	bne	r2,zero,73fc <drawBombAndExplosion+0xedc>
				cleanCell(X0,Y);
    7388:	e0bff98b 	ldhu	r2,-26(fp)
    738c:	10bfffcc 	andi	r2,r2,65535
    7390:	e0fffe0b 	ldhu	r3,-8(fp)
    7394:	180b883a 	mov	r5,r3
    7398:	1009883a 	mov	r4,r2
    739c:	00038a00 	call	38a0 <cleanCell>
				drawFiringWall(counter-49, X0, Y);
    73a0:	e0bffc0b 	ldhu	r2,-16(fp)
    73a4:	10bff3c4 	addi	r2,r2,-49
    73a8:	10bfffcc 	andi	r2,r2,65535
    73ac:	e0fff98b 	ldhu	r3,-26(fp)
    73b0:	18ffffcc 	andi	r3,r3,65535
    73b4:	e13ffe0b 	ldhu	r4,-8(fp)
    73b8:	200d883a 	mov	r6,r4
    73bc:	180b883a 	mov	r5,r3
    73c0:	1009883a 	mov	r4,r2
    73c4:	0005b2c0 	call	5b2c <drawFiringWall>
				stage[X0][Y].type=200;
    73c8:	e0bff98f 	ldh	r2,-26(fp)
    73cc:	1085883a 	add	r2,r2,r2
    73d0:	1085883a 	add	r2,r2,r2
    73d4:	1007883a 	mov	r3,r2
    73d8:	e0800217 	ldw	r2,8(fp)
    73dc:	10c5883a 	add	r2,r2,r3
    73e0:	10c00017 	ldw	r3,0(r2)
    73e4:	e0bffe0b 	ldhu	r2,-8(fp)
    73e8:	100490fa 	slli	r2,r2,3
    73ec:	1885883a 	add	r2,r3,r2
    73f0:	00c03204 	movi	r3,200
    73f4:	10c0000d 	sth	r3,0(r2)
				break;
    73f8:	00008706 	br	7618 <drawBombAndExplosion+0x10f8>
			}
            else if(stage[X0][Y].type>=200 && stage[X0][Y].type<300){
    73fc:	e0bff98f 	ldh	r2,-26(fp)
    7400:	1085883a 	add	r2,r2,r2
    7404:	1085883a 	add	r2,r2,r2
    7408:	1007883a 	mov	r3,r2
    740c:	e0800217 	ldw	r2,8(fp)
    7410:	10c5883a 	add	r2,r2,r3
    7414:	10c00017 	ldw	r3,0(r2)
    7418:	e0bffe0b 	ldhu	r2,-8(fp)
    741c:	100490fa 	slli	r2,r2,3
    7420:	1885883a 	add	r2,r3,r2
    7424:	1080000b 	ldhu	r2,0(r2)
    7428:	10bfffcc 	andi	r2,r2,65535
    742c:	10803230 	cmpltui	r2,r2,200
    7430:	10003b1e 	bne	r2,zero,7520 <drawBombAndExplosion+0x1000>
    7434:	e0bff98f 	ldh	r2,-26(fp)
    7438:	1085883a 	add	r2,r2,r2
    743c:	1085883a 	add	r2,r2,r2
    7440:	1007883a 	mov	r3,r2
    7444:	e0800217 	ldw	r2,8(fp)
    7448:	10c5883a 	add	r2,r2,r3
    744c:	10c00017 	ldw	r3,0(r2)
    7450:	e0bffe0b 	ldhu	r2,-8(fp)
    7454:	100490fa 	slli	r2,r2,3
    7458:	1885883a 	add	r2,r3,r2
    745c:	1080000b 	ldhu	r2,0(r2)
    7460:	10bfffcc 	andi	r2,r2,65535
    7464:	10804b28 	cmpgeui	r2,r2,300
    7468:	10002d1e 	bne	r2,zero,7520 <drawBombAndExplosion+0x1000>
            	if(counter-49+200 < stage[X0][Y].type){break;}
    746c:	e0bffc0b 	ldhu	r2,-16(fp)
    7470:	10c025c4 	addi	r3,r2,151
    7474:	e0bff98f 	ldh	r2,-26(fp)
    7478:	1085883a 	add	r2,r2,r2
    747c:	1085883a 	add	r2,r2,r2
    7480:	1009883a 	mov	r4,r2
    7484:	e0800217 	ldw	r2,8(fp)
    7488:	1105883a 	add	r2,r2,r4
    748c:	11000017 	ldw	r4,0(r2)
    7490:	e0bffe0b 	ldhu	r2,-8(fp)
    7494:	100490fa 	slli	r2,r2,3
    7498:	2085883a 	add	r2,r4,r2
    749c:	1080000b 	ldhu	r2,0(r2)
    74a0:	10bfffcc 	andi	r2,r2,65535
    74a4:	18805916 	blt	r3,r2,760c <drawBombAndExplosion+0x10ec>
                cleanCell(X0,Y);
    74a8:	e0bff98b 	ldhu	r2,-26(fp)
    74ac:	10bfffcc 	andi	r2,r2,65535
    74b0:	e0fffe0b 	ldhu	r3,-8(fp)
    74b4:	180b883a 	mov	r5,r3
    74b8:	1009883a 	mov	r4,r2
    74bc:	00038a00 	call	38a0 <cleanCell>
                drawFiringWall(counter-49, X0, Y);
    74c0:	e0bffc0b 	ldhu	r2,-16(fp)
    74c4:	10bff3c4 	addi	r2,r2,-49
    74c8:	10bfffcc 	andi	r2,r2,65535
    74cc:	e0fff98b 	ldhu	r3,-26(fp)
    74d0:	18ffffcc 	andi	r3,r3,65535
    74d4:	e13ffe0b 	ldhu	r4,-8(fp)
    74d8:	200d883a 	mov	r6,r4
    74dc:	180b883a 	mov	r5,r3
    74e0:	1009883a 	mov	r4,r2
    74e4:	0005b2c0 	call	5b2c <drawFiringWall>
                stage[X0][Y].type++;
    74e8:	e0bff98f 	ldh	r2,-26(fp)
    74ec:	1085883a 	add	r2,r2,r2
    74f0:	1085883a 	add	r2,r2,r2
    74f4:	1007883a 	mov	r3,r2
    74f8:	e0800217 	ldw	r2,8(fp)
    74fc:	10c5883a 	add	r2,r2,r3
    7500:	10c00017 	ldw	r3,0(r2)
    7504:	e0bffe0b 	ldhu	r2,-8(fp)
    7508:	100490fa 	slli	r2,r2,3
    750c:	1885883a 	add	r2,r3,r2
    7510:	10c0000b 	ldhu	r3,0(r2)
    7514:	18c00044 	addi	r3,r3,1
    7518:	10c0000d 	sth	r3,0(r2)
            	break;
    751c:	00003e06 	br	7618 <drawBombAndExplosion+0x10f8>
            }
			//bomb
			else if(stage[X0][Y].type==3){break;}
    7520:	e0bff98f 	ldh	r2,-26(fp)
    7524:	1085883a 	add	r2,r2,r2
    7528:	1085883a 	add	r2,r2,r2
    752c:	1007883a 	mov	r3,r2
    7530:	e0800217 	ldw	r2,8(fp)
    7534:	10c5883a 	add	r2,r2,r3
    7538:	10c00017 	ldw	r3,0(r2)
    753c:	e0bffe0b 	ldhu	r2,-8(fp)
    7540:	100490fa 	slli	r2,r2,3
    7544:	1885883a 	add	r2,r3,r2
    7548:	1080000b 	ldhu	r2,0(r2)
    754c:	10bfffcc 	andi	r2,r2,65535
    7550:	108000d8 	cmpnei	r2,r2,3
    7554:	10002f26 	beq	r2,zero,7614 <drawBombAndExplosion+0x10f4>
            //explosion
			else if(stage[X0][Y].type==index){
    7558:	e0bff98f 	ldh	r2,-26(fp)
    755c:	1085883a 	add	r2,r2,r2
    7560:	1085883a 	add	r2,r2,r2
    7564:	1007883a 	mov	r3,r2
    7568:	e0800217 	ldw	r2,8(fp)
    756c:	10c5883a 	add	r2,r2,r3
    7570:	10c00017 	ldw	r3,0(r2)
    7574:	e0bffe0b 	ldhu	r2,-8(fp)
    7578:	100490fa 	slli	r2,r2,3
    757c:	1885883a 	add	r2,r3,r2
    7580:	1080000b 	ldhu	r2,0(r2)
    7584:	10ffffcc 	andi	r3,r2,65535
    7588:	e0bffb0b 	ldhu	r2,-20(fp)
    758c:	1880101e 	bne	r3,r2,75d0 <drawBombAndExplosion+0x10b0>
				cleanCell(X0,Y);
    7590:	e0bff98b 	ldhu	r2,-26(fp)
    7594:	10bfffcc 	andi	r2,r2,65535
    7598:	e0fffe0b 	ldhu	r3,-8(fp)
    759c:	180b883a 	mov	r5,r3
    75a0:	1009883a 	mov	r4,r2
    75a4:	00038a00 	call	38a0 <cleanCell>
				drawExplosion(counter-49, X0, Y);
    75a8:	e0bffc0b 	ldhu	r2,-16(fp)
    75ac:	10bff3c4 	addi	r2,r2,-49
    75b0:	10bfffcc 	andi	r2,r2,65535
    75b4:	e0fff98b 	ldhu	r3,-26(fp)
    75b8:	18ffffcc 	andi	r3,r3,65535
    75bc:	e13ffe0b 	ldhu	r4,-8(fp)
    75c0:	200d883a 	mov	r6,r4
    75c4:	180b883a 	mov	r5,r3
    75c8:	1009883a 	mov	r4,r2
    75cc:	00043d00 	call	43d0 <drawExplosion>
            else if(stage[X0][Y].type==index){
            	cleanCell(X0,Y);
            	drawExplosion(counter-49, X0, Y);
            }
        }
        for(short int X0 = (short int)X+1; X0<=(short int)X+2; X0++){
    75d0:	e0bff98b 	ldhu	r2,-26(fp)
    75d4:	10800044 	addi	r2,r2,1
    75d8:	e0bff98d 	sth	r2,-26(fp)
    75dc:	e0bff98f 	ldh	r2,-26(fp)
    75e0:	e0fffd0b 	ldhu	r3,-12(fp)
    75e4:	18ffffcc 	andi	r3,r3,65535
    75e8:	18e0001c 	xori	r3,r3,32768
    75ec:	18e00004 	addi	r3,r3,-32768
    75f0:	18c00084 	addi	r3,r3,2
    75f4:	18bf1b0e 	bge	r3,r2,7264 <__alt_data_end+0xf8007264>
    75f8:	00000706 	br	7618 <drawBombAndExplosion+0x10f8>
            if(X0>19){break;}
    75fc:	0001883a 	nop
    7600:	00000506 	br	7618 <drawBombAndExplosion+0x10f8>
				cleanCell(X0,Y);
				drawExplosion(counter-49, X0, Y);

			}
			//solid wall
			else if(stage[X0][Y].type==1){break;}
    7604:	0001883a 	nop
    7608:	00000306 	br	7618 <drawBombAndExplosion+0x10f8>
				drawFiringWall(counter-49, X0, Y);
				stage[X0][Y].type=200;
				break;
			}
            else if(stage[X0][Y].type>=200 && stage[X0][Y].type<300){
            	if(counter-49+200 < stage[X0][Y].type){break;}
    760c:	0001883a 	nop
    7610:	00000106 	br	7618 <drawBombAndExplosion+0x10f8>
                drawFiringWall(counter-49, X0, Y);
                stage[X0][Y].type++;
            	break;
            }
			//bomb
			else if(stage[X0][Y].type==3){break;}
    7614:	0001883a 	nop
			else if(stage[X0][Y].type==index){
				cleanCell(X0,Y);
				drawExplosion(counter-49, X0, Y);
			}
        }
        for(short int Y0 = (short int)Y-1; Y0>=(short int)Y-2; Y0--){
    7618:	e0bffe0b 	ldhu	r2,-8(fp)
    761c:	10bfffc4 	addi	r2,r2,-1
    7620:	e0bffa0d 	sth	r2,-24(fp)
    7624:	0000dd06 	br	799c <drawBombAndExplosion+0x147c>
            if(Y0<0){break;}
    7628:	e0bffa0f 	ldh	r2,-24(fp)
    762c:	1000e316 	blt	r2,zero,79bc <drawBombAndExplosion+0x149c>
            //nothing
			else if(stage[X][Y0].type==0){
    7630:	e0bffd0b 	ldhu	r2,-12(fp)
    7634:	1085883a 	add	r2,r2,r2
    7638:	1085883a 	add	r2,r2,r2
    763c:	1007883a 	mov	r3,r2
    7640:	e0800217 	ldw	r2,8(fp)
    7644:	10c5883a 	add	r2,r2,r3
    7648:	10c00017 	ldw	r3,0(r2)
    764c:	e0bffa0f 	ldh	r2,-24(fp)
    7650:	100490fa 	slli	r2,r2,3
    7654:	1885883a 	add	r2,r3,r2
    7658:	1080000b 	ldhu	r2,0(r2)
    765c:	10bfffcc 	andi	r2,r2,65535
    7660:	10001d1e 	bne	r2,zero,76d8 <drawBombAndExplosion+0x11b8>
				stage[X][Y0].type=index;
    7664:	e0bffd0b 	ldhu	r2,-12(fp)
    7668:	1085883a 	add	r2,r2,r2
    766c:	1085883a 	add	r2,r2,r2
    7670:	1007883a 	mov	r3,r2
    7674:	e0800217 	ldw	r2,8(fp)
    7678:	10c5883a 	add	r2,r2,r3
    767c:	10c00017 	ldw	r3,0(r2)
    7680:	e0bffa0f 	ldh	r2,-24(fp)
    7684:	100490fa 	slli	r2,r2,3
    7688:	1885883a 	add	r2,r3,r2
    768c:	e0fffb0b 	ldhu	r3,-20(fp)
    7690:	10c0000d 	sth	r3,0(r2)
				cleanCell(X,Y0);
    7694:	e0bffd0b 	ldhu	r2,-12(fp)
    7698:	e0fffa0b 	ldhu	r3,-24(fp)
    769c:	18ffffcc 	andi	r3,r3,65535
    76a0:	180b883a 	mov	r5,r3
    76a4:	1009883a 	mov	r4,r2
    76a8:	00038a00 	call	38a0 <cleanCell>
				drawExplosion(counter-49, X, Y0);
    76ac:	e0bffc0b 	ldhu	r2,-16(fp)
    76b0:	10bff3c4 	addi	r2,r2,-49
    76b4:	10bfffcc 	andi	r2,r2,65535
    76b8:	e0fffd0b 	ldhu	r3,-12(fp)
    76bc:	e13ffa0b 	ldhu	r4,-24(fp)
    76c0:	213fffcc 	andi	r4,r4,65535
    76c4:	200d883a 	mov	r6,r4
    76c8:	180b883a 	mov	r5,r3
    76cc:	1009883a 	mov	r4,r2
    76d0:	00043d00 	call	43d0 <drawExplosion>
    76d4:	0000ae06 	br	7990 <drawBombAndExplosion+0x1470>

			}
			//solid wall
			else if(stage[X][Y0].type==1){break;}
    76d8:	e0bffd0b 	ldhu	r2,-12(fp)
    76dc:	1085883a 	add	r2,r2,r2
    76e0:	1085883a 	add	r2,r2,r2
    76e4:	1007883a 	mov	r3,r2
    76e8:	e0800217 	ldw	r2,8(fp)
    76ec:	10c5883a 	add	r2,r2,r3
    76f0:	10c00017 	ldw	r3,0(r2)
    76f4:	e0bffa0f 	ldh	r2,-24(fp)
    76f8:	100490fa 	slli	r2,r2,3
    76fc:	1885883a 	add	r2,r3,r2
    7700:	1080000b 	ldhu	r2,0(r2)
    7704:	10bfffcc 	andi	r2,r2,65535
    7708:	10800058 	cmpnei	r2,r2,1
    770c:	1000ad26 	beq	r2,zero,79c4 <drawBombAndExplosion+0x14a4>
			//soft wall
			else if(stage[X][Y0].type==2){
    7710:	e0bffd0b 	ldhu	r2,-12(fp)
    7714:	1085883a 	add	r2,r2,r2
    7718:	1085883a 	add	r2,r2,r2
    771c:	1007883a 	mov	r3,r2
    7720:	e0800217 	ldw	r2,8(fp)
    7724:	10c5883a 	add	r2,r2,r3
    7728:	10c00017 	ldw	r3,0(r2)
    772c:	e0bffa0f 	ldh	r2,-24(fp)
    7730:	100490fa 	slli	r2,r2,3
    7734:	1885883a 	add	r2,r3,r2
    7738:	1080000b 	ldhu	r2,0(r2)
    773c:	10bfffcc 	andi	r2,r2,65535
    7740:	10800098 	cmpnei	r2,r2,2
    7744:	10001d1e 	bne	r2,zero,77bc <drawBombAndExplosion+0x129c>
				cleanCell(X,Y0);
    7748:	e0bffd0b 	ldhu	r2,-12(fp)
    774c:	e0fffa0b 	ldhu	r3,-24(fp)
    7750:	18ffffcc 	andi	r3,r3,65535
    7754:	180b883a 	mov	r5,r3
    7758:	1009883a 	mov	r4,r2
    775c:	00038a00 	call	38a0 <cleanCell>
				drawFiringWall(counter-49, X, Y0);
    7760:	e0bffc0b 	ldhu	r2,-16(fp)
    7764:	10bff3c4 	addi	r2,r2,-49
    7768:	10bfffcc 	andi	r2,r2,65535
    776c:	e0fffd0b 	ldhu	r3,-12(fp)
    7770:	e13ffa0b 	ldhu	r4,-24(fp)
    7774:	213fffcc 	andi	r4,r4,65535
    7778:	200d883a 	mov	r6,r4
    777c:	180b883a 	mov	r5,r3
    7780:	1009883a 	mov	r4,r2
    7784:	0005b2c0 	call	5b2c <drawFiringWall>
				stage[X][Y0].type=200;
    7788:	e0bffd0b 	ldhu	r2,-12(fp)
    778c:	1085883a 	add	r2,r2,r2
    7790:	1085883a 	add	r2,r2,r2
    7794:	1007883a 	mov	r3,r2
    7798:	e0800217 	ldw	r2,8(fp)
    779c:	10c5883a 	add	r2,r2,r3
    77a0:	10c00017 	ldw	r3,0(r2)
    77a4:	e0bffa0f 	ldh	r2,-24(fp)
    77a8:	100490fa 	slli	r2,r2,3
    77ac:	1885883a 	add	r2,r3,r2
    77b0:	00c03204 	movi	r3,200
    77b4:	10c0000d 	sth	r3,0(r2)
				break;
    77b8:	00008706 	br	79d8 <drawBombAndExplosion+0x14b8>
			}
            else if(stage[X][Y0].type>=200 && stage[X][Y0].type<300){
    77bc:	e0bffd0b 	ldhu	r2,-12(fp)
    77c0:	1085883a 	add	r2,r2,r2
    77c4:	1085883a 	add	r2,r2,r2
    77c8:	1007883a 	mov	r3,r2
    77cc:	e0800217 	ldw	r2,8(fp)
    77d0:	10c5883a 	add	r2,r2,r3
    77d4:	10c00017 	ldw	r3,0(r2)
    77d8:	e0bffa0f 	ldh	r2,-24(fp)
    77dc:	100490fa 	slli	r2,r2,3
    77e0:	1885883a 	add	r2,r3,r2
    77e4:	1080000b 	ldhu	r2,0(r2)
    77e8:	10bfffcc 	andi	r2,r2,65535
    77ec:	10803230 	cmpltui	r2,r2,200
    77f0:	10003b1e 	bne	r2,zero,78e0 <drawBombAndExplosion+0x13c0>
    77f4:	e0bffd0b 	ldhu	r2,-12(fp)
    77f8:	1085883a 	add	r2,r2,r2
    77fc:	1085883a 	add	r2,r2,r2
    7800:	1007883a 	mov	r3,r2
    7804:	e0800217 	ldw	r2,8(fp)
    7808:	10c5883a 	add	r2,r2,r3
    780c:	10c00017 	ldw	r3,0(r2)
    7810:	e0bffa0f 	ldh	r2,-24(fp)
    7814:	100490fa 	slli	r2,r2,3
    7818:	1885883a 	add	r2,r3,r2
    781c:	1080000b 	ldhu	r2,0(r2)
    7820:	10bfffcc 	andi	r2,r2,65535
    7824:	10804b28 	cmpgeui	r2,r2,300
    7828:	10002d1e 	bne	r2,zero,78e0 <drawBombAndExplosion+0x13c0>
            	if(counter-49+200 < stage[X][Y0].type){break;}
    782c:	e0bffc0b 	ldhu	r2,-16(fp)
    7830:	10c025c4 	addi	r3,r2,151
    7834:	e0bffd0b 	ldhu	r2,-12(fp)
    7838:	1085883a 	add	r2,r2,r2
    783c:	1085883a 	add	r2,r2,r2
    7840:	1009883a 	mov	r4,r2
    7844:	e0800217 	ldw	r2,8(fp)
    7848:	1105883a 	add	r2,r2,r4
    784c:	11000017 	ldw	r4,0(r2)
    7850:	e0bffa0f 	ldh	r2,-24(fp)
    7854:	100490fa 	slli	r2,r2,3
    7858:	2085883a 	add	r2,r4,r2
    785c:	1080000b 	ldhu	r2,0(r2)
    7860:	10bfffcc 	andi	r2,r2,65535
    7864:	18805916 	blt	r3,r2,79cc <drawBombAndExplosion+0x14ac>
                cleanCell(X,Y0);
    7868:	e0bffd0b 	ldhu	r2,-12(fp)
    786c:	e0fffa0b 	ldhu	r3,-24(fp)
    7870:	18ffffcc 	andi	r3,r3,65535
    7874:	180b883a 	mov	r5,r3
    7878:	1009883a 	mov	r4,r2
    787c:	00038a00 	call	38a0 <cleanCell>
                drawFiringWall(counter-49, X, Y0);
    7880:	e0bffc0b 	ldhu	r2,-16(fp)
    7884:	10bff3c4 	addi	r2,r2,-49
    7888:	10bfffcc 	andi	r2,r2,65535
    788c:	e0fffd0b 	ldhu	r3,-12(fp)
    7890:	e13ffa0b 	ldhu	r4,-24(fp)
    7894:	213fffcc 	andi	r4,r4,65535
    7898:	200d883a 	mov	r6,r4
    789c:	180b883a 	mov	r5,r3
    78a0:	1009883a 	mov	r4,r2
    78a4:	0005b2c0 	call	5b2c <drawFiringWall>
                stage[X][Y0].type++;
    78a8:	e0bffd0b 	ldhu	r2,-12(fp)
    78ac:	1085883a 	add	r2,r2,r2
    78b0:	1085883a 	add	r2,r2,r2
    78b4:	1007883a 	mov	r3,r2
    78b8:	e0800217 	ldw	r2,8(fp)
    78bc:	10c5883a 	add	r2,r2,r3
    78c0:	10c00017 	ldw	r3,0(r2)
    78c4:	e0bffa0f 	ldh	r2,-24(fp)
    78c8:	100490fa 	slli	r2,r2,3
    78cc:	1885883a 	add	r2,r3,r2
    78d0:	10c0000b 	ldhu	r3,0(r2)
    78d4:	18c00044 	addi	r3,r3,1
    78d8:	10c0000d 	sth	r3,0(r2)
            	break;
    78dc:	00003e06 	br	79d8 <drawBombAndExplosion+0x14b8>
            }
			//bomb
			else if(stage[X][Y0].type==3){break;}
    78e0:	e0bffd0b 	ldhu	r2,-12(fp)
    78e4:	1085883a 	add	r2,r2,r2
    78e8:	1085883a 	add	r2,r2,r2
    78ec:	1007883a 	mov	r3,r2
    78f0:	e0800217 	ldw	r2,8(fp)
    78f4:	10c5883a 	add	r2,r2,r3
    78f8:	10c00017 	ldw	r3,0(r2)
    78fc:	e0bffa0f 	ldh	r2,-24(fp)
    7900:	100490fa 	slli	r2,r2,3
    7904:	1885883a 	add	r2,r3,r2
    7908:	1080000b 	ldhu	r2,0(r2)
    790c:	10bfffcc 	andi	r2,r2,65535
    7910:	108000d8 	cmpnei	r2,r2,3
    7914:	10002f26 	beq	r2,zero,79d4 <drawBombAndExplosion+0x14b4>
            //explosion
			else if(stage[X][Y0].type==index){
    7918:	e0bffd0b 	ldhu	r2,-12(fp)
    791c:	1085883a 	add	r2,r2,r2
    7920:	1085883a 	add	r2,r2,r2
    7924:	1007883a 	mov	r3,r2
    7928:	e0800217 	ldw	r2,8(fp)
    792c:	10c5883a 	add	r2,r2,r3
    7930:	10c00017 	ldw	r3,0(r2)
    7934:	e0bffa0f 	ldh	r2,-24(fp)
    7938:	100490fa 	slli	r2,r2,3
    793c:	1885883a 	add	r2,r3,r2
    7940:	1080000b 	ldhu	r2,0(r2)
    7944:	10ffffcc 	andi	r3,r2,65535
    7948:	e0bffb0b 	ldhu	r2,-20(fp)
    794c:	1880101e 	bne	r3,r2,7990 <drawBombAndExplosion+0x1470>
				cleanCell(X,Y0);
    7950:	e0bffd0b 	ldhu	r2,-12(fp)
    7954:	e0fffa0b 	ldhu	r3,-24(fp)
    7958:	18ffffcc 	andi	r3,r3,65535
    795c:	180b883a 	mov	r5,r3
    7960:	1009883a 	mov	r4,r2
    7964:	00038a00 	call	38a0 <cleanCell>
				drawExplosion(counter-49, X, Y0);
    7968:	e0bffc0b 	ldhu	r2,-16(fp)
    796c:	10bff3c4 	addi	r2,r2,-49
    7970:	10bfffcc 	andi	r2,r2,65535
    7974:	e0fffd0b 	ldhu	r3,-12(fp)
    7978:	e13ffa0b 	ldhu	r4,-24(fp)
    797c:	213fffcc 	andi	r4,r4,65535
    7980:	200d883a 	mov	r6,r4
    7984:	180b883a 	mov	r5,r3
    7988:	1009883a 	mov	r4,r2
    798c:	00043d00 	call	43d0 <drawExplosion>
			else if(stage[X0][Y].type==index){
				cleanCell(X0,Y);
				drawExplosion(counter-49, X0, Y);
			}
        }
        for(short int Y0 = (short int)Y-1; Y0>=(short int)Y-2; Y0--){
    7990:	e0bffa0b 	ldhu	r2,-24(fp)
    7994:	10bfffc4 	addi	r2,r2,-1
    7998:	e0bffa0d 	sth	r2,-24(fp)
    799c:	e0fffa0f 	ldh	r3,-24(fp)
    79a0:	e0bffe0b 	ldhu	r2,-8(fp)
    79a4:	10bfffcc 	andi	r2,r2,65535
    79a8:	10a0001c 	xori	r2,r2,32768
    79ac:	10a00004 	addi	r2,r2,-32768
    79b0:	10bfff84 	addi	r2,r2,-2
    79b4:	18bf1c0e 	bge	r3,r2,7628 <__alt_data_end+0xf8007628>
    79b8:	00000706 	br	79d8 <drawBombAndExplosion+0x14b8>
            if(Y0<0){break;}
    79bc:	0001883a 	nop
    79c0:	00000506 	br	79d8 <drawBombAndExplosion+0x14b8>
				cleanCell(X,Y0);
				drawExplosion(counter-49, X, Y0);

			}
			//solid wall
			else if(stage[X][Y0].type==1){break;}
    79c4:	0001883a 	nop
    79c8:	00000306 	br	79d8 <drawBombAndExplosion+0x14b8>
				drawFiringWall(counter-49, X, Y0);
				stage[X][Y0].type=200;
				break;
			}
            else if(stage[X][Y0].type>=200 && stage[X][Y0].type<300){
            	if(counter-49+200 < stage[X][Y0].type){break;}
    79cc:	0001883a 	nop
    79d0:	00000106 	br	79d8 <drawBombAndExplosion+0x14b8>
                drawFiringWall(counter-49, X, Y0);
                stage[X][Y0].type++;
            	break;
            }
			//bomb
			else if(stage[X][Y0].type==3){break;}
    79d4:	0001883a 	nop
			else if(stage[X][Y0].type==index){
				cleanCell(X,Y0);
				drawExplosion(counter-49, X, Y0);
			}
        }
        for(short int Y0 = (short int)Y+1; Y0<=(short int)Y+2; Y0++){
    79d8:	e0bffe0b 	ldhu	r2,-8(fp)
    79dc:	10800044 	addi	r2,r2,1
    79e0:	e0bffa8d 	sth	r2,-22(fp)
    79e4:	0000de06 	br	7d60 <drawBombAndExplosion+0x1840>
            if(Y0>14){break;}
    79e8:	e0bffa8f 	ldh	r2,-22(fp)
    79ec:	108003d0 	cmplti	r2,r2,15
    79f0:	1000e726 	beq	r2,zero,7d90 <drawBombAndExplosion+0x1870>
            //nothing
			else if(stage[X][Y0].type==0){
    79f4:	e0bffd0b 	ldhu	r2,-12(fp)
    79f8:	1085883a 	add	r2,r2,r2
    79fc:	1085883a 	add	r2,r2,r2
    7a00:	1007883a 	mov	r3,r2
    7a04:	e0800217 	ldw	r2,8(fp)
    7a08:	10c5883a 	add	r2,r2,r3
    7a0c:	10c00017 	ldw	r3,0(r2)
    7a10:	e0bffa8f 	ldh	r2,-22(fp)
    7a14:	100490fa 	slli	r2,r2,3
    7a18:	1885883a 	add	r2,r3,r2
    7a1c:	1080000b 	ldhu	r2,0(r2)
    7a20:	10bfffcc 	andi	r2,r2,65535
    7a24:	10001d1e 	bne	r2,zero,7a9c <drawBombAndExplosion+0x157c>
				stage[X][Y0].type=index;
    7a28:	e0bffd0b 	ldhu	r2,-12(fp)
    7a2c:	1085883a 	add	r2,r2,r2
    7a30:	1085883a 	add	r2,r2,r2
    7a34:	1007883a 	mov	r3,r2
    7a38:	e0800217 	ldw	r2,8(fp)
    7a3c:	10c5883a 	add	r2,r2,r3
    7a40:	10c00017 	ldw	r3,0(r2)
    7a44:	e0bffa8f 	ldh	r2,-22(fp)
    7a48:	100490fa 	slli	r2,r2,3
    7a4c:	1885883a 	add	r2,r3,r2
    7a50:	e0fffb0b 	ldhu	r3,-20(fp)
    7a54:	10c0000d 	sth	r3,0(r2)
				cleanCell(X,Y0);
    7a58:	e0bffd0b 	ldhu	r2,-12(fp)
    7a5c:	e0fffa8b 	ldhu	r3,-22(fp)
    7a60:	18ffffcc 	andi	r3,r3,65535
    7a64:	180b883a 	mov	r5,r3
    7a68:	1009883a 	mov	r4,r2
    7a6c:	00038a00 	call	38a0 <cleanCell>
				drawExplosion(counter-49, X, Y0);
    7a70:	e0bffc0b 	ldhu	r2,-16(fp)
    7a74:	10bff3c4 	addi	r2,r2,-49
    7a78:	10bfffcc 	andi	r2,r2,65535
    7a7c:	e0fffd0b 	ldhu	r3,-12(fp)
    7a80:	e13ffa8b 	ldhu	r4,-22(fp)
    7a84:	213fffcc 	andi	r4,r4,65535
    7a88:	200d883a 	mov	r6,r4
    7a8c:	180b883a 	mov	r5,r3
    7a90:	1009883a 	mov	r4,r2
    7a94:	00043d00 	call	43d0 <drawExplosion>
    7a98:	0000ae06 	br	7d54 <drawBombAndExplosion+0x1834>
			}
			//solid wall
			else if(stage[X][Y0].type==1){break;}
    7a9c:	e0bffd0b 	ldhu	r2,-12(fp)
    7aa0:	1085883a 	add	r2,r2,r2
    7aa4:	1085883a 	add	r2,r2,r2
    7aa8:	1007883a 	mov	r3,r2
    7aac:	e0800217 	ldw	r2,8(fp)
    7ab0:	10c5883a 	add	r2,r2,r3
    7ab4:	10c00017 	ldw	r3,0(r2)
    7ab8:	e0bffa8f 	ldh	r2,-22(fp)
    7abc:	100490fa 	slli	r2,r2,3
    7ac0:	1885883a 	add	r2,r3,r2
    7ac4:	1080000b 	ldhu	r2,0(r2)
    7ac8:	10bfffcc 	andi	r2,r2,65535
    7acc:	10800058 	cmpnei	r2,r2,1
    7ad0:	1000b126 	beq	r2,zero,7d98 <drawBombAndExplosion+0x1878>
			//soft wall
			else if(stage[X][Y0].type==2){
    7ad4:	e0bffd0b 	ldhu	r2,-12(fp)
    7ad8:	1085883a 	add	r2,r2,r2
    7adc:	1085883a 	add	r2,r2,r2
    7ae0:	1007883a 	mov	r3,r2
    7ae4:	e0800217 	ldw	r2,8(fp)
    7ae8:	10c5883a 	add	r2,r2,r3
    7aec:	10c00017 	ldw	r3,0(r2)
    7af0:	e0bffa8f 	ldh	r2,-22(fp)
    7af4:	100490fa 	slli	r2,r2,3
    7af8:	1885883a 	add	r2,r3,r2
    7afc:	1080000b 	ldhu	r2,0(r2)
    7b00:	10bfffcc 	andi	r2,r2,65535
    7b04:	10800098 	cmpnei	r2,r2,2
    7b08:	10001d1e 	bne	r2,zero,7b80 <drawBombAndExplosion+0x1660>
				cleanCell(X,Y0);
    7b0c:	e0bffd0b 	ldhu	r2,-12(fp)
    7b10:	e0fffa8b 	ldhu	r3,-22(fp)
    7b14:	18ffffcc 	andi	r3,r3,65535
    7b18:	180b883a 	mov	r5,r3
    7b1c:	1009883a 	mov	r4,r2
    7b20:	00038a00 	call	38a0 <cleanCell>
				drawFiringWall(counter-49, X, Y0);
    7b24:	e0bffc0b 	ldhu	r2,-16(fp)
    7b28:	10bff3c4 	addi	r2,r2,-49
    7b2c:	10bfffcc 	andi	r2,r2,65535
    7b30:	e0fffd0b 	ldhu	r3,-12(fp)
    7b34:	e13ffa8b 	ldhu	r4,-22(fp)
    7b38:	213fffcc 	andi	r4,r4,65535
    7b3c:	200d883a 	mov	r6,r4
    7b40:	180b883a 	mov	r5,r3
    7b44:	1009883a 	mov	r4,r2
    7b48:	0005b2c0 	call	5b2c <drawFiringWall>
				stage[X][Y0].type=200;
    7b4c:	e0bffd0b 	ldhu	r2,-12(fp)
    7b50:	1085883a 	add	r2,r2,r2
    7b54:	1085883a 	add	r2,r2,r2
    7b58:	1007883a 	mov	r3,r2
    7b5c:	e0800217 	ldw	r2,8(fp)
    7b60:	10c5883a 	add	r2,r2,r3
    7b64:	10c00017 	ldw	r3,0(r2)
    7b68:	e0bffa8f 	ldh	r2,-22(fp)
    7b6c:	100490fa 	slli	r2,r2,3
    7b70:	1885883a 	add	r2,r3,r2
    7b74:	00c03204 	movi	r3,200
    7b78:	10c0000d 	sth	r3,0(r2)
				break;
    7b7c:	00008b06 	br	7dac <drawBombAndExplosion+0x188c>
			}
            else if(stage[X][Y0].type>=200 && stage[X][Y0].type<300){
    7b80:	e0bffd0b 	ldhu	r2,-12(fp)
    7b84:	1085883a 	add	r2,r2,r2
    7b88:	1085883a 	add	r2,r2,r2
    7b8c:	1007883a 	mov	r3,r2
    7b90:	e0800217 	ldw	r2,8(fp)
    7b94:	10c5883a 	add	r2,r2,r3
    7b98:	10c00017 	ldw	r3,0(r2)
    7b9c:	e0bffa8f 	ldh	r2,-22(fp)
    7ba0:	100490fa 	slli	r2,r2,3
    7ba4:	1885883a 	add	r2,r3,r2
    7ba8:	1080000b 	ldhu	r2,0(r2)
    7bac:	10bfffcc 	andi	r2,r2,65535
    7bb0:	10803230 	cmpltui	r2,r2,200
    7bb4:	10003b1e 	bne	r2,zero,7ca4 <drawBombAndExplosion+0x1784>
    7bb8:	e0bffd0b 	ldhu	r2,-12(fp)
    7bbc:	1085883a 	add	r2,r2,r2
    7bc0:	1085883a 	add	r2,r2,r2
    7bc4:	1007883a 	mov	r3,r2
    7bc8:	e0800217 	ldw	r2,8(fp)
    7bcc:	10c5883a 	add	r2,r2,r3
    7bd0:	10c00017 	ldw	r3,0(r2)
    7bd4:	e0bffa8f 	ldh	r2,-22(fp)
    7bd8:	100490fa 	slli	r2,r2,3
    7bdc:	1885883a 	add	r2,r3,r2
    7be0:	1080000b 	ldhu	r2,0(r2)
    7be4:	10bfffcc 	andi	r2,r2,65535
    7be8:	10804b28 	cmpgeui	r2,r2,300
    7bec:	10002d1e 	bne	r2,zero,7ca4 <drawBombAndExplosion+0x1784>
            	if(counter-49+200 < stage[X][Y0].type){break;}
    7bf0:	e0bffc0b 	ldhu	r2,-16(fp)
    7bf4:	10c025c4 	addi	r3,r2,151
    7bf8:	e0bffd0b 	ldhu	r2,-12(fp)
    7bfc:	1085883a 	add	r2,r2,r2
    7c00:	1085883a 	add	r2,r2,r2
    7c04:	1009883a 	mov	r4,r2
    7c08:	e0800217 	ldw	r2,8(fp)
    7c0c:	1105883a 	add	r2,r2,r4
    7c10:	11000017 	ldw	r4,0(r2)
    7c14:	e0bffa8f 	ldh	r2,-22(fp)
    7c18:	100490fa 	slli	r2,r2,3
    7c1c:	2085883a 	add	r2,r4,r2
    7c20:	1080000b 	ldhu	r2,0(r2)
    7c24:	10bfffcc 	andi	r2,r2,65535
    7c28:	18805d16 	blt	r3,r2,7da0 <drawBombAndExplosion+0x1880>
                cleanCell(X,Y0);
    7c2c:	e0bffd0b 	ldhu	r2,-12(fp)
    7c30:	e0fffa8b 	ldhu	r3,-22(fp)
    7c34:	18ffffcc 	andi	r3,r3,65535
    7c38:	180b883a 	mov	r5,r3
    7c3c:	1009883a 	mov	r4,r2
    7c40:	00038a00 	call	38a0 <cleanCell>
                drawFiringWall(counter-49, X, Y0);
    7c44:	e0bffc0b 	ldhu	r2,-16(fp)
    7c48:	10bff3c4 	addi	r2,r2,-49
    7c4c:	10bfffcc 	andi	r2,r2,65535
    7c50:	e0fffd0b 	ldhu	r3,-12(fp)
    7c54:	e13ffa8b 	ldhu	r4,-22(fp)
    7c58:	213fffcc 	andi	r4,r4,65535
    7c5c:	200d883a 	mov	r6,r4
    7c60:	180b883a 	mov	r5,r3
    7c64:	1009883a 	mov	r4,r2
    7c68:	0005b2c0 	call	5b2c <drawFiringWall>
                stage[X][Y0].type++;
    7c6c:	e0bffd0b 	ldhu	r2,-12(fp)
    7c70:	1085883a 	add	r2,r2,r2
    7c74:	1085883a 	add	r2,r2,r2
    7c78:	1007883a 	mov	r3,r2
    7c7c:	e0800217 	ldw	r2,8(fp)
    7c80:	10c5883a 	add	r2,r2,r3
    7c84:	10c00017 	ldw	r3,0(r2)
    7c88:	e0bffa8f 	ldh	r2,-22(fp)
    7c8c:	100490fa 	slli	r2,r2,3
    7c90:	1885883a 	add	r2,r3,r2
    7c94:	10c0000b 	ldhu	r3,0(r2)
    7c98:	18c00044 	addi	r3,r3,1
    7c9c:	10c0000d 	sth	r3,0(r2)
            	break;
    7ca0:	00004206 	br	7dac <drawBombAndExplosion+0x188c>
            }
			//bomb
			else if(stage[X][Y0].type==3){break;}
    7ca4:	e0bffd0b 	ldhu	r2,-12(fp)
    7ca8:	1085883a 	add	r2,r2,r2
    7cac:	1085883a 	add	r2,r2,r2
    7cb0:	1007883a 	mov	r3,r2
    7cb4:	e0800217 	ldw	r2,8(fp)
    7cb8:	10c5883a 	add	r2,r2,r3
    7cbc:	10c00017 	ldw	r3,0(r2)
    7cc0:	e0bffa8f 	ldh	r2,-22(fp)
    7cc4:	100490fa 	slli	r2,r2,3
    7cc8:	1885883a 	add	r2,r3,r2
    7ccc:	1080000b 	ldhu	r2,0(r2)
    7cd0:	10bfffcc 	andi	r2,r2,65535
    7cd4:	108000d8 	cmpnei	r2,r2,3
    7cd8:	10003326 	beq	r2,zero,7da8 <drawBombAndExplosion+0x1888>
            //explosion
			else if(stage[X][Y0].type==index){
    7cdc:	e0bffd0b 	ldhu	r2,-12(fp)
    7ce0:	1085883a 	add	r2,r2,r2
    7ce4:	1085883a 	add	r2,r2,r2
    7ce8:	1007883a 	mov	r3,r2
    7cec:	e0800217 	ldw	r2,8(fp)
    7cf0:	10c5883a 	add	r2,r2,r3
    7cf4:	10c00017 	ldw	r3,0(r2)
    7cf8:	e0bffa8f 	ldh	r2,-22(fp)
    7cfc:	100490fa 	slli	r2,r2,3
    7d00:	1885883a 	add	r2,r3,r2
    7d04:	1080000b 	ldhu	r2,0(r2)
    7d08:	10ffffcc 	andi	r3,r2,65535
    7d0c:	e0bffb0b 	ldhu	r2,-20(fp)
    7d10:	1880101e 	bne	r3,r2,7d54 <drawBombAndExplosion+0x1834>
				cleanCell(X,Y0);
    7d14:	e0bffd0b 	ldhu	r2,-12(fp)
    7d18:	e0fffa8b 	ldhu	r3,-22(fp)
    7d1c:	18ffffcc 	andi	r3,r3,65535
    7d20:	180b883a 	mov	r5,r3
    7d24:	1009883a 	mov	r4,r2
    7d28:	00038a00 	call	38a0 <cleanCell>
				drawExplosion(counter-49, X, Y0);
    7d2c:	e0bffc0b 	ldhu	r2,-16(fp)
    7d30:	10bff3c4 	addi	r2,r2,-49
    7d34:	10bfffcc 	andi	r2,r2,65535
    7d38:	e0fffd0b 	ldhu	r3,-12(fp)
    7d3c:	e13ffa8b 	ldhu	r4,-22(fp)
    7d40:	213fffcc 	andi	r4,r4,65535
    7d44:	200d883a 	mov	r6,r4
    7d48:	180b883a 	mov	r5,r3
    7d4c:	1009883a 	mov	r4,r2
    7d50:	00043d00 	call	43d0 <drawExplosion>
			else if(stage[X][Y0].type==index){
				cleanCell(X,Y0);
				drawExplosion(counter-49, X, Y0);
			}
        }
        for(short int Y0 = (short int)Y+1; Y0<=(short int)Y+2; Y0++){
    7d54:	e0bffa8b 	ldhu	r2,-22(fp)
    7d58:	10800044 	addi	r2,r2,1
    7d5c:	e0bffa8d 	sth	r2,-22(fp)
    7d60:	e0bffa8f 	ldh	r2,-22(fp)
    7d64:	e0fffe0b 	ldhu	r3,-8(fp)
    7d68:	18ffffcc 	andi	r3,r3,65535
    7d6c:	18e0001c 	xori	r3,r3,32768
    7d70:	18e00004 	addi	r3,r3,-32768
    7d74:	18c00084 	addi	r3,r3,2
    7d78:	18bf1b0e 	bge	r3,r2,79e8 <__alt_data_end+0xf80079e8>
    7d7c:	00000b06 	br	7dac <drawBombAndExplosion+0x188c>
				cleanCell(X,Y0);
				break;
			}
		}
		for(short int Y0 = (short int)Y+1; Y0<=(short int)Y+2; Y0++){
			if(Y0>14){break;}
    7d80:	0001883a 	nop
    7d84:	00000906 	br	7dac <drawBombAndExplosion+0x188c>
			if(stage[X][Y0].type==index){stage[X][Y0].type=0;cleanCell(X,Y0);}
			else if(stage[X][Y0].type==1){break;}
    7d88:	0001883a 	nop
    7d8c:	00000706 	br	7dac <drawBombAndExplosion+0x188c>
				cleanCell(X,Y0);
				drawExplosion(counter-49, X, Y0);
			}
        }
        for(short int Y0 = (short int)Y+1; Y0<=(short int)Y+2; Y0++){
            if(Y0>14){break;}
    7d90:	0001883a 	nop
    7d94:	00000506 	br	7dac <drawBombAndExplosion+0x188c>
				stage[X][Y0].type=index;
				cleanCell(X,Y0);
				drawExplosion(counter-49, X, Y0);
			}
			//solid wall
			else if(stage[X][Y0].type==1){break;}
    7d98:	0001883a 	nop
    7d9c:	00000306 	br	7dac <drawBombAndExplosion+0x188c>
				drawFiringWall(counter-49, X, Y0);
				stage[X][Y0].type=200;
				break;
			}
            else if(stage[X][Y0].type>=200 && stage[X][Y0].type<300){
            	if(counter-49+200 < stage[X][Y0].type){break;}
    7da0:	0001883a 	nop
    7da4:	00000106 	br	7dac <drawBombAndExplosion+0x188c>
                drawFiringWall(counter-49, X, Y0);
                stage[X][Y0].type++;
            	break;
            }
			//bomb
			else if(stage[X][Y0].type==3){break;}
    7da8:	0001883a 	nop
				cleanCell(X,Y0);
				drawExplosion(counter-49, X, Y0);
			}
        }
	}
}
    7dac:	e6ffff04 	addi	sp,fp,-4
    7db0:	dfc00217 	ldw	ra,8(sp)
    7db4:	df000117 	ldw	fp,4(sp)
    7db8:	dc000017 	ldw	r16,0(sp)
    7dbc:	dec00304 	addi	sp,sp,12
    7dc0:	f800283a 	ret

00007dc4 <pushToCoinList>:

void pushToCoinList(unsigned short int X, unsigned short int Y, cellXY**head, cellXY**tail){
    7dc4:	defff904 	addi	sp,sp,-28
    7dc8:	dfc00615 	stw	ra,24(sp)
    7dcc:	df000515 	stw	fp,20(sp)
    7dd0:	df000504 	addi	fp,sp,20
    7dd4:	2007883a 	mov	r3,r4
    7dd8:	2805883a 	mov	r2,r5
    7ddc:	e1bffe15 	stw	r6,-8(fp)
    7de0:	e1ffff15 	stw	r7,-4(fp)
    7de4:	e0fffc0d 	sth	r3,-16(fp)
    7de8:	e0bffd0d 	sth	r2,-12(fp)
	cellXY *one = (cellXY *)malloc(sizeof(cellXY));
    7dec:	01000304 	movi	r4,12
    7df0:	000dc340 	call	dc34 <malloc>
    7df4:	e0bffb15 	stw	r2,-20(fp)
	one->X = X;
    7df8:	e0bffb17 	ldw	r2,-20(fp)
    7dfc:	e0fffc0b 	ldhu	r3,-16(fp)
    7e00:	10c0000d 	sth	r3,0(r2)
	one->Y = Y;
    7e04:	e0bffb17 	ldw	r2,-20(fp)
    7e08:	e0fffd0b 	ldhu	r3,-12(fp)
    7e0c:	10c0008d 	sth	r3,2(r2)
	if(*tail ==NULL){
    7e10:	e0bfff17 	ldw	r2,-4(fp)
    7e14:	10800017 	ldw	r2,0(r2)
    7e18:	10000b1e 	bne	r2,zero,7e48 <pushToCoinList+0x84>
		*tail = one;
    7e1c:	e0bfff17 	ldw	r2,-4(fp)
    7e20:	e0fffb17 	ldw	r3,-20(fp)
    7e24:	10c00015 	stw	r3,0(r2)
		*head = one;
    7e28:	e0bffe17 	ldw	r2,-8(fp)
    7e2c:	e0fffb17 	ldw	r3,-20(fp)
    7e30:	10c00015 	stw	r3,0(r2)
		one->next = NULL;
    7e34:	e0bffb17 	ldw	r2,-20(fp)
    7e38:	10000215 	stw	zero,8(r2)
		one->prev = NULL;
    7e3c:	e0bffb17 	ldw	r2,-20(fp)
    7e40:	10000115 	stw	zero,4(r2)
		one->next = NULL;
		one->prev = *tail;
		*tail = one;
	}
	//printf("Try to push into coin list\n");
}
    7e44:	00000d06 	br	7e7c <pushToCoinList+0xb8>
		*head = one;
		one->next = NULL;
		one->prev = NULL;
	}
	else{
		(*tail)->next = one;
    7e48:	e0bfff17 	ldw	r2,-4(fp)
    7e4c:	10800017 	ldw	r2,0(r2)
    7e50:	e0fffb17 	ldw	r3,-20(fp)
    7e54:	10c00215 	stw	r3,8(r2)
		one->next = NULL;
    7e58:	e0bffb17 	ldw	r2,-20(fp)
    7e5c:	10000215 	stw	zero,8(r2)
		one->prev = *tail;
    7e60:	e0bfff17 	ldw	r2,-4(fp)
    7e64:	10c00017 	ldw	r3,0(r2)
    7e68:	e0bffb17 	ldw	r2,-20(fp)
    7e6c:	10c00115 	stw	r3,4(r2)
		*tail = one;
    7e70:	e0bfff17 	ldw	r2,-4(fp)
    7e74:	e0fffb17 	ldw	r3,-20(fp)
    7e78:	10c00015 	stw	r3,0(r2)
	}
	//printf("Try to push into coin list\n");
}
    7e7c:	0001883a 	nop
    7e80:	e037883a 	mov	sp,fp
    7e84:	dfc00117 	ldw	ra,4(sp)
    7e88:	df000017 	ldw	fp,0(sp)
    7e8c:	dec00204 	addi	sp,sp,8
    7e90:	f800283a 	ret

00007e94 <drawCoin>:

void drawCoin(unsigned short int X, unsigned short int Y, coin *ptr){
    7e94:	defff604 	addi	sp,sp,-40
    7e98:	dfc00915 	stw	ra,36(sp)
    7e9c:	df000815 	stw	fp,32(sp)
    7ea0:	df000804 	addi	fp,sp,32
    7ea4:	2007883a 	mov	r3,r4
    7ea8:	2805883a 	mov	r2,r5
    7eac:	e1bfff15 	stw	r6,-4(fp)
    7eb0:	e0fffd0d 	sth	r3,-12(fp)
    7eb4:	e0bffe0d 	sth	r2,-8(fp)
	unsigned int x0 = X*32+5;
    7eb8:	e0bffd0b 	ldhu	r2,-12(fp)
    7ebc:	1004917a 	slli	r2,r2,5
    7ec0:	10800144 	addi	r2,r2,5
    7ec4:	e0bffb15 	stw	r2,-20(fp)
	unsigned int y0 = Y*32+5;
    7ec8:	e0bffe0b 	ldhu	r2,-8(fp)
    7ecc:	1004917a 	slli	r2,r2,5
    7ed0:	10800144 	addi	r2,r2,5
    7ed4:	e0bffc15 	stw	r2,-16(fp)
    switch(ptr->counter/10%10){
    7ed8:	e0bfff17 	ldw	r2,-4(fp)
    7edc:	10800017 	ldw	r2,0(r2)
    7ee0:	01400284 	movi	r5,10
    7ee4:	1009883a 	mov	r4,r2
    7ee8:	000c5d00 	call	c5d0 <__udivsi3>
    7eec:	01400284 	movi	r5,10
    7ef0:	1009883a 	mov	r4,r2
    7ef4:	000c6340 	call	c634 <__umodsi3>
    7ef8:	10c002a8 	cmpgeui	r3,r2,10
    7efc:	1800881e 	bne	r3,zero,8120 <drawCoin+0x28c>
    7f00:	100690ba 	slli	r3,r2,2
    7f04:	00800034 	movhi	r2,0
    7f08:	109fc604 	addi	r2,r2,32536
    7f0c:	1885883a 	add	r2,r3,r2
    7f10:	10800017 	ldw	r2,0(r2)
    7f14:	1000683a 	jmp	r2
    7f18:	00007f40 	call	7f4 <Keyboard_INIT+0x1c0>
    7f1c:	00007f70 	cmpltui	zero,zero,509
    7f20:	00007fa0 	cmpeqi	zero,zero,510
    7f24:	00007fd0 	cmplti	zero,zero,511
    7f28:	00008000 	call	800 <Keyboard_INIT+0x1cc>
    7f2c:	00008030 	cmpltui	zero,zero,512
    7f30:	00008060 	cmpeqi	zero,zero,513
    7f34:	00008090 	cmplti	zero,zero,514
    7f38:	000080c0 	call	80c <Keyboard_INIT+0x1d8>
    7f3c:	000080f0 	cmpltui	zero,zero,515
    	case(0):
				draw_driver(coin0_x0, coin0_y0, coin0_x1, coin0_y1, x0, y0, 1);
    7f40:	00800044 	movi	r2,1
    7f44:	d8800215 	stw	r2,8(sp)
    7f48:	e0bffc17 	ldw	r2,-16(fp)
    7f4c:	d8800115 	stw	r2,4(sp)
    7f50:	e0bffb17 	ldw	r2,-20(fp)
    7f54:	d8800015 	stw	r2,0(sp)
    7f58:	01c05544 	movi	r7,341
    7f5c:	018061c4 	movi	r6,391
    7f60:	01405004 	movi	r5,320
    7f64:	01005c84 	movi	r4,370
    7f68:	00036040 	call	3604 <draw_driver>
    			break;
    7f6c:	00006c06 	br	8120 <drawCoin+0x28c>
    	case(1):
				draw_driver(coin1_x0, coin1_y0, coin1_x1, coin1_y1, x0, y0, 1);
    7f70:	00800044 	movi	r2,1
    7f74:	d8800215 	stw	r2,8(sp)
    7f78:	e0bffc17 	ldw	r2,-16(fp)
    7f7c:	d8800115 	stw	r2,4(sp)
    7f80:	e0bffb17 	ldw	r2,-20(fp)
    7f84:	d8800015 	stw	r2,0(sp)
    7f88:	01c05544 	movi	r7,341
    7f8c:	01806744 	movi	r6,413
    7f90:	01405004 	movi	r5,320
    7f94:	01006204 	movi	r4,392
    7f98:	00036040 	call	3604 <draw_driver>
    			break;
    7f9c:	00006006 	br	8120 <drawCoin+0x28c>
    	case(2):
				draw_driver(coin2_x0, coin2_y0, coin2_x1, coin2_y1, x0, y0, 1);
    7fa0:	00800044 	movi	r2,1
    7fa4:	d8800215 	stw	r2,8(sp)
    7fa8:	e0bffc17 	ldw	r2,-16(fp)
    7fac:	d8800115 	stw	r2,4(sp)
    7fb0:	e0bffb17 	ldw	r2,-20(fp)
    7fb4:	d8800015 	stw	r2,0(sp)
    7fb8:	01c05544 	movi	r7,341
    7fbc:	01806cc4 	movi	r6,435
    7fc0:	01405004 	movi	r5,320
    7fc4:	01006784 	movi	r4,414
    7fc8:	00036040 	call	3604 <draw_driver>
    			break;
    7fcc:	00005406 	br	8120 <drawCoin+0x28c>
    	case(3):
				draw_driver(coin3_x0, coin3_y0, coin3_x1, coin3_y1, x0, y0, 1);
    7fd0:	00800044 	movi	r2,1
    7fd4:	d8800215 	stw	r2,8(sp)
    7fd8:	e0bffc17 	ldw	r2,-16(fp)
    7fdc:	d8800115 	stw	r2,4(sp)
    7fe0:	e0bffb17 	ldw	r2,-20(fp)
    7fe4:	d8800015 	stw	r2,0(sp)
    7fe8:	01c05544 	movi	r7,341
    7fec:	01807244 	movi	r6,457
    7ff0:	01405004 	movi	r5,320
    7ff4:	01006d04 	movi	r4,436
    7ff8:	00036040 	call	3604 <draw_driver>
    			break;
    7ffc:	00004806 	br	8120 <drawCoin+0x28c>
    	case(4):
				draw_driver(coin4_x0, coin4_y0, coin4_x1, coin4_y1, x0, y0, 1);
    8000:	00800044 	movi	r2,1
    8004:	d8800215 	stw	r2,8(sp)
    8008:	e0bffc17 	ldw	r2,-16(fp)
    800c:	d8800115 	stw	r2,4(sp)
    8010:	e0bffb17 	ldw	r2,-20(fp)
    8014:	d8800015 	stw	r2,0(sp)
    8018:	01c05544 	movi	r7,341
    801c:	01807804 	movi	r6,480
    8020:	01405004 	movi	r5,320
    8024:	010072c4 	movi	r4,459
    8028:	00036040 	call	3604 <draw_driver>
    			break;
    802c:	00003c06 	br	8120 <drawCoin+0x28c>
    	case(5):
				draw_driver(coin5_x0, coin5_y0, coin5_x1, coin5_y1, x0, y0, 1);
    8030:	00800044 	movi	r2,1
    8034:	d8800215 	stw	r2,8(sp)
    8038:	e0bffc17 	ldw	r2,-16(fp)
    803c:	d8800115 	stw	r2,4(sp)
    8040:	e0bffb17 	ldw	r2,-20(fp)
    8044:	d8800015 	stw	r2,0(sp)
    8048:	01c05544 	movi	r7,341
    804c:	01807d84 	movi	r6,502
    8050:	01405004 	movi	r5,320
    8054:	01007844 	movi	r4,481
    8058:	00036040 	call	3604 <draw_driver>
    			break;
    805c:	00003006 	br	8120 <drawCoin+0x28c>
    	case(6):
				draw_driver(coin6_x0, coin6_y0, coin6_x1, coin6_y1, x0, y0, 1);
    8060:	00800044 	movi	r2,1
    8064:	d8800215 	stw	r2,8(sp)
    8068:	e0bffc17 	ldw	r2,-16(fp)
    806c:	d8800115 	stw	r2,4(sp)
    8070:	e0bffb17 	ldw	r2,-20(fp)
    8074:	d8800015 	stw	r2,0(sp)
    8078:	01c05544 	movi	r7,341
    807c:	01808344 	movi	r6,525
    8080:	01405004 	movi	r5,320
    8084:	01007e04 	movi	r4,504
    8088:	00036040 	call	3604 <draw_driver>
    			break;
    808c:	00002406 	br	8120 <drawCoin+0x28c>
    	case(7):
				draw_driver(coin7_x0, coin7_y0, coin7_x1, coin7_y1, x0, y0, 1);
    8090:	00800044 	movi	r2,1
    8094:	d8800215 	stw	r2,8(sp)
    8098:	e0bffc17 	ldw	r2,-16(fp)
    809c:	d8800115 	stw	r2,4(sp)
    80a0:	e0bffb17 	ldw	r2,-20(fp)
    80a4:	d8800015 	stw	r2,0(sp)
    80a8:	01c05544 	movi	r7,341
    80ac:	018088c4 	movi	r6,547
    80b0:	01405004 	movi	r5,320
    80b4:	01008384 	movi	r4,526
    80b8:	00036040 	call	3604 <draw_driver>
    			break;
    80bc:	00001806 	br	8120 <drawCoin+0x28c>
    	case(8):
				draw_driver(coin8_x0, coin8_y0, coin8_x1, coin8_y1, x0, y0, 1);
    80c0:	00800044 	movi	r2,1
    80c4:	d8800215 	stw	r2,8(sp)
    80c8:	e0bffc17 	ldw	r2,-16(fp)
    80cc:	d8800115 	stw	r2,4(sp)
    80d0:	e0bffb17 	ldw	r2,-20(fp)
    80d4:	d8800015 	stw	r2,0(sp)
    80d8:	01c05544 	movi	r7,341
    80dc:	01808e44 	movi	r6,569
    80e0:	01405004 	movi	r5,320
    80e4:	01008904 	movi	r4,548
    80e8:	00036040 	call	3604 <draw_driver>
    			break;
    80ec:	00000c06 	br	8120 <drawCoin+0x28c>
    	case(9):
				draw_driver(coin9_x0, coin9_y0, coin9_x1, coin9_y1, x0, y0, 1);
    80f0:	00800044 	movi	r2,1
    80f4:	d8800215 	stw	r2,8(sp)
    80f8:	e0bffc17 	ldw	r2,-16(fp)
    80fc:	d8800115 	stw	r2,4(sp)
    8100:	e0bffb17 	ldw	r2,-20(fp)
    8104:	d8800015 	stw	r2,0(sp)
    8108:	01c05544 	movi	r7,341
    810c:	01809404 	movi	r6,592
    8110:	01405004 	movi	r5,320
    8114:	01008ec4 	movi	r4,571
    8118:	00036040 	call	3604 <draw_driver>
    			break;
    811c:	0001883a 	nop
    }
    ptr->counter ++;
    8120:	e0bfff17 	ldw	r2,-4(fp)
    8124:	10800017 	ldw	r2,0(r2)
    8128:	10c00044 	addi	r3,r2,1
    812c:	e0bfff17 	ldw	r2,-4(fp)
    8130:	10c00015 	stw	r3,0(r2)
}
    8134:	0001883a 	nop
    8138:	e037883a 	mov	sp,fp
    813c:	dfc00117 	ldw	ra,4(sp)
    8140:	df000017 	ldw	fp,0(sp)
    8144:	dec00204 	addi	sp,sp,8
    8148:	f800283a 	ret

0000814c <cleanCoin>:

void cleanCoin(unsigned short int X, unsigned short int Y){
    814c:	defff704 	addi	sp,sp,-36
    8150:	dfc00815 	stw	ra,32(sp)
    8154:	df000715 	stw	fp,28(sp)
    8158:	df000704 	addi	fp,sp,28
    815c:	2007883a 	mov	r3,r4
    8160:	2805883a 	mov	r2,r5
    8164:	e0fffe0d 	sth	r3,-8(fp)
    8168:	e0bfff0d 	sth	r2,-4(fp)
	unsigned int x0 = X*32+5;
    816c:	e0bffe0b 	ldhu	r2,-8(fp)
    8170:	1004917a 	slli	r2,r2,5
    8174:	10800144 	addi	r2,r2,5
    8178:	e0bffc15 	stw	r2,-16(fp)
	unsigned int y0 = Y*32+5;
    817c:	e0bfff0b 	ldhu	r2,-4(fp)
    8180:	1004917a 	slli	r2,r2,5
    8184:	10800144 	addi	r2,r2,5
    8188:	e0bffd15 	stw	r2,-12(fp)
	draw_driver(x0, y0, x0+21, y0+21, x0, y0, 0);
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	10c00544 	addi	r3,r2,21
    8194:	e0bffd17 	ldw	r2,-12(fp)
    8198:	11000544 	addi	r4,r2,21
    819c:	d8000215 	stw	zero,8(sp)
    81a0:	e0bffd17 	ldw	r2,-12(fp)
    81a4:	d8800115 	stw	r2,4(sp)
    81a8:	e0bffc17 	ldw	r2,-16(fp)
    81ac:	d8800015 	stw	r2,0(sp)
    81b0:	200f883a 	mov	r7,r4
    81b4:	180d883a 	mov	r6,r3
    81b8:	e17ffd17 	ldw	r5,-12(fp)
    81bc:	e13ffc17 	ldw	r4,-16(fp)
    81c0:	00036040 	call	3604 <draw_driver>
}
    81c4:	0001883a 	nop
    81c8:	e037883a 	mov	sp,fp
    81cc:	dfc00117 	ldw	ra,4(sp)
    81d0:	df000017 	ldw	fp,0(sp)
    81d4:	dec00204 	addi	sp,sp,8
    81d8:	f800283a 	ret

000081dc <initED>:
#include "./header_file/ed.h"

void initED(int ending){
    81dc:	defffa04 	addi	sp,sp,-24
    81e0:	dfc00515 	stw	ra,20(sp)
    81e4:	df000415 	stw	fp,16(sp)
    81e8:	df000404 	addi	fp,sp,16
    81ec:	e13fff15 	stw	r4,-4(fp)

	draw_driver(0,0,639,479,0,0,3);
    81f0:	008000c4 	movi	r2,3
    81f4:	d8800215 	stw	r2,8(sp)
    81f8:	d8000115 	stw	zero,4(sp)
    81fc:	d8000015 	stw	zero,0(sp)
    8200:	01c077c4 	movi	r7,479
    8204:	01809fc4 	movi	r6,639
    8208:	000b883a 	mov	r5,zero
    820c:	0009883a 	mov	r4,zero
    8210:	00036040 	call	3604 <draw_driver>
	//player 1 wins
    if(ending == 1){
    8214:	e0bfff17 	ldw	r2,-4(fp)
    8218:	10800058 	cmpnei	r2,r2,1
    821c:	1000171e 	bne	r2,zero,827c <initED+0xa0>
    	draw_driver(player1_front0_x0, player1_front0_y0, player1_front0_x1, player1_front0_y1, 280,144, 1);
    8220:	00800044 	movi	r2,1
    8224:	d8800215 	stw	r2,8(sp)
    8228:	00802404 	movi	r2,144
    822c:	d8800115 	stw	r2,4(sp)
    8230:	00804604 	movi	r2,280
    8234:	d8800015 	stw	r2,0(sp)
    8238:	01c00704 	movi	r7,28
    823c:	018051c4 	movi	r6,327
    8240:	014000c4 	movi	r5,3
    8244:	01004b84 	movi	r4,302
    8248:	00036040 	call	3604 <draw_driver>
    	draw_driver(player2_hurt_x0, player2_hurt_y0, player2_hurt_x1, player2_hurt_y1, 320,144, 1);
    824c:	00800044 	movi	r2,1
    8250:	d8800215 	stw	r2,8(sp)
    8254:	00802404 	movi	r2,144
    8258:	d8800115 	stw	r2,4(sp)
    825c:	00805004 	movi	r2,320
    8260:	d8800015 	stw	r2,0(sp)
    8264:	01c06704 	movi	r7,412
    8268:	01805a44 	movi	r6,361
    826c:	014060c4 	movi	r5,387
    8270:	01005404 	movi	r4,336
    8274:	00036040 	call	3604 <draw_driver>
    8278:	00003006 	br	833c <initED+0x160>
    }
    //player 2 wins
    else if(ending ==2){
    827c:	e0bfff17 	ldw	r2,-4(fp)
    8280:	10800098 	cmpnei	r2,r2,2
    8284:	1000171e 	bne	r2,zero,82e4 <initED+0x108>
    	draw_driver(player2_front0_x0, player2_front0_y0, player2_front0_x1, player2_front0_y1, 280,144, 1);
    8288:	00800044 	movi	r2,1
    828c:	d8800215 	stw	r2,8(sp)
    8290:	00802404 	movi	r2,144
    8294:	d8800115 	stw	r2,4(sp)
    8298:	00804604 	movi	r2,280
    829c:	d8800015 	stw	r2,0(sp)
    82a0:	01c00704 	movi	r7,28
    82a4:	01805a44 	movi	r6,361
    82a8:	014000c4 	movi	r5,3
    82ac:	01005404 	movi	r4,336
    82b0:	00036040 	call	3604 <draw_driver>
    	draw_driver(player1_hurt_x0, player1_hurt_y0, player1_hurt_x1, player1_hurt_y1, 320,144, 1);
    82b4:	00800044 	movi	r2,1
    82b8:	d8800215 	stw	r2,8(sp)
    82bc:	00802404 	movi	r2,144
    82c0:	d8800115 	stw	r2,4(sp)
    82c4:	00805004 	movi	r2,320
    82c8:	d8800015 	stw	r2,0(sp)
    82cc:	01c06704 	movi	r7,412
    82d0:	018051c4 	movi	r6,327
    82d4:	014060c4 	movi	r5,387
    82d8:	01004b84 	movi	r4,302
    82dc:	00036040 	call	3604 <draw_driver>
    82e0:	00001606 	br	833c <initED+0x160>
    }
    //player 3 wins
    else{
    	draw_driver(player1_front0_x0, player1_front0_y0, player1_front0_x1, player1_front0_y1, 280,144, 1);
    82e4:	00800044 	movi	r2,1
    82e8:	d8800215 	stw	r2,8(sp)
    82ec:	00802404 	movi	r2,144
    82f0:	d8800115 	stw	r2,4(sp)
    82f4:	00804604 	movi	r2,280
    82f8:	d8800015 	stw	r2,0(sp)
    82fc:	01c00704 	movi	r7,28
    8300:	018051c4 	movi	r6,327
    8304:	014000c4 	movi	r5,3
    8308:	01004b84 	movi	r4,302
    830c:	00036040 	call	3604 <draw_driver>
    	draw_driver(player2_front0_x0, player2_front0_y0, player2_front0_x1, player2_front0_y1, 320,144, 1);
    8310:	00800044 	movi	r2,1
    8314:	d8800215 	stw	r2,8(sp)
    8318:	00802404 	movi	r2,144
    831c:	d8800115 	stw	r2,4(sp)
    8320:	00805004 	movi	r2,320
    8324:	d8800015 	stw	r2,0(sp)
    8328:	01c00704 	movi	r7,28
    832c:	01805a44 	movi	r6,361
    8330:	014000c4 	movi	r5,3
    8334:	01005404 	movi	r4,336
    8338:	00036040 	call	3604 <draw_driver>
    }
    Audio_Select('w');
    833c:	01001dc4 	movi	r4,119
    8340:	0002d880 	call	2d88 <Audio_Select>
}
    8344:	0001883a 	nop
    8348:	e037883a 	mov	sp,fp
    834c:	dfc00117 	ldw	ra,4(sp)
    8350:	df000017 	ldw	fp,0(sp)
    8354:	dec00204 	addi	sp,sp,8
    8358:	f800283a 	ret

0000835c <ed>:

//if user presses replay, return 1
//else return 0
int ed(unsigned int keycode[],unsigned int counter){
    835c:	defff904 	addi	sp,sp,-28
    8360:	dfc00615 	stw	ra,24(sp)
    8364:	df000515 	stw	fp,20(sp)
    8368:	df000504 	addi	fp,sp,20
    836c:	e13ffe15 	stw	r4,-8(fp)
    8370:	e17fff15 	stw	r5,-4(fp)
	if(counter%400==0){
    8374:	e0bfff17 	ldw	r2,-4(fp)
    8378:	01406404 	movi	r5,400
    837c:	1009883a 	mov	r4,r2
    8380:	000c6340 	call	c634 <__umodsi3>
    8384:	10000b1e 	bne	r2,zero,83b4 <ed+0x58>
		draw_driver(PETRP_x0,PETRP_y0,PETRP_x1,PETRP_y1,180,300,1);
    8388:	00800044 	movi	r2,1
    838c:	d8800215 	stw	r2,8(sp)
    8390:	00804b04 	movi	r2,300
    8394:	d8800115 	stw	r2,4(sp)
    8398:	00802d04 	movi	r2,180
    839c:	d8800015 	stw	r2,0(sp)
    83a0:	01c07204 	movi	r7,456
    83a4:	01809b84 	movi	r6,622
    83a8:	01406cc4 	movi	r5,435
    83ac:	01005284 	movi	r4,330
    83b0:	00036040 	call	3604 <draw_driver>
	}
	if(counter%400==200){
    83b4:	e0bfff17 	ldw	r2,-4(fp)
    83b8:	01406404 	movi	r5,400
    83bc:	1009883a 	mov	r4,r2
    83c0:	000c6340 	call	c634 <__umodsi3>
    83c4:	10803218 	cmpnei	r2,r2,200
    83c8:	10000b1e 	bne	r2,zero,83f8 <ed+0x9c>
		draw_driver(240,300,240+PETRP_x1-PETRP_x0,300+PETRP_y1-PETRP_y0,180,300,3);
    83cc:	008000c4 	movi	r2,3
    83d0:	d8800215 	stw	r2,8(sp)
    83d4:	00804b04 	movi	r2,300
    83d8:	d8800115 	stw	r2,4(sp)
    83dc:	00802d04 	movi	r2,180
    83e0:	d8800015 	stw	r2,0(sp)
    83e4:	01c05044 	movi	r7,321
    83e8:	01808504 	movi	r6,532
    83ec:	01404b04 	movi	r5,300
    83f0:	01003c04 	movi	r4,240
    83f4:	00036040 	call	3604 <draw_driver>
	}
	if(ENTER_en(keycode)){return 1;}
    83f8:	e13ffe17 	ldw	r4,-8(fp)
    83fc:	000b8140 	call	b814 <ENTER_en>
    8400:	10000226 	beq	r2,zero,840c <ed+0xb0>
    8404:	00800044 	movi	r2,1
    8408:	00000106 	br	8410 <ed+0xb4>
	else{return 0;}
    840c:	0005883a 	mov	r2,zero
}
    8410:	e037883a 	mov	sp,fp
    8414:	dfc00117 	ldw	ra,4(sp)
    8418:	df000017 	ldw	fp,0(sp)
    841c:	dec00204 	addi	sp,sp,8
    8420:	f800283a 	ret

00008424 <shuffle>:
int scoreCompare(player* playerA, player* playerB);

void displayHP(player* playerA, player* playerB);

//from stack overflow
static void shuffle(int *array, int N){
    8424:	defff804 	addi	sp,sp,-32
    8428:	dfc00715 	stw	ra,28(sp)
    842c:	df000615 	stw	fp,24(sp)
    8430:	dc000515 	stw	r16,20(sp)
    8434:	df000604 	addi	fp,sp,24
    8438:	e13ffd15 	stw	r4,-12(fp)
    843c:	e17ffe15 	stw	r5,-8(fp)
	int i;
	for(i=0; i<N-1;i++){
    8440:	e03ffa15 	stw	zero,-24(fp)
    8444:	00003206 	br	8510 <shuffle+0xec>
		int j = i + rand()/(RAND_MAX/(N-i)+1);
    8448:	000e5c00 	call	e5c0 <rand>
    844c:	1021883a 	mov	r16,r2
    8450:	e0fffe17 	ldw	r3,-8(fp)
    8454:	e0bffa17 	ldw	r2,-24(fp)
    8458:	1885c83a 	sub	r2,r3,r2
    845c:	100b883a 	mov	r5,r2
    8460:	01200034 	movhi	r4,32768
    8464:	213fffc4 	addi	r4,r4,-1
    8468:	000c4d80 	call	c4d8 <__divsi3>
    846c:	10800044 	addi	r2,r2,1
    8470:	100b883a 	mov	r5,r2
    8474:	8009883a 	mov	r4,r16
    8478:	000c4d80 	call	c4d8 <__divsi3>
    847c:	1007883a 	mov	r3,r2
    8480:	e0bffa17 	ldw	r2,-24(fp)
    8484:	1885883a 	add	r2,r3,r2
    8488:	e0bffb15 	stw	r2,-20(fp)
		int t = array[j];
    848c:	e0bffb17 	ldw	r2,-20(fp)
    8490:	1085883a 	add	r2,r2,r2
    8494:	1085883a 	add	r2,r2,r2
    8498:	1007883a 	mov	r3,r2
    849c:	e0bffd17 	ldw	r2,-12(fp)
    84a0:	10c5883a 	add	r2,r2,r3
    84a4:	10800017 	ldw	r2,0(r2)
    84a8:	e0bffc15 	stw	r2,-16(fp)
		array[j]=array[i];
    84ac:	e0bffb17 	ldw	r2,-20(fp)
    84b0:	1085883a 	add	r2,r2,r2
    84b4:	1085883a 	add	r2,r2,r2
    84b8:	1007883a 	mov	r3,r2
    84bc:	e0bffd17 	ldw	r2,-12(fp)
    84c0:	10c7883a 	add	r3,r2,r3
    84c4:	e0bffa17 	ldw	r2,-24(fp)
    84c8:	1085883a 	add	r2,r2,r2
    84cc:	1085883a 	add	r2,r2,r2
    84d0:	1009883a 	mov	r4,r2
    84d4:	e0bffd17 	ldw	r2,-12(fp)
    84d8:	1105883a 	add	r2,r2,r4
    84dc:	10800017 	ldw	r2,0(r2)
    84e0:	18800015 	stw	r2,0(r3)
		array[i]=t;
    84e4:	e0bffa17 	ldw	r2,-24(fp)
    84e8:	1085883a 	add	r2,r2,r2
    84ec:	1085883a 	add	r2,r2,r2
    84f0:	1007883a 	mov	r3,r2
    84f4:	e0bffd17 	ldw	r2,-12(fp)
    84f8:	10c5883a 	add	r2,r2,r3
    84fc:	e0fffc17 	ldw	r3,-16(fp)
    8500:	10c00015 	stw	r3,0(r2)
void displayHP(player* playerA, player* playerB);

//from stack overflow
static void shuffle(int *array, int N){
	int i;
	for(i=0; i<N-1;i++){
    8504:	e0bffa17 	ldw	r2,-24(fp)
    8508:	10800044 	addi	r2,r2,1
    850c:	e0bffa15 	stw	r2,-24(fp)
    8510:	e0bffe17 	ldw	r2,-8(fp)
    8514:	10bfffc4 	addi	r2,r2,-1
    8518:	e0fffa17 	ldw	r3,-24(fp)
    851c:	18bfca16 	blt	r3,r2,8448 <__alt_data_end+0xf8008448>
		int j = i + rand()/(RAND_MAX/(N-i)+1);
		int t = array[j];
		array[j]=array[i];
		array[i]=t;
	}
}
    8520:	0001883a 	nop
    8524:	e6ffff04 	addi	sp,fp,-4
    8528:	dfc00217 	ldw	ra,8(sp)
    852c:	df000117 	ldw	fp,4(sp)
    8530:	dc000017 	ldw	r16,0(sp)
    8534:	dec00304 	addi	sp,sp,12
    8538:	f800283a 	ret

0000853c <game>:
static clock_t begin;
static int currentSec=180;
static size_t beginFlag=1;
static size_t bgmFlag=1;

int game(unsigned int keycode[]){
    853c:	defff604 	addi	sp,sp,-40
    8540:	dfc00915 	stw	ra,36(sp)
    8544:	df000815 	stw	fp,32(sp)
    8548:	df000804 	addi	fp,sp,32
    854c:	e13fff15 	stw	r4,-4(fp)

	//part 0: update time
    if(beginFlag){beginFlag=0;begin=clock();currentSec=180;}
    8550:	d0a00617 	ldw	r2,-32744(gp)
    8554:	10000626 	beq	r2,zero,8570 <game+0x34>
    8558:	d0200615 	stw	zero,-32744(gp)
    855c:	000dbe80 	call	dbe8 <clock>
    8560:	d0a6fc15 	stw	r2,-25616(gp)
    8564:	00802d04 	movi	r2,180
    8568:	d0a00515 	stw	r2,-32748(gp)
    856c:	00001e06 	br	85e8 <game+0xac>
    else if(currentSec>0){
    8570:	d0a00517 	ldw	r2,-32748(gp)
    8574:	00801c0e 	bge	zero,r2,85e8 <game+0xac>
    	double time_spent = (double)(clock()-begin)/CLOCKS_PER_SEC;
    8578:	000dbe80 	call	dbe8 <clock>
    857c:	1007883a 	mov	r3,r2
    8580:	d0a6fc17 	ldw	r2,-25616(gp)
    8584:	1885c83a 	sub	r2,r3,r2
    8588:	1009883a 	mov	r4,r2
    858c:	000dadc0 	call	dadc <__floatunsidf>
    8590:	1011883a 	mov	r8,r2
    8594:	1813883a 	mov	r9,r3
    8598:	000d883a 	mov	r6,zero
    859c:	01d023f4 	movhi	r7,16527
    85a0:	39d00004 	addi	r7,r7,16384
    85a4:	4009883a 	mov	r4,r8
    85a8:	480b883a 	mov	r5,r9
    85ac:	000c6b40 	call	c6b4 <__divdf3>
    85b0:	1009883a 	mov	r4,r2
    85b4:	180b883a 	mov	r5,r3
    85b8:	e13ffb15 	stw	r4,-20(fp)
    85bc:	e17ffc15 	stw	r5,-16(fp)
    	currentSec = 180 - (unsigned int)time_spent;
    85c0:	e13ffb17 	ldw	r4,-20(fp)
    85c4:	e17ffc17 	ldw	r5,-16(fp)
    85c8:	000c4640 	call	c464 <__fixunsdfsi>
    85cc:	1007883a 	mov	r3,r2
    85d0:	00802d04 	movi	r2,180
    85d4:	10c5c83a 	sub	r2,r2,r3
    85d8:	d0a00515 	stw	r2,-32748(gp)
    	displayTime(currentSec);
    85dc:	d0a00517 	ldw	r2,-32748(gp)
    85e0:	1009883a 	mov	r4,r2
    85e4:	00005740 	call	574 <displayTime>
    }
    //part 0.5: change BGM?
    if(bgmFlag && (currentSec <90 || player1.HP<2 || player2.HP<2)){Audio_Select('2');bgmFlag =0;}
    85e8:	d0a00717 	ldw	r2,-32740(gp)
    85ec:	10001226 	beq	r2,zero,8638 <game+0xfc>
    85f0:	d0a00517 	ldw	r2,-32748(gp)
    85f4:	10801690 	cmplti	r2,r2,90
    85f8:	10000c1e 	bne	r2,zero,862c <game+0xf0>
    85fc:	008000b4 	movhi	r2,2
    8600:	10b2fe04 	addi	r2,r2,-13320
    8604:	1080018b 	ldhu	r2,6(r2)
    8608:	10bfffcc 	andi	r2,r2,65535
    860c:	108000b0 	cmpltui	r2,r2,2
    8610:	1000061e 	bne	r2,zero,862c <game+0xf0>
    8614:	008000b4 	movhi	r2,2
    8618:	10b30704 	addi	r2,r2,-13284
    861c:	1080018b 	ldhu	r2,6(r2)
    8620:	10bfffcc 	andi	r2,r2,65535
    8624:	108000a8 	cmpgeui	r2,r2,2
    8628:	1000031e 	bne	r2,zero,8638 <game+0xfc>
    862c:	01000c84 	movi	r4,50
    8630:	0002d880 	call	2d88 <Audio_Select>
    8634:	d0200715 	stw	zero,-32740(gp)
	//part 1: update bomb and coins
	UpdateBomb(&player1, &player2);
    8638:	014000b4 	movhi	r5,2
    863c:	29730704 	addi	r5,r5,-13284
    8640:	010000b4 	movhi	r4,2
    8644:	2132fe04 	addi	r4,r4,-13320
    8648:	000a2200 	call	a220 <UpdateBomb>
    UpdateCoins(&coinHead, &coinTail, &stage);
    864c:	d1a6f904 	addi	r6,gp,-25628
    8650:	d166fb04 	addi	r5,gp,-25620
    8654:	d126fa04 	addi	r4,gp,-25624
    8658:	00034ac0 	call	34ac <UpdateCoins>
    if(player1.bombTimingCounter!=0){player1.bombTimingCounter--;}
    865c:	008000b4 	movhi	r2,2
    8660:	10b2fe04 	addi	r2,r2,-13320
    8664:	1080068b 	ldhu	r2,26(r2)
    8668:	10bfffcc 	andi	r2,r2,65535
    866c:	10a0001c 	xori	r2,r2,32768
    8670:	10a00004 	addi	r2,r2,-32768
    8674:	10000826 	beq	r2,zero,8698 <game+0x15c>
    8678:	008000b4 	movhi	r2,2
    867c:	10b2fe04 	addi	r2,r2,-13320
    8680:	1080068b 	ldhu	r2,26(r2)
    8684:	10bfffc4 	addi	r2,r2,-1
    8688:	1007883a 	mov	r3,r2
    868c:	008000b4 	movhi	r2,2
    8690:	10b2fe04 	addi	r2,r2,-13320
    8694:	10c0068d 	sth	r3,26(r2)
    if(player2.bombTimingCounter!=0){player2.bombTimingCounter--;}
    8698:	008000b4 	movhi	r2,2
    869c:	10b30704 	addi	r2,r2,-13284
    86a0:	1080068b 	ldhu	r2,26(r2)
    86a4:	10bfffcc 	andi	r2,r2,65535
    86a8:	10a0001c 	xori	r2,r2,32768
    86ac:	10a00004 	addi	r2,r2,-32768
    86b0:	10000826 	beq	r2,zero,86d4 <game+0x198>
    86b4:	008000b4 	movhi	r2,2
    86b8:	10b30704 	addi	r2,r2,-13284
    86bc:	1080068b 	ldhu	r2,26(r2)
    86c0:	10bfffc4 	addi	r2,r2,-1
    86c4:	1007883a 	mov	r3,r2
    86c8:	008000b4 	movhi	r2,2
    86cc:	10b30704 	addi	r2,r2,-13284
    86d0:	10c0068d 	sth	r3,26(r2)
    //part 2: player catch coins?
    unsigned int player1get = getCoins(player1.x, player1.y, &coinHead, &coinTail, &stage);
    86d4:	008000b4 	movhi	r2,2
    86d8:	10b2fe04 	addi	r2,r2,-13320
    86dc:	1080008b 	ldhu	r2,2(r2)
    86e0:	10ffffcc 	andi	r3,r2,65535
    86e4:	008000b4 	movhi	r2,2
    86e8:	10b2fe04 	addi	r2,r2,-13320
    86ec:	1080010b 	ldhu	r2,4(r2)
    86f0:	113fffcc 	andi	r4,r2,65535
    86f4:	d0a6f904 	addi	r2,gp,-25628
    86f8:	d8800015 	stw	r2,0(sp)
    86fc:	d1e6fb04 	addi	r7,gp,-25620
    8700:	d1a6fa04 	addi	r6,gp,-25624
    8704:	200b883a 	mov	r5,r4
    8708:	1809883a 	mov	r4,r3
    870c:	00030040 	call	3004 <getCoins>
    8710:	e0bffd15 	stw	r2,-12(fp)

    unsigned int player2get = getCoins(player2.x, player2.y, &coinHead, &coinTail, &stage);
    8714:	008000b4 	movhi	r2,2
    8718:	10b30704 	addi	r2,r2,-13284
    871c:	1080008b 	ldhu	r2,2(r2)
    8720:	10ffffcc 	andi	r3,r2,65535
    8724:	008000b4 	movhi	r2,2
    8728:	10b30704 	addi	r2,r2,-13284
    872c:	1080010b 	ldhu	r2,4(r2)
    8730:	113fffcc 	andi	r4,r2,65535
    8734:	d0a6f904 	addi	r2,gp,-25628
    8738:	d8800015 	stw	r2,0(sp)
    873c:	d1e6fb04 	addi	r7,gp,-25620
    8740:	d1a6fa04 	addi	r6,gp,-25624
    8744:	200b883a 	mov	r5,r4
    8748:	1809883a 	mov	r4,r3
    874c:	00030040 	call	3004 <getCoins>
    8750:	e0bffe15 	stw	r2,-8(fp)

    if (player1get){
    8754:	e0bffd17 	ldw	r2,-12(fp)
    8758:	10000f26 	beq	r2,zero,8798 <game+0x25c>
    	printf("player1's score is %d\n", player1.score);
    875c:	008000b4 	movhi	r2,2
    8760:	10b2fe04 	addi	r2,r2,-13320
    8764:	10800317 	ldw	r2,12(r2)
    8768:	100b883a 	mov	r5,r2
    876c:	010000b4 	movhi	r4,2
    8770:	21322004 	addi	r4,r4,-14208
    8774:	000e4980 	call	e498 <printf>
    	player1.score += player1get;
    8778:	008000b4 	movhi	r2,2
    877c:	10b2fe04 	addi	r2,r2,-13320
    8780:	10c00317 	ldw	r3,12(r2)
    8784:	e0bffd17 	ldw	r2,-12(fp)
    8788:	1887883a 	add	r3,r3,r2
    878c:	008000b4 	movhi	r2,2
    8790:	10b2fe04 	addi	r2,r2,-13320
    8794:	10c00315 	stw	r3,12(r2)
    }

    if (player2get){
    8798:	e0bffe17 	ldw	r2,-8(fp)
    879c:	10000f26 	beq	r2,zero,87dc <game+0x2a0>
    	printf("player2's score is %d\n", player2.score);
    87a0:	008000b4 	movhi	r2,2
    87a4:	10b30704 	addi	r2,r2,-13284
    87a8:	10800317 	ldw	r2,12(r2)
    87ac:	100b883a 	mov	r5,r2
    87b0:	010000b4 	movhi	r4,2
    87b4:	21322604 	addi	r4,r4,-14184
    87b8:	000e4980 	call	e498 <printf>
    	player2.score += player2get;
    87bc:	008000b4 	movhi	r2,2
    87c0:	10b30704 	addi	r2,r2,-13284
    87c4:	10c00317 	ldw	r3,12(r2)
    87c8:	e0bffe17 	ldw	r2,-8(fp)
    87cc:	1887883a 	add	r3,r3,r2
    87d0:	008000b4 	movhi	r2,2
    87d4:	10b30704 	addi	r2,r2,-13284
    87d8:	10c00315 	stw	r3,12(r2)
    }

    displayScore(&player1, &player2);
    87dc:	014000b4 	movhi	r5,2
    87e0:	29730704 	addi	r5,r5,-13284
    87e4:	010000b4 	movhi	r4,2
    87e8:	2132fe04 	addi	r4,r4,-13320
    87ec:	00004840 	call	484 <displayScore>

	//part 3A: player1 key control
	if(player1.HPbuffer<250){
    87f0:	008000b4 	movhi	r2,2
    87f4:	10b2fe04 	addi	r2,r2,-13320
    87f8:	1080020b 	ldhu	r2,8(r2)
    87fc:	10bfffcc 	andi	r2,r2,65535
    8800:	10803ea8 	cmpgeui	r2,r2,250
    8804:	1000641e 	bne	r2,zero,8998 <game+0x45c>
		unsigned int flag = 0;
    8808:	e03ff915 	stw	zero,-28(fp)
		if(W_en(keycode)){move(&player1, &player2, 0);flag=1;}
    880c:	e13fff17 	ldw	r4,-4(fp)
    8810:	000b10c0 	call	b10c <W_en>
    8814:	10000826 	beq	r2,zero,8838 <game+0x2fc>
    8818:	000d883a 	mov	r6,zero
    881c:	014000b4 	movhi	r5,2
    8820:	29730704 	addi	r5,r5,-13284
    8824:	010000b4 	movhi	r4,2
    8828:	2132fe04 	addi	r4,r4,-13320
    882c:	000921c0 	call	921c <move>
    8830:	00800044 	movi	r2,1
    8834:	e0bff915 	stw	r2,-28(fp)
		if(S_en(keycode)){move(&player1, &player2, 1);flag=1;}
    8838:	e13fff17 	ldw	r4,-4(fp)
    883c:	000b1d40 	call	b1d4 <S_en>
    8840:	10000826 	beq	r2,zero,8864 <game+0x328>
    8844:	01800044 	movi	r6,1
    8848:	014000b4 	movhi	r5,2
    884c:	29730704 	addi	r5,r5,-13284
    8850:	010000b4 	movhi	r4,2
    8854:	2132fe04 	addi	r4,r4,-13320
    8858:	000921c0 	call	921c <move>
    885c:	00800044 	movi	r2,1
    8860:	e0bff915 	stw	r2,-28(fp)
		if(A_en(keycode)){move(&player1, &player2, 2);flag=1;}
    8864:	e13fff17 	ldw	r4,-4(fp)
    8868:	000b29c0 	call	b29c <A_en>
    886c:	10000826 	beq	r2,zero,8890 <game+0x354>
    8870:	01800084 	movi	r6,2
    8874:	014000b4 	movhi	r5,2
    8878:	29730704 	addi	r5,r5,-13284
    887c:	010000b4 	movhi	r4,2
    8880:	2132fe04 	addi	r4,r4,-13320
    8884:	000921c0 	call	921c <move>
    8888:	00800044 	movi	r2,1
    888c:	e0bff915 	stw	r2,-28(fp)
		if(D_en(keycode)){move(&player1, &player2, 3);flag=1;}
    8890:	e13fff17 	ldw	r4,-4(fp)
    8894:	000b3640 	call	b364 <D_en>
    8898:	10000826 	beq	r2,zero,88bc <game+0x380>
    889c:	018000c4 	movi	r6,3
    88a0:	014000b4 	movhi	r5,2
    88a4:	29730704 	addi	r5,r5,-13284
    88a8:	010000b4 	movhi	r4,2
    88ac:	2132fe04 	addi	r4,r4,-13320
    88b0:	000921c0 	call	921c <move>
    88b4:	00800044 	movi	r2,1
    88b8:	e0bff915 	stw	r2,-28(fp)
		if(SPACE_en(keycode)){
    88bc:	e13fff17 	ldw	r4,-4(fp)
    88c0:	000b74c0 	call	b74c <SPACE_en>
    88c4:	10001726 	beq	r2,zero,8924 <game+0x3e8>
			placeBomb(&player1, &player2);
    88c8:	014000b4 	movhi	r5,2
    88cc:	29730704 	addi	r5,r5,-13284
    88d0:	010000b4 	movhi	r4,2
    88d4:	2132fe04 	addi	r4,r4,-13320
    88d8:	0009b8c0 	call	9b8c <placeBomb>
			cleanPlayer(&player1);
    88dc:	010000b4 	movhi	r4,2
    88e0:	2132fe04 	addi	r4,r4,-13320
    88e4:	0003a840 	call	3a84 <cleanPlayer>
			drawPlayer(player1.lastMove, &player1,0);
    88e8:	008000b4 	movhi	r2,2
    88ec:	10b2fe04 	addi	r2,r2,-13320
    88f0:	1080070b 	ldhu	r2,28(r2)
    88f4:	10bfffcc 	andi	r2,r2,65535
    88f8:	000d883a 	mov	r6,zero
    88fc:	014000b4 	movhi	r5,2
    8900:	2972fe04 	addi	r5,r5,-13320
    8904:	1009883a 	mov	r4,r2
    8908:	0003b500 	call	3b50 <drawPlayer>
			player1.anyAction =1;
    890c:	008000b4 	movhi	r2,2
    8910:	10b2fe04 	addi	r2,r2,-13320
    8914:	00c00044 	movi	r3,1
    8918:	10c0080d 	sth	r3,32(r2)
			flag=1;
    891c:	00800044 	movi	r2,1
    8920:	e0bff915 	stw	r2,-28(fp)
		}
		if(!flag && player1.anyAction==1){
    8924:	e0bff917 	ldw	r2,-28(fp)
    8928:	1000221e 	bne	r2,zero,89b4 <game+0x478>
    892c:	008000b4 	movhi	r2,2
    8930:	10b2fe04 	addi	r2,r2,-13320
    8934:	1080080b 	ldhu	r2,32(r2)
    8938:	10bfffcc 	andi	r2,r2,65535
    893c:	10800058 	cmpnei	r2,r2,1
    8940:	10001c1e 	bne	r2,zero,89b4 <game+0x478>
			if(player1.HPbuffer==0){
    8944:	008000b4 	movhi	r2,2
    8948:	10b2fe04 	addi	r2,r2,-13320
    894c:	1080020b 	ldhu	r2,8(r2)
    8950:	10bfffcc 	andi	r2,r2,65535
    8954:	1000031e 	bne	r2,zero,8964 <game+0x428>
				player1.anyAction =0;
    8958:	008000b4 	movhi	r2,2
    895c:	10b2fe04 	addi	r2,r2,-13320
    8960:	1000080d 	sth	zero,32(r2)
			}
			cleanPlayer(&player1);
    8964:	010000b4 	movhi	r4,2
    8968:	2132fe04 	addi	r4,r4,-13320
    896c:	0003a840 	call	3a84 <cleanPlayer>
			drawPlayer(player1.lastMove, &player1,0);
    8970:	008000b4 	movhi	r2,2
    8974:	10b2fe04 	addi	r2,r2,-13320
    8978:	1080070b 	ldhu	r2,28(r2)
    897c:	10bfffcc 	andi	r2,r2,65535
    8980:	000d883a 	mov	r6,zero
    8984:	014000b4 	movhi	r5,2
    8988:	2972fe04 	addi	r5,r5,-13320
    898c:	1009883a 	mov	r4,r2
    8990:	0003b500 	call	3b50 <drawPlayer>
    8994:	00000706 	br	89b4 <game+0x478>
		}
	}
	else{
		drawPlayerHurt(&player1);
    8998:	010000b4 	movhi	r4,2
    899c:	2132fe04 	addi	r4,r4,-13320
    89a0:	00043100 	call	4310 <drawPlayerHurt>
		player1.anyAction =1;
    89a4:	008000b4 	movhi	r2,2
    89a8:	10b2fe04 	addi	r2,r2,-13320
    89ac:	00c00044 	movi	r3,1
    89b0:	10c0080d 	sth	r3,32(r2)
	}
	//part 3B: player2 key control
	if(player2.HPbuffer<250){
    89b4:	008000b4 	movhi	r2,2
    89b8:	10b30704 	addi	r2,r2,-13284
    89bc:	1080020b 	ldhu	r2,8(r2)
    89c0:	10bfffcc 	andi	r2,r2,65535
    89c4:	10803ea8 	cmpgeui	r2,r2,250
    89c8:	1000641e 	bne	r2,zero,8b5c <game+0x620>
		unsigned int flag = 0;
    89cc:	e03ffa15 	stw	zero,-24(fp)
		if(UP_en(keycode))   {move(&player2,&player1, 0);flag=1;}
    89d0:	e13fff17 	ldw	r4,-4(fp)
    89d4:	000b42c0 	call	b42c <UP_en>
    89d8:	10000826 	beq	r2,zero,89fc <game+0x4c0>
    89dc:	000d883a 	mov	r6,zero
    89e0:	014000b4 	movhi	r5,2
    89e4:	2972fe04 	addi	r5,r5,-13320
    89e8:	010000b4 	movhi	r4,2
    89ec:	21330704 	addi	r4,r4,-13284
    89f0:	000921c0 	call	921c <move>
    89f4:	00800044 	movi	r2,1
    89f8:	e0bffa15 	stw	r2,-24(fp)
	    if(DOWN_en(keycode)) {move(&player2,&player1, 1);flag=1;}
    89fc:	e13fff17 	ldw	r4,-4(fp)
    8a00:	000b4f40 	call	b4f4 <DOWN_en>
    8a04:	10000826 	beq	r2,zero,8a28 <game+0x4ec>
    8a08:	01800044 	movi	r6,1
    8a0c:	014000b4 	movhi	r5,2
    8a10:	2972fe04 	addi	r5,r5,-13320
    8a14:	010000b4 	movhi	r4,2
    8a18:	21330704 	addi	r4,r4,-13284
    8a1c:	000921c0 	call	921c <move>
    8a20:	00800044 	movi	r2,1
    8a24:	e0bffa15 	stw	r2,-24(fp)
		if(LEFT_en(keycode)) {move(&player2,&player1, 2);flag=1;}
    8a28:	e13fff17 	ldw	r4,-4(fp)
    8a2c:	000b5bc0 	call	b5bc <LEFT_en>
    8a30:	10000826 	beq	r2,zero,8a54 <game+0x518>
    8a34:	01800084 	movi	r6,2
    8a38:	014000b4 	movhi	r5,2
    8a3c:	2972fe04 	addi	r5,r5,-13320
    8a40:	010000b4 	movhi	r4,2
    8a44:	21330704 	addi	r4,r4,-13284
    8a48:	000921c0 	call	921c <move>
    8a4c:	00800044 	movi	r2,1
    8a50:	e0bffa15 	stw	r2,-24(fp)
		if(RIGHT_en(keycode)){move(&player2,&player1, 3);flag=1;}
    8a54:	e13fff17 	ldw	r4,-4(fp)
    8a58:	000b6840 	call	b684 <RIGHT_en>
    8a5c:	10000826 	beq	r2,zero,8a80 <game+0x544>
    8a60:	018000c4 	movi	r6,3
    8a64:	014000b4 	movhi	r5,2
    8a68:	2972fe04 	addi	r5,r5,-13320
    8a6c:	010000b4 	movhi	r4,2
    8a70:	21330704 	addi	r4,r4,-13284
    8a74:	000921c0 	call	921c <move>
    8a78:	00800044 	movi	r2,1
    8a7c:	e0bffa15 	stw	r2,-24(fp)
		if(ENTER_en(keycode)){
    8a80:	e13fff17 	ldw	r4,-4(fp)
    8a84:	000b8140 	call	b814 <ENTER_en>
    8a88:	10001726 	beq	r2,zero,8ae8 <game+0x5ac>
			placeBomb(&player2, &player1);
    8a8c:	014000b4 	movhi	r5,2
    8a90:	2972fe04 	addi	r5,r5,-13320
    8a94:	010000b4 	movhi	r4,2
    8a98:	21330704 	addi	r4,r4,-13284
    8a9c:	0009b8c0 	call	9b8c <placeBomb>
			cleanPlayer(&player2);
    8aa0:	010000b4 	movhi	r4,2
    8aa4:	21330704 	addi	r4,r4,-13284
    8aa8:	0003a840 	call	3a84 <cleanPlayer>
			drawPlayer(player2.lastMove, &player2,0);
    8aac:	008000b4 	movhi	r2,2
    8ab0:	10b30704 	addi	r2,r2,-13284
    8ab4:	1080070b 	ldhu	r2,28(r2)
    8ab8:	10bfffcc 	andi	r2,r2,65535
    8abc:	000d883a 	mov	r6,zero
    8ac0:	014000b4 	movhi	r5,2
    8ac4:	29730704 	addi	r5,r5,-13284
    8ac8:	1009883a 	mov	r4,r2
    8acc:	0003b500 	call	3b50 <drawPlayer>
			player2.anyAction =1;
    8ad0:	008000b4 	movhi	r2,2
    8ad4:	10b30704 	addi	r2,r2,-13284
    8ad8:	00c00044 	movi	r3,1
    8adc:	10c0080d 	sth	r3,32(r2)
			flag=1;
    8ae0:	00800044 	movi	r2,1
    8ae4:	e0bffa15 	stw	r2,-24(fp)
		}
		if(!flag && player2.anyAction==1){
    8ae8:	e0bffa17 	ldw	r2,-24(fp)
    8aec:	1000221e 	bne	r2,zero,8b78 <game+0x63c>
    8af0:	008000b4 	movhi	r2,2
    8af4:	10b30704 	addi	r2,r2,-13284
    8af8:	1080080b 	ldhu	r2,32(r2)
    8afc:	10bfffcc 	andi	r2,r2,65535
    8b00:	10800058 	cmpnei	r2,r2,1
    8b04:	10001c1e 	bne	r2,zero,8b78 <game+0x63c>
			if(player2.HPbuffer==0){
    8b08:	008000b4 	movhi	r2,2
    8b0c:	10b30704 	addi	r2,r2,-13284
    8b10:	1080020b 	ldhu	r2,8(r2)
    8b14:	10bfffcc 	andi	r2,r2,65535
    8b18:	1000031e 	bne	r2,zero,8b28 <game+0x5ec>
				player2.anyAction =0;
    8b1c:	008000b4 	movhi	r2,2
    8b20:	10b30704 	addi	r2,r2,-13284
    8b24:	1000080d 	sth	zero,32(r2)
			}
			cleanPlayer(&player2);
    8b28:	010000b4 	movhi	r4,2
    8b2c:	21330704 	addi	r4,r4,-13284
    8b30:	0003a840 	call	3a84 <cleanPlayer>
			drawPlayer(player2.lastMove, &player2,0);
    8b34:	008000b4 	movhi	r2,2
    8b38:	10b30704 	addi	r2,r2,-13284
    8b3c:	1080070b 	ldhu	r2,28(r2)
    8b40:	10bfffcc 	andi	r2,r2,65535
    8b44:	000d883a 	mov	r6,zero
    8b48:	014000b4 	movhi	r5,2
    8b4c:	29730704 	addi	r5,r5,-13284
    8b50:	1009883a 	mov	r4,r2
    8b54:	0003b500 	call	3b50 <drawPlayer>
    8b58:	00000706 	br	8b78 <game+0x63c>
		}
	}
	else{
		drawPlayerHurt(&player2);
    8b5c:	010000b4 	movhi	r4,2
    8b60:	21330704 	addi	r4,r4,-13284
    8b64:	00043100 	call	4310 <drawPlayerHurt>
		player2.anyAction =1;
    8b68:	008000b4 	movhi	r2,2
    8b6c:	10b30704 	addi	r2,r2,-13284
    8b70:	00c00044 	movi	r3,1
    8b74:	10c0080d 	sth	r3,32(r2)
	}
	//part 4A: time check
	if(currentSec <=0){
    8b78:	d0a00517 	ldw	r2,-32748(gp)
    8b7c:	00800616 	blt	zero,r2,8b98 <game+0x65c>
		return scoreCompare(&player1, &player2);
    8b80:	014000b4 	movhi	r5,2
    8b84:	29730704 	addi	r5,r5,-13284
    8b88:	010000b4 	movhi	r4,2
    8b8c:	2132fe04 	addi	r4,r4,-13320
    8b90:	000a82c0 	call	a82c <scoreCompare>
    8b94:	00000506 	br	8bac <game+0x670>
	}
	//part 4B: HP check
	return HPcheck(&player1, &player2);
    8b98:	014000b4 	movhi	r5,2
    8b9c:	29730704 	addi	r5,r5,-13284
    8ba0:	010000b4 	movhi	r4,2
    8ba4:	2132fe04 	addi	r4,r4,-13320
    8ba8:	000a6580 	call	a658 <HPcheck>

}
    8bac:	e037883a 	mov	sp,fp
    8bb0:	dfc00117 	ldw	ra,4(sp)
    8bb4:	df000017 	ldw	fp,0(sp)
    8bb8:	dec00204 	addi	sp,sp,8
    8bbc:	f800283a 	ret

00008bc0 <initStage>:


void initStage(){
    8bc0:	deffe504 	addi	sp,sp,-108
    8bc4:	dfc01a15 	stw	ra,104(sp)
    8bc8:	df001915 	stw	fp,100(sp)
    8bcc:	dc001815 	stw	r16,96(sp)
    8bd0:	df001904 	addi	fp,sp,100

	draw_driver(0,0,639,479,0,0,0);
    8bd4:	d8000215 	stw	zero,8(sp)
    8bd8:	d8000115 	stw	zero,4(sp)
    8bdc:	d8000015 	stw	zero,0(sp)
    8be0:	01c077c4 	movi	r7,479
    8be4:	01809fc4 	movi	r6,639
    8be8:	000b883a 	mov	r5,zero
    8bec:	0009883a 	mov	r4,zero
    8bf0:	00036040 	call	3604 <draw_driver>
	stage = (cell**)malloc(20*sizeof(cell*));
    8bf4:	01001404 	movi	r4,80
    8bf8:	000dc340 	call	dc34 <malloc>
    8bfc:	d0a6f915 	stw	r2,-25628(gp)
	for(int i=0; i<20; i++){
    8c00:	e03fea15 	stw	zero,-88(fp)
    8c04:	00000b06 	br	8c34 <initStage+0x74>
		stage[i] = (cell*)malloc(15*sizeof(cell));
    8c08:	d0e6f917 	ldw	r3,-25628(gp)
    8c0c:	e0bfea17 	ldw	r2,-88(fp)
    8c10:	1085883a 	add	r2,r2,r2
    8c14:	1085883a 	add	r2,r2,r2
    8c18:	18a1883a 	add	r16,r3,r2
    8c1c:	01001e04 	movi	r4,120
    8c20:	000dc340 	call	dc34 <malloc>
    8c24:	80800015 	stw	r2,0(r16)

void initStage(){

	draw_driver(0,0,639,479,0,0,0);
	stage = (cell**)malloc(20*sizeof(cell*));
	for(int i=0; i<20; i++){
    8c28:	e0bfea17 	ldw	r2,-88(fp)
    8c2c:	10800044 	addi	r2,r2,1
    8c30:	e0bfea15 	stw	r2,-88(fp)
    8c34:	e0bfea17 	ldw	r2,-88(fp)
    8c38:	10800510 	cmplti	r2,r2,20
    8c3c:	103ff21e 	bne	r2,zero,8c08 <__alt_data_end+0xf8008c08>
		stage[i] = (cell*)malloc(15*sizeof(cell));
	}
	//generate a random stage
	//randomly generate walls for each 4*3 block
	srand(clock());
    8c40:	000dbe80 	call	dbe8 <clock>
    8c44:	1009883a 	mov	r4,r2
    8c48:	000e5a80 	call	e5a8 <srand>
	for(int i=0; i<5; i++){
    8c4c:	e03feb15 	stw	zero,-84(fp)
    8c50:	00009006 	br	8e94 <initStage+0x2d4>
		for(int j=0; j<5; j++){
    8c54:	e03fec15 	stw	zero,-80(fp)
    8c58:	00008806 	br	8e7c <initStage+0x2bc>
			int arr[12]={0,1,2,3,10,11,12,13,20,21,22,23};
    8c5c:	e03ff315 	stw	zero,-52(fp)
    8c60:	00800044 	movi	r2,1
    8c64:	e0bff415 	stw	r2,-48(fp)
    8c68:	00800084 	movi	r2,2
    8c6c:	e0bff515 	stw	r2,-44(fp)
    8c70:	008000c4 	movi	r2,3
    8c74:	e0bff615 	stw	r2,-40(fp)
    8c78:	00800284 	movi	r2,10
    8c7c:	e0bff715 	stw	r2,-36(fp)
    8c80:	008002c4 	movi	r2,11
    8c84:	e0bff815 	stw	r2,-32(fp)
    8c88:	00800304 	movi	r2,12
    8c8c:	e0bff915 	stw	r2,-28(fp)
    8c90:	00800344 	movi	r2,13
    8c94:	e0bffa15 	stw	r2,-24(fp)
    8c98:	00800504 	movi	r2,20
    8c9c:	e0bffb15 	stw	r2,-20(fp)
    8ca0:	00800544 	movi	r2,21
    8ca4:	e0bffc15 	stw	r2,-16(fp)
    8ca8:	00800584 	movi	r2,22
    8cac:	e0bffd15 	stw	r2,-12(fp)
    8cb0:	008005c4 	movi	r2,23
    8cb4:	e0bffe15 	stw	r2,-8(fp)
			shuffle(arr, 12);
    8cb8:	e0bff304 	addi	r2,fp,-52
    8cbc:	01400304 	movi	r5,12
    8cc0:	1009883a 	mov	r4,r2
    8cc4:	00084240 	call	8424 <shuffle>
			for(int count = 0; count<12; count++){
    8cc8:	e03fed15 	stw	zero,-76(fp)
    8ccc:	00006506 	br	8e64 <initStage+0x2a4>
				int randCell = arr[count];
    8cd0:	e0bfed17 	ldw	r2,-76(fp)
    8cd4:	1085883a 	add	r2,r2,r2
    8cd8:	1085883a 	add	r2,r2,r2
    8cdc:	e0ffea04 	addi	r3,fp,-88
    8ce0:	1885883a 	add	r2,r3,r2
    8ce4:	10800904 	addi	r2,r2,36
    8ce8:	10800017 	ldw	r2,0(r2)
    8cec:	e0bfee15 	stw	r2,-72(fp)
				int offsetY = randCell/10;
    8cf0:	e0bfee17 	ldw	r2,-72(fp)
    8cf4:	01400284 	movi	r5,10
    8cf8:	1009883a 	mov	r4,r2
    8cfc:	000c4d80 	call	c4d8 <__divsi3>
    8d00:	e0bfef15 	stw	r2,-68(fp)
				int offsetX = randCell - offsetY*10;
    8d04:	017ffd84 	movi	r5,-10
    8d08:	e13fef17 	ldw	r4,-68(fp)
    8d0c:	000c68c0 	call	c68c <__mulsi3>
    8d10:	1007883a 	mov	r3,r2
    8d14:	e0bfee17 	ldw	r2,-72(fp)
    8d18:	1885883a 	add	r2,r3,r2
    8d1c:	e0bff015 	stw	r2,-64(fp)
				int X = i*4+offsetX;
    8d20:	e0bfeb17 	ldw	r2,-84(fp)
    8d24:	1085883a 	add	r2,r2,r2
    8d28:	1085883a 	add	r2,r2,r2
    8d2c:	1007883a 	mov	r3,r2
    8d30:	e0bff017 	ldw	r2,-64(fp)
    8d34:	1885883a 	add	r2,r3,r2
    8d38:	e0bff115 	stw	r2,-60(fp)
				int Y = j*3+offsetY;
    8d3c:	e0ffec17 	ldw	r3,-80(fp)
    8d40:	1805883a 	mov	r2,r3
    8d44:	1085883a 	add	r2,r2,r2
    8d48:	10c7883a 	add	r3,r2,r3
    8d4c:	e0bfef17 	ldw	r2,-68(fp)
    8d50:	1885883a 	add	r2,r3,r2
    8d54:	e0bff215 	stw	r2,-56(fp)
				if(count < 3){
    8d58:	e0bfed17 	ldw	r2,-76(fp)
    8d5c:	108000c8 	cmpgei	r2,r2,3
    8d60:	10000b1e 	bne	r2,zero,8d90 <initStage+0x1d0>
					stage[X][Y].type=0;
    8d64:	d0e6f917 	ldw	r3,-25628(gp)
    8d68:	e0bff117 	ldw	r2,-60(fp)
    8d6c:	1085883a 	add	r2,r2,r2
    8d70:	1085883a 	add	r2,r2,r2
    8d74:	1885883a 	add	r2,r3,r2
    8d78:	10c00017 	ldw	r3,0(r2)
    8d7c:	e0bff217 	ldw	r2,-56(fp)
    8d80:	100490fa 	slli	r2,r2,3
    8d84:	1885883a 	add	r2,r3,r2
    8d88:	1000000d 	sth	zero,0(r2)
    8d8c:	00003206 	br	8e58 <initStage+0x298>
				}
				else if (count<6){
    8d90:	e0bfed17 	ldw	r2,-76(fp)
    8d94:	10800188 	cmpgei	r2,r2,6
    8d98:	1000181e 	bne	r2,zero,8dfc <initStage+0x23c>
					if(!((X<2&&Y<2)||(X>=18&&Y>=13))){
    8d9c:	e0bff117 	ldw	r2,-60(fp)
    8da0:	10800088 	cmpgei	r2,r2,2
    8da4:	1000031e 	bne	r2,zero,8db4 <initStage+0x1f4>
    8da8:	e0bff217 	ldw	r2,-56(fp)
    8dac:	10800090 	cmplti	r2,r2,2
    8db0:	1000291e 	bne	r2,zero,8e58 <initStage+0x298>
    8db4:	e0bff117 	ldw	r2,-60(fp)
    8db8:	10800490 	cmplti	r2,r2,18
    8dbc:	1000031e 	bne	r2,zero,8dcc <initStage+0x20c>
    8dc0:	e0bff217 	ldw	r2,-56(fp)
    8dc4:	10800348 	cmpgei	r2,r2,13
    8dc8:	1000231e 	bne	r2,zero,8e58 <initStage+0x298>
						drawSolidWall(X,Y,stage);
    8dcc:	e0bff117 	ldw	r2,-60(fp)
    8dd0:	10ffffcc 	andi	r3,r2,65535
    8dd4:	e0bff217 	ldw	r2,-56(fp)
    8dd8:	10bfffcc 	andi	r2,r2,65535
    8ddc:	d126f917 	ldw	r4,-25628(gp)
    8de0:	200d883a 	mov	r6,r4
    8de4:	100b883a 	mov	r5,r2
    8de8:	1809883a 	mov	r4,r3
    8dec:	00039340 	call	3934 <drawSolidWall>
						delay(20);
    8df0:	01000504 	movi	r4,20
    8df4:	00038500 	call	3850 <delay>
    8df8:	00001706 	br	8e58 <initStage+0x298>
					}
				}
				else{
					if(!((X<2&&Y<2)||(X>=18&&Y>=13))){
    8dfc:	e0bff117 	ldw	r2,-60(fp)
    8e00:	10800088 	cmpgei	r2,r2,2
    8e04:	1000031e 	bne	r2,zero,8e14 <initStage+0x254>
    8e08:	e0bff217 	ldw	r2,-56(fp)
    8e0c:	10800090 	cmplti	r2,r2,2
    8e10:	1000111e 	bne	r2,zero,8e58 <initStage+0x298>
    8e14:	e0bff117 	ldw	r2,-60(fp)
    8e18:	10800490 	cmplti	r2,r2,18
    8e1c:	1000031e 	bne	r2,zero,8e2c <initStage+0x26c>
    8e20:	e0bff217 	ldw	r2,-56(fp)
    8e24:	10800348 	cmpgei	r2,r2,13
    8e28:	10000b1e 	bne	r2,zero,8e58 <initStage+0x298>
						drawSoftWall(X,Y,stage);
    8e2c:	e0bff117 	ldw	r2,-60(fp)
    8e30:	10ffffcc 	andi	r3,r2,65535
    8e34:	e0bff217 	ldw	r2,-56(fp)
    8e38:	10bfffcc 	andi	r2,r2,65535
    8e3c:	d126f917 	ldw	r4,-25628(gp)
    8e40:	200d883a 	mov	r6,r4
    8e44:	100b883a 	mov	r5,r2
    8e48:	1809883a 	mov	r4,r3
    8e4c:	00039dc0 	call	39dc <drawSoftWall>
						delay(20);
    8e50:	01000504 	movi	r4,20
    8e54:	00038500 	call	3850 <delay>
	srand(clock());
	for(int i=0; i<5; i++){
		for(int j=0; j<5; j++){
			int arr[12]={0,1,2,3,10,11,12,13,20,21,22,23};
			shuffle(arr, 12);
			for(int count = 0; count<12; count++){
    8e58:	e0bfed17 	ldw	r2,-76(fp)
    8e5c:	10800044 	addi	r2,r2,1
    8e60:	e0bfed15 	stw	r2,-76(fp)
    8e64:	e0bfed17 	ldw	r2,-76(fp)
    8e68:	10800310 	cmplti	r2,r2,12
    8e6c:	103f981e 	bne	r2,zero,8cd0 <__alt_data_end+0xf8008cd0>
	}
	//generate a random stage
	//randomly generate walls for each 4*3 block
	srand(clock());
	for(int i=0; i<5; i++){
		for(int j=0; j<5; j++){
    8e70:	e0bfec17 	ldw	r2,-80(fp)
    8e74:	10800044 	addi	r2,r2,1
    8e78:	e0bfec15 	stw	r2,-80(fp)
    8e7c:	e0bfec17 	ldw	r2,-80(fp)
    8e80:	10800150 	cmplti	r2,r2,5
    8e84:	103f751e 	bne	r2,zero,8c5c <__alt_data_end+0xf8008c5c>
		stage[i] = (cell*)malloc(15*sizeof(cell));
	}
	//generate a random stage
	//randomly generate walls for each 4*3 block
	srand(clock());
	for(int i=0; i<5; i++){
    8e88:	e0bfeb17 	ldw	r2,-84(fp)
    8e8c:	10800044 	addi	r2,r2,1
    8e90:	e0bfeb15 	stw	r2,-84(fp)
    8e94:	e0bfeb17 	ldw	r2,-84(fp)
    8e98:	10800150 	cmplti	r2,r2,5
    8e9c:	103f6d1e 	bne	r2,zero,8c54 <__alt_data_end+0xf8008c54>
					}
				}
			}
		}
	}
	delay(1);
    8ea0:	01000044 	movi	r4,1
    8ea4:	00038500 	call	3850 <delay>
	Audio_Select('1');
    8ea8:	01000c44 	movi	r4,49
    8eac:	0002d880 	call	2d88 <Audio_Select>
	//leave some space for player
	stage[0][0].type=0;
    8eb0:	d0a6f917 	ldw	r2,-25628(gp)
    8eb4:	10800017 	ldw	r2,0(r2)
    8eb8:	1000000d 	sth	zero,0(r2)
	cleanCell(0,0);
    8ebc:	000b883a 	mov	r5,zero
    8ec0:	0009883a 	mov	r4,zero
    8ec4:	00038a00 	call	38a0 <cleanCell>
	stage[1][0].type=0;
    8ec8:	d0a6f917 	ldw	r2,-25628(gp)
    8ecc:	10800104 	addi	r2,r2,4
    8ed0:	10800017 	ldw	r2,0(r2)
    8ed4:	1000000d 	sth	zero,0(r2)
	cleanCell(1,0);
    8ed8:	000b883a 	mov	r5,zero
    8edc:	01000044 	movi	r4,1
    8ee0:	00038a00 	call	38a0 <cleanCell>
	stage[0][1].type=0;
    8ee4:	d0a6f917 	ldw	r2,-25628(gp)
    8ee8:	10800017 	ldw	r2,0(r2)
    8eec:	10800204 	addi	r2,r2,8
    8ef0:	1000000d 	sth	zero,0(r2)
	cleanCell(0,1);
    8ef4:	01400044 	movi	r5,1
    8ef8:	0009883a 	mov	r4,zero
    8efc:	00038a00 	call	38a0 <cleanCell>
	stage[1][1].type=0;
    8f00:	d0a6f917 	ldw	r2,-25628(gp)
    8f04:	10800104 	addi	r2,r2,4
    8f08:	10800017 	ldw	r2,0(r2)
    8f0c:	10800204 	addi	r2,r2,8
    8f10:	1000000d 	sth	zero,0(r2)
	cleanCell(1,1);
    8f14:	01400044 	movi	r5,1
    8f18:	01000044 	movi	r4,1
    8f1c:	00038a00 	call	38a0 <cleanCell>
	stage[19][14].type=0;
    8f20:	d0a6f917 	ldw	r2,-25628(gp)
    8f24:	10801304 	addi	r2,r2,76
    8f28:	10800017 	ldw	r2,0(r2)
    8f2c:	10801c04 	addi	r2,r2,112
    8f30:	1000000d 	sth	zero,0(r2)
	cleanCell(19,14);
    8f34:	01400384 	movi	r5,14
    8f38:	010004c4 	movi	r4,19
    8f3c:	00038a00 	call	38a0 <cleanCell>
	stage[19][13].type=0;
    8f40:	d0a6f917 	ldw	r2,-25628(gp)
    8f44:	10801304 	addi	r2,r2,76
    8f48:	10800017 	ldw	r2,0(r2)
    8f4c:	10801a04 	addi	r2,r2,104
    8f50:	1000000d 	sth	zero,0(r2)
	cleanCell(19,13);
    8f54:	01400344 	movi	r5,13
    8f58:	010004c4 	movi	r4,19
    8f5c:	00038a00 	call	38a0 <cleanCell>
	stage[18][14].type=0;
    8f60:	d0a6f917 	ldw	r2,-25628(gp)
    8f64:	10801204 	addi	r2,r2,72
    8f68:	10800017 	ldw	r2,0(r2)
    8f6c:	10801c04 	addi	r2,r2,112
    8f70:	1000000d 	sth	zero,0(r2)
	cleanCell(18,14);
    8f74:	01400384 	movi	r5,14
    8f78:	01000484 	movi	r4,18
    8f7c:	00038a00 	call	38a0 <cleanCell>
	stage[18][13].type=0;
    8f80:	d0a6f917 	ldw	r2,-25628(gp)
    8f84:	10801204 	addi	r2,r2,72
    8f88:	10800017 	ldw	r2,0(r2)
    8f8c:	10801a04 	addi	r2,r2,104
    8f90:	1000000d 	sth	zero,0(r2)
	cleanCell(18,13);
    8f94:	01400344 	movi	r5,13
    8f98:	01000484 	movi	r4,18
    8f9c:	00038a00 	call	38a0 <cleanCell>

	beginFlag=1;
    8fa0:	00800044 	movi	r2,1
    8fa4:	d0a00615 	stw	r2,-32744(gp)
	bgmFlag=1;
    8fa8:	00800044 	movi	r2,1
    8fac:	d0a00715 	stw	r2,-32740(gp)
	coinHead = NULL;
    8fb0:	d026fa15 	stw	zero,-25624(gp)
	coinTail = NULL;
    8fb4:	d026fb15 	stw	zero,-25620(gp)


}
    8fb8:	0001883a 	nop
    8fbc:	e6ffff04 	addi	sp,fp,-4
    8fc0:	dfc00217 	ldw	ra,8(sp)
    8fc4:	df000117 	ldw	fp,4(sp)
    8fc8:	dc000017 	ldw	r16,0(sp)
    8fcc:	dec00304 	addi	sp,sp,12
    8fd0:	f800283a 	ret

00008fd4 <initPlayer>:

void initPlayer(){
    8fd4:	defffd04 	addi	sp,sp,-12
    8fd8:	dfc00215 	stw	ra,8(sp)
    8fdc:	df000115 	stw	fp,4(sp)
    8fe0:	df000104 	addi	fp,sp,4

	player1.index =0;
    8fe4:	008000b4 	movhi	r2,2
    8fe8:	10b2fe04 	addi	r2,r2,-13320
    8fec:	1000000d 	sth	zero,0(r2)
	player1.x = 3;
    8ff0:	008000b4 	movhi	r2,2
    8ff4:	10b2fe04 	addi	r2,r2,-13320
    8ff8:	00c000c4 	movi	r3,3
    8ffc:	10c0008d 	sth	r3,2(r2)
	player1.y = 3;
    9000:	008000b4 	movhi	r2,2
    9004:	10b2fe04 	addi	r2,r2,-13320
    9008:	00c000c4 	movi	r3,3
    900c:	10c0010d 	sth	r3,4(r2)
	player1.HP = 3;
    9010:	008000b4 	movhi	r2,2
    9014:	10b2fe04 	addi	r2,r2,-13320
    9018:	00c000c4 	movi	r3,3
    901c:	10c0018d 	sth	r3,6(r2)
    player1.HPbuffer = 0;
    9020:	008000b4 	movhi	r2,2
    9024:	10b2fe04 	addi	r2,r2,-13320
    9028:	1000020d 	sth	zero,8(r2)
    player1.score = 0;
    902c:	008000b4 	movhi	r2,2
    9030:	10b2fe04 	addi	r2,r2,-13320
    9034:	10000315 	stw	zero,12(r2)
    player1.step = 1;
    9038:	008000b4 	movhi	r2,2
    903c:	10b2fe04 	addi	r2,r2,-13320
    9040:	00c00044 	movi	r3,1
    9044:	10c0040d 	sth	r3,16(r2)
    player1.bombList = NULL;
    9048:	008000b4 	movhi	r2,2
    904c:	10b2fe04 	addi	r2,r2,-13320
    9050:	10000515 	stw	zero,20(r2)
    player1.bombCounter = 3;
    9054:	008000b4 	movhi	r2,2
    9058:	10b2fe04 	addi	r2,r2,-13320
    905c:	00c000c4 	movi	r3,3
    9060:	10c0060d 	sth	r3,24(r2)
    player1.bombTimingCounter = 0;
    9064:	008000b4 	movhi	r2,2
    9068:	10b2fe04 	addi	r2,r2,-13320
    906c:	1000068d 	sth	zero,26(r2)
	player1.lastMove = 1;
    9070:	008000b4 	movhi	r2,2
    9074:	10b2fe04 	addi	r2,r2,-13320
    9078:	00c00044 	movi	r3,1
    907c:	10c0070d 	sth	r3,28(r2)
	player1.moveCounter = 1;
    9080:	008000b4 	movhi	r2,2
    9084:	10b2fe04 	addi	r2,r2,-13320
    9088:	00c00044 	movi	r3,1
    908c:	10c0078d 	sth	r3,30(r2)
	player1.anyAction = 1;
    9090:	008000b4 	movhi	r2,2
    9094:	10b2fe04 	addi	r2,r2,-13320
    9098:	00c00044 	movi	r3,1
    909c:	10c0080d 	sth	r3,32(r2)

	player2.index =1;
    90a0:	008000b4 	movhi	r2,2
    90a4:	10b30704 	addi	r2,r2,-13284
    90a8:	00c00044 	movi	r3,1
    90ac:	10c0000d 	sth	r3,0(r2)
	player2.x = 606;
    90b0:	008000b4 	movhi	r2,2
    90b4:	10b30704 	addi	r2,r2,-13284
    90b8:	00c09784 	movi	r3,606
    90bc:	10c0008d 	sth	r3,2(r2)
	player2.y = 447;
    90c0:	008000b4 	movhi	r2,2
    90c4:	10b30704 	addi	r2,r2,-13284
    90c8:	00c06fc4 	movi	r3,447
    90cc:	10c0010d 	sth	r3,4(r2)
	player2.HP = 3;
    90d0:	008000b4 	movhi	r2,2
    90d4:	10b30704 	addi	r2,r2,-13284
    90d8:	00c000c4 	movi	r3,3
    90dc:	10c0018d 	sth	r3,6(r2)
    player2.HPbuffer = 0;
    90e0:	008000b4 	movhi	r2,2
    90e4:	10b30704 	addi	r2,r2,-13284
    90e8:	1000020d 	sth	zero,8(r2)
    player2.score = 0;
    90ec:	008000b4 	movhi	r2,2
    90f0:	10b30704 	addi	r2,r2,-13284
    90f4:	10000315 	stw	zero,12(r2)
    player2.step = 1;
    90f8:	008000b4 	movhi	r2,2
    90fc:	10b30704 	addi	r2,r2,-13284
    9100:	00c00044 	movi	r3,1
    9104:	10c0040d 	sth	r3,16(r2)
    player2.bombList = NULL;
    9108:	008000b4 	movhi	r2,2
    910c:	10b30704 	addi	r2,r2,-13284
    9110:	10000515 	stw	zero,20(r2)
    player2.bombCounter = 3;
    9114:	008000b4 	movhi	r2,2
    9118:	10b30704 	addi	r2,r2,-13284
    911c:	00c000c4 	movi	r3,3
    9120:	10c0060d 	sth	r3,24(r2)
    player2.bombTimingCounter = 0;
    9124:	008000b4 	movhi	r2,2
    9128:	10b30704 	addi	r2,r2,-13284
    912c:	1000068d 	sth	zero,26(r2)
	player2.lastMove = 0;
    9130:	008000b4 	movhi	r2,2
    9134:	10b30704 	addi	r2,r2,-13284
    9138:	1000070d 	sth	zero,28(r2)
	player2.moveCounter = 1;
    913c:	008000b4 	movhi	r2,2
    9140:	10b30704 	addi	r2,r2,-13284
    9144:	00c00044 	movi	r3,1
    9148:	10c0078d 	sth	r3,30(r2)
	player2.anyAction = 1;
    914c:	008000b4 	movhi	r2,2
    9150:	10b30704 	addi	r2,r2,-13284
    9154:	00c00044 	movi	r3,1
    9158:	10c0080d 	sth	r3,32(r2)


	player1.bombList= malloc(3*sizeof(bomb));
    915c:	01000604 	movi	r4,24
    9160:	000dc340 	call	dc34 <malloc>
    9164:	1007883a 	mov	r3,r2
    9168:	008000b4 	movhi	r2,2
    916c:	10b2fe04 	addi	r2,r2,-13320
    9170:	10c00515 	stw	r3,20(r2)
	player2.bombList= malloc(3*sizeof(bomb));
    9174:	01000604 	movi	r4,24
    9178:	000dc340 	call	dc34 <malloc>
    917c:	1007883a 	mov	r3,r2
    9180:	008000b4 	movhi	r2,2
    9184:	10b30704 	addi	r2,r2,-13284
    9188:	10c00515 	stw	r3,20(r2)
    for(unsigned short int i =0 ; i<3; i++){
    918c:	e03fff0d 	sth	zero,-4(fp)
    9190:	00001106 	br	91d8 <initPlayer+0x204>
    	player1.bombList[i].active = 0;
    9194:	008000b4 	movhi	r2,2
    9198:	10b2fe04 	addi	r2,r2,-13320
    919c:	10c00517 	ldw	r3,20(r2)
    91a0:	e0bfff0b 	ldhu	r2,-4(fp)
    91a4:	100490fa 	slli	r2,r2,3
    91a8:	1885883a 	add	r2,r3,r2
    91ac:	1000000d 	sth	zero,0(r2)
    	player2.bombList[i].active = 0;
    91b0:	008000b4 	movhi	r2,2
    91b4:	10b30704 	addi	r2,r2,-13284
    91b8:	10c00517 	ldw	r3,20(r2)
    91bc:	e0bfff0b 	ldhu	r2,-4(fp)
    91c0:	100490fa 	slli	r2,r2,3
    91c4:	1885883a 	add	r2,r3,r2
    91c8:	1000000d 	sth	zero,0(r2)
	player2.anyAction = 1;


	player1.bombList= malloc(3*sizeof(bomb));
	player2.bombList= malloc(3*sizeof(bomb));
    for(unsigned short int i =0 ; i<3; i++){
    91cc:	e0bfff0b 	ldhu	r2,-4(fp)
    91d0:	10800044 	addi	r2,r2,1
    91d4:	e0bfff0d 	sth	r2,-4(fp)
    91d8:	e0bfff0b 	ldhu	r2,-4(fp)
    91dc:	108000f0 	cmpltui	r2,r2,3
    91e0:	103fec1e 	bne	r2,zero,9194 <__alt_data_end+0xf8009194>
    	player1.bombList[i].active = 0;
    	player2.bombList[i].active = 0;
    }
    player1.bombCounter = 3;
    91e4:	008000b4 	movhi	r2,2
    91e8:	10b2fe04 	addi	r2,r2,-13320
    91ec:	00c000c4 	movi	r3,3
    91f0:	10c0060d 	sth	r3,24(r2)
    player2.bombCounter = 3;
    91f4:	008000b4 	movhi	r2,2
    91f8:	10b30704 	addi	r2,r2,-13284
    91fc:	00c000c4 	movi	r3,3
    9200:	10c0060d 	sth	r3,24(r2)
}
    9204:	0001883a 	nop
    9208:	e037883a 	mov	sp,fp
    920c:	dfc00117 	ldw	ra,4(sp)
    9210:	df000017 	ldw	fp,0(sp)
    9214:	dec00204 	addi	sp,sp,8
    9218:	f800283a 	ret

0000921c <move>:

//dir == 0 => move to up    increment y
//dir == 1 => move to down  decrement y
//dir == 2 => move to left  increment x
//dir == 3 => move to right decrement x
void move(player* playerA, player* playerB, unsigned short int dir){
    921c:	defffb04 	addi	sp,sp,-20
    9220:	dfc00415 	stw	ra,16(sp)
    9224:	df000315 	stw	fp,12(sp)
    9228:	df000304 	addi	fp,sp,12
    922c:	e13ffd15 	stw	r4,-12(fp)
    9230:	e17ffe15 	stw	r5,-8(fp)
    9234:	3005883a 	mov	r2,r6
    9238:	e0bfff0d 	sth	r2,-4(fp)
	playerA->lastMove = dir;
    923c:	e0bffd17 	ldw	r2,-12(fp)
    9240:	e0ffff0b 	ldhu	r3,-4(fp)
    9244:	10c0070d 	sth	r3,28(r2)
	cleanPlayer(playerA);
    9248:	e13ffd17 	ldw	r4,-12(fp)
    924c:	0003a840 	call	3a84 <cleanPlayer>

	if(dir==0){
    9250:	e0bfff0b 	ldhu	r2,-4(fp)
    9254:	10001b1e 	bne	r2,zero,92c4 <move+0xa8>
		if(playerA->y>=3){
    9258:	e0bffd17 	ldw	r2,-12(fp)
    925c:	1080010b 	ldhu	r2,4(r2)
    9260:	10bfffcc 	andi	r2,r2,65535
    9264:	108000f0 	cmpltui	r2,r2,3
    9268:	1000711e 	bne	r2,zero,9430 <move+0x214>
			if(canMove(playerA->x, playerA->y-playerA->step, playerB)){playerA->y-=playerA->step;}
    926c:	e0bffd17 	ldw	r2,-12(fp)
    9270:	1080008b 	ldhu	r2,2(r2)
    9274:	113fffcc 	andi	r4,r2,65535
    9278:	e0bffd17 	ldw	r2,-12(fp)
    927c:	10c0010b 	ldhu	r3,4(r2)
    9280:	e0bffd17 	ldw	r2,-12(fp)
    9284:	1080040b 	ldhu	r2,16(r2)
    9288:	1885c83a 	sub	r2,r3,r2
    928c:	10bfffcc 	andi	r2,r2,65535
    9290:	e1bffe17 	ldw	r6,-8(fp)
    9294:	100b883a 	mov	r5,r2
    9298:	00094680 	call	9468 <canMove>
    929c:	10006426 	beq	r2,zero,9430 <move+0x214>
    92a0:	e0bffd17 	ldw	r2,-12(fp)
    92a4:	10c0010b 	ldhu	r3,4(r2)
    92a8:	e0bffd17 	ldw	r2,-12(fp)
    92ac:	1080040b 	ldhu	r2,16(r2)
    92b0:	1885c83a 	sub	r2,r3,r2
    92b4:	1007883a 	mov	r3,r2
    92b8:	e0bffd17 	ldw	r2,-12(fp)
    92bc:	10c0010d 	sth	r3,4(r2)
    92c0:	00005b06 	br	9430 <move+0x214>
		}
	}
	//move down
	else if(dir==1){
    92c4:	e0bfff0b 	ldhu	r2,-4(fp)
    92c8:	10800058 	cmpnei	r2,r2,1
    92cc:	10001b1e 	bne	r2,zero,933c <move+0x120>
		if(playerA->y<=451){
    92d0:	e0bffd17 	ldw	r2,-12(fp)
    92d4:	1080010b 	ldhu	r2,4(r2)
    92d8:	10bfffcc 	andi	r2,r2,65535
    92dc:	10807128 	cmpgeui	r2,r2,452
    92e0:	1000531e 	bne	r2,zero,9430 <move+0x214>
			if(canMove(playerA->x, playerA->y+playerA->step, playerB)){playerA->y+=playerA->step;}
    92e4:	e0bffd17 	ldw	r2,-12(fp)
    92e8:	1080008b 	ldhu	r2,2(r2)
    92ec:	113fffcc 	andi	r4,r2,65535
    92f0:	e0bffd17 	ldw	r2,-12(fp)
    92f4:	10c0010b 	ldhu	r3,4(r2)
    92f8:	e0bffd17 	ldw	r2,-12(fp)
    92fc:	1080040b 	ldhu	r2,16(r2)
    9300:	1885883a 	add	r2,r3,r2
    9304:	10bfffcc 	andi	r2,r2,65535
    9308:	e1bffe17 	ldw	r6,-8(fp)
    930c:	100b883a 	mov	r5,r2
    9310:	00094680 	call	9468 <canMove>
    9314:	10004626 	beq	r2,zero,9430 <move+0x214>
    9318:	e0bffd17 	ldw	r2,-12(fp)
    931c:	10c0010b 	ldhu	r3,4(r2)
    9320:	e0bffd17 	ldw	r2,-12(fp)
    9324:	1080040b 	ldhu	r2,16(r2)
    9328:	1885883a 	add	r2,r3,r2
    932c:	1007883a 	mov	r3,r2
    9330:	e0bffd17 	ldw	r2,-12(fp)
    9334:	10c0010d 	sth	r3,4(r2)
    9338:	00003d06 	br	9430 <move+0x214>
		}
	}
	//move left
	else if(dir==2){
    933c:	e0bfff0b 	ldhu	r2,-4(fp)
    9340:	10800098 	cmpnei	r2,r2,2
    9344:	10001c1e 	bne	r2,zero,93b8 <move+0x19c>
		if(playerA->x>=3){
    9348:	e0bffd17 	ldw	r2,-12(fp)
    934c:	1080008b 	ldhu	r2,2(r2)
    9350:	10bfffcc 	andi	r2,r2,65535
    9354:	108000f0 	cmpltui	r2,r2,3
    9358:	1000351e 	bne	r2,zero,9430 <move+0x214>
			if(canMove(playerA->x-playerA->step, playerA->y, playerB)){playerA->x-=playerA->step;}
    935c:	e0bffd17 	ldw	r2,-12(fp)
    9360:	10c0008b 	ldhu	r3,2(r2)
    9364:	e0bffd17 	ldw	r2,-12(fp)
    9368:	1080040b 	ldhu	r2,16(r2)
    936c:	1885c83a 	sub	r2,r3,r2
    9370:	10ffffcc 	andi	r3,r2,65535
    9374:	e0bffd17 	ldw	r2,-12(fp)
    9378:	1080010b 	ldhu	r2,4(r2)
    937c:	10bfffcc 	andi	r2,r2,65535
    9380:	e1bffe17 	ldw	r6,-8(fp)
    9384:	100b883a 	mov	r5,r2
    9388:	1809883a 	mov	r4,r3
    938c:	00094680 	call	9468 <canMove>
    9390:	10002726 	beq	r2,zero,9430 <move+0x214>
    9394:	e0bffd17 	ldw	r2,-12(fp)
    9398:	10c0008b 	ldhu	r3,2(r2)
    939c:	e0bffd17 	ldw	r2,-12(fp)
    93a0:	1080040b 	ldhu	r2,16(r2)
    93a4:	1885c83a 	sub	r2,r3,r2
    93a8:	1007883a 	mov	r3,r2
    93ac:	e0bffd17 	ldw	r2,-12(fp)
    93b0:	10c0008d 	sth	r3,2(r2)
    93b4:	00001e06 	br	9430 <move+0x214>
		}
	}
	//move right
	else if(dir==3){
    93b8:	e0bfff0b 	ldhu	r2,-4(fp)
    93bc:	108000d8 	cmpnei	r2,r2,3
    93c0:	10001b1e 	bne	r2,zero,9430 <move+0x214>
		if(playerA->x<=611){
    93c4:	e0bffd17 	ldw	r2,-12(fp)
    93c8:	1080008b 	ldhu	r2,2(r2)
    93cc:	10bfffcc 	andi	r2,r2,65535
    93d0:	10809928 	cmpgeui	r2,r2,612
    93d4:	1000161e 	bne	r2,zero,9430 <move+0x214>
			if(canMove(playerA->x+playerA->step, playerA->y, playerB)){playerA->x+=playerA->step;}
    93d8:	e0bffd17 	ldw	r2,-12(fp)
    93dc:	10c0008b 	ldhu	r3,2(r2)
    93e0:	e0bffd17 	ldw	r2,-12(fp)
    93e4:	1080040b 	ldhu	r2,16(r2)
    93e8:	1885883a 	add	r2,r3,r2
    93ec:	10ffffcc 	andi	r3,r2,65535
    93f0:	e0bffd17 	ldw	r2,-12(fp)
    93f4:	1080010b 	ldhu	r2,4(r2)
    93f8:	10bfffcc 	andi	r2,r2,65535
    93fc:	e1bffe17 	ldw	r6,-8(fp)
    9400:	100b883a 	mov	r5,r2
    9404:	1809883a 	mov	r4,r3
    9408:	00094680 	call	9468 <canMove>
    940c:	10000826 	beq	r2,zero,9430 <move+0x214>
    9410:	e0bffd17 	ldw	r2,-12(fp)
    9414:	10c0008b 	ldhu	r3,2(r2)
    9418:	e0bffd17 	ldw	r2,-12(fp)
    941c:	1080040b 	ldhu	r2,16(r2)
    9420:	1885883a 	add	r2,r3,r2
    9424:	1007883a 	mov	r3,r2
    9428:	e0bffd17 	ldw	r2,-12(fp)
    942c:	10c0008d 	sth	r3,2(r2)
		}
	}
    playerA->anyAction =1;
    9430:	e0bffd17 	ldw	r2,-12(fp)
    9434:	00c00044 	movi	r3,1
    9438:	10c0080d 	sth	r3,32(r2)
    drawPlayer(dir, playerA,1);
    943c:	e0bfff0b 	ldhu	r2,-4(fp)
    9440:	01800044 	movi	r6,1
    9444:	e17ffd17 	ldw	r5,-12(fp)
    9448:	1009883a 	mov	r4,r2
    944c:	0003b500 	call	3b50 <drawPlayer>
}
    9450:	0001883a 	nop
    9454:	e037883a 	mov	sp,fp
    9458:	dfc00117 	ldw	ra,4(sp)
    945c:	df000017 	ldw	fp,0(sp)
    9460:	dec00204 	addi	sp,sp,8
    9464:	f800283a 	ret

00009468 <canMove>:


int canMove(unsigned short int x, unsigned short int y, player *playerB){
    9468:	defff704 	addi	sp,sp,-36
    946c:	dfc00815 	stw	ra,32(sp)
    9470:	df000715 	stw	fp,28(sp)
    9474:	df000704 	addi	fp,sp,28
    9478:	2007883a 	mov	r3,r4
    947c:	2805883a 	mov	r2,r5
    9480:	e1bfff15 	stw	r6,-4(fp)
    9484:	e0fffd0d 	sth	r3,-12(fp)
    9488:	e0bffe0d 	sth	r2,-8(fp)
	short int Ax0 = (short int)x;
    948c:	e0bffd0b 	ldhu	r2,-12(fp)
    9490:	e0bff90d 	sth	r2,-28(fp)
	short int Ay0 = (short int)y;
    9494:	e0bffe0b 	ldhu	r2,-8(fp)
    9498:	e0bff98d 	sth	r2,-26(fp)
	short int Ax1 = (short int)x+25;
    949c:	e0bffd0b 	ldhu	r2,-12(fp)
    94a0:	10800644 	addi	r2,r2,25
    94a4:	e0bffa0d 	sth	r2,-24(fp)
	short int Ay1 = (short int)y+25;
    94a8:	e0bffe0b 	ldhu	r2,-8(fp)
    94ac:	10800644 	addi	r2,r2,25
    94b0:	e0bffa8d 	sth	r2,-22(fp)

	short int Bx0 = (short int)playerB->x;
    94b4:	e0bfff17 	ldw	r2,-4(fp)
    94b8:	1080008b 	ldhu	r2,2(r2)
    94bc:	e0bffb0d 	sth	r2,-20(fp)
	short int By0 = (short int)playerB->y;
    94c0:	e0bfff17 	ldw	r2,-4(fp)
    94c4:	1080010b 	ldhu	r2,4(r2)
    94c8:	e0bffb8d 	sth	r2,-18(fp)

    short int delta_x = Ax0>Bx0 ? Ax0-Bx0 : Bx0-Ax0;
    94cc:	e0bff90f 	ldh	r2,-28(fp)
    94d0:	e0fffb0f 	ldh	r3,-20(fp)
    94d4:	1880040e 	bge	r3,r2,94e8 <canMove+0x80>
    94d8:	e0fff90b 	ldhu	r3,-28(fp)
    94dc:	e0bffb0b 	ldhu	r2,-20(fp)
    94e0:	1885c83a 	sub	r2,r3,r2
    94e4:	00000306 	br	94f4 <canMove+0x8c>
    94e8:	e0fffb0b 	ldhu	r3,-20(fp)
    94ec:	e0bff90b 	ldhu	r2,-28(fp)
    94f0:	1885c83a 	sub	r2,r3,r2
    94f4:	e0bffc0d 	sth	r2,-16(fp)
    short int delta_y = Ay0>By0 ? Ay0-By0 : By0-Ay0;
    94f8:	e0bff98f 	ldh	r2,-26(fp)
    94fc:	e0fffb8f 	ldh	r3,-18(fp)
    9500:	1880040e 	bge	r3,r2,9514 <canMove+0xac>
    9504:	e0fff98b 	ldhu	r3,-26(fp)
    9508:	e0bffb8b 	ldhu	r2,-18(fp)
    950c:	1885c83a 	sub	r2,r3,r2
    9510:	00000306 	br	9520 <canMove+0xb8>
    9514:	e0fffb8b 	ldhu	r3,-18(fp)
    9518:	e0bff98b 	ldhu	r2,-26(fp)
    951c:	1885c83a 	sub	r2,r3,r2
    9520:	e0bffc8d 	sth	r2,-14(fp)
    if(delta_x <= 26 && delta_y <= 26){return 0;}
    9524:	e0bffc0f 	ldh	r2,-16(fp)
    9528:	108006c8 	cmpgei	r2,r2,27
    952c:	1000051e 	bne	r2,zero,9544 <canMove+0xdc>
    9530:	e0bffc8f 	ldh	r2,-14(fp)
    9534:	108006c8 	cmpgei	r2,r2,27
    9538:	1000021e 	bne	r2,zero,9544 <canMove+0xdc>
    953c:	0005883a 	mov	r2,zero
    9540:	0000e806 	br	98e4 <canMove+0x47c>
	return (
			  ((stage[Ax0/32][Ay0/32].type==0)||(stage[Ax0/32][Ay0/32].type==6)||onFire(Ax0,Ay0))
    9544:	d0e6f917 	ldw	r3,-25628(gp)
    9548:	e0bff90f 	ldh	r2,-28(fp)
    954c:	1000010e 	bge	r2,zero,9554 <canMove+0xec>
    9550:	108007c4 	addi	r2,r2,31
    9554:	1005d17a 	srai	r2,r2,5
    9558:	10bfffcc 	andi	r2,r2,65535
    955c:	10a0001c 	xori	r2,r2,32768
    9560:	10a00004 	addi	r2,r2,-32768
    9564:	1085883a 	add	r2,r2,r2
    9568:	1085883a 	add	r2,r2,r2
    956c:	1885883a 	add	r2,r3,r2
    9570:	10c00017 	ldw	r3,0(r2)
    9574:	e0bff98f 	ldh	r2,-26(fp)
    9578:	1000010e 	bge	r2,zero,9580 <canMove+0x118>
    957c:	108007c4 	addi	r2,r2,31
    9580:	1005d17a 	srai	r2,r2,5
    9584:	10bfffcc 	andi	r2,r2,65535
    9588:	10a0001c 	xori	r2,r2,32768
    958c:	10a00004 	addi	r2,r2,-32768
    9590:	100490fa 	slli	r2,r2,3
    9594:	1885883a 	add	r2,r3,r2
    9598:	1080000b 	ldhu	r2,0(r2)
			&&((stage[Ax0/32][Ay1/32].type==0)||(stage[Ax0/32][Ay1/32].type==6)||onFire(Ax0,Ay1))
			&&((stage[Ax1/32][Ay0/32].type==0)||(stage[Ax1/32][Ay0/32].type==6)||onFire(Ax1,Ay0))
			&&((stage[Ax1/32][Ay1/32].type==0)||(stage[Ax1/32][Ay1/32].type==6)||onFire(Ax1,Ay1))
    959c:	10bfffcc 	andi	r2,r2,65535
    95a0:	10002126 	beq	r2,zero,9628 <canMove+0x1c0>

    short int delta_x = Ax0>Bx0 ? Ax0-Bx0 : Bx0-Ax0;
    short int delta_y = Ay0>By0 ? Ay0-By0 : By0-Ay0;
    if(delta_x <= 26 && delta_y <= 26){return 0;}
	return (
			  ((stage[Ax0/32][Ay0/32].type==0)||(stage[Ax0/32][Ay0/32].type==6)||onFire(Ax0,Ay0))
    95a4:	d0e6f917 	ldw	r3,-25628(gp)
    95a8:	e0bff90f 	ldh	r2,-28(fp)
    95ac:	1000010e 	bge	r2,zero,95b4 <canMove+0x14c>
    95b0:	108007c4 	addi	r2,r2,31
    95b4:	1005d17a 	srai	r2,r2,5
    95b8:	10bfffcc 	andi	r2,r2,65535
    95bc:	10a0001c 	xori	r2,r2,32768
    95c0:	10a00004 	addi	r2,r2,-32768
    95c4:	1085883a 	add	r2,r2,r2
    95c8:	1085883a 	add	r2,r2,r2
    95cc:	1885883a 	add	r2,r3,r2
    95d0:	10c00017 	ldw	r3,0(r2)
    95d4:	e0bff98f 	ldh	r2,-26(fp)
    95d8:	1000010e 	bge	r2,zero,95e0 <canMove+0x178>
    95dc:	108007c4 	addi	r2,r2,31
    95e0:	1005d17a 	srai	r2,r2,5
    95e4:	10bfffcc 	andi	r2,r2,65535
    95e8:	10a0001c 	xori	r2,r2,32768
    95ec:	10a00004 	addi	r2,r2,-32768
    95f0:	100490fa 	slli	r2,r2,3
    95f4:	1885883a 	add	r2,r3,r2
    95f8:	1080000b 	ldhu	r2,0(r2)
    95fc:	10bfffcc 	andi	r2,r2,65535
    9600:	108001a0 	cmpeqi	r2,r2,6
    9604:	1000081e 	bne	r2,zero,9628 <canMove+0x1c0>
    9608:	e0bff90b 	ldhu	r2,-28(fp)
    960c:	10bfffcc 	andi	r2,r2,65535
    9610:	e0fff98b 	ldhu	r3,-26(fp)
    9614:	18ffffcc 	andi	r3,r3,65535
    9618:	180b883a 	mov	r5,r3
    961c:	1009883a 	mov	r4,r2
    9620:	00098f80 	call	98f8 <onFire>
    9624:	1000ad26 	beq	r2,zero,98dc <canMove+0x474>
			&&((stage[Ax0/32][Ay1/32].type==0)||(stage[Ax0/32][Ay1/32].type==6)||onFire(Ax0,Ay1))
    9628:	d0e6f917 	ldw	r3,-25628(gp)
    962c:	e0bff90f 	ldh	r2,-28(fp)
    9630:	1000010e 	bge	r2,zero,9638 <canMove+0x1d0>
    9634:	108007c4 	addi	r2,r2,31
    9638:	1005d17a 	srai	r2,r2,5
    963c:	10bfffcc 	andi	r2,r2,65535
    9640:	10a0001c 	xori	r2,r2,32768
    9644:	10a00004 	addi	r2,r2,-32768
    9648:	1085883a 	add	r2,r2,r2
    964c:	1085883a 	add	r2,r2,r2
    9650:	1885883a 	add	r2,r3,r2
    9654:	10c00017 	ldw	r3,0(r2)
    9658:	e0bffa8f 	ldh	r2,-22(fp)
    965c:	1000010e 	bge	r2,zero,9664 <canMove+0x1fc>
    9660:	108007c4 	addi	r2,r2,31
    9664:	1005d17a 	srai	r2,r2,5
    9668:	10bfffcc 	andi	r2,r2,65535
    966c:	10a0001c 	xori	r2,r2,32768
    9670:	10a00004 	addi	r2,r2,-32768
    9674:	100490fa 	slli	r2,r2,3
    9678:	1885883a 	add	r2,r3,r2
    967c:	1080000b 	ldhu	r2,0(r2)
    9680:	10bfffcc 	andi	r2,r2,65535
    9684:	10002126 	beq	r2,zero,970c <canMove+0x2a4>
    9688:	d0e6f917 	ldw	r3,-25628(gp)
    968c:	e0bff90f 	ldh	r2,-28(fp)
    9690:	1000010e 	bge	r2,zero,9698 <canMove+0x230>
    9694:	108007c4 	addi	r2,r2,31
    9698:	1005d17a 	srai	r2,r2,5
    969c:	10bfffcc 	andi	r2,r2,65535
    96a0:	10a0001c 	xori	r2,r2,32768
    96a4:	10a00004 	addi	r2,r2,-32768
    96a8:	1085883a 	add	r2,r2,r2
    96ac:	1085883a 	add	r2,r2,r2
    96b0:	1885883a 	add	r2,r3,r2
    96b4:	10c00017 	ldw	r3,0(r2)
    96b8:	e0bffa8f 	ldh	r2,-22(fp)
    96bc:	1000010e 	bge	r2,zero,96c4 <canMove+0x25c>
    96c0:	108007c4 	addi	r2,r2,31
    96c4:	1005d17a 	srai	r2,r2,5
    96c8:	10bfffcc 	andi	r2,r2,65535
    96cc:	10a0001c 	xori	r2,r2,32768
    96d0:	10a00004 	addi	r2,r2,-32768
    96d4:	100490fa 	slli	r2,r2,3
    96d8:	1885883a 	add	r2,r3,r2
    96dc:	1080000b 	ldhu	r2,0(r2)
    96e0:	10bfffcc 	andi	r2,r2,65535
    96e4:	108001a0 	cmpeqi	r2,r2,6
    96e8:	1000081e 	bne	r2,zero,970c <canMove+0x2a4>
    96ec:	e0bff90b 	ldhu	r2,-28(fp)
    96f0:	10bfffcc 	andi	r2,r2,65535
    96f4:	e0fffa8b 	ldhu	r3,-22(fp)
    96f8:	18ffffcc 	andi	r3,r3,65535
    96fc:	180b883a 	mov	r5,r3
    9700:	1009883a 	mov	r4,r2
    9704:	00098f80 	call	98f8 <onFire>
    9708:	10007426 	beq	r2,zero,98dc <canMove+0x474>
			&&((stage[Ax1/32][Ay0/32].type==0)||(stage[Ax1/32][Ay0/32].type==6)||onFire(Ax1,Ay0))
    970c:	d0e6f917 	ldw	r3,-25628(gp)
    9710:	e0bffa0f 	ldh	r2,-24(fp)
    9714:	1000010e 	bge	r2,zero,971c <canMove+0x2b4>
    9718:	108007c4 	addi	r2,r2,31
    971c:	1005d17a 	srai	r2,r2,5
    9720:	10bfffcc 	andi	r2,r2,65535
    9724:	10a0001c 	xori	r2,r2,32768
    9728:	10a00004 	addi	r2,r2,-32768
    972c:	1085883a 	add	r2,r2,r2
    9730:	1085883a 	add	r2,r2,r2
    9734:	1885883a 	add	r2,r3,r2
    9738:	10c00017 	ldw	r3,0(r2)
    973c:	e0bff98f 	ldh	r2,-26(fp)
    9740:	1000010e 	bge	r2,zero,9748 <canMove+0x2e0>
    9744:	108007c4 	addi	r2,r2,31
    9748:	1005d17a 	srai	r2,r2,5
    974c:	10bfffcc 	andi	r2,r2,65535
    9750:	10a0001c 	xori	r2,r2,32768
    9754:	10a00004 	addi	r2,r2,-32768
    9758:	100490fa 	slli	r2,r2,3
    975c:	1885883a 	add	r2,r3,r2
    9760:	1080000b 	ldhu	r2,0(r2)
    9764:	10bfffcc 	andi	r2,r2,65535
    9768:	10002126 	beq	r2,zero,97f0 <canMove+0x388>
    976c:	d0e6f917 	ldw	r3,-25628(gp)
    9770:	e0bffa0f 	ldh	r2,-24(fp)
    9774:	1000010e 	bge	r2,zero,977c <canMove+0x314>
    9778:	108007c4 	addi	r2,r2,31
    977c:	1005d17a 	srai	r2,r2,5
    9780:	10bfffcc 	andi	r2,r2,65535
    9784:	10a0001c 	xori	r2,r2,32768
    9788:	10a00004 	addi	r2,r2,-32768
    978c:	1085883a 	add	r2,r2,r2
    9790:	1085883a 	add	r2,r2,r2
    9794:	1885883a 	add	r2,r3,r2
    9798:	10c00017 	ldw	r3,0(r2)
    979c:	e0bff98f 	ldh	r2,-26(fp)
    97a0:	1000010e 	bge	r2,zero,97a8 <canMove+0x340>
    97a4:	108007c4 	addi	r2,r2,31
    97a8:	1005d17a 	srai	r2,r2,5
    97ac:	10bfffcc 	andi	r2,r2,65535
    97b0:	10a0001c 	xori	r2,r2,32768
    97b4:	10a00004 	addi	r2,r2,-32768
    97b8:	100490fa 	slli	r2,r2,3
    97bc:	1885883a 	add	r2,r3,r2
    97c0:	1080000b 	ldhu	r2,0(r2)
    97c4:	10bfffcc 	andi	r2,r2,65535
    97c8:	108001a0 	cmpeqi	r2,r2,6
    97cc:	1000081e 	bne	r2,zero,97f0 <canMove+0x388>
    97d0:	e0bffa0b 	ldhu	r2,-24(fp)
    97d4:	10bfffcc 	andi	r2,r2,65535
    97d8:	e0fff98b 	ldhu	r3,-26(fp)
    97dc:	18ffffcc 	andi	r3,r3,65535
    97e0:	180b883a 	mov	r5,r3
    97e4:	1009883a 	mov	r4,r2
    97e8:	00098f80 	call	98f8 <onFire>
    97ec:	10003b26 	beq	r2,zero,98dc <canMove+0x474>
			&&((stage[Ax1/32][Ay1/32].type==0)||(stage[Ax1/32][Ay1/32].type==6)||onFire(Ax1,Ay1))
    97f0:	d0e6f917 	ldw	r3,-25628(gp)
    97f4:	e0bffa0f 	ldh	r2,-24(fp)
    97f8:	1000010e 	bge	r2,zero,9800 <canMove+0x398>
    97fc:	108007c4 	addi	r2,r2,31
    9800:	1005d17a 	srai	r2,r2,5
    9804:	10bfffcc 	andi	r2,r2,65535
    9808:	10a0001c 	xori	r2,r2,32768
    980c:	10a00004 	addi	r2,r2,-32768
    9810:	1085883a 	add	r2,r2,r2
    9814:	1085883a 	add	r2,r2,r2
    9818:	1885883a 	add	r2,r3,r2
    981c:	10c00017 	ldw	r3,0(r2)
    9820:	e0bffa8f 	ldh	r2,-22(fp)
    9824:	1000010e 	bge	r2,zero,982c <canMove+0x3c4>
    9828:	108007c4 	addi	r2,r2,31
    982c:	1005d17a 	srai	r2,r2,5
    9830:	10bfffcc 	andi	r2,r2,65535
    9834:	10a0001c 	xori	r2,r2,32768
    9838:	10a00004 	addi	r2,r2,-32768
    983c:	100490fa 	slli	r2,r2,3
    9840:	1885883a 	add	r2,r3,r2
    9844:	1080000b 	ldhu	r2,0(r2)
    9848:	10bfffcc 	andi	r2,r2,65535
    984c:	10002126 	beq	r2,zero,98d4 <canMove+0x46c>
    9850:	d0e6f917 	ldw	r3,-25628(gp)
    9854:	e0bffa0f 	ldh	r2,-24(fp)
    9858:	1000010e 	bge	r2,zero,9860 <canMove+0x3f8>
    985c:	108007c4 	addi	r2,r2,31
    9860:	1005d17a 	srai	r2,r2,5
    9864:	10bfffcc 	andi	r2,r2,65535
    9868:	10a0001c 	xori	r2,r2,32768
    986c:	10a00004 	addi	r2,r2,-32768
    9870:	1085883a 	add	r2,r2,r2
    9874:	1085883a 	add	r2,r2,r2
    9878:	1885883a 	add	r2,r3,r2
    987c:	10c00017 	ldw	r3,0(r2)
    9880:	e0bffa8f 	ldh	r2,-22(fp)
    9884:	1000010e 	bge	r2,zero,988c <canMove+0x424>
    9888:	108007c4 	addi	r2,r2,31
    988c:	1005d17a 	srai	r2,r2,5
    9890:	10bfffcc 	andi	r2,r2,65535
    9894:	10a0001c 	xori	r2,r2,32768
    9898:	10a00004 	addi	r2,r2,-32768
    989c:	100490fa 	slli	r2,r2,3
    98a0:	1885883a 	add	r2,r3,r2
    98a4:	1080000b 	ldhu	r2,0(r2)
    98a8:	10bfffcc 	andi	r2,r2,65535
    98ac:	108001a0 	cmpeqi	r2,r2,6
    98b0:	1000081e 	bne	r2,zero,98d4 <canMove+0x46c>
    98b4:	e0bffa0b 	ldhu	r2,-24(fp)
    98b8:	10bfffcc 	andi	r2,r2,65535
    98bc:	e0fffa8b 	ldhu	r3,-22(fp)
    98c0:	18ffffcc 	andi	r3,r3,65535
    98c4:	180b883a 	mov	r5,r3
    98c8:	1009883a 	mov	r4,r2
    98cc:	00098f80 	call	98f8 <onFire>
    98d0:	10000226 	beq	r2,zero,98dc <canMove+0x474>
    98d4:	00800044 	movi	r2,1
	short int By0 = (short int)playerB->y;

    short int delta_x = Ax0>Bx0 ? Ax0-Bx0 : Bx0-Ax0;
    short int delta_y = Ay0>By0 ? Ay0-By0 : By0-Ay0;
    if(delta_x <= 26 && delta_y <= 26){return 0;}
	return (
    98d8:	00000106 	br	98e0 <canMove+0x478>
			  ((stage[Ax0/32][Ay0/32].type==0)||(stage[Ax0/32][Ay0/32].type==6)||onFire(Ax0,Ay0))
			&&((stage[Ax0/32][Ay1/32].type==0)||(stage[Ax0/32][Ay1/32].type==6)||onFire(Ax0,Ay1))
			&&((stage[Ax1/32][Ay0/32].type==0)||(stage[Ax1/32][Ay0/32].type==6)||onFire(Ax1,Ay0))
			&&((stage[Ax1/32][Ay1/32].type==0)||(stage[Ax1/32][Ay1/32].type==6)||onFire(Ax1,Ay1))
    98dc:	0005883a 	mov	r2,zero
	short int By0 = (short int)playerB->y;

    short int delta_x = Ax0>Bx0 ? Ax0-Bx0 : Bx0-Ax0;
    short int delta_y = Ay0>By0 ? Ay0-By0 : By0-Ay0;
    if(delta_x <= 26 && delta_y <= 26){return 0;}
	return (
    98e0:	0001883a 	nop
			  ((stage[Ax0/32][Ay0/32].type==0)||(stage[Ax0/32][Ay0/32].type==6)||onFire(Ax0,Ay0))
			&&((stage[Ax0/32][Ay1/32].type==0)||(stage[Ax0/32][Ay1/32].type==6)||onFire(Ax0,Ay1))
			&&((stage[Ax1/32][Ay0/32].type==0)||(stage[Ax1/32][Ay0/32].type==6)||onFire(Ax1,Ay0))
			&&((stage[Ax1/32][Ay1/32].type==0)||(stage[Ax1/32][Ay1/32].type==6)||onFire(Ax1,Ay1))
			);
}
    98e4:	e037883a 	mov	sp,fp
    98e8:	dfc00117 	ldw	ra,4(sp)
    98ec:	df000017 	ldw	fp,0(sp)
    98f0:	dec00204 	addi	sp,sp,8
    98f4:	f800283a 	ret

000098f8 <onFire>:

int onFire(unsigned short int x, unsigned short int y){
    98f8:	defffd04 	addi	sp,sp,-12
    98fc:	df000215 	stw	fp,8(sp)
    9900:	df000204 	addi	fp,sp,8
    9904:	2007883a 	mov	r3,r4
    9908:	2805883a 	mov	r2,r5
    990c:	e0fffe0d 	sth	r3,-8(fp)
    9910:	e0bfff0d 	sth	r2,-4(fp)
	return stage[x/32][y/32].type==40 || stage[x/32][y/32].type==41 || stage[x/32][y/32].type==42
    9914:	d0e6f917 	ldw	r3,-25628(gp)
    9918:	e0bffe0b 	ldhu	r2,-8(fp)
    991c:	1004d17a 	srli	r2,r2,5
    9920:	10bfffcc 	andi	r2,r2,65535
    9924:	1085883a 	add	r2,r2,r2
    9928:	1085883a 	add	r2,r2,r2
    992c:	1885883a 	add	r2,r3,r2
    9930:	10c00017 	ldw	r3,0(r2)
    9934:	e0bfff0b 	ldhu	r2,-4(fp)
    9938:	1004d17a 	srli	r2,r2,5
    993c:	10bfffcc 	andi	r2,r2,65535
    9940:	100490fa 	slli	r2,r2,3
    9944:	1885883a 	add	r2,r3,r2
    9948:	1080000b 	ldhu	r2,0(r2)
	   ||stage[x/32][y/32].type==50 || stage[x/32][y/32].type==51 || stage[x/32][y/32].type==52;
    994c:	10bfffcc 	andi	r2,r2,65535
    9950:	10800a20 	cmpeqi	r2,r2,40
    9954:	1000551e 	bne	r2,zero,9aac <onFire+0x1b4>
			&&((stage[Ax1/32][Ay1/32].type==0)||(stage[Ax1/32][Ay1/32].type==6)||onFire(Ax1,Ay1))
			);
}

int onFire(unsigned short int x, unsigned short int y){
	return stage[x/32][y/32].type==40 || stage[x/32][y/32].type==41 || stage[x/32][y/32].type==42
    9958:	d0e6f917 	ldw	r3,-25628(gp)
    995c:	e0bffe0b 	ldhu	r2,-8(fp)
    9960:	1004d17a 	srli	r2,r2,5
    9964:	10bfffcc 	andi	r2,r2,65535
    9968:	1085883a 	add	r2,r2,r2
    996c:	1085883a 	add	r2,r2,r2
    9970:	1885883a 	add	r2,r3,r2
    9974:	10c00017 	ldw	r3,0(r2)
    9978:	e0bfff0b 	ldhu	r2,-4(fp)
    997c:	1004d17a 	srli	r2,r2,5
    9980:	10bfffcc 	andi	r2,r2,65535
    9984:	100490fa 	slli	r2,r2,3
    9988:	1885883a 	add	r2,r3,r2
    998c:	1080000b 	ldhu	r2,0(r2)
    9990:	10bfffcc 	andi	r2,r2,65535
    9994:	10800a60 	cmpeqi	r2,r2,41
    9998:	1000441e 	bne	r2,zero,9aac <onFire+0x1b4>
    999c:	d0e6f917 	ldw	r3,-25628(gp)
    99a0:	e0bffe0b 	ldhu	r2,-8(fp)
    99a4:	1004d17a 	srli	r2,r2,5
    99a8:	10bfffcc 	andi	r2,r2,65535
    99ac:	1085883a 	add	r2,r2,r2
    99b0:	1085883a 	add	r2,r2,r2
    99b4:	1885883a 	add	r2,r3,r2
    99b8:	10c00017 	ldw	r3,0(r2)
    99bc:	e0bfff0b 	ldhu	r2,-4(fp)
    99c0:	1004d17a 	srli	r2,r2,5
    99c4:	10bfffcc 	andi	r2,r2,65535
    99c8:	100490fa 	slli	r2,r2,3
    99cc:	1885883a 	add	r2,r3,r2
    99d0:	1080000b 	ldhu	r2,0(r2)
    99d4:	10bfffcc 	andi	r2,r2,65535
    99d8:	10800aa0 	cmpeqi	r2,r2,42
    99dc:	1000331e 	bne	r2,zero,9aac <onFire+0x1b4>
	   ||stage[x/32][y/32].type==50 || stage[x/32][y/32].type==51 || stage[x/32][y/32].type==52;
    99e0:	d0e6f917 	ldw	r3,-25628(gp)
    99e4:	e0bffe0b 	ldhu	r2,-8(fp)
    99e8:	1004d17a 	srli	r2,r2,5
    99ec:	10bfffcc 	andi	r2,r2,65535
    99f0:	1085883a 	add	r2,r2,r2
    99f4:	1085883a 	add	r2,r2,r2
    99f8:	1885883a 	add	r2,r3,r2
    99fc:	10c00017 	ldw	r3,0(r2)
    9a00:	e0bfff0b 	ldhu	r2,-4(fp)
    9a04:	1004d17a 	srli	r2,r2,5
    9a08:	10bfffcc 	andi	r2,r2,65535
    9a0c:	100490fa 	slli	r2,r2,3
    9a10:	1885883a 	add	r2,r3,r2
    9a14:	1080000b 	ldhu	r2,0(r2)
    9a18:	10bfffcc 	andi	r2,r2,65535
    9a1c:	10800ca0 	cmpeqi	r2,r2,50
    9a20:	1000221e 	bne	r2,zero,9aac <onFire+0x1b4>
    9a24:	d0e6f917 	ldw	r3,-25628(gp)
    9a28:	e0bffe0b 	ldhu	r2,-8(fp)
    9a2c:	1004d17a 	srli	r2,r2,5
    9a30:	10bfffcc 	andi	r2,r2,65535
    9a34:	1085883a 	add	r2,r2,r2
    9a38:	1085883a 	add	r2,r2,r2
    9a3c:	1885883a 	add	r2,r3,r2
    9a40:	10c00017 	ldw	r3,0(r2)
    9a44:	e0bfff0b 	ldhu	r2,-4(fp)
    9a48:	1004d17a 	srli	r2,r2,5
    9a4c:	10bfffcc 	andi	r2,r2,65535
    9a50:	100490fa 	slli	r2,r2,3
    9a54:	1885883a 	add	r2,r3,r2
    9a58:	1080000b 	ldhu	r2,0(r2)
    9a5c:	10bfffcc 	andi	r2,r2,65535
    9a60:	10800ce0 	cmpeqi	r2,r2,51
    9a64:	1000111e 	bne	r2,zero,9aac <onFire+0x1b4>
    9a68:	d0e6f917 	ldw	r3,-25628(gp)
    9a6c:	e0bffe0b 	ldhu	r2,-8(fp)
    9a70:	1004d17a 	srli	r2,r2,5
    9a74:	10bfffcc 	andi	r2,r2,65535
    9a78:	1085883a 	add	r2,r2,r2
    9a7c:	1085883a 	add	r2,r2,r2
    9a80:	1885883a 	add	r2,r3,r2
    9a84:	10c00017 	ldw	r3,0(r2)
    9a88:	e0bfff0b 	ldhu	r2,-4(fp)
    9a8c:	1004d17a 	srli	r2,r2,5
    9a90:	10bfffcc 	andi	r2,r2,65535
    9a94:	100490fa 	slli	r2,r2,3
    9a98:	1885883a 	add	r2,r3,r2
    9a9c:	1080000b 	ldhu	r2,0(r2)
    9aa0:	10bfffcc 	andi	r2,r2,65535
    9aa4:	10800d18 	cmpnei	r2,r2,52
    9aa8:	1000021e 	bne	r2,zero,9ab4 <onFire+0x1bc>
    9aac:	00800044 	movi	r2,1
    9ab0:	00000106 	br	9ab8 <onFire+0x1c0>
    9ab4:	0005883a 	mov	r2,zero
}
    9ab8:	e037883a 	mov	sp,fp
    9abc:	df000017 	ldw	fp,0(sp)
    9ac0:	dec00104 	addi	sp,sp,4
    9ac4:	f800283a 	ret

00009ac8 <catchFire>:

int catchFire(player* playerA){
    9ac8:	defffb04 	addi	sp,sp,-20
    9acc:	dfc00415 	stw	ra,16(sp)
    9ad0:	df000315 	stw	fp,12(sp)
    9ad4:	df000304 	addi	fp,sp,12
    9ad8:	e13fff15 	stw	r4,-4(fp)
	unsigned short int x0 = playerA->x;
    9adc:	e0bfff17 	ldw	r2,-4(fp)
    9ae0:	1080008b 	ldhu	r2,2(r2)
    9ae4:	e0bffd0d 	sth	r2,-12(fp)
	unsigned short int y0 = playerA->y;
    9ae8:	e0bfff17 	ldw	r2,-4(fp)
    9aec:	1080010b 	ldhu	r2,4(r2)
    9af0:	e0bffd8d 	sth	r2,-10(fp)
    unsigned short int x1 = x0+25;
    9af4:	e0bffd0b 	ldhu	r2,-12(fp)
    9af8:	10800644 	addi	r2,r2,25
    9afc:	e0bffe0d 	sth	r2,-8(fp)
    unsigned short int y1 = y0+25;
    9b00:	e0bffd8b 	ldhu	r2,-10(fp)
    9b04:	10800644 	addi	r2,r2,25
    9b08:	e0bffe8d 	sth	r2,-6(fp)
    return (onFire(x0,y0)||onFire(x0,y1)||onFire(x1,y0)||onFire(x1,y1));
    9b0c:	e0bffd0b 	ldhu	r2,-12(fp)
    9b10:	e0fffd8b 	ldhu	r3,-10(fp)
    9b14:	180b883a 	mov	r5,r3
    9b18:	1009883a 	mov	r4,r2
    9b1c:	00098f80 	call	98f8 <onFire>
    9b20:	1000121e 	bne	r2,zero,9b6c <catchFire+0xa4>
    9b24:	e0bffd0b 	ldhu	r2,-12(fp)
    9b28:	e0fffe8b 	ldhu	r3,-6(fp)
    9b2c:	180b883a 	mov	r5,r3
    9b30:	1009883a 	mov	r4,r2
    9b34:	00098f80 	call	98f8 <onFire>
    9b38:	10000c1e 	bne	r2,zero,9b6c <catchFire+0xa4>
    9b3c:	e0bffe0b 	ldhu	r2,-8(fp)
    9b40:	e0fffd8b 	ldhu	r3,-10(fp)
    9b44:	180b883a 	mov	r5,r3
    9b48:	1009883a 	mov	r4,r2
    9b4c:	00098f80 	call	98f8 <onFire>
    9b50:	1000061e 	bne	r2,zero,9b6c <catchFire+0xa4>
    9b54:	e0bffe0b 	ldhu	r2,-8(fp)
    9b58:	e0fffe8b 	ldhu	r3,-6(fp)
    9b5c:	180b883a 	mov	r5,r3
    9b60:	1009883a 	mov	r4,r2
    9b64:	00098f80 	call	98f8 <onFire>
    9b68:	10000226 	beq	r2,zero,9b74 <catchFire+0xac>
    9b6c:	00800044 	movi	r2,1
    9b70:	00000106 	br	9b78 <catchFire+0xb0>
    9b74:	0005883a 	mov	r2,zero
}
    9b78:	e037883a 	mov	sp,fp
    9b7c:	dfc00117 	ldw	ra,4(sp)
    9b80:	df000017 	ldw	fp,0(sp)
    9b84:	dec00204 	addi	sp,sp,8
    9b88:	f800283a 	ret

00009b8c <placeBomb>:


int placeBomb(player* playerA, player* playerB){
    9b8c:	defff404 	addi	sp,sp,-48
    9b90:	dfc00b15 	stw	ra,44(sp)
    9b94:	df000a15 	stw	fp,40(sp)
    9b98:	df000a04 	addi	fp,sp,40
    9b9c:	e13ffe15 	stw	r4,-8(fp)
    9ba0:	e17fff15 	stw	r5,-4(fp)
	if(playerA->bombCounter == 0 || playerA->bombTimingCounter != 0){return 0;}
    9ba4:	e0bffe17 	ldw	r2,-8(fp)
    9ba8:	1080060b 	ldhu	r2,24(r2)
    9bac:	10bfffcc 	andi	r2,r2,65535
    9bb0:	10a0001c 	xori	r2,r2,32768
    9bb4:	10a00004 	addi	r2,r2,-32768
    9bb8:	10000626 	beq	r2,zero,9bd4 <placeBomb+0x48>
    9bbc:	e0bffe17 	ldw	r2,-8(fp)
    9bc0:	1080068b 	ldhu	r2,26(r2)
    9bc4:	10bfffcc 	andi	r2,r2,65535
    9bc8:	10a0001c 	xori	r2,r2,32768
    9bcc:	10a00004 	addi	r2,r2,-32768
    9bd0:	10000226 	beq	r2,zero,9bdc <placeBomb+0x50>
    9bd4:	0005883a 	mov	r2,zero
    9bd8:	00018c06 	br	a20c <placeBomb+0x680>
	unsigned short int AX =   (playerA->x+12)/32;
    9bdc:	e0bffe17 	ldw	r2,-8(fp)
    9be0:	1080008b 	ldhu	r2,2(r2)
    9be4:	10bfffcc 	andi	r2,r2,65535
    9be8:	10800304 	addi	r2,r2,12
    9bec:	1000010e 	bge	r2,zero,9bf4 <placeBomb+0x68>
    9bf0:	108007c4 	addi	r2,r2,31
    9bf4:	1005d17a 	srai	r2,r2,5
    9bf8:	e0bff78d 	sth	r2,-34(fp)
	unsigned short int AY =   (playerA->y+12)/32;
    9bfc:	e0bffe17 	ldw	r2,-8(fp)
    9c00:	1080010b 	ldhu	r2,4(r2)
    9c04:	10bfffcc 	andi	r2,r2,65535
    9c08:	10800304 	addi	r2,r2,12
    9c0c:	1000010e 	bge	r2,zero,9c14 <placeBomb+0x88>
    9c10:	108007c4 	addi	r2,r2,31
    9c14:	1005d17a 	srai	r2,r2,5
    9c18:	e0bff80d 	sth	r2,-32(fp)
	unsigned short int AX0 =  (playerA->x)/32;
    9c1c:	e0bffe17 	ldw	r2,-8(fp)
    9c20:	1080008b 	ldhu	r2,2(r2)
    9c24:	10bfffcc 	andi	r2,r2,65535
    9c28:	1004d17a 	srli	r2,r2,5
    9c2c:	e0bff88d 	sth	r2,-30(fp)
	unsigned short int AY0 =  (playerA->y)/32;
    9c30:	e0bffe17 	ldw	r2,-8(fp)
    9c34:	1080010b 	ldhu	r2,4(r2)
    9c38:	10bfffcc 	andi	r2,r2,65535
    9c3c:	1004d17a 	srli	r2,r2,5
    9c40:	e0bff90d 	sth	r2,-28(fp)
	unsigned short int AX1 =  (playerA->x+25)/32;
    9c44:	e0bffe17 	ldw	r2,-8(fp)
    9c48:	1080008b 	ldhu	r2,2(r2)
    9c4c:	10bfffcc 	andi	r2,r2,65535
    9c50:	10800644 	addi	r2,r2,25
    9c54:	1000010e 	bge	r2,zero,9c5c <placeBomb+0xd0>
    9c58:	108007c4 	addi	r2,r2,31
    9c5c:	1005d17a 	srai	r2,r2,5
    9c60:	e0bff98d 	sth	r2,-26(fp)
	unsigned short int AY1 =  (playerA->y+25)/32;
    9c64:	e0bffe17 	ldw	r2,-8(fp)
    9c68:	1080010b 	ldhu	r2,4(r2)
    9c6c:	10bfffcc 	andi	r2,r2,65535
    9c70:	10800644 	addi	r2,r2,25
    9c74:	1000010e 	bge	r2,zero,9c7c <placeBomb+0xf0>
    9c78:	108007c4 	addi	r2,r2,31
    9c7c:	1005d17a 	srai	r2,r2,5
    9c80:	e0bffa0d 	sth	r2,-24(fp)

	unsigned short int Bx0 =  playerB->x;
    9c84:	e0bfff17 	ldw	r2,-4(fp)
    9c88:	1080008b 	ldhu	r2,2(r2)
    9c8c:	e0bffa8d 	sth	r2,-22(fp)
	unsigned short int By0 =  playerB->y;
    9c90:	e0bfff17 	ldw	r2,-4(fp)
    9c94:	1080010b 	ldhu	r2,4(r2)
    9c98:	e0bffb0d 	sth	r2,-20(fp)
    unsigned short int X, Y;
	unsigned short int lastMove = playerA->lastMove;
    9c9c:	e0bffe17 	ldw	r2,-8(fp)
    9ca0:	1080070b 	ldhu	r2,28(r2)
    9ca4:	e0bffb8d 	sth	r2,-18(fp)
	switch(lastMove){
    9ca8:	e0bffb8b 	ldhu	r2,-18(fp)
    9cac:	10c00060 	cmpeqi	r3,r2,1
    9cb0:	1800411e 	bne	r3,zero,9db8 <placeBomb+0x22c>
    9cb4:	10c00088 	cmpgei	r3,r2,2
    9cb8:	1800021e 	bne	r3,zero,9cc4 <placeBomb+0x138>
    9cbc:	10000626 	beq	r2,zero,9cd8 <placeBomb+0x14c>
    9cc0:	0000e306 	br	a050 <placeBomb+0x4c4>
    9cc4:	10c000a0 	cmpeqi	r3,r2,2
    9cc8:	1800721e 	bne	r3,zero,9e94 <placeBomb+0x308>
    9ccc:	108000e0 	cmpeqi	r2,r2,3
    9cd0:	1000a81e 	bne	r2,zero,9f74 <placeBomb+0x3e8>
    9cd4:	0000de06 	br	a050 <placeBomb+0x4c4>
		case 0:
			if(AY-1<0){return 0;}
    9cd8:	e0bff80b 	ldhu	r2,-32(fp)
    9cdc:	10bfffc4 	addi	r2,r2,-1
    9ce0:	1000020e 	bge	r2,zero,9cec <placeBomb+0x160>
    9ce4:	0005883a 	mov	r2,zero
    9ce8:	00014806 	br	a20c <placeBomb+0x680>
			if(stage[AX][AY-1].type==0){
    9cec:	d0e6f917 	ldw	r3,-25628(gp)
    9cf0:	e0bff78b 	ldhu	r2,-34(fp)
    9cf4:	1085883a 	add	r2,r2,r2
    9cf8:	1085883a 	add	r2,r2,r2
    9cfc:	1885883a 	add	r2,r3,r2
    9d00:	10c00017 	ldw	r3,0(r2)
    9d04:	e13ff80b 	ldhu	r4,-32(fp)
    9d08:	00880034 	movhi	r2,8192
    9d0c:	10bfffc4 	addi	r2,r2,-1
    9d10:	2085883a 	add	r2,r4,r2
    9d14:	100490fa 	slli	r2,r2,3
    9d18:	1885883a 	add	r2,r3,r2
    9d1c:	1080000b 	ldhu	r2,0(r2)
    9d20:	10bfffcc 	andi	r2,r2,65535
    9d24:	1000221e 	bne	r2,zero,9db0 <placeBomb+0x224>
				X = AX;
    9d28:	e0bff78b 	ldhu	r2,-34(fp)
    9d2c:	e0bff60d 	sth	r2,-40(fp)
				Y = AY-1;
    9d30:	e0bff80b 	ldhu	r2,-32(fp)
    9d34:	10bfffc4 	addi	r2,r2,-1
    9d38:	e0bff68d 	sth	r2,-38(fp)
				if(AY0==Y){
    9d3c:	e0fff90b 	ldhu	r3,-28(fp)
    9d40:	e0bff68b 	ldhu	r2,-38(fp)
    9d44:	1880c41e 	bne	r3,r2,a058 <placeBomb+0x4cc>
					playerA->y = (Y+1)*32;
    9d48:	e0bff68b 	ldhu	r2,-38(fp)
    9d4c:	10800044 	addi	r2,r2,1
    9d50:	1004917a 	slli	r2,r2,5
    9d54:	1007883a 	mov	r3,r2
    9d58:	e0bffe17 	ldw	r2,-8(fp)
    9d5c:	10c0010d 	sth	r3,4(r2)
					cleanCell(X,Y);
    9d60:	e0bff60b 	ldhu	r2,-40(fp)
    9d64:	e0fff68b 	ldhu	r3,-38(fp)
    9d68:	180b883a 	mov	r5,r3
    9d6c:	1009883a 	mov	r4,r2
    9d70:	00038a00 	call	38a0 <cleanCell>
					cleanCell(X,Y+1);
    9d74:	e0fff60b 	ldhu	r3,-40(fp)
    9d78:	e0bff68b 	ldhu	r2,-38(fp)
    9d7c:	10800044 	addi	r2,r2,1
    9d80:	10bfffcc 	andi	r2,r2,65535
    9d84:	100b883a 	mov	r5,r2
    9d88:	1809883a 	mov	r4,r3
    9d8c:	00038a00 	call	38a0 <cleanCell>
					drawPlayer(playerA->lastMove, playerA,0);
    9d90:	e0bffe17 	ldw	r2,-8(fp)
    9d94:	1080070b 	ldhu	r2,28(r2)
    9d98:	10bfffcc 	andi	r2,r2,65535
    9d9c:	000d883a 	mov	r6,zero
    9da0:	e17ffe17 	ldw	r5,-8(fp)
    9da4:	1009883a 	mov	r4,r2
    9da8:	0003b500 	call	3b50 <drawPlayer>
				}
				break;
    9dac:	0000aa06 	br	a058 <placeBomb+0x4cc>
			}
			else{return 0;}
    9db0:	0005883a 	mov	r2,zero
    9db4:	00011506 	br	a20c <placeBomb+0x680>
		case 1:
			if(AY+1>14){return 0;}
    9db8:	e0bff80b 	ldhu	r2,-32(fp)
    9dbc:	10800044 	addi	r2,r2,1
    9dc0:	108003d0 	cmplti	r2,r2,15
    9dc4:	1000021e 	bne	r2,zero,9dd0 <placeBomb+0x244>
    9dc8:	0005883a 	mov	r2,zero
    9dcc:	00010f06 	br	a20c <placeBomb+0x680>
			if(stage[AX][AY+1].type==0){
    9dd0:	d0e6f917 	ldw	r3,-25628(gp)
    9dd4:	e0bff78b 	ldhu	r2,-34(fp)
    9dd8:	1085883a 	add	r2,r2,r2
    9ddc:	1085883a 	add	r2,r2,r2
    9de0:	1885883a 	add	r2,r3,r2
    9de4:	10c00017 	ldw	r3,0(r2)
    9de8:	e0bff80b 	ldhu	r2,-32(fp)
    9dec:	10800044 	addi	r2,r2,1
    9df0:	100490fa 	slli	r2,r2,3
    9df4:	1885883a 	add	r2,r3,r2
    9df8:	1080000b 	ldhu	r2,0(r2)
    9dfc:	10bfffcc 	andi	r2,r2,65535
    9e00:	1000221e 	bne	r2,zero,9e8c <placeBomb+0x300>
				X = AX;
    9e04:	e0bff78b 	ldhu	r2,-34(fp)
    9e08:	e0bff60d 	sth	r2,-40(fp)
				Y = AY+1;
    9e0c:	e0bff80b 	ldhu	r2,-32(fp)
    9e10:	10800044 	addi	r2,r2,1
    9e14:	e0bff68d 	sth	r2,-38(fp)
				if(AY1==Y){
    9e18:	e0fffa0b 	ldhu	r3,-24(fp)
    9e1c:	e0bff68b 	ldhu	r2,-38(fp)
    9e20:	18808f1e 	bne	r3,r2,a060 <placeBomb+0x4d4>
					playerA->y = (Y-1)*32;
    9e24:	e0bff68b 	ldhu	r2,-38(fp)
    9e28:	10bfffc4 	addi	r2,r2,-1
    9e2c:	1004917a 	slli	r2,r2,5
    9e30:	1007883a 	mov	r3,r2
    9e34:	e0bffe17 	ldw	r2,-8(fp)
    9e38:	10c0010d 	sth	r3,4(r2)
					cleanCell(X,Y);
    9e3c:	e0bff60b 	ldhu	r2,-40(fp)
    9e40:	e0fff68b 	ldhu	r3,-38(fp)
    9e44:	180b883a 	mov	r5,r3
    9e48:	1009883a 	mov	r4,r2
    9e4c:	00038a00 	call	38a0 <cleanCell>
					cleanCell(X,Y-1);
    9e50:	e0fff60b 	ldhu	r3,-40(fp)
    9e54:	e0bff68b 	ldhu	r2,-38(fp)
    9e58:	10bfffc4 	addi	r2,r2,-1
    9e5c:	10bfffcc 	andi	r2,r2,65535
    9e60:	100b883a 	mov	r5,r2
    9e64:	1809883a 	mov	r4,r3
    9e68:	00038a00 	call	38a0 <cleanCell>
					drawPlayer(playerA->lastMove, playerA,0);
    9e6c:	e0bffe17 	ldw	r2,-8(fp)
    9e70:	1080070b 	ldhu	r2,28(r2)
    9e74:	10bfffcc 	andi	r2,r2,65535
    9e78:	000d883a 	mov	r6,zero
    9e7c:	e17ffe17 	ldw	r5,-8(fp)
    9e80:	1009883a 	mov	r4,r2
    9e84:	0003b500 	call	3b50 <drawPlayer>
				}
				break;
    9e88:	00007506 	br	a060 <placeBomb+0x4d4>
			}
			else{return 0;}
    9e8c:	0005883a 	mov	r2,zero
    9e90:	0000de06 	br	a20c <placeBomb+0x680>
		case 2:
			if(AX-1<0){return 0;}
    9e94:	e0bff78b 	ldhu	r2,-34(fp)
    9e98:	10bfffc4 	addi	r2,r2,-1
    9e9c:	1000020e 	bge	r2,zero,9ea8 <placeBomb+0x31c>
    9ea0:	0005883a 	mov	r2,zero
    9ea4:	0000d906 	br	a20c <placeBomb+0x680>
			if(stage[AX-1][AY].type==0){
    9ea8:	d0e6f917 	ldw	r3,-25628(gp)
    9eac:	e13ff78b 	ldhu	r4,-34(fp)
    9eb0:	00900034 	movhi	r2,16384
    9eb4:	10bfffc4 	addi	r2,r2,-1
    9eb8:	2085883a 	add	r2,r4,r2
    9ebc:	1085883a 	add	r2,r2,r2
    9ec0:	1085883a 	add	r2,r2,r2
    9ec4:	1885883a 	add	r2,r3,r2
    9ec8:	10c00017 	ldw	r3,0(r2)
    9ecc:	e0bff80b 	ldhu	r2,-32(fp)
    9ed0:	100490fa 	slli	r2,r2,3
    9ed4:	1885883a 	add	r2,r3,r2
    9ed8:	1080000b 	ldhu	r2,0(r2)
    9edc:	10bfffcc 	andi	r2,r2,65535
    9ee0:	1000221e 	bne	r2,zero,9f6c <placeBomb+0x3e0>
				X = AX-1;
    9ee4:	e0bff78b 	ldhu	r2,-34(fp)
    9ee8:	10bfffc4 	addi	r2,r2,-1
    9eec:	e0bff60d 	sth	r2,-40(fp)
				Y = AY;
    9ef0:	e0bff80b 	ldhu	r2,-32(fp)
    9ef4:	e0bff68d 	sth	r2,-38(fp)
				if(AX0==X){
    9ef8:	e0fff88b 	ldhu	r3,-30(fp)
    9efc:	e0bff60b 	ldhu	r2,-40(fp)
    9f00:	1880591e 	bne	r3,r2,a068 <placeBomb+0x4dc>
					playerA->x = (X+1)*32;
    9f04:	e0bff60b 	ldhu	r2,-40(fp)
    9f08:	10800044 	addi	r2,r2,1
    9f0c:	1004917a 	slli	r2,r2,5
    9f10:	1007883a 	mov	r3,r2
    9f14:	e0bffe17 	ldw	r2,-8(fp)
    9f18:	10c0008d 	sth	r3,2(r2)
					cleanCell(X,Y);
    9f1c:	e0bff60b 	ldhu	r2,-40(fp)
    9f20:	e0fff68b 	ldhu	r3,-38(fp)
    9f24:	180b883a 	mov	r5,r3
    9f28:	1009883a 	mov	r4,r2
    9f2c:	00038a00 	call	38a0 <cleanCell>
					cleanCell(X+1,Y);
    9f30:	e0bff60b 	ldhu	r2,-40(fp)
    9f34:	10800044 	addi	r2,r2,1
    9f38:	10bfffcc 	andi	r2,r2,65535
    9f3c:	e0fff68b 	ldhu	r3,-38(fp)
    9f40:	180b883a 	mov	r5,r3
    9f44:	1009883a 	mov	r4,r2
    9f48:	00038a00 	call	38a0 <cleanCell>
					drawPlayer(playerA->lastMove, playerA,0);
    9f4c:	e0bffe17 	ldw	r2,-8(fp)
    9f50:	1080070b 	ldhu	r2,28(r2)
    9f54:	10bfffcc 	andi	r2,r2,65535
    9f58:	000d883a 	mov	r6,zero
    9f5c:	e17ffe17 	ldw	r5,-8(fp)
    9f60:	1009883a 	mov	r4,r2
    9f64:	0003b500 	call	3b50 <drawPlayer>
				}
				break;
    9f68:	00003f06 	br	a068 <placeBomb+0x4dc>
			}
			else{return 0;}
    9f6c:	0005883a 	mov	r2,zero
    9f70:	0000a606 	br	a20c <placeBomb+0x680>
		case 3:
			if(AX+1>19){return 0;}
    9f74:	e0bff78b 	ldhu	r2,-34(fp)
    9f78:	10800044 	addi	r2,r2,1
    9f7c:	10800510 	cmplti	r2,r2,20
    9f80:	1000021e 	bne	r2,zero,9f8c <placeBomb+0x400>
    9f84:	0005883a 	mov	r2,zero
    9f88:	0000a006 	br	a20c <placeBomb+0x680>
			if(stage[AX+1][AY].type==0){
    9f8c:	d0e6f917 	ldw	r3,-25628(gp)
    9f90:	e0bff78b 	ldhu	r2,-34(fp)
    9f94:	10800044 	addi	r2,r2,1
    9f98:	1085883a 	add	r2,r2,r2
    9f9c:	1085883a 	add	r2,r2,r2
    9fa0:	1885883a 	add	r2,r3,r2
    9fa4:	10c00017 	ldw	r3,0(r2)
    9fa8:	e0bff80b 	ldhu	r2,-32(fp)
    9fac:	100490fa 	slli	r2,r2,3
    9fb0:	1885883a 	add	r2,r3,r2
    9fb4:	1080000b 	ldhu	r2,0(r2)
    9fb8:	10bfffcc 	andi	r2,r2,65535
    9fbc:	1000221e 	bne	r2,zero,a048 <placeBomb+0x4bc>
				X = AX+1;
    9fc0:	e0bff78b 	ldhu	r2,-34(fp)
    9fc4:	10800044 	addi	r2,r2,1
    9fc8:	e0bff60d 	sth	r2,-40(fp)
				Y = AY;
    9fcc:	e0bff80b 	ldhu	r2,-32(fp)
    9fd0:	e0bff68d 	sth	r2,-38(fp)
				if(AX1==X){
    9fd4:	e0fff98b 	ldhu	r3,-26(fp)
    9fd8:	e0bff60b 	ldhu	r2,-40(fp)
    9fdc:	1880241e 	bne	r3,r2,a070 <placeBomb+0x4e4>
					playerA->x = (X-1)*32;
    9fe0:	e0bff60b 	ldhu	r2,-40(fp)
    9fe4:	10bfffc4 	addi	r2,r2,-1
    9fe8:	1004917a 	slli	r2,r2,5
    9fec:	1007883a 	mov	r3,r2
    9ff0:	e0bffe17 	ldw	r2,-8(fp)
    9ff4:	10c0008d 	sth	r3,2(r2)
					cleanCell(X,Y);
    9ff8:	e0bff60b 	ldhu	r2,-40(fp)
    9ffc:	e0fff68b 	ldhu	r3,-38(fp)
    a000:	180b883a 	mov	r5,r3
    a004:	1009883a 	mov	r4,r2
    a008:	00038a00 	call	38a0 <cleanCell>
					cleanCell(X-1,Y);
    a00c:	e0bff60b 	ldhu	r2,-40(fp)
    a010:	10bfffc4 	addi	r2,r2,-1
    a014:	10bfffcc 	andi	r2,r2,65535
    a018:	e0fff68b 	ldhu	r3,-38(fp)
    a01c:	180b883a 	mov	r5,r3
    a020:	1009883a 	mov	r4,r2
    a024:	00038a00 	call	38a0 <cleanCell>
					drawPlayer(playerA->lastMove, playerA,0);
    a028:	e0bffe17 	ldw	r2,-8(fp)
    a02c:	1080070b 	ldhu	r2,28(r2)
    a030:	10bfffcc 	andi	r2,r2,65535
    a034:	000d883a 	mov	r6,zero
    a038:	e17ffe17 	ldw	r5,-8(fp)
    a03c:	1009883a 	mov	r4,r2
    a040:	0003b500 	call	3b50 <drawPlayer>
				}
				break;
    a044:	00000a06 	br	a070 <placeBomb+0x4e4>
			}
			else{return 0;}
    a048:	0005883a 	mov	r2,zero
    a04c:	00006f06 	br	a20c <placeBomb+0x680>
		default:
			return 0;
    a050:	0005883a 	mov	r2,zero
    a054:	00006d06 	br	a20c <placeBomb+0x680>
					playerA->y = (Y+1)*32;
					cleanCell(X,Y);
					cleanCell(X,Y+1);
					drawPlayer(playerA->lastMove, playerA,0);
				}
				break;
    a058:	0001883a 	nop
    a05c:	00000506 	br	a074 <placeBomb+0x4e8>
					playerA->y = (Y-1)*32;
					cleanCell(X,Y);
					cleanCell(X,Y-1);
					drawPlayer(playerA->lastMove, playerA,0);
				}
				break;
    a060:	0001883a 	nop
    a064:	00000306 	br	a074 <placeBomb+0x4e8>
					playerA->x = (X+1)*32;
					cleanCell(X,Y);
					cleanCell(X+1,Y);
					drawPlayer(playerA->lastMove, playerA,0);
				}
				break;
    a068:	0001883a 	nop
    a06c:	00000106 	br	a074 <placeBomb+0x4e8>
					playerA->x = (X-1)*32;
					cleanCell(X,Y);
					cleanCell(X-1,Y);
					drawPlayer(playerA->lastMove, playerA,0);
				}
				break;
    a070:	0001883a 	nop
			else{return 0;}
		default:
			return 0;
	}

	unsigned short int x = X*32;
    a074:	e0bff60b 	ldhu	r2,-40(fp)
    a078:	1004917a 	slli	r2,r2,5
    a07c:	e0bffc0d 	sth	r2,-16(fp)
	unsigned short int y = Y*32;
    a080:	e0bff68b 	ldhu	r2,-38(fp)
    a084:	1004917a 	slli	r2,r2,5
    a088:	e0bffc8d 	sth	r2,-14(fp)
    unsigned short int delta_x = x>Bx0 ? x-Bx0 : Bx0-x;
    a08c:	e0bffc0b 	ldhu	r2,-16(fp)
    a090:	e0fffa8b 	ldhu	r3,-22(fp)
    a094:	1880042e 	bgeu	r3,r2,a0a8 <placeBomb+0x51c>
    a098:	e0fffc0b 	ldhu	r3,-16(fp)
    a09c:	e0bffa8b 	ldhu	r2,-22(fp)
    a0a0:	1885c83a 	sub	r2,r3,r2
    a0a4:	00000306 	br	a0b4 <placeBomb+0x528>
    a0a8:	e0fffa8b 	ldhu	r3,-22(fp)
    a0ac:	e0bffc0b 	ldhu	r2,-16(fp)
    a0b0:	1885c83a 	sub	r2,r3,r2
    a0b4:	e0bffd0d 	sth	r2,-12(fp)
    unsigned short int delta_y = y>By0 ? y-By0 : By0-y;
    a0b8:	e0bffc8b 	ldhu	r2,-14(fp)
    a0bc:	e0fffb0b 	ldhu	r3,-20(fp)
    a0c0:	1880042e 	bgeu	r3,r2,a0d4 <placeBomb+0x548>
    a0c4:	e0fffc8b 	ldhu	r3,-14(fp)
    a0c8:	e0bffb0b 	ldhu	r2,-20(fp)
    a0cc:	1885c83a 	sub	r2,r3,r2
    a0d0:	00000306 	br	a0e0 <placeBomb+0x554>
    a0d4:	e0fffb0b 	ldhu	r3,-20(fp)
    a0d8:	e0bffc8b 	ldhu	r2,-14(fp)
    a0dc:	1885c83a 	sub	r2,r3,r2
    a0e0:	e0bffd8d 	sth	r2,-10(fp)
    if(delta_x <= 32 && delta_y <= 32){return 0;}
    a0e4:	e0bffd0b 	ldhu	r2,-12(fp)
    a0e8:	10800868 	cmpgeui	r2,r2,33
    a0ec:	1000051e 	bne	r2,zero,a104 <placeBomb+0x578>
    a0f0:	e0bffd8b 	ldhu	r2,-10(fp)
    a0f4:	10800868 	cmpgeui	r2,r2,33
    a0f8:	1000021e 	bne	r2,zero,a104 <placeBomb+0x578>
    a0fc:	0005883a 	mov	r2,zero
    a100:	00004206 	br	a20c <placeBomb+0x680>

    //conditional check finish at this line
	playerA->bombCounter --;
    a104:	e0bffe17 	ldw	r2,-8(fp)
    a108:	1080060b 	ldhu	r2,24(r2)
    a10c:	10bfffc4 	addi	r2,r2,-1
    a110:	1007883a 	mov	r3,r2
    a114:	e0bffe17 	ldw	r2,-8(fp)
    a118:	10c0060d 	sth	r3,24(r2)
	playerA->bombTimingCounter = 50;
    a11c:	e0bffe17 	ldw	r2,-8(fp)
    a120:	00c00c84 	movi	r3,50
    a124:	10c0068d 	sth	r3,26(r2)
	for(unsigned short int i=0; i<3; i++){
    a128:	e03ff70d 	sth	zero,-36(fp)
    a12c:	00003306 	br	a1fc <placeBomb+0x670>
		if(playerA->bombList[i].active==0){
    a130:	e0bffe17 	ldw	r2,-8(fp)
    a134:	10c00517 	ldw	r3,20(r2)
    a138:	e0bff70b 	ldhu	r2,-36(fp)
    a13c:	100490fa 	slli	r2,r2,3
    a140:	1885883a 	add	r2,r3,r2
    a144:	1080000b 	ldhu	r2,0(r2)
    a148:	10bfffcc 	andi	r2,r2,65535
    a14c:	1000281e 	bne	r2,zero,a1f0 <placeBomb+0x664>
			playerA->bombList[i].active=1;
    a150:	e0bffe17 	ldw	r2,-8(fp)
    a154:	10c00517 	ldw	r3,20(r2)
    a158:	e0bff70b 	ldhu	r2,-36(fp)
    a15c:	100490fa 	slli	r2,r2,3
    a160:	1885883a 	add	r2,r3,r2
    a164:	00c00044 	movi	r3,1
    a168:	10c0000d 	sth	r3,0(r2)
			playerA->bombList[i].counter=0;
    a16c:	e0bffe17 	ldw	r2,-8(fp)
    a170:	10c00517 	ldw	r3,20(r2)
    a174:	e0bff70b 	ldhu	r2,-36(fp)
    a178:	100490fa 	slli	r2,r2,3
    a17c:	1885883a 	add	r2,r3,r2
    a180:	1000018d 	sth	zero,6(r2)
			playerA->bombList[i].X=X;
    a184:	e0bffe17 	ldw	r2,-8(fp)
    a188:	10c00517 	ldw	r3,20(r2)
    a18c:	e0bff70b 	ldhu	r2,-36(fp)
    a190:	100490fa 	slli	r2,r2,3
    a194:	1885883a 	add	r2,r3,r2
    a198:	e0fff60b 	ldhu	r3,-40(fp)
    a19c:	10c0008d 	sth	r3,2(r2)
			playerA->bombList[i].Y=Y;
    a1a0:	e0bffe17 	ldw	r2,-8(fp)
    a1a4:	10c00517 	ldw	r3,20(r2)
    a1a8:	e0bff70b 	ldhu	r2,-36(fp)
    a1ac:	100490fa 	slli	r2,r2,3
    a1b0:	1885883a 	add	r2,r3,r2
    a1b4:	e0fff68b 	ldhu	r3,-38(fp)
    a1b8:	10c0010d 	sth	r3,4(r2)
			stage[X][Y].type=3;
    a1bc:	d0e6f917 	ldw	r3,-25628(gp)
    a1c0:	e0bff60b 	ldhu	r2,-40(fp)
    a1c4:	1085883a 	add	r2,r2,r2
    a1c8:	1085883a 	add	r2,r2,r2
    a1cc:	1885883a 	add	r2,r3,r2
    a1d0:	10c00017 	ldw	r3,0(r2)
    a1d4:	e0bff68b 	ldhu	r2,-38(fp)
    a1d8:	100490fa 	slli	r2,r2,3
    a1dc:	1885883a 	add	r2,r3,r2
    a1e0:	00c000c4 	movi	r3,3
    a1e4:	10c0000d 	sth	r3,0(r2)
			return 1;
    a1e8:	00800044 	movi	r2,1
    a1ec:	00000706 	br	a20c <placeBomb+0x680>
    if(delta_x <= 32 && delta_y <= 32){return 0;}

    //conditional check finish at this line
	playerA->bombCounter --;
	playerA->bombTimingCounter = 50;
	for(unsigned short int i=0; i<3; i++){
    a1f0:	e0bff70b 	ldhu	r2,-36(fp)
    a1f4:	10800044 	addi	r2,r2,1
    a1f8:	e0bff70d 	sth	r2,-36(fp)
    a1fc:	e0bff70b 	ldhu	r2,-36(fp)
    a200:	108000f0 	cmpltui	r2,r2,3
    a204:	103fca1e 	bne	r2,zero,a130 <__alt_data_end+0xf800a130>
			playerA->bombList[i].Y=Y;
			stage[X][Y].type=3;
			return 1;
		}
	}
	return 0;
    a208:	0005883a 	mov	r2,zero
}
    a20c:	e037883a 	mov	sp,fp
    a210:	dfc00117 	ldw	ra,4(sp)
    a214:	df000017 	ldw	fp,0(sp)
    a218:	dec00204 	addi	sp,sp,8
    a21c:	f800283a 	ret

0000a220 <UpdateBomb>:


void UpdateBomb(player* playerA, player* playerB){
    a220:	defff204 	addi	sp,sp,-56
    a224:	dfc00d15 	stw	ra,52(sp)
    a228:	df000c15 	stw	fp,48(sp)
    a22c:	dc000b15 	stw	r16,44(sp)
    a230:	df000c04 	addi	fp,sp,48
    a234:	e13ffd15 	stw	r4,-12(fp)
    a238:	e17ffe15 	stw	r5,-8(fp)
	if(playerA->bombCounter<3){
    a23c:	e0bffd17 	ldw	r2,-12(fp)
    a240:	1080060b 	ldhu	r2,24(r2)
    a244:	10bfffcc 	andi	r2,r2,65535
    a248:	10a0001c 	xori	r2,r2,32768
    a24c:	10a00004 	addi	r2,r2,-32768
    a250:	108000c8 	cmpgei	r2,r2,3
    a254:	1000791e 	bne	r2,zero,a43c <UpdateBomb+0x21c>
		for(unsigned short int i =0; i<3; i++){
    a258:	e03ff70d 	sth	zero,-36(fp)
    a25c:	00007406 	br	a430 <UpdateBomb+0x210>
			bomb b = (playerA->bombList)[i];
    a260:	e0bffd17 	ldw	r2,-12(fp)
    a264:	10c00517 	ldw	r3,20(r2)
    a268:	e0bff70b 	ldhu	r2,-36(fp)
    a26c:	100490fa 	slli	r2,r2,3
    a270:	1885883a 	add	r2,r3,r2
    a274:	10c0000b 	ldhu	r3,0(r2)
    a278:	e0fff90d 	sth	r3,-28(fp)
    a27c:	10c0008b 	ldhu	r3,2(r2)
    a280:	e0fff98d 	sth	r3,-26(fp)
    a284:	10c0010b 	ldhu	r3,4(r2)
    a288:	e0fffa0d 	sth	r3,-24(fp)
    a28c:	1080018b 	ldhu	r2,6(r2)
    a290:	e0bffa8d 	sth	r2,-22(fp)
			if(b.active == 0){continue;}
    a294:	e0bff90b 	ldhu	r2,-28(fp)
    a298:	10bfffcc 	andi	r2,r2,65535
    a29c:	10006026 	beq	r2,zero,a420 <UpdateBomb+0x200>
			unsigned short int index = 40+i;
    a2a0:	e0bff70b 	ldhu	r2,-36(fp)
    a2a4:	10800a04 	addi	r2,r2,40
    a2a8:	e0bff80d 	sth	r2,-32(fp)
			if(b.counter == 841){
    a2ac:	e0bffa8b 	ldhu	r2,-22(fp)
    a2b0:	10bfffcc 	andi	r2,r2,65535
    a2b4:	1080d258 	cmpnei	r2,r2,841
    a2b8:	1000221e 	bne	r2,zero,a344 <UpdateBomb+0x124>
				drawBombAndExplosion(index, 999, b.X, b.Y, stage, &coinHead, &coinTail);
    a2bc:	e13ff80b 	ldhu	r4,-32(fp)
    a2c0:	e0bff98b 	ldhu	r2,-26(fp)
    a2c4:	117fffcc 	andi	r5,r2,65535
    a2c8:	e0bffa0b 	ldhu	r2,-24(fp)
    a2cc:	11bfffcc 	andi	r6,r2,65535
    a2d0:	d0a6f917 	ldw	r2,-25628(gp)
    a2d4:	d0e6fb04 	addi	r3,gp,-25620
    a2d8:	d8c00215 	stw	r3,8(sp)
    a2dc:	d0e6fa04 	addi	r3,gp,-25624
    a2e0:	d8c00115 	stw	r3,4(sp)
    a2e4:	d8800015 	stw	r2,0(sp)
    a2e8:	300f883a 	mov	r7,r6
    a2ec:	280d883a 	mov	r6,r5
    a2f0:	0140f9c4 	movi	r5,999
    a2f4:	00065200 	call	6520 <drawBombAndExplosion>
				(playerA->bombList)[i].counter = 0;
    a2f8:	e0bffd17 	ldw	r2,-12(fp)
    a2fc:	10c00517 	ldw	r3,20(r2)
    a300:	e0bff70b 	ldhu	r2,-36(fp)
    a304:	100490fa 	slli	r2,r2,3
    a308:	1885883a 	add	r2,r3,r2
    a30c:	1000018d 	sth	zero,6(r2)
				(playerA->bombList)[i].active = 0;
    a310:	e0bffd17 	ldw	r2,-12(fp)
    a314:	10c00517 	ldw	r3,20(r2)
    a318:	e0bff70b 	ldhu	r2,-36(fp)
    a31c:	100490fa 	slli	r2,r2,3
    a320:	1885883a 	add	r2,r3,r2
    a324:	1000000d 	sth	zero,0(r2)
				playerA-> bombCounter ++;
    a328:	e0bffd17 	ldw	r2,-12(fp)
    a32c:	1080060b 	ldhu	r2,24(r2)
    a330:	10800044 	addi	r2,r2,1
    a334:	1007883a 	mov	r3,r2
    a338:	e0bffd17 	ldw	r2,-12(fp)
    a33c:	10c0060d 	sth	r3,24(r2)
				continue;
    a340:	00003806 	br	a424 <UpdateBomb+0x204>
			}
			else if(b.counter%10==0){
    a344:	e0bffa8b 	ldhu	r2,-22(fp)
    a348:	10bfffcc 	andi	r2,r2,65535
    a34c:	01400284 	movi	r5,10
    a350:	1009883a 	mov	r4,r2
    a354:	000c6340 	call	c634 <__umodsi3>
    a358:	10bfffcc 	andi	r2,r2,65535
    a35c:	1000271e 	bne	r2,zero,a3fc <UpdateBomb+0x1dc>
				drawBombAndExplosion(index, b.counter/10, b.X, b.Y, stage, &coinHead, &coinTail);
    a360:	e43ff80b 	ldhu	r16,-32(fp)
    a364:	e0bffa8b 	ldhu	r2,-22(fp)
    a368:	10bfffcc 	andi	r2,r2,65535
    a36c:	01400284 	movi	r5,10
    a370:	1009883a 	mov	r4,r2
    a374:	000c5d00 	call	c5d0 <__udivsi3>
    a378:	113fffcc 	andi	r4,r2,65535
    a37c:	e0bff98b 	ldhu	r2,-26(fp)
    a380:	117fffcc 	andi	r5,r2,65535
    a384:	e0bffa0b 	ldhu	r2,-24(fp)
    a388:	11bfffcc 	andi	r6,r2,65535
    a38c:	d0a6f917 	ldw	r2,-25628(gp)
    a390:	d0e6fb04 	addi	r3,gp,-25620
    a394:	d8c00215 	stw	r3,8(sp)
    a398:	d0e6fa04 	addi	r3,gp,-25624
    a39c:	d8c00115 	stw	r3,4(sp)
    a3a0:	d8800015 	stw	r2,0(sp)
    a3a4:	300f883a 	mov	r7,r6
    a3a8:	280d883a 	mov	r6,r5
    a3ac:	200b883a 	mov	r5,r4
    a3b0:	8009883a 	mov	r4,r16
    a3b4:	00065200 	call	6520 <drawBombAndExplosion>
				if(b.counter == 350){(playerA->bombList)[i].counter +=9;}
    a3b8:	e0bffa8b 	ldhu	r2,-22(fp)
    a3bc:	10bfffcc 	andi	r2,r2,65535
    a3c0:	10805798 	cmpnei	r2,r2,350
    a3c4:	10000d1e 	bne	r2,zero,a3fc <UpdateBomb+0x1dc>
    a3c8:	e0bffd17 	ldw	r2,-12(fp)
    a3cc:	10c00517 	ldw	r3,20(r2)
    a3d0:	e0bff70b 	ldhu	r2,-36(fp)
    a3d4:	100490fa 	slli	r2,r2,3
    a3d8:	1885883a 	add	r2,r3,r2
    a3dc:	e0fffd17 	ldw	r3,-12(fp)
    a3e0:	19000517 	ldw	r4,20(r3)
    a3e4:	e0fff70b 	ldhu	r3,-36(fp)
    a3e8:	180690fa 	slli	r3,r3,3
    a3ec:	20c7883a 	add	r3,r4,r3
    a3f0:	18c0018b 	ldhu	r3,6(r3)
    a3f4:	18c00244 	addi	r3,r3,9
    a3f8:	10c0018d 	sth	r3,6(r2)
			}
			(playerA->bombList)[i].counter++;
    a3fc:	e0bffd17 	ldw	r2,-12(fp)
    a400:	10c00517 	ldw	r3,20(r2)
    a404:	e0bff70b 	ldhu	r2,-36(fp)
    a408:	100490fa 	slli	r2,r2,3
    a40c:	1885883a 	add	r2,r3,r2
    a410:	10c0018b 	ldhu	r3,6(r2)
    a414:	18c00044 	addi	r3,r3,1
    a418:	10c0018d 	sth	r3,6(r2)
    a41c:	00000106 	br	a424 <UpdateBomb+0x204>

void UpdateBomb(player* playerA, player* playerB){
	if(playerA->bombCounter<3){
		for(unsigned short int i =0; i<3; i++){
			bomb b = (playerA->bombList)[i];
			if(b.active == 0){continue;}
    a420:	0001883a 	nop
}


void UpdateBomb(player* playerA, player* playerB){
	if(playerA->bombCounter<3){
		for(unsigned short int i =0; i<3; i++){
    a424:	e0bff70b 	ldhu	r2,-36(fp)
    a428:	10800044 	addi	r2,r2,1
    a42c:	e0bff70d 	sth	r2,-36(fp)
    a430:	e0bff70b 	ldhu	r2,-36(fp)
    a434:	108000f0 	cmpltui	r2,r2,3
    a438:	103f891e 	bne	r2,zero,a260 <__alt_data_end+0xf800a260>
				if(b.counter == 350){(playerA->bombList)[i].counter +=9;}
			}
			(playerA->bombList)[i].counter++;
		}
	}
	if(playerB->bombCounter<3){
    a43c:	e0bffe17 	ldw	r2,-8(fp)
    a440:	1080060b 	ldhu	r2,24(r2)
    a444:	10bfffcc 	andi	r2,r2,65535
    a448:	10a0001c 	xori	r2,r2,32768
    a44c:	10a00004 	addi	r2,r2,-32768
    a450:	108000c8 	cmpgei	r2,r2,3
    a454:	1000791e 	bne	r2,zero,a63c <UpdateBomb+0x41c>
		for(unsigned short int i =0; i<3; i++){
    a458:	e03ff78d 	sth	zero,-34(fp)
    a45c:	00007406 	br	a630 <UpdateBomb+0x410>
			bomb b = (playerB->bombList)[i];
    a460:	e0bffe17 	ldw	r2,-8(fp)
    a464:	10c00517 	ldw	r3,20(r2)
    a468:	e0bff78b 	ldhu	r2,-34(fp)
    a46c:	100490fa 	slli	r2,r2,3
    a470:	1885883a 	add	r2,r3,r2
    a474:	10c0000b 	ldhu	r3,0(r2)
    a478:	e0fffb0d 	sth	r3,-20(fp)
    a47c:	10c0008b 	ldhu	r3,2(r2)
    a480:	e0fffb8d 	sth	r3,-18(fp)
    a484:	10c0010b 	ldhu	r3,4(r2)
    a488:	e0fffc0d 	sth	r3,-16(fp)
    a48c:	1080018b 	ldhu	r2,6(r2)
    a490:	e0bffc8d 	sth	r2,-14(fp)
			if(b.active == 0){continue;}
    a494:	e0bffb0b 	ldhu	r2,-20(fp)
    a498:	10bfffcc 	andi	r2,r2,65535
    a49c:	10006026 	beq	r2,zero,a620 <UpdateBomb+0x400>
			unsigned short int index = 50+i;
    a4a0:	e0bff78b 	ldhu	r2,-34(fp)
    a4a4:	10800c84 	addi	r2,r2,50
    a4a8:	e0bff88d 	sth	r2,-30(fp)
			if(b.counter == 841){
    a4ac:	e0bffc8b 	ldhu	r2,-14(fp)
    a4b0:	10bfffcc 	andi	r2,r2,65535
    a4b4:	1080d258 	cmpnei	r2,r2,841
    a4b8:	1000221e 	bne	r2,zero,a544 <UpdateBomb+0x324>
				drawBombAndExplosion(index,999, b.X, b.Y, stage, &coinHead, &coinTail);
    a4bc:	e13ff88b 	ldhu	r4,-30(fp)
    a4c0:	e0bffb8b 	ldhu	r2,-18(fp)
    a4c4:	117fffcc 	andi	r5,r2,65535
    a4c8:	e0bffc0b 	ldhu	r2,-16(fp)
    a4cc:	11bfffcc 	andi	r6,r2,65535
    a4d0:	d0a6f917 	ldw	r2,-25628(gp)
    a4d4:	d0e6fb04 	addi	r3,gp,-25620
    a4d8:	d8c00215 	stw	r3,8(sp)
    a4dc:	d0e6fa04 	addi	r3,gp,-25624
    a4e0:	d8c00115 	stw	r3,4(sp)
    a4e4:	d8800015 	stw	r2,0(sp)
    a4e8:	300f883a 	mov	r7,r6
    a4ec:	280d883a 	mov	r6,r5
    a4f0:	0140f9c4 	movi	r5,999
    a4f4:	00065200 	call	6520 <drawBombAndExplosion>
				(playerB->bombList)[i].counter = 0;
    a4f8:	e0bffe17 	ldw	r2,-8(fp)
    a4fc:	10c00517 	ldw	r3,20(r2)
    a500:	e0bff78b 	ldhu	r2,-34(fp)
    a504:	100490fa 	slli	r2,r2,3
    a508:	1885883a 	add	r2,r3,r2
    a50c:	1000018d 	sth	zero,6(r2)
				(playerB->bombList)[i].active = 0;
    a510:	e0bffe17 	ldw	r2,-8(fp)
    a514:	10c00517 	ldw	r3,20(r2)
    a518:	e0bff78b 	ldhu	r2,-34(fp)
    a51c:	100490fa 	slli	r2,r2,3
    a520:	1885883a 	add	r2,r3,r2
    a524:	1000000d 	sth	zero,0(r2)
				playerB-> bombCounter ++;
    a528:	e0bffe17 	ldw	r2,-8(fp)
    a52c:	1080060b 	ldhu	r2,24(r2)
    a530:	10800044 	addi	r2,r2,1
    a534:	1007883a 	mov	r3,r2
    a538:	e0bffe17 	ldw	r2,-8(fp)
    a53c:	10c0060d 	sth	r3,24(r2)
				continue;
    a540:	00003806 	br	a624 <UpdateBomb+0x404>
			}
			else if(b.counter%10==0){
    a544:	e0bffc8b 	ldhu	r2,-14(fp)
    a548:	10bfffcc 	andi	r2,r2,65535
    a54c:	01400284 	movi	r5,10
    a550:	1009883a 	mov	r4,r2
    a554:	000c6340 	call	c634 <__umodsi3>
    a558:	10bfffcc 	andi	r2,r2,65535
    a55c:	1000271e 	bne	r2,zero,a5fc <UpdateBomb+0x3dc>
				drawBombAndExplosion(index, b.counter/10, b.X, b.Y, stage, &coinHead, &coinTail);
    a560:	e43ff88b 	ldhu	r16,-30(fp)
    a564:	e0bffc8b 	ldhu	r2,-14(fp)
    a568:	10bfffcc 	andi	r2,r2,65535
    a56c:	01400284 	movi	r5,10
    a570:	1009883a 	mov	r4,r2
    a574:	000c5d00 	call	c5d0 <__udivsi3>
    a578:	113fffcc 	andi	r4,r2,65535
    a57c:	e0bffb8b 	ldhu	r2,-18(fp)
    a580:	117fffcc 	andi	r5,r2,65535
    a584:	e0bffc0b 	ldhu	r2,-16(fp)
    a588:	11bfffcc 	andi	r6,r2,65535
    a58c:	d0a6f917 	ldw	r2,-25628(gp)
    a590:	d0e6fb04 	addi	r3,gp,-25620
    a594:	d8c00215 	stw	r3,8(sp)
    a598:	d0e6fa04 	addi	r3,gp,-25624
    a59c:	d8c00115 	stw	r3,4(sp)
    a5a0:	d8800015 	stw	r2,0(sp)
    a5a4:	300f883a 	mov	r7,r6
    a5a8:	280d883a 	mov	r6,r5
    a5ac:	200b883a 	mov	r5,r4
    a5b0:	8009883a 	mov	r4,r16
    a5b4:	00065200 	call	6520 <drawBombAndExplosion>
				if(b.counter == 350){(playerB->bombList)[i].counter+=9;}
    a5b8:	e0bffc8b 	ldhu	r2,-14(fp)
    a5bc:	10bfffcc 	andi	r2,r2,65535
    a5c0:	10805798 	cmpnei	r2,r2,350
    a5c4:	10000d1e 	bne	r2,zero,a5fc <UpdateBomb+0x3dc>
    a5c8:	e0bffe17 	ldw	r2,-8(fp)
    a5cc:	10c00517 	ldw	r3,20(r2)
    a5d0:	e0bff78b 	ldhu	r2,-34(fp)
    a5d4:	100490fa 	slli	r2,r2,3
    a5d8:	1885883a 	add	r2,r3,r2
    a5dc:	e0fffe17 	ldw	r3,-8(fp)
    a5e0:	19000517 	ldw	r4,20(r3)
    a5e4:	e0fff78b 	ldhu	r3,-34(fp)
    a5e8:	180690fa 	slli	r3,r3,3
    a5ec:	20c7883a 	add	r3,r4,r3
    a5f0:	18c0018b 	ldhu	r3,6(r3)
    a5f4:	18c00244 	addi	r3,r3,9
    a5f8:	10c0018d 	sth	r3,6(r2)
			}
			(playerB->bombList)[i].counter++;
    a5fc:	e0bffe17 	ldw	r2,-8(fp)
    a600:	10c00517 	ldw	r3,20(r2)
    a604:	e0bff78b 	ldhu	r2,-34(fp)
    a608:	100490fa 	slli	r2,r2,3
    a60c:	1885883a 	add	r2,r3,r2
    a610:	10c0018b 	ldhu	r3,6(r2)
    a614:	18c00044 	addi	r3,r3,1
    a618:	10c0018d 	sth	r3,6(r2)
    a61c:	00000106 	br	a624 <UpdateBomb+0x404>
		}
	}
	if(playerB->bombCounter<3){
		for(unsigned short int i =0; i<3; i++){
			bomb b = (playerB->bombList)[i];
			if(b.active == 0){continue;}
    a620:	0001883a 	nop
			}
			(playerA->bombList)[i].counter++;
		}
	}
	if(playerB->bombCounter<3){
		for(unsigned short int i =0; i<3; i++){
    a624:	e0bff78b 	ldhu	r2,-34(fp)
    a628:	10800044 	addi	r2,r2,1
    a62c:	e0bff78d 	sth	r2,-34(fp)
    a630:	e0bff78b 	ldhu	r2,-34(fp)
    a634:	108000f0 	cmpltui	r2,r2,3
    a638:	103f891e 	bne	r2,zero,a460 <__alt_data_end+0xf800a460>
			}
			(playerB->bombList)[i].counter++;

		}
	}
}
    a63c:	0001883a 	nop
    a640:	e6ffff04 	addi	sp,fp,-4
    a644:	dfc00217 	ldw	ra,8(sp)
    a648:	df000117 	ldw	fp,4(sp)
    a64c:	dc000017 	ldw	r16,0(sp)
    a650:	dec00304 	addi	sp,sp,12
    a654:	f800283a 	ret

0000a658 <HPcheck>:

//return 0 =>nothing happens
//return 1 =>player 1 wins
//return 2 =>player 2 wins
//return 3 =>draw
int HPcheck(player* playerA, player* playerB){
    a658:	defffb04 	addi	sp,sp,-20
    a65c:	dfc00415 	stw	ra,16(sp)
    a660:	df000315 	stw	fp,12(sp)
    a664:	df000304 	addi	fp,sp,12
    a668:	e13ffe15 	stw	r4,-8(fp)
    a66c:	e17fff15 	stw	r5,-4(fp)
	unsigned short int playerADies = 0;
    a670:	e03ffd0d 	sth	zero,-12(fp)
	unsigned short int playerBDies = 0;
    a674:	e03ffd8d 	sth	zero,-10(fp)
	if(playerA->HPbuffer != 0){
    a678:	e0bffe17 	ldw	r2,-8(fp)
    a67c:	1080020b 	ldhu	r2,8(r2)
    a680:	10bfffcc 	andi	r2,r2,65535
    a684:	10000726 	beq	r2,zero,a6a4 <HPcheck+0x4c>
		playerA->HPbuffer--;
    a688:	e0bffe17 	ldw	r2,-8(fp)
    a68c:	1080020b 	ldhu	r2,8(r2)
    a690:	10bfffc4 	addi	r2,r2,-1
    a694:	1007883a 	mov	r3,r2
    a698:	e0bffe17 	ldw	r2,-8(fp)
    a69c:	10c0020d 	sth	r3,8(r2)
    a6a0:	00001906 	br	a708 <HPcheck+0xb0>
	}
	else{
		if(catchFire(playerA)){
    a6a4:	e13ffe17 	ldw	r4,-8(fp)
    a6a8:	0009ac80 	call	9ac8 <catchFire>
    a6ac:	10001626 	beq	r2,zero,a708 <HPcheck+0xb0>
			playerA->HP--;
    a6b0:	e0bffe17 	ldw	r2,-8(fp)
    a6b4:	1080018b 	ldhu	r2,6(r2)
    a6b8:	10bfffc4 	addi	r2,r2,-1
    a6bc:	1007883a 	mov	r3,r2
    a6c0:	e0bffe17 	ldw	r2,-8(fp)
    a6c4:	10c0018d 	sth	r3,6(r2)
			playerA->HPbuffer = 350;
    a6c8:	e0bffe17 	ldw	r2,-8(fp)
    a6cc:	00c05784 	movi	r3,350
    a6d0:	10c0020d 	sth	r3,8(r2)
			printf("playerA's HP is %d \n", playerA->HP);
    a6d4:	e0bffe17 	ldw	r2,-8(fp)
    a6d8:	1080018b 	ldhu	r2,6(r2)
    a6dc:	10bfffcc 	andi	r2,r2,65535
    a6e0:	100b883a 	mov	r5,r2
    a6e4:	010000b4 	movhi	r4,2
    a6e8:	21322c04 	addi	r4,r4,-14160
    a6ec:	000e4980 	call	e498 <printf>
            //drawPlayerHurt(playerA);
			if(playerA->HP == 0){playerADies=1;}
    a6f0:	e0bffe17 	ldw	r2,-8(fp)
    a6f4:	1080018b 	ldhu	r2,6(r2)
    a6f8:	10bfffcc 	andi	r2,r2,65535
    a6fc:	1000021e 	bne	r2,zero,a708 <HPcheck+0xb0>
    a700:	00800044 	movi	r2,1
    a704:	e0bffd0d 	sth	r2,-12(fp)
		}
	}
	if(playerB->HPbuffer != 0){
    a708:	e0bfff17 	ldw	r2,-4(fp)
    a70c:	1080020b 	ldhu	r2,8(r2)
    a710:	10bfffcc 	andi	r2,r2,65535
    a714:	10000726 	beq	r2,zero,a734 <HPcheck+0xdc>
		playerB->HPbuffer--;
    a718:	e0bfff17 	ldw	r2,-4(fp)
    a71c:	1080020b 	ldhu	r2,8(r2)
    a720:	10bfffc4 	addi	r2,r2,-1
    a724:	1007883a 	mov	r3,r2
    a728:	e0bfff17 	ldw	r2,-4(fp)
    a72c:	10c0020d 	sth	r3,8(r2)
    a730:	00001906 	br	a798 <HPcheck+0x140>
	}
	else{
		if(catchFire(playerB)){
    a734:	e13fff17 	ldw	r4,-4(fp)
    a738:	0009ac80 	call	9ac8 <catchFire>
    a73c:	10001626 	beq	r2,zero,a798 <HPcheck+0x140>
			playerB->HP--;
    a740:	e0bfff17 	ldw	r2,-4(fp)
    a744:	1080018b 	ldhu	r2,6(r2)
    a748:	10bfffc4 	addi	r2,r2,-1
    a74c:	1007883a 	mov	r3,r2
    a750:	e0bfff17 	ldw	r2,-4(fp)
    a754:	10c0018d 	sth	r3,6(r2)
			playerB->HPbuffer = 350;
    a758:	e0bfff17 	ldw	r2,-4(fp)
    a75c:	00c05784 	movi	r3,350
    a760:	10c0020d 	sth	r3,8(r2)
			printf("playerB's HP is %d \n", playerB->HP);
    a764:	e0bfff17 	ldw	r2,-4(fp)
    a768:	1080018b 	ldhu	r2,6(r2)
    a76c:	10bfffcc 	andi	r2,r2,65535
    a770:	100b883a 	mov	r5,r2
    a774:	010000b4 	movhi	r4,2
    a778:	21323204 	addi	r4,r4,-14136
    a77c:	000e4980 	call	e498 <printf>
			//drawPlayerHurt(playerB);
			if(playerB->HP == 0){playerBDies=1;}
    a780:	e0bfff17 	ldw	r2,-4(fp)
    a784:	1080018b 	ldhu	r2,6(r2)
    a788:	10bfffcc 	andi	r2,r2,65535
    a78c:	1000021e 	bne	r2,zero,a798 <HPcheck+0x140>
    a790:	00800044 	movi	r2,1
    a794:	e0bffd8d 	sth	r2,-10(fp)
		}
	}
	displayHP(playerA, playerB);
    a798:	e17fff17 	ldw	r5,-4(fp)
    a79c:	e13ffe17 	ldw	r4,-8(fp)
    a7a0:	000a8a00 	call	a8a0 <displayHP>
	if(playerADies==0 && playerBDies==0){return 0;}
    a7a4:	e0bffd0b 	ldhu	r2,-12(fp)
    a7a8:	1000041e 	bne	r2,zero,a7bc <HPcheck+0x164>
    a7ac:	e0bffd8b 	ldhu	r2,-10(fp)
    a7b0:	1000021e 	bne	r2,zero,a7bc <HPcheck+0x164>
    a7b4:	0005883a 	mov	r2,zero
    a7b8:	00001706 	br	a818 <HPcheck+0x1c0>
	if(playerADies==0 && playerBDies==1){return 1;}
    a7bc:	e0bffd0b 	ldhu	r2,-12(fp)
    a7c0:	1000051e 	bne	r2,zero,a7d8 <HPcheck+0x180>
    a7c4:	e0bffd8b 	ldhu	r2,-10(fp)
    a7c8:	10800058 	cmpnei	r2,r2,1
    a7cc:	1000021e 	bne	r2,zero,a7d8 <HPcheck+0x180>
    a7d0:	00800044 	movi	r2,1
    a7d4:	00001006 	br	a818 <HPcheck+0x1c0>
	if(playerADies==1 && playerBDies==0){return 2;}
    a7d8:	e0bffd0b 	ldhu	r2,-12(fp)
    a7dc:	10800058 	cmpnei	r2,r2,1
    a7e0:	1000041e 	bne	r2,zero,a7f4 <HPcheck+0x19c>
    a7e4:	e0bffd8b 	ldhu	r2,-10(fp)
    a7e8:	1000021e 	bne	r2,zero,a7f4 <HPcheck+0x19c>
    a7ec:	00800084 	movi	r2,2
    a7f0:	00000906 	br	a818 <HPcheck+0x1c0>
	if(playerADies==1 && playerBDies==1){return 3;}
    a7f4:	e0bffd0b 	ldhu	r2,-12(fp)
    a7f8:	10800058 	cmpnei	r2,r2,1
    a7fc:	1000051e 	bne	r2,zero,a814 <HPcheck+0x1bc>
    a800:	e0bffd8b 	ldhu	r2,-10(fp)
    a804:	10800058 	cmpnei	r2,r2,1
    a808:	1000021e 	bne	r2,zero,a814 <HPcheck+0x1bc>
    a80c:	008000c4 	movi	r2,3
    a810:	00000106 	br	a818 <HPcheck+0x1c0>
    return 0;
    a814:	0005883a 	mov	r2,zero
}
    a818:	e037883a 	mov	sp,fp
    a81c:	dfc00117 	ldw	ra,4(sp)
    a820:	df000017 	ldw	fp,0(sp)
    a824:	dec00204 	addi	sp,sp,8
    a828:	f800283a 	ret

0000a82c <scoreCompare>:

int scoreCompare(player* playerA, player* playerB){
    a82c:	defffc04 	addi	sp,sp,-16
    a830:	dfc00315 	stw	ra,12(sp)
    a834:	df000215 	stw	fp,8(sp)
    a838:	df000204 	addi	fp,sp,8
    a83c:	e13ffe15 	stw	r4,-8(fp)
    a840:	e17fff15 	stw	r5,-4(fp)
	printf("Let us compare score!!!\n");
    a844:	010000b4 	movhi	r4,2
    a848:	21323804 	addi	r4,r4,-14112
    a84c:	000e5940 	call	e594 <puts>
	if(playerA->score > playerB->score){return 1;}
    a850:	e0bffe17 	ldw	r2,-8(fp)
    a854:	10800317 	ldw	r2,12(r2)
    a858:	e0ffff17 	ldw	r3,-4(fp)
    a85c:	18c00317 	ldw	r3,12(r3)
    a860:	1880022e 	bgeu	r3,r2,a86c <scoreCompare+0x40>
    a864:	00800044 	movi	r2,1
    a868:	00000806 	br	a88c <scoreCompare+0x60>
	else if(playerB->score > playerA->score){return 2;}
    a86c:	e0bfff17 	ldw	r2,-4(fp)
    a870:	10800317 	ldw	r2,12(r2)
    a874:	e0fffe17 	ldw	r3,-8(fp)
    a878:	18c00317 	ldw	r3,12(r3)
    a87c:	1880022e 	bgeu	r3,r2,a888 <scoreCompare+0x5c>
    a880:	00800084 	movi	r2,2
    a884:	00000106 	br	a88c <scoreCompare+0x60>
	return 3;
    a888:	008000c4 	movi	r2,3
}
    a88c:	e037883a 	mov	sp,fp
    a890:	dfc00117 	ldw	ra,4(sp)
    a894:	df000017 	ldw	fp,0(sp)
    a898:	dec00204 	addi	sp,sp,8
    a89c:	f800283a 	ret

0000a8a0 <displayHP>:

void displayHP(player* playerA, player* playerB){
    a8a0:	defffd04 	addi	sp,sp,-12
    a8a4:	df000215 	stw	fp,8(sp)
    a8a8:	df000204 	addi	fp,sp,8
    a8ac:	e13ffe15 	stw	r4,-8(fp)
    a8b0:	e17fff15 	stw	r5,-4(fp)
	if(playerA->HP==0 && playerB->HP==0){
    a8b4:	e0bffe17 	ldw	r2,-8(fp)
    a8b8:	1080018b 	ldhu	r2,6(r2)
    a8bc:	10bfffcc 	andi	r2,r2,65535
    a8c0:	1000081e 	bne	r2,zero,a8e4 <displayHP+0x44>
    a8c4:	e0bfff17 	ldw	r2,-4(fp)
    a8c8:	1080018b 	ldhu	r2,6(r2)
    a8cc:	10bfffcc 	andi	r2,r2,65535
    a8d0:	1000041e 	bne	r2,zero,a8e4 <displayHP+0x44>
		*LEDs = 0;
    a8d4:	00820034 	movhi	r2,2048
    a8d8:	10802c04 	addi	r2,r2,176
    a8dc:	10000015 	stw	zero,0(r2)
    a8e0:	0000db06 	br	ac50 <displayHP+0x3b0>
	}
	else if(playerA->HP==0 && playerB->HP==1){
    a8e4:	e0bffe17 	ldw	r2,-8(fp)
    a8e8:	1080018b 	ldhu	r2,6(r2)
    a8ec:	10bfffcc 	andi	r2,r2,65535
    a8f0:	10000a1e 	bne	r2,zero,a91c <displayHP+0x7c>
    a8f4:	e0bfff17 	ldw	r2,-4(fp)
    a8f8:	1080018b 	ldhu	r2,6(r2)
    a8fc:	10bfffcc 	andi	r2,r2,65535
    a900:	10800058 	cmpnei	r2,r2,1
    a904:	1000051e 	bne	r2,zero,a91c <displayHP+0x7c>
		*LEDs = 1;
    a908:	00820034 	movhi	r2,2048
    a90c:	10802c04 	addi	r2,r2,176
    a910:	00c00044 	movi	r3,1
    a914:	10c00015 	stw	r3,0(r2)
    a918:	0000cd06 	br	ac50 <displayHP+0x3b0>
	}
	else if(playerA->HP==0 && playerB->HP==2){
    a91c:	e0bffe17 	ldw	r2,-8(fp)
    a920:	1080018b 	ldhu	r2,6(r2)
    a924:	10bfffcc 	andi	r2,r2,65535
    a928:	10000a1e 	bne	r2,zero,a954 <displayHP+0xb4>
    a92c:	e0bfff17 	ldw	r2,-4(fp)
    a930:	1080018b 	ldhu	r2,6(r2)
    a934:	10bfffcc 	andi	r2,r2,65535
    a938:	10800098 	cmpnei	r2,r2,2
    a93c:	1000051e 	bne	r2,zero,a954 <displayHP+0xb4>
		*LEDs = 3;
    a940:	00820034 	movhi	r2,2048
    a944:	10802c04 	addi	r2,r2,176
    a948:	00c000c4 	movi	r3,3
    a94c:	10c00015 	stw	r3,0(r2)
    a950:	0000bf06 	br	ac50 <displayHP+0x3b0>
	}
	else if(playerA->HP==0 && playerB->HP==3){
    a954:	e0bffe17 	ldw	r2,-8(fp)
    a958:	1080018b 	ldhu	r2,6(r2)
    a95c:	10bfffcc 	andi	r2,r2,65535
    a960:	10000a1e 	bne	r2,zero,a98c <displayHP+0xec>
    a964:	e0bfff17 	ldw	r2,-4(fp)
    a968:	1080018b 	ldhu	r2,6(r2)
    a96c:	10bfffcc 	andi	r2,r2,65535
    a970:	108000d8 	cmpnei	r2,r2,3
    a974:	1000051e 	bne	r2,zero,a98c <displayHP+0xec>
		*LEDs = 7;
    a978:	00820034 	movhi	r2,2048
    a97c:	10802c04 	addi	r2,r2,176
    a980:	00c001c4 	movi	r3,7
    a984:	10c00015 	stw	r3,0(r2)
    a988:	0000b106 	br	ac50 <displayHP+0x3b0>
	}
	else if(playerA->HP==1 && playerB->HP==0){
    a98c:	e0bffe17 	ldw	r2,-8(fp)
    a990:	1080018b 	ldhu	r2,6(r2)
    a994:	10bfffcc 	andi	r2,r2,65535
    a998:	10800058 	cmpnei	r2,r2,1
    a99c:	1000091e 	bne	r2,zero,a9c4 <displayHP+0x124>
    a9a0:	e0bfff17 	ldw	r2,-4(fp)
    a9a4:	1080018b 	ldhu	r2,6(r2)
    a9a8:	10bfffcc 	andi	r2,r2,65535
    a9ac:	1000051e 	bne	r2,zero,a9c4 <displayHP+0x124>
		*LEDs = 32;
    a9b0:	00820034 	movhi	r2,2048
    a9b4:	10802c04 	addi	r2,r2,176
    a9b8:	00c00804 	movi	r3,32
    a9bc:	10c00015 	stw	r3,0(r2)
    a9c0:	0000a306 	br	ac50 <displayHP+0x3b0>
	}
	else if(playerA->HP==1 && playerB->HP==1){
    a9c4:	e0bffe17 	ldw	r2,-8(fp)
    a9c8:	1080018b 	ldhu	r2,6(r2)
    a9cc:	10bfffcc 	andi	r2,r2,65535
    a9d0:	10800058 	cmpnei	r2,r2,1
    a9d4:	10000a1e 	bne	r2,zero,aa00 <displayHP+0x160>
    a9d8:	e0bfff17 	ldw	r2,-4(fp)
    a9dc:	1080018b 	ldhu	r2,6(r2)
    a9e0:	10bfffcc 	andi	r2,r2,65535
    a9e4:	10800058 	cmpnei	r2,r2,1
    a9e8:	1000051e 	bne	r2,zero,aa00 <displayHP+0x160>
		*LEDs = 33;
    a9ec:	00820034 	movhi	r2,2048
    a9f0:	10802c04 	addi	r2,r2,176
    a9f4:	00c00844 	movi	r3,33
    a9f8:	10c00015 	stw	r3,0(r2)
    a9fc:	00009406 	br	ac50 <displayHP+0x3b0>
	}
	else if(playerA->HP==1 && playerB->HP==2){
    aa00:	e0bffe17 	ldw	r2,-8(fp)
    aa04:	1080018b 	ldhu	r2,6(r2)
    aa08:	10bfffcc 	andi	r2,r2,65535
    aa0c:	10800058 	cmpnei	r2,r2,1
    aa10:	10000a1e 	bne	r2,zero,aa3c <displayHP+0x19c>
    aa14:	e0bfff17 	ldw	r2,-4(fp)
    aa18:	1080018b 	ldhu	r2,6(r2)
    aa1c:	10bfffcc 	andi	r2,r2,65535
    aa20:	10800098 	cmpnei	r2,r2,2
    aa24:	1000051e 	bne	r2,zero,aa3c <displayHP+0x19c>
		*LEDs = 35;
    aa28:	00820034 	movhi	r2,2048
    aa2c:	10802c04 	addi	r2,r2,176
    aa30:	00c008c4 	movi	r3,35
    aa34:	10c00015 	stw	r3,0(r2)
    aa38:	00008506 	br	ac50 <displayHP+0x3b0>
	}
	else if(playerA->HP==1 && playerB->HP==3){
    aa3c:	e0bffe17 	ldw	r2,-8(fp)
    aa40:	1080018b 	ldhu	r2,6(r2)
    aa44:	10bfffcc 	andi	r2,r2,65535
    aa48:	10800058 	cmpnei	r2,r2,1
    aa4c:	10000a1e 	bne	r2,zero,aa78 <displayHP+0x1d8>
    aa50:	e0bfff17 	ldw	r2,-4(fp)
    aa54:	1080018b 	ldhu	r2,6(r2)
    aa58:	10bfffcc 	andi	r2,r2,65535
    aa5c:	108000d8 	cmpnei	r2,r2,3
    aa60:	1000051e 	bne	r2,zero,aa78 <displayHP+0x1d8>
		*LEDs = 39;
    aa64:	00820034 	movhi	r2,2048
    aa68:	10802c04 	addi	r2,r2,176
    aa6c:	00c009c4 	movi	r3,39
    aa70:	10c00015 	stw	r3,0(r2)
    aa74:	00007606 	br	ac50 <displayHP+0x3b0>
	}
	else if(playerA->HP==2 && playerB->HP==0){
    aa78:	e0bffe17 	ldw	r2,-8(fp)
    aa7c:	1080018b 	ldhu	r2,6(r2)
    aa80:	10bfffcc 	andi	r2,r2,65535
    aa84:	10800098 	cmpnei	r2,r2,2
    aa88:	1000091e 	bne	r2,zero,aab0 <displayHP+0x210>
    aa8c:	e0bfff17 	ldw	r2,-4(fp)
    aa90:	1080018b 	ldhu	r2,6(r2)
    aa94:	10bfffcc 	andi	r2,r2,65535
    aa98:	1000051e 	bne	r2,zero,aab0 <displayHP+0x210>
		*LEDs = 96;
    aa9c:	00820034 	movhi	r2,2048
    aaa0:	10802c04 	addi	r2,r2,176
    aaa4:	00c01804 	movi	r3,96
    aaa8:	10c00015 	stw	r3,0(r2)
    aaac:	00006806 	br	ac50 <displayHP+0x3b0>
	}
	else if(playerA->HP==2 && playerB->HP==1){
    aab0:	e0bffe17 	ldw	r2,-8(fp)
    aab4:	1080018b 	ldhu	r2,6(r2)
    aab8:	10bfffcc 	andi	r2,r2,65535
    aabc:	10800098 	cmpnei	r2,r2,2
    aac0:	10000a1e 	bne	r2,zero,aaec <displayHP+0x24c>
    aac4:	e0bfff17 	ldw	r2,-4(fp)
    aac8:	1080018b 	ldhu	r2,6(r2)
    aacc:	10bfffcc 	andi	r2,r2,65535
    aad0:	10800058 	cmpnei	r2,r2,1
    aad4:	1000051e 	bne	r2,zero,aaec <displayHP+0x24c>
		*LEDs = 97;
    aad8:	00820034 	movhi	r2,2048
    aadc:	10802c04 	addi	r2,r2,176
    aae0:	00c01844 	movi	r3,97
    aae4:	10c00015 	stw	r3,0(r2)
    aae8:	00005906 	br	ac50 <displayHP+0x3b0>
	}
	else if(playerA->HP==2 && playerB->HP==2){
    aaec:	e0bffe17 	ldw	r2,-8(fp)
    aaf0:	1080018b 	ldhu	r2,6(r2)
    aaf4:	10bfffcc 	andi	r2,r2,65535
    aaf8:	10800098 	cmpnei	r2,r2,2
    aafc:	10000a1e 	bne	r2,zero,ab28 <displayHP+0x288>
    ab00:	e0bfff17 	ldw	r2,-4(fp)
    ab04:	1080018b 	ldhu	r2,6(r2)
    ab08:	10bfffcc 	andi	r2,r2,65535
    ab0c:	10800098 	cmpnei	r2,r2,2
    ab10:	1000051e 	bne	r2,zero,ab28 <displayHP+0x288>
		*LEDs = 99;
    ab14:	00820034 	movhi	r2,2048
    ab18:	10802c04 	addi	r2,r2,176
    ab1c:	00c018c4 	movi	r3,99
    ab20:	10c00015 	stw	r3,0(r2)
    ab24:	00004a06 	br	ac50 <displayHP+0x3b0>
	}
	else if(playerA->HP==2 && playerB->HP==3){
    ab28:	e0bffe17 	ldw	r2,-8(fp)
    ab2c:	1080018b 	ldhu	r2,6(r2)
    ab30:	10bfffcc 	andi	r2,r2,65535
    ab34:	10800098 	cmpnei	r2,r2,2
    ab38:	10000a1e 	bne	r2,zero,ab64 <displayHP+0x2c4>
    ab3c:	e0bfff17 	ldw	r2,-4(fp)
    ab40:	1080018b 	ldhu	r2,6(r2)
    ab44:	10bfffcc 	andi	r2,r2,65535
    ab48:	108000d8 	cmpnei	r2,r2,3
    ab4c:	1000051e 	bne	r2,zero,ab64 <displayHP+0x2c4>
		*LEDs = 103;
    ab50:	00820034 	movhi	r2,2048
    ab54:	10802c04 	addi	r2,r2,176
    ab58:	00c019c4 	movi	r3,103
    ab5c:	10c00015 	stw	r3,0(r2)
    ab60:	00003b06 	br	ac50 <displayHP+0x3b0>
	}
	else if(playerA->HP==3 && playerB->HP==0){
    ab64:	e0bffe17 	ldw	r2,-8(fp)
    ab68:	1080018b 	ldhu	r2,6(r2)
    ab6c:	10bfffcc 	andi	r2,r2,65535
    ab70:	108000d8 	cmpnei	r2,r2,3
    ab74:	1000091e 	bne	r2,zero,ab9c <displayHP+0x2fc>
    ab78:	e0bfff17 	ldw	r2,-4(fp)
    ab7c:	1080018b 	ldhu	r2,6(r2)
    ab80:	10bfffcc 	andi	r2,r2,65535
    ab84:	1000051e 	bne	r2,zero,ab9c <displayHP+0x2fc>
		*LEDs = 224;
    ab88:	00820034 	movhi	r2,2048
    ab8c:	10802c04 	addi	r2,r2,176
    ab90:	00c03804 	movi	r3,224
    ab94:	10c00015 	stw	r3,0(r2)
    ab98:	00002d06 	br	ac50 <displayHP+0x3b0>
	}
	else if(playerA->HP==3 && playerB->HP==1){
    ab9c:	e0bffe17 	ldw	r2,-8(fp)
    aba0:	1080018b 	ldhu	r2,6(r2)
    aba4:	10bfffcc 	andi	r2,r2,65535
    aba8:	108000d8 	cmpnei	r2,r2,3
    abac:	10000a1e 	bne	r2,zero,abd8 <displayHP+0x338>
    abb0:	e0bfff17 	ldw	r2,-4(fp)
    abb4:	1080018b 	ldhu	r2,6(r2)
    abb8:	10bfffcc 	andi	r2,r2,65535
    abbc:	10800058 	cmpnei	r2,r2,1
    abc0:	1000051e 	bne	r2,zero,abd8 <displayHP+0x338>
		*LEDs =225;
    abc4:	00820034 	movhi	r2,2048
    abc8:	10802c04 	addi	r2,r2,176
    abcc:	00c03844 	movi	r3,225
    abd0:	10c00015 	stw	r3,0(r2)
    abd4:	00001e06 	br	ac50 <displayHP+0x3b0>
	}
	else if(playerA->HP==3 && playerB->HP==2){
    abd8:	e0bffe17 	ldw	r2,-8(fp)
    abdc:	1080018b 	ldhu	r2,6(r2)
    abe0:	10bfffcc 	andi	r2,r2,65535
    abe4:	108000d8 	cmpnei	r2,r2,3
    abe8:	10000a1e 	bne	r2,zero,ac14 <displayHP+0x374>
    abec:	e0bfff17 	ldw	r2,-4(fp)
    abf0:	1080018b 	ldhu	r2,6(r2)
    abf4:	10bfffcc 	andi	r2,r2,65535
    abf8:	10800098 	cmpnei	r2,r2,2
    abfc:	1000051e 	bne	r2,zero,ac14 <displayHP+0x374>
		*LEDs =227;
    ac00:	00820034 	movhi	r2,2048
    ac04:	10802c04 	addi	r2,r2,176
    ac08:	00c038c4 	movi	r3,227
    ac0c:	10c00015 	stw	r3,0(r2)
    ac10:	00000f06 	br	ac50 <displayHP+0x3b0>
	}
	else if(playerA->HP==3 && playerB->HP==3){
    ac14:	e0bffe17 	ldw	r2,-8(fp)
    ac18:	1080018b 	ldhu	r2,6(r2)
    ac1c:	10bfffcc 	andi	r2,r2,65535
    ac20:	108000d8 	cmpnei	r2,r2,3
    ac24:	10000a1e 	bne	r2,zero,ac50 <displayHP+0x3b0>
    ac28:	e0bfff17 	ldw	r2,-4(fp)
    ac2c:	1080018b 	ldhu	r2,6(r2)
    ac30:	10bfffcc 	andi	r2,r2,65535
    ac34:	108000d8 	cmpnei	r2,r2,3
    ac38:	1000051e 	bne	r2,zero,ac50 <displayHP+0x3b0>
		*LEDs = 231;
    ac3c:	00820034 	movhi	r2,2048
    ac40:	10802c04 	addi	r2,r2,176
    ac44:	00c039c4 	movi	r3,231
    ac48:	10c00015 	stw	r3,0(r2)
	}

}
    ac4c:	00000006 	br	ac50 <displayHP+0x3b0>
    ac50:	0001883a 	nop
    ac54:	e037883a 	mov	sp,fp
    ac58:	df000017 	ldw	fp,0(sp)
    ac5c:	dec00104 	addi	sp,sp,4
    ac60:	f800283a 	ret

0000ac64 <shuffle>:
int scoreCompare(player* playerA, player* playerB);

void displayHP(player* playerA, player* playerB);

//from stack overflow
static void shuffle(int *array, int N){
    ac64:	defff804 	addi	sp,sp,-32
    ac68:	dfc00715 	stw	ra,28(sp)
    ac6c:	df000615 	stw	fp,24(sp)
    ac70:	dc000515 	stw	r16,20(sp)
    ac74:	df000604 	addi	fp,sp,24
    ac78:	e13ffd15 	stw	r4,-12(fp)
    ac7c:	e17ffe15 	stw	r5,-8(fp)
	int i;
	for(i=0; i<N-1;i++){
    ac80:	e03ffa15 	stw	zero,-24(fp)
    ac84:	00003206 	br	ad50 <shuffle+0xec>
		int j = i + rand()/(RAND_MAX/(N-i)+1);
    ac88:	000e5c00 	call	e5c0 <rand>
    ac8c:	1021883a 	mov	r16,r2
    ac90:	e0fffe17 	ldw	r3,-8(fp)
    ac94:	e0bffa17 	ldw	r2,-24(fp)
    ac98:	1885c83a 	sub	r2,r3,r2
    ac9c:	100b883a 	mov	r5,r2
    aca0:	01200034 	movhi	r4,32768
    aca4:	213fffc4 	addi	r4,r4,-1
    aca8:	000c4d80 	call	c4d8 <__divsi3>
    acac:	10800044 	addi	r2,r2,1
    acb0:	100b883a 	mov	r5,r2
    acb4:	8009883a 	mov	r4,r16
    acb8:	000c4d80 	call	c4d8 <__divsi3>
    acbc:	1007883a 	mov	r3,r2
    acc0:	e0bffa17 	ldw	r2,-24(fp)
    acc4:	1885883a 	add	r2,r3,r2
    acc8:	e0bffb15 	stw	r2,-20(fp)
		int t = array[j];
    accc:	e0bffb17 	ldw	r2,-20(fp)
    acd0:	1085883a 	add	r2,r2,r2
    acd4:	1085883a 	add	r2,r2,r2
    acd8:	1007883a 	mov	r3,r2
    acdc:	e0bffd17 	ldw	r2,-12(fp)
    ace0:	10c5883a 	add	r2,r2,r3
    ace4:	10800017 	ldw	r2,0(r2)
    ace8:	e0bffc15 	stw	r2,-16(fp)
		array[j]=array[i];
    acec:	e0bffb17 	ldw	r2,-20(fp)
    acf0:	1085883a 	add	r2,r2,r2
    acf4:	1085883a 	add	r2,r2,r2
    acf8:	1007883a 	mov	r3,r2
    acfc:	e0bffd17 	ldw	r2,-12(fp)
    ad00:	10c7883a 	add	r3,r2,r3
    ad04:	e0bffa17 	ldw	r2,-24(fp)
    ad08:	1085883a 	add	r2,r2,r2
    ad0c:	1085883a 	add	r2,r2,r2
    ad10:	1009883a 	mov	r4,r2
    ad14:	e0bffd17 	ldw	r2,-12(fp)
    ad18:	1105883a 	add	r2,r2,r4
    ad1c:	10800017 	ldw	r2,0(r2)
    ad20:	18800015 	stw	r2,0(r3)
		array[i]=t;
    ad24:	e0bffa17 	ldw	r2,-24(fp)
    ad28:	1085883a 	add	r2,r2,r2
    ad2c:	1085883a 	add	r2,r2,r2
    ad30:	1007883a 	mov	r3,r2
    ad34:	e0bffd17 	ldw	r2,-12(fp)
    ad38:	10c5883a 	add	r2,r2,r3
    ad3c:	e0fffc17 	ldw	r3,-16(fp)
    ad40:	10c00015 	stw	r3,0(r2)
void displayHP(player* playerA, player* playerB);

//from stack overflow
static void shuffle(int *array, int N){
	int i;
	for(i=0; i<N-1;i++){
    ad44:	e0bffa17 	ldw	r2,-24(fp)
    ad48:	10800044 	addi	r2,r2,1
    ad4c:	e0bffa15 	stw	r2,-24(fp)
    ad50:	e0bffe17 	ldw	r2,-8(fp)
    ad54:	10bfffc4 	addi	r2,r2,-1
    ad58:	e0fffa17 	ldw	r3,-24(fp)
    ad5c:	18bfca16 	blt	r3,r2,ac88 <__alt_data_end+0xf800ac88>
		int j = i + rand()/(RAND_MAX/(N-i)+1);
		int t = array[j];
		array[j]=array[i];
		array[i]=t;
	}
}
    ad60:	0001883a 	nop
    ad64:	e6ffff04 	addi	sp,fp,-4
    ad68:	dfc00217 	ldw	ra,8(sp)
    ad6c:	df000117 	ldw	fp,4(sp)
    ad70:	dc000017 	ldw	r16,0(sp)
    ad74:	dec00304 	addi	sp,sp,12
    ad78:	f800283a 	ret

0000ad7c <main>:
unsigned int counter = 0;




int main(){
    ad7c:	defffd04 	addi	sp,sp,-12
    ad80:	dfc00215 	stw	ra,8(sp)
    ad84:	df000115 	stw	fp,4(sp)
    ad88:	df000104 	addi	fp,sp,4

	INIT();
    ad8c:	000026c0 	call	26c <INIT>

	START:
    //opening
    initOP();
    ad90:	000ae480 	call	ae48 <initOP>
    while(1){
    	FetchKey(keycode);
    ad94:	010000b4 	movhi	r4,2
    ad98:	2100d404 	addi	r4,r4,848
    ad9c:	00016500 	call	1650 <FetchKey>
    	if(op(keycode,counter)){break;}
    ada0:	d0a6fe17 	ldw	r2,-25608(gp)
    ada4:	100b883a 	mov	r5,r2
    ada8:	010000b4 	movhi	r4,2
    adac:	2100d404 	addi	r4,r4,848
    adb0:	000aefc0 	call	aefc <op>
    adb4:	1000041e 	bne	r2,zero,adc8 <main+0x4c>
    	counter++;
    adb8:	d0a6fe17 	ldw	r2,-25608(gp)
    adbc:	10800044 	addi	r2,r2,1
    adc0:	d0a6fe15 	stw	r2,-25608(gp)
    }
    adc4:	003ff306 	br	ad94 <__alt_data_end+0xf800ad94>
	START:
    //opening
    initOP();
    while(1){
    	FetchKey(keycode);
    	if(op(keycode,counter)){break;}
    adc8:	0001883a 	nop
    	counter++;
    }
    //gaming

    begin_anim();
    adcc:	000bbfc0 	call	bbfc <begin_anim>
	initStage();
    add0:	0008bc00 	call	8bc0 <initStage>
	int ending = 0;
    add4:	e03fff15 	stw	zero,-4(fp)
    initPlayer();
    add8:	0008fd40 	call	8fd4 <initPlayer>
	while (1){
			FetchKey(keycode);
    addc:	010000b4 	movhi	r4,2
    ade0:	2100d404 	addi	r4,r4,848
    ade4:	00016500 	call	1650 <FetchKey>
			ending = game(keycode);
    ade8:	010000b4 	movhi	r4,2
    adec:	2100d404 	addi	r4,r4,848
    adf0:	000853c0 	call	853c <game>
    adf4:	e0bfff15 	stw	r2,-4(fp)
			if(ending){break;}
    adf8:	e0bfff17 	ldw	r2,-4(fp)
    adfc:	1000011e 	bne	r2,zero,ae04 <main+0x88>
	}
    ae00:	003ff606 	br	addc <__alt_data_end+0xf800addc>
	int ending = 0;
    initPlayer();
	while (1){
			FetchKey(keycode);
			ending = game(keycode);
			if(ending){break;}
    ae04:	0001883a 	nop
	}

	//ending
	initED(ending);
    ae08:	e13fff17 	ldw	r4,-4(fp)
    ae0c:	00081dc0 	call	81dc <initED>
    while(1){
    	FetchKey(keycode);
    ae10:	010000b4 	movhi	r4,2
    ae14:	2100d404 	addi	r4,r4,848
    ae18:	00016500 	call	1650 <FetchKey>
    	if(ed(keycode,counter)){goto START;}
    ae1c:	d0a6fe17 	ldw	r2,-25608(gp)
    ae20:	100b883a 	mov	r5,r2
    ae24:	010000b4 	movhi	r4,2
    ae28:	2100d404 	addi	r4,r4,848
    ae2c:	000835c0 	call	835c <ed>
    ae30:	10000126 	beq	r2,zero,ae38 <main+0xbc>
    ae34:	003fd606 	br	ad90 <__alt_data_end+0xf800ad90>
    	counter++;
    ae38:	d0a6fe17 	ldw	r2,-25608(gp)
    ae3c:	10800044 	addi	r2,r2,1
    ae40:	d0a6fe15 	stw	r2,-25608(gp)
    }
    ae44:	003ff206 	br	ae10 <__alt_data_end+0xf800ae10>

0000ae48 <initOP>:
	static int vol = 2;
	static int B_vol = 3;
	static int vol_counter =0;
	static int B_vol_counter =0;

void initOP(){
    ae48:	defffb04 	addi	sp,sp,-20
    ae4c:	dfc00415 	stw	ra,16(sp)
    ae50:	df000315 	stw	fp,12(sp)
    ae54:	df000304 	addi	fp,sp,12
	*player1Score1 = 0;
    ae58:	00820034 	movhi	r2,2048
    ae5c:	10805804 	addi	r2,r2,352
    ae60:	10000015 	stw	zero,0(r2)
	*player1Score0 = 0;
    ae64:	00820034 	movhi	r2,2048
    ae68:	10805c04 	addi	r2,r2,368
    ae6c:	10000015 	stw	zero,0(r2)
	*player2Score1 = 0;
    ae70:	00820034 	movhi	r2,2048
    ae74:	10806004 	addi	r2,r2,384
    ae78:	10000015 	stw	zero,0(r2)
	*player2Score0 = 0;
    ae7c:	00820034 	movhi	r2,2048
    ae80:	10806404 	addi	r2,r2,400
    ae84:	10000015 	stw	zero,0(r2)
	*timeScreen2 = 3;
    ae88:	00820034 	movhi	r2,2048
    ae8c:	10805004 	addi	r2,r2,320
    ae90:	00c000c4 	movi	r3,3
    ae94:	10c00015 	stw	r3,0(r2)
	*timeScreen1 = 0;
    ae98:	00820034 	movhi	r2,2048
    ae9c:	10805404 	addi	r2,r2,336
    aea0:	10000015 	stw	zero,0(r2)
	*timeScreen0 = 0;
    aea4:	00820034 	movhi	r2,2048
    aea8:	10804c04 	addi	r2,r2,304
    aeac:	10000015 	stw	zero,0(r2)
	draw_driver(0,0,639,479,0,0,2);
    aeb0:	00800084 	movi	r2,2
    aeb4:	d8800215 	stw	r2,8(sp)
    aeb8:	d8000115 	stw	zero,4(sp)
    aebc:	d8000015 	stw	zero,0(sp)
    aec0:	01c077c4 	movi	r7,479
    aec4:	01809fc4 	movi	r6,639
    aec8:	000b883a 	mov	r5,zero
    aecc:	0009883a 	mov	r4,zero
    aed0:	00036040 	call	3604 <draw_driver>
	Audio_Select('o');
    aed4:	01001bc4 	movi	r4,111
    aed8:	0002d880 	call	2d88 <Audio_Select>
	changeBackVolume(2);
    aedc:	01000084 	movi	r4,2
    aee0:	0002c640 	call	2c64 <changeBackVolume>

}
    aee4:	0001883a 	nop
    aee8:	e037883a 	mov	sp,fp
    aeec:	dfc00117 	ldw	ra,4(sp)
    aef0:	df000017 	ldw	fp,0(sp)
    aef4:	dec00204 	addi	sp,sp,8
    aef8:	f800283a 	ret

0000aefc <op>:

int op(unsigned int keycode[],unsigned int counter){
    aefc:	defff904 	addi	sp,sp,-28
    af00:	dfc00615 	stw	ra,24(sp)
    af04:	df000515 	stw	fp,20(sp)
    af08:	df000504 	addi	fp,sp,20
    af0c:	e13ffe15 	stw	r4,-8(fp)
    af10:	e17fff15 	stw	r5,-4(fp)
	if(vol_counter!=0){vol_counter--;}
    af14:	d0a6ff17 	ldw	r2,-25604(gp)
    af18:	10000326 	beq	r2,zero,af28 <op+0x2c>
    af1c:	d0a6ff17 	ldw	r2,-25604(gp)
    af20:	10bfffc4 	addi	r2,r2,-1
    af24:	d0a6ff15 	stw	r2,-25604(gp)
	if(B_vol_counter!=0){B_vol_counter--;}
    af28:	d0a70017 	ldw	r2,-25600(gp)
    af2c:	10000326 	beq	r2,zero,af3c <op+0x40>
    af30:	d0a70017 	ldw	r2,-25600(gp)
    af34:	10bfffc4 	addi	r2,r2,-1
    af38:	d0a70015 	stw	r2,-25600(gp)

	if(PLUS_en(keycode)&&!vol_counter){
    af3c:	e13ffe17 	ldw	r4,-8(fp)
    af40:	000b8dc0 	call	b8dc <PLUS_en>
    af44:	10000f26 	beq	r2,zero,af84 <op+0x88>
    af48:	d0a6ff17 	ldw	r2,-25604(gp)
    af4c:	10000d1e 	bne	r2,zero,af84 <op+0x88>
		vol = (vol == 7) ? 7:vol + 1;
    af50:	d0a00a17 	ldw	r2,-32728(gp)
    af54:	108001e0 	cmpeqi	r2,r2,7
    af58:	1000031e 	bne	r2,zero,af68 <op+0x6c>
    af5c:	d0a00a17 	ldw	r2,-32728(gp)
    af60:	10800044 	addi	r2,r2,1
    af64:	00000106 	br	af6c <op+0x70>
    af68:	008001c4 	movi	r2,7
    af6c:	d0a00a15 	stw	r2,-32728(gp)
		changeBackVolume(vol);
    af70:	d0a00a17 	ldw	r2,-32728(gp)
    af74:	1009883a 	mov	r4,r2
    af78:	0002c640 	call	2c64 <changeBackVolume>
		vol_counter = 200;
    af7c:	00803204 	movi	r2,200
    af80:	d0a6ff15 	stw	r2,-25604(gp)
	}
	if(MINOR_en (keycode)&&!vol_counter){
    af84:	e13ffe17 	ldw	r4,-8(fp)
    af88:	000b9a40 	call	b9a4 <MINOR_en>
    af8c:	10000e26 	beq	r2,zero,afc8 <op+0xcc>
    af90:	d0a6ff17 	ldw	r2,-25604(gp)
    af94:	10000c1e 	bne	r2,zero,afc8 <op+0xcc>
		vol = (vol == 0) ? 0:vol - 1;
    af98:	d0a00a17 	ldw	r2,-32728(gp)
    af9c:	10000326 	beq	r2,zero,afac <op+0xb0>
    afa0:	d0a00a17 	ldw	r2,-32728(gp)
    afa4:	10bfffc4 	addi	r2,r2,-1
    afa8:	00000106 	br	afb0 <op+0xb4>
    afac:	0005883a 	mov	r2,zero
    afb0:	d0a00a15 	stw	r2,-32728(gp)
		changeBackVolume(vol);
    afb4:	d0a00a17 	ldw	r2,-32728(gp)
    afb8:	1009883a 	mov	r4,r2
    afbc:	0002c640 	call	2c64 <changeBackVolume>
		vol_counter = 200;
    afc0:	00803204 	movi	r2,200
    afc4:	d0a6ff15 	stw	r2,-25604(gp)
	}
	if(NINE_en(keycode)&&!B_vol_counter){
    afc8:	e13ffe17 	ldw	r4,-8(fp)
    afcc:	000bb340 	call	bb34 <NINE_en>
    afd0:	10001026 	beq	r2,zero,b014 <op+0x118>
    afd4:	d0a70017 	ldw	r2,-25600(gp)
    afd8:	10000e1e 	bne	r2,zero,b014 <op+0x118>
		B_vol = (B_vol == 7) ? 7:B_vol + 1;
    afdc:	d0a00b17 	ldw	r2,-32724(gp)
    afe0:	108001e0 	cmpeqi	r2,r2,7
    afe4:	1000031e 	bne	r2,zero,aff4 <op+0xf8>
    afe8:	d0a00b17 	ldw	r2,-32724(gp)
    afec:	10800044 	addi	r2,r2,1
    aff0:	00000106 	br	aff8 <op+0xfc>
    aff4:	008001c4 	movi	r2,7
    aff8:	d0a00b15 	stw	r2,-32724(gp)
		changeBombVolume(B_vol);
    affc:	d0a00b17 	ldw	r2,-32724(gp)
    b000:	1009883a 	mov	r4,r2
    b004:	0002cb80 	call	2cb8 <changeBombVolume>
		Bomb();
    b008:	0002d540 	call	2d54 <Bomb>
		B_vol_counter = 200;
    b00c:	00803204 	movi	r2,200
    b010:	d0a70015 	stw	r2,-25600(gp)

	}
	if(ZERO_en(keycode)&&!B_vol_counter){
    b014:	e13ffe17 	ldw	r4,-8(fp)
    b018:	000ba6c0 	call	ba6c <ZERO_en>
    b01c:	10000f26 	beq	r2,zero,b05c <op+0x160>
    b020:	d0a70017 	ldw	r2,-25600(gp)
    b024:	10000d1e 	bne	r2,zero,b05c <op+0x160>
		B_vol = (B_vol == 0) ? 0:B_vol - 1;
    b028:	d0a00b17 	ldw	r2,-32724(gp)
    b02c:	10000326 	beq	r2,zero,b03c <op+0x140>
    b030:	d0a00b17 	ldw	r2,-32724(gp)
    b034:	10bfffc4 	addi	r2,r2,-1
    b038:	00000106 	br	b040 <op+0x144>
    b03c:	0005883a 	mov	r2,zero
    b040:	d0a00b15 	stw	r2,-32724(gp)
		changeBombVolume(B_vol);
    b044:	d0a00b17 	ldw	r2,-32724(gp)
    b048:	1009883a 	mov	r4,r2
    b04c:	0002cb80 	call	2cb8 <changeBombVolume>
		Bomb();
    b050:	0002d540 	call	2d54 <Bomb>
		B_vol_counter = 200;
    b054:	00803204 	movi	r2,200
    b058:	d0a70015 	stw	r2,-25600(gp)
	}

	if(counter%400==0){
    b05c:	e0bfff17 	ldw	r2,-4(fp)
    b060:	01406404 	movi	r5,400
    b064:	1009883a 	mov	r4,r2
    b068:	000c6340 	call	c634 <__umodsi3>
    b06c:	10000b1e 	bne	r2,zero,b09c <op+0x1a0>
		draw_driver(PETS_x0,PETS_y0,PETS_x1,PETS_y1,270,300,1);
    b070:	00800044 	movi	r2,1
    b074:	d8800215 	stw	r2,8(sp)
    b078:	00804b04 	movi	r2,300
    b07c:	d8800115 	stw	r2,4(sp)
    b080:	00804384 	movi	r2,270
    b084:	d8800015 	stw	r2,0(sp)
    b088:	01c06544 	movi	r7,405
    b08c:	018047c4 	movi	r6,287
    b090:	01405f84 	movi	r5,382
    b094:	01000304 	movi	r4,12
    b098:	00036040 	call	3604 <draw_driver>
	}
	if(counter%400==200){
    b09c:	e0bfff17 	ldw	r2,-4(fp)
    b0a0:	01406404 	movi	r5,400
    b0a4:	1009883a 	mov	r4,r2
    b0a8:	000c6340 	call	c634 <__umodsi3>
    b0ac:	10803218 	cmpnei	r2,r2,200
    b0b0:	10000b1e 	bne	r2,zero,b0e0 <op+0x1e4>
		draw_driver(270,300,545,324,270,300,2);
    b0b4:	00800084 	movi	r2,2
    b0b8:	d8800215 	stw	r2,8(sp)
    b0bc:	00804b04 	movi	r2,300
    b0c0:	d8800115 	stw	r2,4(sp)
    b0c4:	00804384 	movi	r2,270
    b0c8:	d8800015 	stw	r2,0(sp)
    b0cc:	01c05104 	movi	r7,324
    b0d0:	01808844 	movi	r6,545
    b0d4:	01404b04 	movi	r5,300
    b0d8:	01004384 	movi	r4,270
    b0dc:	00036040 	call	3604 <draw_driver>
	}
	if(ENTER_en(keycode)){return 1;}
    b0e0:	e13ffe17 	ldw	r4,-8(fp)
    b0e4:	000b8140 	call	b814 <ENTER_en>
    b0e8:	10000226 	beq	r2,zero,b0f4 <op+0x1f8>
    b0ec:	00800044 	movi	r2,1
    b0f0:	00000106 	br	b0f8 <op+0x1fc>
	else{return 0;}
    b0f4:	0005883a 	mov	r2,zero
}
    b0f8:	e037883a 	mov	sp,fp
    b0fc:	dfc00117 	ldw	ra,4(sp)
    b100:	df000017 	ldw	fp,0(sp)
    b104:	dec00204 	addi	sp,sp,8
    b108:	f800283a 	ret

0000b10c <W_en>:
#include "./header_file/readKey.h"

int W_en(unsigned int* keycode)
{
    b10c:	defffe04 	addi	sp,sp,-8
    b110:	df000115 	stw	fp,4(sp)
    b114:	df000104 	addi	fp,sp,4
    b118:	e13fff15 	stw	r4,-4(fp)
	if(keycode[0]==26){return 1;}
    b11c:	e0bfff17 	ldw	r2,-4(fp)
    b120:	10800017 	ldw	r2,0(r2)
    b124:	10800698 	cmpnei	r2,r2,26
    b128:	1000021e 	bne	r2,zero,b134 <W_en+0x28>
    b12c:	00800044 	movi	r2,1
    b130:	00002406 	br	b1c4 <W_en+0xb8>
	if(keycode[1]==26){return 1;}
    b134:	e0bfff17 	ldw	r2,-4(fp)
    b138:	10800104 	addi	r2,r2,4
    b13c:	10800017 	ldw	r2,0(r2)
    b140:	10800698 	cmpnei	r2,r2,26
    b144:	1000021e 	bne	r2,zero,b150 <W_en+0x44>
    b148:	00800044 	movi	r2,1
    b14c:	00001d06 	br	b1c4 <W_en+0xb8>
	if(keycode[2]==26){return 1;}
    b150:	e0bfff17 	ldw	r2,-4(fp)
    b154:	10800204 	addi	r2,r2,8
    b158:	10800017 	ldw	r2,0(r2)
    b15c:	10800698 	cmpnei	r2,r2,26
    b160:	1000021e 	bne	r2,zero,b16c <W_en+0x60>
    b164:	00800044 	movi	r2,1
    b168:	00001606 	br	b1c4 <W_en+0xb8>
	if(keycode[3]==26){return 1;}
    b16c:	e0bfff17 	ldw	r2,-4(fp)
    b170:	10800304 	addi	r2,r2,12
    b174:	10800017 	ldw	r2,0(r2)
    b178:	10800698 	cmpnei	r2,r2,26
    b17c:	1000021e 	bne	r2,zero,b188 <W_en+0x7c>
    b180:	00800044 	movi	r2,1
    b184:	00000f06 	br	b1c4 <W_en+0xb8>
	if(keycode[4]==26){return 1;}
    b188:	e0bfff17 	ldw	r2,-4(fp)
    b18c:	10800404 	addi	r2,r2,16
    b190:	10800017 	ldw	r2,0(r2)
    b194:	10800698 	cmpnei	r2,r2,26
    b198:	1000021e 	bne	r2,zero,b1a4 <W_en+0x98>
    b19c:	00800044 	movi	r2,1
    b1a0:	00000806 	br	b1c4 <W_en+0xb8>
	if(keycode[5]==26){return 1;}
    b1a4:	e0bfff17 	ldw	r2,-4(fp)
    b1a8:	10800504 	addi	r2,r2,20
    b1ac:	10800017 	ldw	r2,0(r2)
    b1b0:	10800698 	cmpnei	r2,r2,26
    b1b4:	1000021e 	bne	r2,zero,b1c0 <W_en+0xb4>
    b1b8:	00800044 	movi	r2,1
    b1bc:	00000106 	br	b1c4 <W_en+0xb8>
	return 0;
    b1c0:	0005883a 	mov	r2,zero
}
    b1c4:	e037883a 	mov	sp,fp
    b1c8:	df000017 	ldw	fp,0(sp)
    b1cc:	dec00104 	addi	sp,sp,4
    b1d0:	f800283a 	ret

0000b1d4 <S_en>:

int S_en(unsigned int* keycode)
{
    b1d4:	defffe04 	addi	sp,sp,-8
    b1d8:	df000115 	stw	fp,4(sp)
    b1dc:	df000104 	addi	fp,sp,4
    b1e0:	e13fff15 	stw	r4,-4(fp)
	if(keycode[0]==22){return 1;}
    b1e4:	e0bfff17 	ldw	r2,-4(fp)
    b1e8:	10800017 	ldw	r2,0(r2)
    b1ec:	10800598 	cmpnei	r2,r2,22
    b1f0:	1000021e 	bne	r2,zero,b1fc <S_en+0x28>
    b1f4:	00800044 	movi	r2,1
    b1f8:	00002406 	br	b28c <S_en+0xb8>
	if(keycode[1]==22){return 1;}
    b1fc:	e0bfff17 	ldw	r2,-4(fp)
    b200:	10800104 	addi	r2,r2,4
    b204:	10800017 	ldw	r2,0(r2)
    b208:	10800598 	cmpnei	r2,r2,22
    b20c:	1000021e 	bne	r2,zero,b218 <S_en+0x44>
    b210:	00800044 	movi	r2,1
    b214:	00001d06 	br	b28c <S_en+0xb8>
	if(keycode[2]==22){return 1;}
    b218:	e0bfff17 	ldw	r2,-4(fp)
    b21c:	10800204 	addi	r2,r2,8
    b220:	10800017 	ldw	r2,0(r2)
    b224:	10800598 	cmpnei	r2,r2,22
    b228:	1000021e 	bne	r2,zero,b234 <S_en+0x60>
    b22c:	00800044 	movi	r2,1
    b230:	00001606 	br	b28c <S_en+0xb8>
	if(keycode[3]==22){return 1;}
    b234:	e0bfff17 	ldw	r2,-4(fp)
    b238:	10800304 	addi	r2,r2,12
    b23c:	10800017 	ldw	r2,0(r2)
    b240:	10800598 	cmpnei	r2,r2,22
    b244:	1000021e 	bne	r2,zero,b250 <S_en+0x7c>
    b248:	00800044 	movi	r2,1
    b24c:	00000f06 	br	b28c <S_en+0xb8>
	if(keycode[4]==22){return 1;}
    b250:	e0bfff17 	ldw	r2,-4(fp)
    b254:	10800404 	addi	r2,r2,16
    b258:	10800017 	ldw	r2,0(r2)
    b25c:	10800598 	cmpnei	r2,r2,22
    b260:	1000021e 	bne	r2,zero,b26c <S_en+0x98>
    b264:	00800044 	movi	r2,1
    b268:	00000806 	br	b28c <S_en+0xb8>
	if(keycode[5]==22){return 1;}
    b26c:	e0bfff17 	ldw	r2,-4(fp)
    b270:	10800504 	addi	r2,r2,20
    b274:	10800017 	ldw	r2,0(r2)
    b278:	10800598 	cmpnei	r2,r2,22
    b27c:	1000021e 	bne	r2,zero,b288 <S_en+0xb4>
    b280:	00800044 	movi	r2,1
    b284:	00000106 	br	b28c <S_en+0xb8>
	return 0;
    b288:	0005883a 	mov	r2,zero
}
    b28c:	e037883a 	mov	sp,fp
    b290:	df000017 	ldw	fp,0(sp)
    b294:	dec00104 	addi	sp,sp,4
    b298:	f800283a 	ret

0000b29c <A_en>:

int A_en(unsigned int* keycode)
{
    b29c:	defffe04 	addi	sp,sp,-8
    b2a0:	df000115 	stw	fp,4(sp)
    b2a4:	df000104 	addi	fp,sp,4
    b2a8:	e13fff15 	stw	r4,-4(fp)
	if(keycode[0]==4){return 1;}
    b2ac:	e0bfff17 	ldw	r2,-4(fp)
    b2b0:	10800017 	ldw	r2,0(r2)
    b2b4:	10800118 	cmpnei	r2,r2,4
    b2b8:	1000021e 	bne	r2,zero,b2c4 <A_en+0x28>
    b2bc:	00800044 	movi	r2,1
    b2c0:	00002406 	br	b354 <A_en+0xb8>
	if(keycode[1]==4){return 1;}
    b2c4:	e0bfff17 	ldw	r2,-4(fp)
    b2c8:	10800104 	addi	r2,r2,4
    b2cc:	10800017 	ldw	r2,0(r2)
    b2d0:	10800118 	cmpnei	r2,r2,4
    b2d4:	1000021e 	bne	r2,zero,b2e0 <A_en+0x44>
    b2d8:	00800044 	movi	r2,1
    b2dc:	00001d06 	br	b354 <A_en+0xb8>
	if(keycode[2]==4){return 1;}
    b2e0:	e0bfff17 	ldw	r2,-4(fp)
    b2e4:	10800204 	addi	r2,r2,8
    b2e8:	10800017 	ldw	r2,0(r2)
    b2ec:	10800118 	cmpnei	r2,r2,4
    b2f0:	1000021e 	bne	r2,zero,b2fc <A_en+0x60>
    b2f4:	00800044 	movi	r2,1
    b2f8:	00001606 	br	b354 <A_en+0xb8>
	if(keycode[3]==4){return 1;}
    b2fc:	e0bfff17 	ldw	r2,-4(fp)
    b300:	10800304 	addi	r2,r2,12
    b304:	10800017 	ldw	r2,0(r2)
    b308:	10800118 	cmpnei	r2,r2,4
    b30c:	1000021e 	bne	r2,zero,b318 <A_en+0x7c>
    b310:	00800044 	movi	r2,1
    b314:	00000f06 	br	b354 <A_en+0xb8>
	if(keycode[4]==4){return 1;}
    b318:	e0bfff17 	ldw	r2,-4(fp)
    b31c:	10800404 	addi	r2,r2,16
    b320:	10800017 	ldw	r2,0(r2)
    b324:	10800118 	cmpnei	r2,r2,4
    b328:	1000021e 	bne	r2,zero,b334 <A_en+0x98>
    b32c:	00800044 	movi	r2,1
    b330:	00000806 	br	b354 <A_en+0xb8>
	if(keycode[5]==4){return 1;}
    b334:	e0bfff17 	ldw	r2,-4(fp)
    b338:	10800504 	addi	r2,r2,20
    b33c:	10800017 	ldw	r2,0(r2)
    b340:	10800118 	cmpnei	r2,r2,4
    b344:	1000021e 	bne	r2,zero,b350 <A_en+0xb4>
    b348:	00800044 	movi	r2,1
    b34c:	00000106 	br	b354 <A_en+0xb8>
	return 0;
    b350:	0005883a 	mov	r2,zero
}
    b354:	e037883a 	mov	sp,fp
    b358:	df000017 	ldw	fp,0(sp)
    b35c:	dec00104 	addi	sp,sp,4
    b360:	f800283a 	ret

0000b364 <D_en>:

int D_en(unsigned int* keycode)
{
    b364:	defffe04 	addi	sp,sp,-8
    b368:	df000115 	stw	fp,4(sp)
    b36c:	df000104 	addi	fp,sp,4
    b370:	e13fff15 	stw	r4,-4(fp)
	if(keycode[0]==7){return 1;}
    b374:	e0bfff17 	ldw	r2,-4(fp)
    b378:	10800017 	ldw	r2,0(r2)
    b37c:	108001d8 	cmpnei	r2,r2,7
    b380:	1000021e 	bne	r2,zero,b38c <D_en+0x28>
    b384:	00800044 	movi	r2,1
    b388:	00002406 	br	b41c <D_en+0xb8>
	if(keycode[1]==7){return 1;}
    b38c:	e0bfff17 	ldw	r2,-4(fp)
    b390:	10800104 	addi	r2,r2,4
    b394:	10800017 	ldw	r2,0(r2)
    b398:	108001d8 	cmpnei	r2,r2,7
    b39c:	1000021e 	bne	r2,zero,b3a8 <D_en+0x44>
    b3a0:	00800044 	movi	r2,1
    b3a4:	00001d06 	br	b41c <D_en+0xb8>
	if(keycode[2]==7){return 1;}
    b3a8:	e0bfff17 	ldw	r2,-4(fp)
    b3ac:	10800204 	addi	r2,r2,8
    b3b0:	10800017 	ldw	r2,0(r2)
    b3b4:	108001d8 	cmpnei	r2,r2,7
    b3b8:	1000021e 	bne	r2,zero,b3c4 <D_en+0x60>
    b3bc:	00800044 	movi	r2,1
    b3c0:	00001606 	br	b41c <D_en+0xb8>
	if(keycode[3]==7){return 1;}
    b3c4:	e0bfff17 	ldw	r2,-4(fp)
    b3c8:	10800304 	addi	r2,r2,12
    b3cc:	10800017 	ldw	r2,0(r2)
    b3d0:	108001d8 	cmpnei	r2,r2,7
    b3d4:	1000021e 	bne	r2,zero,b3e0 <D_en+0x7c>
    b3d8:	00800044 	movi	r2,1
    b3dc:	00000f06 	br	b41c <D_en+0xb8>
	if(keycode[4]==7){return 1;}
    b3e0:	e0bfff17 	ldw	r2,-4(fp)
    b3e4:	10800404 	addi	r2,r2,16
    b3e8:	10800017 	ldw	r2,0(r2)
    b3ec:	108001d8 	cmpnei	r2,r2,7
    b3f0:	1000021e 	bne	r2,zero,b3fc <D_en+0x98>
    b3f4:	00800044 	movi	r2,1
    b3f8:	00000806 	br	b41c <D_en+0xb8>
	if(keycode[5]==7){return 1;}
    b3fc:	e0bfff17 	ldw	r2,-4(fp)
    b400:	10800504 	addi	r2,r2,20
    b404:	10800017 	ldw	r2,0(r2)
    b408:	108001d8 	cmpnei	r2,r2,7
    b40c:	1000021e 	bne	r2,zero,b418 <D_en+0xb4>
    b410:	00800044 	movi	r2,1
    b414:	00000106 	br	b41c <D_en+0xb8>
	return 0;
    b418:	0005883a 	mov	r2,zero
}
    b41c:	e037883a 	mov	sp,fp
    b420:	df000017 	ldw	fp,0(sp)
    b424:	dec00104 	addi	sp,sp,4
    b428:	f800283a 	ret

0000b42c <UP_en>:

int UP_en(unsigned int* keycode)
{
    b42c:	defffe04 	addi	sp,sp,-8
    b430:	df000115 	stw	fp,4(sp)
    b434:	df000104 	addi	fp,sp,4
    b438:	e13fff15 	stw	r4,-4(fp)
	if(keycode[0]==82){return 1;}
    b43c:	e0bfff17 	ldw	r2,-4(fp)
    b440:	10800017 	ldw	r2,0(r2)
    b444:	10801498 	cmpnei	r2,r2,82
    b448:	1000021e 	bne	r2,zero,b454 <UP_en+0x28>
    b44c:	00800044 	movi	r2,1
    b450:	00002406 	br	b4e4 <UP_en+0xb8>
	if(keycode[1]==82){return 1;}
    b454:	e0bfff17 	ldw	r2,-4(fp)
    b458:	10800104 	addi	r2,r2,4
    b45c:	10800017 	ldw	r2,0(r2)
    b460:	10801498 	cmpnei	r2,r2,82
    b464:	1000021e 	bne	r2,zero,b470 <UP_en+0x44>
    b468:	00800044 	movi	r2,1
    b46c:	00001d06 	br	b4e4 <UP_en+0xb8>
	if(keycode[2]==82){return 1;}
    b470:	e0bfff17 	ldw	r2,-4(fp)
    b474:	10800204 	addi	r2,r2,8
    b478:	10800017 	ldw	r2,0(r2)
    b47c:	10801498 	cmpnei	r2,r2,82
    b480:	1000021e 	bne	r2,zero,b48c <UP_en+0x60>
    b484:	00800044 	movi	r2,1
    b488:	00001606 	br	b4e4 <UP_en+0xb8>
	if(keycode[3]==82){return 1;}
    b48c:	e0bfff17 	ldw	r2,-4(fp)
    b490:	10800304 	addi	r2,r2,12
    b494:	10800017 	ldw	r2,0(r2)
    b498:	10801498 	cmpnei	r2,r2,82
    b49c:	1000021e 	bne	r2,zero,b4a8 <UP_en+0x7c>
    b4a0:	00800044 	movi	r2,1
    b4a4:	00000f06 	br	b4e4 <UP_en+0xb8>
	if(keycode[4]==82){return 1;}
    b4a8:	e0bfff17 	ldw	r2,-4(fp)
    b4ac:	10800404 	addi	r2,r2,16
    b4b0:	10800017 	ldw	r2,0(r2)
    b4b4:	10801498 	cmpnei	r2,r2,82
    b4b8:	1000021e 	bne	r2,zero,b4c4 <UP_en+0x98>
    b4bc:	00800044 	movi	r2,1
    b4c0:	00000806 	br	b4e4 <UP_en+0xb8>
	if(keycode[5]==82){return 1;}
    b4c4:	e0bfff17 	ldw	r2,-4(fp)
    b4c8:	10800504 	addi	r2,r2,20
    b4cc:	10800017 	ldw	r2,0(r2)
    b4d0:	10801498 	cmpnei	r2,r2,82
    b4d4:	1000021e 	bne	r2,zero,b4e0 <UP_en+0xb4>
    b4d8:	00800044 	movi	r2,1
    b4dc:	00000106 	br	b4e4 <UP_en+0xb8>
	return 0;
    b4e0:	0005883a 	mov	r2,zero
}
    b4e4:	e037883a 	mov	sp,fp
    b4e8:	df000017 	ldw	fp,0(sp)
    b4ec:	dec00104 	addi	sp,sp,4
    b4f0:	f800283a 	ret

0000b4f4 <DOWN_en>:

int DOWN_en(unsigned int* keycode)
{
    b4f4:	defffe04 	addi	sp,sp,-8
    b4f8:	df000115 	stw	fp,4(sp)
    b4fc:	df000104 	addi	fp,sp,4
    b500:	e13fff15 	stw	r4,-4(fp)
	if(keycode[0]==81){return 1;}
    b504:	e0bfff17 	ldw	r2,-4(fp)
    b508:	10800017 	ldw	r2,0(r2)
    b50c:	10801458 	cmpnei	r2,r2,81
    b510:	1000021e 	bne	r2,zero,b51c <DOWN_en+0x28>
    b514:	00800044 	movi	r2,1
    b518:	00002406 	br	b5ac <DOWN_en+0xb8>
	if(keycode[1]==81){return 1;}
    b51c:	e0bfff17 	ldw	r2,-4(fp)
    b520:	10800104 	addi	r2,r2,4
    b524:	10800017 	ldw	r2,0(r2)
    b528:	10801458 	cmpnei	r2,r2,81
    b52c:	1000021e 	bne	r2,zero,b538 <DOWN_en+0x44>
    b530:	00800044 	movi	r2,1
    b534:	00001d06 	br	b5ac <DOWN_en+0xb8>
	if(keycode[2]==81){return 1;}
    b538:	e0bfff17 	ldw	r2,-4(fp)
    b53c:	10800204 	addi	r2,r2,8
    b540:	10800017 	ldw	r2,0(r2)
    b544:	10801458 	cmpnei	r2,r2,81
    b548:	1000021e 	bne	r2,zero,b554 <DOWN_en+0x60>
    b54c:	00800044 	movi	r2,1
    b550:	00001606 	br	b5ac <DOWN_en+0xb8>
	if(keycode[3]==81){return 1;}
    b554:	e0bfff17 	ldw	r2,-4(fp)
    b558:	10800304 	addi	r2,r2,12
    b55c:	10800017 	ldw	r2,0(r2)
    b560:	10801458 	cmpnei	r2,r2,81
    b564:	1000021e 	bne	r2,zero,b570 <DOWN_en+0x7c>
    b568:	00800044 	movi	r2,1
    b56c:	00000f06 	br	b5ac <DOWN_en+0xb8>
	if(keycode[4]==81){return 1;}
    b570:	e0bfff17 	ldw	r2,-4(fp)
    b574:	10800404 	addi	r2,r2,16
    b578:	10800017 	ldw	r2,0(r2)
    b57c:	10801458 	cmpnei	r2,r2,81
    b580:	1000021e 	bne	r2,zero,b58c <DOWN_en+0x98>
    b584:	00800044 	movi	r2,1
    b588:	00000806 	br	b5ac <DOWN_en+0xb8>
	if(keycode[5]==81){return 1;}
    b58c:	e0bfff17 	ldw	r2,-4(fp)
    b590:	10800504 	addi	r2,r2,20
    b594:	10800017 	ldw	r2,0(r2)
    b598:	10801458 	cmpnei	r2,r2,81
    b59c:	1000021e 	bne	r2,zero,b5a8 <DOWN_en+0xb4>
    b5a0:	00800044 	movi	r2,1
    b5a4:	00000106 	br	b5ac <DOWN_en+0xb8>
	return 0;
    b5a8:	0005883a 	mov	r2,zero
}
    b5ac:	e037883a 	mov	sp,fp
    b5b0:	df000017 	ldw	fp,0(sp)
    b5b4:	dec00104 	addi	sp,sp,4
    b5b8:	f800283a 	ret

0000b5bc <LEFT_en>:

int LEFT_en(unsigned int* keycode)
{
    b5bc:	defffe04 	addi	sp,sp,-8
    b5c0:	df000115 	stw	fp,4(sp)
    b5c4:	df000104 	addi	fp,sp,4
    b5c8:	e13fff15 	stw	r4,-4(fp)
	if(keycode[0]==80){return 1;}
    b5cc:	e0bfff17 	ldw	r2,-4(fp)
    b5d0:	10800017 	ldw	r2,0(r2)
    b5d4:	10801418 	cmpnei	r2,r2,80
    b5d8:	1000021e 	bne	r2,zero,b5e4 <LEFT_en+0x28>
    b5dc:	00800044 	movi	r2,1
    b5e0:	00002406 	br	b674 <LEFT_en+0xb8>
	if(keycode[1]==80){return 1;}
    b5e4:	e0bfff17 	ldw	r2,-4(fp)
    b5e8:	10800104 	addi	r2,r2,4
    b5ec:	10800017 	ldw	r2,0(r2)
    b5f0:	10801418 	cmpnei	r2,r2,80
    b5f4:	1000021e 	bne	r2,zero,b600 <LEFT_en+0x44>
    b5f8:	00800044 	movi	r2,1
    b5fc:	00001d06 	br	b674 <LEFT_en+0xb8>
	if(keycode[2]==80){return 1;}
    b600:	e0bfff17 	ldw	r2,-4(fp)
    b604:	10800204 	addi	r2,r2,8
    b608:	10800017 	ldw	r2,0(r2)
    b60c:	10801418 	cmpnei	r2,r2,80
    b610:	1000021e 	bne	r2,zero,b61c <LEFT_en+0x60>
    b614:	00800044 	movi	r2,1
    b618:	00001606 	br	b674 <LEFT_en+0xb8>
	if(keycode[3]==80){return 1;}
    b61c:	e0bfff17 	ldw	r2,-4(fp)
    b620:	10800304 	addi	r2,r2,12
    b624:	10800017 	ldw	r2,0(r2)
    b628:	10801418 	cmpnei	r2,r2,80
    b62c:	1000021e 	bne	r2,zero,b638 <LEFT_en+0x7c>
    b630:	00800044 	movi	r2,1
    b634:	00000f06 	br	b674 <LEFT_en+0xb8>
	if(keycode[4]==80){return 1;}
    b638:	e0bfff17 	ldw	r2,-4(fp)
    b63c:	10800404 	addi	r2,r2,16
    b640:	10800017 	ldw	r2,0(r2)
    b644:	10801418 	cmpnei	r2,r2,80
    b648:	1000021e 	bne	r2,zero,b654 <LEFT_en+0x98>
    b64c:	00800044 	movi	r2,1
    b650:	00000806 	br	b674 <LEFT_en+0xb8>
	if(keycode[5]==80){return 1;}
    b654:	e0bfff17 	ldw	r2,-4(fp)
    b658:	10800504 	addi	r2,r2,20
    b65c:	10800017 	ldw	r2,0(r2)
    b660:	10801418 	cmpnei	r2,r2,80
    b664:	1000021e 	bne	r2,zero,b670 <LEFT_en+0xb4>
    b668:	00800044 	movi	r2,1
    b66c:	00000106 	br	b674 <LEFT_en+0xb8>
	return 0;
    b670:	0005883a 	mov	r2,zero
}
    b674:	e037883a 	mov	sp,fp
    b678:	df000017 	ldw	fp,0(sp)
    b67c:	dec00104 	addi	sp,sp,4
    b680:	f800283a 	ret

0000b684 <RIGHT_en>:

int RIGHT_en(unsigned int* keycode)
{
    b684:	defffe04 	addi	sp,sp,-8
    b688:	df000115 	stw	fp,4(sp)
    b68c:	df000104 	addi	fp,sp,4
    b690:	e13fff15 	stw	r4,-4(fp)
	if(keycode[0]==79){return 1;}
    b694:	e0bfff17 	ldw	r2,-4(fp)
    b698:	10800017 	ldw	r2,0(r2)
    b69c:	108013d8 	cmpnei	r2,r2,79
    b6a0:	1000021e 	bne	r2,zero,b6ac <RIGHT_en+0x28>
    b6a4:	00800044 	movi	r2,1
    b6a8:	00002406 	br	b73c <RIGHT_en+0xb8>
	if(keycode[1]==79){return 1;}
    b6ac:	e0bfff17 	ldw	r2,-4(fp)
    b6b0:	10800104 	addi	r2,r2,4
    b6b4:	10800017 	ldw	r2,0(r2)
    b6b8:	108013d8 	cmpnei	r2,r2,79
    b6bc:	1000021e 	bne	r2,zero,b6c8 <RIGHT_en+0x44>
    b6c0:	00800044 	movi	r2,1
    b6c4:	00001d06 	br	b73c <RIGHT_en+0xb8>
	if(keycode[2]==79){return 1;}
    b6c8:	e0bfff17 	ldw	r2,-4(fp)
    b6cc:	10800204 	addi	r2,r2,8
    b6d0:	10800017 	ldw	r2,0(r2)
    b6d4:	108013d8 	cmpnei	r2,r2,79
    b6d8:	1000021e 	bne	r2,zero,b6e4 <RIGHT_en+0x60>
    b6dc:	00800044 	movi	r2,1
    b6e0:	00001606 	br	b73c <RIGHT_en+0xb8>
	if(keycode[3]==79){return 1;}
    b6e4:	e0bfff17 	ldw	r2,-4(fp)
    b6e8:	10800304 	addi	r2,r2,12
    b6ec:	10800017 	ldw	r2,0(r2)
    b6f0:	108013d8 	cmpnei	r2,r2,79
    b6f4:	1000021e 	bne	r2,zero,b700 <RIGHT_en+0x7c>
    b6f8:	00800044 	movi	r2,1
    b6fc:	00000f06 	br	b73c <RIGHT_en+0xb8>
	if(keycode[4]==79){return 1;}
    b700:	e0bfff17 	ldw	r2,-4(fp)
    b704:	10800404 	addi	r2,r2,16
    b708:	10800017 	ldw	r2,0(r2)
    b70c:	108013d8 	cmpnei	r2,r2,79
    b710:	1000021e 	bne	r2,zero,b71c <RIGHT_en+0x98>
    b714:	00800044 	movi	r2,1
    b718:	00000806 	br	b73c <RIGHT_en+0xb8>
	if(keycode[5]==79){return 1;}
    b71c:	e0bfff17 	ldw	r2,-4(fp)
    b720:	10800504 	addi	r2,r2,20
    b724:	10800017 	ldw	r2,0(r2)
    b728:	108013d8 	cmpnei	r2,r2,79
    b72c:	1000021e 	bne	r2,zero,b738 <RIGHT_en+0xb4>
    b730:	00800044 	movi	r2,1
    b734:	00000106 	br	b73c <RIGHT_en+0xb8>
	return 0;
    b738:	0005883a 	mov	r2,zero
}
    b73c:	e037883a 	mov	sp,fp
    b740:	df000017 	ldw	fp,0(sp)
    b744:	dec00104 	addi	sp,sp,4
    b748:	f800283a 	ret

0000b74c <SPACE_en>:

int SPACE_en(unsigned int* keycode)
{
    b74c:	defffe04 	addi	sp,sp,-8
    b750:	df000115 	stw	fp,4(sp)
    b754:	df000104 	addi	fp,sp,4
    b758:	e13fff15 	stw	r4,-4(fp)
	if(keycode[0]==44){return 1;}
    b75c:	e0bfff17 	ldw	r2,-4(fp)
    b760:	10800017 	ldw	r2,0(r2)
    b764:	10800b18 	cmpnei	r2,r2,44
    b768:	1000021e 	bne	r2,zero,b774 <SPACE_en+0x28>
    b76c:	00800044 	movi	r2,1
    b770:	00002406 	br	b804 <SPACE_en+0xb8>
	if(keycode[1]==44){return 1;}
    b774:	e0bfff17 	ldw	r2,-4(fp)
    b778:	10800104 	addi	r2,r2,4
    b77c:	10800017 	ldw	r2,0(r2)
    b780:	10800b18 	cmpnei	r2,r2,44
    b784:	1000021e 	bne	r2,zero,b790 <SPACE_en+0x44>
    b788:	00800044 	movi	r2,1
    b78c:	00001d06 	br	b804 <SPACE_en+0xb8>
	if(keycode[2]==44){return 1;}
    b790:	e0bfff17 	ldw	r2,-4(fp)
    b794:	10800204 	addi	r2,r2,8
    b798:	10800017 	ldw	r2,0(r2)
    b79c:	10800b18 	cmpnei	r2,r2,44
    b7a0:	1000021e 	bne	r2,zero,b7ac <SPACE_en+0x60>
    b7a4:	00800044 	movi	r2,1
    b7a8:	00001606 	br	b804 <SPACE_en+0xb8>
	if(keycode[3]==44){return 1;}
    b7ac:	e0bfff17 	ldw	r2,-4(fp)
    b7b0:	10800304 	addi	r2,r2,12
    b7b4:	10800017 	ldw	r2,0(r2)
    b7b8:	10800b18 	cmpnei	r2,r2,44
    b7bc:	1000021e 	bne	r2,zero,b7c8 <SPACE_en+0x7c>
    b7c0:	00800044 	movi	r2,1
    b7c4:	00000f06 	br	b804 <SPACE_en+0xb8>
	if(keycode[4]==44){return 1;}
    b7c8:	e0bfff17 	ldw	r2,-4(fp)
    b7cc:	10800404 	addi	r2,r2,16
    b7d0:	10800017 	ldw	r2,0(r2)
    b7d4:	10800b18 	cmpnei	r2,r2,44
    b7d8:	1000021e 	bne	r2,zero,b7e4 <SPACE_en+0x98>
    b7dc:	00800044 	movi	r2,1
    b7e0:	00000806 	br	b804 <SPACE_en+0xb8>
	if(keycode[5]==44){return 1;}
    b7e4:	e0bfff17 	ldw	r2,-4(fp)
    b7e8:	10800504 	addi	r2,r2,20
    b7ec:	10800017 	ldw	r2,0(r2)
    b7f0:	10800b18 	cmpnei	r2,r2,44
    b7f4:	1000021e 	bne	r2,zero,b800 <SPACE_en+0xb4>
    b7f8:	00800044 	movi	r2,1
    b7fc:	00000106 	br	b804 <SPACE_en+0xb8>
	return 0;
    b800:	0005883a 	mov	r2,zero
}
    b804:	e037883a 	mov	sp,fp
    b808:	df000017 	ldw	fp,0(sp)
    b80c:	dec00104 	addi	sp,sp,4
    b810:	f800283a 	ret

0000b814 <ENTER_en>:

int ENTER_en(unsigned int* keycode)
{
    b814:	defffe04 	addi	sp,sp,-8
    b818:	df000115 	stw	fp,4(sp)
    b81c:	df000104 	addi	fp,sp,4
    b820:	e13fff15 	stw	r4,-4(fp)
	if(keycode[0]==40){return 1;}
    b824:	e0bfff17 	ldw	r2,-4(fp)
    b828:	10800017 	ldw	r2,0(r2)
    b82c:	10800a18 	cmpnei	r2,r2,40
    b830:	1000021e 	bne	r2,zero,b83c <ENTER_en+0x28>
    b834:	00800044 	movi	r2,1
    b838:	00002406 	br	b8cc <ENTER_en+0xb8>
	if(keycode[1]==40){return 1;}
    b83c:	e0bfff17 	ldw	r2,-4(fp)
    b840:	10800104 	addi	r2,r2,4
    b844:	10800017 	ldw	r2,0(r2)
    b848:	10800a18 	cmpnei	r2,r2,40
    b84c:	1000021e 	bne	r2,zero,b858 <ENTER_en+0x44>
    b850:	00800044 	movi	r2,1
    b854:	00001d06 	br	b8cc <ENTER_en+0xb8>
	if(keycode[2]==40){return 1;}
    b858:	e0bfff17 	ldw	r2,-4(fp)
    b85c:	10800204 	addi	r2,r2,8
    b860:	10800017 	ldw	r2,0(r2)
    b864:	10800a18 	cmpnei	r2,r2,40
    b868:	1000021e 	bne	r2,zero,b874 <ENTER_en+0x60>
    b86c:	00800044 	movi	r2,1
    b870:	00001606 	br	b8cc <ENTER_en+0xb8>
	if(keycode[3]==40){return 1;}
    b874:	e0bfff17 	ldw	r2,-4(fp)
    b878:	10800304 	addi	r2,r2,12
    b87c:	10800017 	ldw	r2,0(r2)
    b880:	10800a18 	cmpnei	r2,r2,40
    b884:	1000021e 	bne	r2,zero,b890 <ENTER_en+0x7c>
    b888:	00800044 	movi	r2,1
    b88c:	00000f06 	br	b8cc <ENTER_en+0xb8>
	if(keycode[4]==40){return 1;}
    b890:	e0bfff17 	ldw	r2,-4(fp)
    b894:	10800404 	addi	r2,r2,16
    b898:	10800017 	ldw	r2,0(r2)
    b89c:	10800a18 	cmpnei	r2,r2,40
    b8a0:	1000021e 	bne	r2,zero,b8ac <ENTER_en+0x98>
    b8a4:	00800044 	movi	r2,1
    b8a8:	00000806 	br	b8cc <ENTER_en+0xb8>
	if(keycode[5]==40){return 1;}
    b8ac:	e0bfff17 	ldw	r2,-4(fp)
    b8b0:	10800504 	addi	r2,r2,20
    b8b4:	10800017 	ldw	r2,0(r2)
    b8b8:	10800a18 	cmpnei	r2,r2,40
    b8bc:	1000021e 	bne	r2,zero,b8c8 <ENTER_en+0xb4>
    b8c0:	00800044 	movi	r2,1
    b8c4:	00000106 	br	b8cc <ENTER_en+0xb8>
	return 0;
    b8c8:	0005883a 	mov	r2,zero
}
    b8cc:	e037883a 	mov	sp,fp
    b8d0:	df000017 	ldw	fp,0(sp)
    b8d4:	dec00104 	addi	sp,sp,4
    b8d8:	f800283a 	ret

0000b8dc <PLUS_en>:

int PLUS_en(unsigned int* keycode)
{
    b8dc:	defffe04 	addi	sp,sp,-8
    b8e0:	df000115 	stw	fp,4(sp)
    b8e4:	df000104 	addi	fp,sp,4
    b8e8:	e13fff15 	stw	r4,-4(fp)
	if(keycode[0]==46){return 1;}
    b8ec:	e0bfff17 	ldw	r2,-4(fp)
    b8f0:	10800017 	ldw	r2,0(r2)
    b8f4:	10800b98 	cmpnei	r2,r2,46
    b8f8:	1000021e 	bne	r2,zero,b904 <PLUS_en+0x28>
    b8fc:	00800044 	movi	r2,1
    b900:	00002406 	br	b994 <PLUS_en+0xb8>
	if(keycode[1]==46){return 1;}
    b904:	e0bfff17 	ldw	r2,-4(fp)
    b908:	10800104 	addi	r2,r2,4
    b90c:	10800017 	ldw	r2,0(r2)
    b910:	10800b98 	cmpnei	r2,r2,46
    b914:	1000021e 	bne	r2,zero,b920 <PLUS_en+0x44>
    b918:	00800044 	movi	r2,1
    b91c:	00001d06 	br	b994 <PLUS_en+0xb8>
	if(keycode[2]==46){return 1;}
    b920:	e0bfff17 	ldw	r2,-4(fp)
    b924:	10800204 	addi	r2,r2,8
    b928:	10800017 	ldw	r2,0(r2)
    b92c:	10800b98 	cmpnei	r2,r2,46
    b930:	1000021e 	bne	r2,zero,b93c <PLUS_en+0x60>
    b934:	00800044 	movi	r2,1
    b938:	00001606 	br	b994 <PLUS_en+0xb8>
	if(keycode[3]==46){return 1;}
    b93c:	e0bfff17 	ldw	r2,-4(fp)
    b940:	10800304 	addi	r2,r2,12
    b944:	10800017 	ldw	r2,0(r2)
    b948:	10800b98 	cmpnei	r2,r2,46
    b94c:	1000021e 	bne	r2,zero,b958 <PLUS_en+0x7c>
    b950:	00800044 	movi	r2,1
    b954:	00000f06 	br	b994 <PLUS_en+0xb8>
	if(keycode[4]==46){return 1;}
    b958:	e0bfff17 	ldw	r2,-4(fp)
    b95c:	10800404 	addi	r2,r2,16
    b960:	10800017 	ldw	r2,0(r2)
    b964:	10800b98 	cmpnei	r2,r2,46
    b968:	1000021e 	bne	r2,zero,b974 <PLUS_en+0x98>
    b96c:	00800044 	movi	r2,1
    b970:	00000806 	br	b994 <PLUS_en+0xb8>
	if(keycode[5]==46){return 1;}
    b974:	e0bfff17 	ldw	r2,-4(fp)
    b978:	10800504 	addi	r2,r2,20
    b97c:	10800017 	ldw	r2,0(r2)
    b980:	10800b98 	cmpnei	r2,r2,46
    b984:	1000021e 	bne	r2,zero,b990 <PLUS_en+0xb4>
    b988:	00800044 	movi	r2,1
    b98c:	00000106 	br	b994 <PLUS_en+0xb8>
	return 0;
    b990:	0005883a 	mov	r2,zero

}
    b994:	e037883a 	mov	sp,fp
    b998:	df000017 	ldw	fp,0(sp)
    b99c:	dec00104 	addi	sp,sp,4
    b9a0:	f800283a 	ret

0000b9a4 <MINOR_en>:

int MINOR_en(unsigned int* keycode)
{
    b9a4:	defffe04 	addi	sp,sp,-8
    b9a8:	df000115 	stw	fp,4(sp)
    b9ac:	df000104 	addi	fp,sp,4
    b9b0:	e13fff15 	stw	r4,-4(fp)
	if(keycode[0]==45){return 1;}
    b9b4:	e0bfff17 	ldw	r2,-4(fp)
    b9b8:	10800017 	ldw	r2,0(r2)
    b9bc:	10800b58 	cmpnei	r2,r2,45
    b9c0:	1000021e 	bne	r2,zero,b9cc <MINOR_en+0x28>
    b9c4:	00800044 	movi	r2,1
    b9c8:	00002406 	br	ba5c <MINOR_en+0xb8>
	if(keycode[1]==45){return 1;}
    b9cc:	e0bfff17 	ldw	r2,-4(fp)
    b9d0:	10800104 	addi	r2,r2,4
    b9d4:	10800017 	ldw	r2,0(r2)
    b9d8:	10800b58 	cmpnei	r2,r2,45
    b9dc:	1000021e 	bne	r2,zero,b9e8 <MINOR_en+0x44>
    b9e0:	00800044 	movi	r2,1
    b9e4:	00001d06 	br	ba5c <MINOR_en+0xb8>
	if(keycode[2]==45){return 1;}
    b9e8:	e0bfff17 	ldw	r2,-4(fp)
    b9ec:	10800204 	addi	r2,r2,8
    b9f0:	10800017 	ldw	r2,0(r2)
    b9f4:	10800b58 	cmpnei	r2,r2,45
    b9f8:	1000021e 	bne	r2,zero,ba04 <MINOR_en+0x60>
    b9fc:	00800044 	movi	r2,1
    ba00:	00001606 	br	ba5c <MINOR_en+0xb8>
	if(keycode[3]==45){return 1;}
    ba04:	e0bfff17 	ldw	r2,-4(fp)
    ba08:	10800304 	addi	r2,r2,12
    ba0c:	10800017 	ldw	r2,0(r2)
    ba10:	10800b58 	cmpnei	r2,r2,45
    ba14:	1000021e 	bne	r2,zero,ba20 <MINOR_en+0x7c>
    ba18:	00800044 	movi	r2,1
    ba1c:	00000f06 	br	ba5c <MINOR_en+0xb8>
	if(keycode[4]==45){return 1;}
    ba20:	e0bfff17 	ldw	r2,-4(fp)
    ba24:	10800404 	addi	r2,r2,16
    ba28:	10800017 	ldw	r2,0(r2)
    ba2c:	10800b58 	cmpnei	r2,r2,45
    ba30:	1000021e 	bne	r2,zero,ba3c <MINOR_en+0x98>
    ba34:	00800044 	movi	r2,1
    ba38:	00000806 	br	ba5c <MINOR_en+0xb8>
	if(keycode[5]==45){return 1;}
    ba3c:	e0bfff17 	ldw	r2,-4(fp)
    ba40:	10800504 	addi	r2,r2,20
    ba44:	10800017 	ldw	r2,0(r2)
    ba48:	10800b58 	cmpnei	r2,r2,45
    ba4c:	1000021e 	bne	r2,zero,ba58 <MINOR_en+0xb4>
    ba50:	00800044 	movi	r2,1
    ba54:	00000106 	br	ba5c <MINOR_en+0xb8>
	return 0;
    ba58:	0005883a 	mov	r2,zero

}
    ba5c:	e037883a 	mov	sp,fp
    ba60:	df000017 	ldw	fp,0(sp)
    ba64:	dec00104 	addi	sp,sp,4
    ba68:	f800283a 	ret

0000ba6c <ZERO_en>:

int ZERO_en(unsigned int* keycode){
    ba6c:	defffe04 	addi	sp,sp,-8
    ba70:	df000115 	stw	fp,4(sp)
    ba74:	df000104 	addi	fp,sp,4
    ba78:	e13fff15 	stw	r4,-4(fp)
	if(keycode[0]==39){return 1;}
    ba7c:	e0bfff17 	ldw	r2,-4(fp)
    ba80:	10800017 	ldw	r2,0(r2)
    ba84:	108009d8 	cmpnei	r2,r2,39
    ba88:	1000021e 	bne	r2,zero,ba94 <ZERO_en+0x28>
    ba8c:	00800044 	movi	r2,1
    ba90:	00002406 	br	bb24 <ZERO_en+0xb8>
	if(keycode[1]==39){return 1;}
    ba94:	e0bfff17 	ldw	r2,-4(fp)
    ba98:	10800104 	addi	r2,r2,4
    ba9c:	10800017 	ldw	r2,0(r2)
    baa0:	108009d8 	cmpnei	r2,r2,39
    baa4:	1000021e 	bne	r2,zero,bab0 <ZERO_en+0x44>
    baa8:	00800044 	movi	r2,1
    baac:	00001d06 	br	bb24 <ZERO_en+0xb8>
	if(keycode[2]==39){return 1;}
    bab0:	e0bfff17 	ldw	r2,-4(fp)
    bab4:	10800204 	addi	r2,r2,8
    bab8:	10800017 	ldw	r2,0(r2)
    babc:	108009d8 	cmpnei	r2,r2,39
    bac0:	1000021e 	bne	r2,zero,bacc <ZERO_en+0x60>
    bac4:	00800044 	movi	r2,1
    bac8:	00001606 	br	bb24 <ZERO_en+0xb8>
	if(keycode[3]==39){return 1;}
    bacc:	e0bfff17 	ldw	r2,-4(fp)
    bad0:	10800304 	addi	r2,r2,12
    bad4:	10800017 	ldw	r2,0(r2)
    bad8:	108009d8 	cmpnei	r2,r2,39
    badc:	1000021e 	bne	r2,zero,bae8 <ZERO_en+0x7c>
    bae0:	00800044 	movi	r2,1
    bae4:	00000f06 	br	bb24 <ZERO_en+0xb8>
	if(keycode[4]==39){return 1;}
    bae8:	e0bfff17 	ldw	r2,-4(fp)
    baec:	10800404 	addi	r2,r2,16
    baf0:	10800017 	ldw	r2,0(r2)
    baf4:	108009d8 	cmpnei	r2,r2,39
    baf8:	1000021e 	bne	r2,zero,bb04 <ZERO_en+0x98>
    bafc:	00800044 	movi	r2,1
    bb00:	00000806 	br	bb24 <ZERO_en+0xb8>
	if(keycode[5]==39){return 1;}
    bb04:	e0bfff17 	ldw	r2,-4(fp)
    bb08:	10800504 	addi	r2,r2,20
    bb0c:	10800017 	ldw	r2,0(r2)
    bb10:	108009d8 	cmpnei	r2,r2,39
    bb14:	1000021e 	bne	r2,zero,bb20 <ZERO_en+0xb4>
    bb18:	00800044 	movi	r2,1
    bb1c:	00000106 	br	bb24 <ZERO_en+0xb8>
	return 0;
    bb20:	0005883a 	mov	r2,zero

}
    bb24:	e037883a 	mov	sp,fp
    bb28:	df000017 	ldw	fp,0(sp)
    bb2c:	dec00104 	addi	sp,sp,4
    bb30:	f800283a 	ret

0000bb34 <NINE_en>:

int NINE_en(unsigned int* keycode){
    bb34:	defffe04 	addi	sp,sp,-8
    bb38:	df000115 	stw	fp,4(sp)
    bb3c:	df000104 	addi	fp,sp,4
    bb40:	e13fff15 	stw	r4,-4(fp)
	if(keycode[0]==38){return 1;}
    bb44:	e0bfff17 	ldw	r2,-4(fp)
    bb48:	10800017 	ldw	r2,0(r2)
    bb4c:	10800998 	cmpnei	r2,r2,38
    bb50:	1000021e 	bne	r2,zero,bb5c <NINE_en+0x28>
    bb54:	00800044 	movi	r2,1
    bb58:	00002406 	br	bbec <NINE_en+0xb8>
	if(keycode[1]==38){return 1;}
    bb5c:	e0bfff17 	ldw	r2,-4(fp)
    bb60:	10800104 	addi	r2,r2,4
    bb64:	10800017 	ldw	r2,0(r2)
    bb68:	10800998 	cmpnei	r2,r2,38
    bb6c:	1000021e 	bne	r2,zero,bb78 <NINE_en+0x44>
    bb70:	00800044 	movi	r2,1
    bb74:	00001d06 	br	bbec <NINE_en+0xb8>
	if(keycode[2]==38){return 1;}
    bb78:	e0bfff17 	ldw	r2,-4(fp)
    bb7c:	10800204 	addi	r2,r2,8
    bb80:	10800017 	ldw	r2,0(r2)
    bb84:	10800998 	cmpnei	r2,r2,38
    bb88:	1000021e 	bne	r2,zero,bb94 <NINE_en+0x60>
    bb8c:	00800044 	movi	r2,1
    bb90:	00001606 	br	bbec <NINE_en+0xb8>
	if(keycode[3]==38){return 1;}
    bb94:	e0bfff17 	ldw	r2,-4(fp)
    bb98:	10800304 	addi	r2,r2,12
    bb9c:	10800017 	ldw	r2,0(r2)
    bba0:	10800998 	cmpnei	r2,r2,38
    bba4:	1000021e 	bne	r2,zero,bbb0 <NINE_en+0x7c>
    bba8:	00800044 	movi	r2,1
    bbac:	00000f06 	br	bbec <NINE_en+0xb8>
	if(keycode[4]==38){return 1;}
    bbb0:	e0bfff17 	ldw	r2,-4(fp)
    bbb4:	10800404 	addi	r2,r2,16
    bbb8:	10800017 	ldw	r2,0(r2)
    bbbc:	10800998 	cmpnei	r2,r2,38
    bbc0:	1000021e 	bne	r2,zero,bbcc <NINE_en+0x98>
    bbc4:	00800044 	movi	r2,1
    bbc8:	00000806 	br	bbec <NINE_en+0xb8>
	if(keycode[5]==38){return 1;}
    bbcc:	e0bfff17 	ldw	r2,-4(fp)
    bbd0:	10800504 	addi	r2,r2,20
    bbd4:	10800017 	ldw	r2,0(r2)
    bbd8:	10800998 	cmpnei	r2,r2,38
    bbdc:	1000021e 	bne	r2,zero,bbe8 <NINE_en+0xb4>
    bbe0:	00800044 	movi	r2,1
    bbe4:	00000106 	br	bbec <NINE_en+0xb8>
	return 0;
    bbe8:	0005883a 	mov	r2,zero
}
    bbec:	e037883a 	mov	sp,fp
    bbf0:	df000017 	ldw	fp,0(sp)
    bbf4:	dec00104 	addi	sp,sp,4
    bbf8:	f800283a 	ret

0000bbfc <begin_anim>:
#include "./header_file/draw_driver.h"
#include "./header_file/spriteIndex.h"
#include "./header_file/drawing.h"
#include "./header_file/audio_driver.h"

void begin_anim(){
    bbfc:	deffeb04 	addi	sp,sp,-84
    bc00:	dfc01415 	stw	ra,80(sp)
    bc04:	df001315 	stw	fp,76(sp)
    bc08:	dc001215 	stw	r16,72(sp)
    bc0c:	df001304 	addi	fp,sp,76



	changeBackVolume(0);
    bc10:	0009883a 	mov	r4,zero
    bc14:	0002c640 	call	2c64 <changeBackVolume>


	//Draw Background
	//Loop Column
	//Draw Black Background
	for (int i = 0; i < 4; i++ ){
    bc18:	e03ff015 	stw	zero,-64(fp)
    bc1c:	00001e06 	br	bc98 <begin_anim+0x9c>
		//Loop  Row
		for (int z = 0; z < 3; z++){
    bc20:	e03ff115 	stw	zero,-60(fp)
    bc24:	00001606 	br	bc80 <begin_anim+0x84>
			draw_driver(414,300,414+159,300+159,i*160,160*z,2);
    bc28:	01402804 	movi	r5,160
    bc2c:	e13ff017 	ldw	r4,-64(fp)
    bc30:	000c68c0 	call	c68c <__mulsi3>
    bc34:	1021883a 	mov	r16,r2
    bc38:	01402804 	movi	r5,160
    bc3c:	e13ff117 	ldw	r4,-60(fp)
    bc40:	000c68c0 	call	c68c <__mulsi3>
    bc44:	1007883a 	mov	r3,r2
    bc48:	00800084 	movi	r2,2
    bc4c:	d8800215 	stw	r2,8(sp)
    bc50:	d8c00115 	stw	r3,4(sp)
    bc54:	dc000015 	stw	r16,0(sp)
    bc58:	01c072c4 	movi	r7,459
    bc5c:	01808f44 	movi	r6,573
    bc60:	01404b04 	movi	r5,300
    bc64:	01006784 	movi	r4,414
    bc68:	00036040 	call	3604 <draw_driver>
			delay(1);
    bc6c:	01000044 	movi	r4,1
    bc70:	00038500 	call	3850 <delay>
	//Draw Background
	//Loop Column
	//Draw Black Background
	for (int i = 0; i < 4; i++ ){
		//Loop  Row
		for (int z = 0; z < 3; z++){
    bc74:	e0bff117 	ldw	r2,-60(fp)
    bc78:	10800044 	addi	r2,r2,1
    bc7c:	e0bff115 	stw	r2,-60(fp)
    bc80:	e0bff117 	ldw	r2,-60(fp)
    bc84:	108000d0 	cmplti	r2,r2,3
    bc88:	103fe71e 	bne	r2,zero,bc28 <__alt_data_end+0xf800bc28>


	//Draw Background
	//Loop Column
	//Draw Black Background
	for (int i = 0; i < 4; i++ ){
    bc8c:	e0bff017 	ldw	r2,-64(fp)
    bc90:	10800044 	addi	r2,r2,1
    bc94:	e0bff015 	stw	r2,-64(fp)
    bc98:	e0bff017 	ldw	r2,-64(fp)
    bc9c:	10800110 	cmplti	r2,r2,4
    bca0:	103fdf1e 	bne	r2,zero,bc20 <__alt_data_end+0xf800bc20>
			delay(1);
		}
	}

	//Draw Bomb Box
	for (int r1 = 0; r1 < 210; r1 ++){
    bca4:	e03ff215 	stw	zero,-56(fp)
    bca8:	00001006 	br	bcec <begin_anim+0xf0>
		draw_driver(310,12,311,13,r1+215,382,1);
    bcac:	e0bff217 	ldw	r2,-56(fp)
    bcb0:	108035c4 	addi	r2,r2,215
    bcb4:	1007883a 	mov	r3,r2
    bcb8:	00800044 	movi	r2,1
    bcbc:	d8800215 	stw	r2,8(sp)
    bcc0:	00805f84 	movi	r2,382
    bcc4:	d8800115 	stw	r2,4(sp)
    bcc8:	d8c00015 	stw	r3,0(sp)
    bccc:	01c00344 	movi	r7,13
    bcd0:	01804dc4 	movi	r6,311
    bcd4:	01400304 	movi	r5,12
    bcd8:	01004d84 	movi	r4,310
    bcdc:	00036040 	call	3604 <draw_driver>
			delay(1);
		}
	}

	//Draw Bomb Box
	for (int r1 = 0; r1 < 210; r1 ++){
    bce0:	e0bff217 	ldw	r2,-56(fp)
    bce4:	10800044 	addi	r2,r2,1
    bce8:	e0bff215 	stw	r2,-56(fp)
    bcec:	e0bff217 	ldw	r2,-56(fp)
    bcf0:	10803490 	cmplti	r2,r2,210
    bcf4:	103fed1e 	bne	r2,zero,bcac <__alt_data_end+0xf800bcac>
		draw_driver(310,12,311,13,r1+215,382,1);
	}

	for (int rn = 0 ; rn < 40; rn ++ ){
    bcf8:	e03ff315 	stw	zero,-52(fp)
    bcfc:	00001006 	br	bd40 <begin_anim+0x144>
		draw_driver(310,12,311,13,215,382+rn,1);
    bd00:	e0bff317 	ldw	r2,-52(fp)
    bd04:	10805f84 	addi	r2,r2,382
    bd08:	1007883a 	mov	r3,r2
    bd0c:	00800044 	movi	r2,1
    bd10:	d8800215 	stw	r2,8(sp)
    bd14:	d8c00115 	stw	r3,4(sp)
    bd18:	008035c4 	movi	r2,215
    bd1c:	d8800015 	stw	r2,0(sp)
    bd20:	01c00344 	movi	r7,13
    bd24:	01804dc4 	movi	r6,311
    bd28:	01400304 	movi	r5,12
    bd2c:	01004d84 	movi	r4,310
    bd30:	00036040 	call	3604 <draw_driver>
	//Draw Bomb Box
	for (int r1 = 0; r1 < 210; r1 ++){
		draw_driver(310,12,311,13,r1+215,382,1);
	}

	for (int rn = 0 ; rn < 40; rn ++ ){
    bd34:	e0bff317 	ldw	r2,-52(fp)
    bd38:	10800044 	addi	r2,r2,1
    bd3c:	e0bff315 	stw	r2,-52(fp)
    bd40:	e0bff317 	ldw	r2,-52(fp)
    bd44:	10800a10 	cmplti	r2,r2,40
    bd48:	103fed1e 	bne	r2,zero,bd00 <__alt_data_end+0xf800bd00>
		draw_driver(310,12,311,13,215,382+rn,1);
	}

	for (int r2 = 0; r2 < 210; r2 ++){
    bd4c:	e03ff415 	stw	zero,-48(fp)
    bd50:	00001006 	br	bd94 <begin_anim+0x198>
		draw_driver(310,12,311,13,r2+215,382+39,1);
    bd54:	e0bff417 	ldw	r2,-48(fp)
    bd58:	108035c4 	addi	r2,r2,215
    bd5c:	1007883a 	mov	r3,r2
    bd60:	00800044 	movi	r2,1
    bd64:	d8800215 	stw	r2,8(sp)
    bd68:	00806944 	movi	r2,421
    bd6c:	d8800115 	stw	r2,4(sp)
    bd70:	d8c00015 	stw	r3,0(sp)
    bd74:	01c00344 	movi	r7,13
    bd78:	01804dc4 	movi	r6,311
    bd7c:	01400304 	movi	r5,12
    bd80:	01004d84 	movi	r4,310
    bd84:	00036040 	call	3604 <draw_driver>

	for (int rn = 0 ; rn < 40; rn ++ ){
		draw_driver(310,12,311,13,215,382+rn,1);
	}

	for (int r2 = 0; r2 < 210; r2 ++){
    bd88:	e0bff417 	ldw	r2,-48(fp)
    bd8c:	10800044 	addi	r2,r2,1
    bd90:	e0bff415 	stw	r2,-48(fp)
    bd94:	e0bff417 	ldw	r2,-48(fp)
    bd98:	10803490 	cmplti	r2,r2,210
    bd9c:	103fed1e 	bne	r2,zero,bd54 <__alt_data_end+0xf800bd54>
		draw_driver(310,12,311,13,r2+215,382+39,1);
	}

	for (int rn2 = 0 ; rn2 < 40; rn2 ++ ){
    bda0:	e03ff515 	stw	zero,-44(fp)
    bda4:	00001006 	br	bde8 <begin_anim+0x1ec>
		draw_driver(310,12,311,13,215+209,382+rn2,1);
    bda8:	e0bff517 	ldw	r2,-44(fp)
    bdac:	10805f84 	addi	r2,r2,382
    bdb0:	1007883a 	mov	r3,r2
    bdb4:	00800044 	movi	r2,1
    bdb8:	d8800215 	stw	r2,8(sp)
    bdbc:	d8c00115 	stw	r3,4(sp)
    bdc0:	00806a04 	movi	r2,424
    bdc4:	d8800015 	stw	r2,0(sp)
    bdc8:	01c00344 	movi	r7,13
    bdcc:	01804dc4 	movi	r6,311
    bdd0:	01400304 	movi	r5,12
    bdd4:	01004d84 	movi	r4,310
    bdd8:	00036040 	call	3604 <draw_driver>

	for (int r2 = 0; r2 < 210; r2 ++){
		draw_driver(310,12,311,13,r2+215,382+39,1);
	}

	for (int rn2 = 0 ; rn2 < 40; rn2 ++ ){
    bddc:	e0bff517 	ldw	r2,-44(fp)
    bde0:	10800044 	addi	r2,r2,1
    bde4:	e0bff515 	stw	r2,-44(fp)
    bde8:	e0bff517 	ldw	r2,-44(fp)
    bdec:	10800a10 	cmplti	r2,r2,40
    bdf0:	103fed1e 	bne	r2,zero,bda8 <__alt_data_end+0xf800bda8>
	}



	//Draw Character
	drawBomb(1,9,7);
    bdf4:	018001c4 	movi	r6,7
    bdf8:	01400244 	movi	r5,9
    bdfc:	01000044 	movi	r4,1
    be00:	0004dc40 	call	4dc4 <drawBomb>
	drawBomb(1,10,7);
    be04:	018001c4 	movi	r6,7
    be08:	01400284 	movi	r5,10
    be0c:	01000044 	movi	r4,1
    be10:	0004dc40 	call	4dc4 <drawBomb>

	int counter = 0;
    be14:	e03ff615 	stw	zero,-40(fp)

	coin begin_coin[6];
	for (int i = 0; i < 6; i++){
    be18:	e03ff715 	stw	zero,-36(fp)
    be1c:	00000406 	br	be30 <begin_anim+0x234>
		(begin_coin[6]).counter = 0;
    be20:	e03fff15 	stw	zero,-4(fp)
	drawBomb(1,10,7);

	int counter = 0;

	coin begin_coin[6];
	for (int i = 0; i < 6; i++){
    be24:	e0bff717 	ldw	r2,-36(fp)
    be28:	10800044 	addi	r2,r2,1
    be2c:	e0bff715 	stw	r2,-36(fp)
    be30:	e0bff717 	ldw	r2,-36(fp)
    be34:	10800190 	cmplti	r2,r2,6
    be38:	103ff91e 	bne	r2,zero,be20 <__alt_data_end+0xf800be20>
		(begin_coin[6]).counter = 0;
	}


	for (int slow_down_counter = 0; slow_down_counter < 72*100; slow_down_counter++){
    be3c:	e03ff815 	stw	zero,-32(fp)
    be40:	00017a06 	br	c42c <begin_anim+0x830>
		if (slow_down_counter % 100 == 0){
    be44:	e0bff817 	ldw	r2,-32(fp)
    be48:	01401904 	movi	r5,100
    be4c:	1009883a 	mov	r4,r2
    be50:	000c55c0 	call	c55c <__modsi3>
    be54:	1000f51e 	bne	r2,zero,c22c <begin_anim+0x630>
				draw_driver(414,300,414+31,300+31,32*9,32*6,2);
    be58:	00800084 	movi	r2,2
    be5c:	d8800215 	stw	r2,8(sp)
    be60:	00803004 	movi	r2,192
    be64:	d8800115 	stw	r2,4(sp)
    be68:	00804804 	movi	r2,288
    be6c:	d8800015 	stw	r2,0(sp)
    be70:	01c052c4 	movi	r7,331
    be74:	01806f44 	movi	r6,445
    be78:	01404b04 	movi	r5,300
    be7c:	01006784 	movi	r4,414
    be80:	00036040 	call	3604 <draw_driver>
//				cleanCell(9,6);
				drawExplosion(counter % 36,9,6);
    be84:	e0bff617 	ldw	r2,-40(fp)
    be88:	01400904 	movi	r5,36
    be8c:	1009883a 	mov	r4,r2
    be90:	000c55c0 	call	c55c <__modsi3>
    be94:	10bfffcc 	andi	r2,r2,65535
    be98:	01800184 	movi	r6,6
    be9c:	01400244 	movi	r5,9
    bea0:	1009883a 	mov	r4,r2
    bea4:	00043d00 	call	43d0 <drawExplosion>
				draw_driver(414,300,414+31,300+31,32*9,32*5,2);
    bea8:	00800084 	movi	r2,2
    beac:	d8800215 	stw	r2,8(sp)
    beb0:	00802804 	movi	r2,160
    beb4:	d8800115 	stw	r2,4(sp)
    beb8:	00804804 	movi	r2,288
    bebc:	d8800015 	stw	r2,0(sp)
    bec0:	01c052c4 	movi	r7,331
    bec4:	01806f44 	movi	r6,445
    bec8:	01404b04 	movi	r5,300
    becc:	01006784 	movi	r4,414
    bed0:	00036040 	call	3604 <draw_driver>
//				cleanCell(9,5);
				drawExplosion(counter % 36,9,5);
    bed4:	e0bff617 	ldw	r2,-40(fp)
    bed8:	01400904 	movi	r5,36
    bedc:	1009883a 	mov	r4,r2
    bee0:	000c55c0 	call	c55c <__modsi3>
    bee4:	10bfffcc 	andi	r2,r2,65535
    bee8:	01800144 	movi	r6,5
    beec:	01400244 	movi	r5,9
    bef0:	1009883a 	mov	r4,r2
    bef4:	00043d00 	call	43d0 <drawExplosion>

				draw_driver(414,300,414+31,300+31,32*9,32*8,2);
    bef8:	00800084 	movi	r2,2
    befc:	d8800215 	stw	r2,8(sp)
    bf00:	00804004 	movi	r2,256
    bf04:	d8800115 	stw	r2,4(sp)
    bf08:	00804804 	movi	r2,288
    bf0c:	d8800015 	stw	r2,0(sp)
    bf10:	01c052c4 	movi	r7,331
    bf14:	01806f44 	movi	r6,445
    bf18:	01404b04 	movi	r5,300
    bf1c:	01006784 	movi	r4,414
    bf20:	00036040 	call	3604 <draw_driver>
//				cleanCell(9,8);
				drawExplosion(counter % 36,9,8);
    bf24:	e0bff617 	ldw	r2,-40(fp)
    bf28:	01400904 	movi	r5,36
    bf2c:	1009883a 	mov	r4,r2
    bf30:	000c55c0 	call	c55c <__modsi3>
    bf34:	10bfffcc 	andi	r2,r2,65535
    bf38:	01800204 	movi	r6,8
    bf3c:	01400244 	movi	r5,9
    bf40:	1009883a 	mov	r4,r2
    bf44:	00043d00 	call	43d0 <drawExplosion>
				draw_driver(414,300,414+31,300+31,32*9,32*9,2);
    bf48:	00800084 	movi	r2,2
    bf4c:	d8800215 	stw	r2,8(sp)
    bf50:	00804804 	movi	r2,288
    bf54:	d8800115 	stw	r2,4(sp)
    bf58:	00804804 	movi	r2,288
    bf5c:	d8800015 	stw	r2,0(sp)
    bf60:	01c052c4 	movi	r7,331
    bf64:	01806f44 	movi	r6,445
    bf68:	01404b04 	movi	r5,300
    bf6c:	01006784 	movi	r4,414
    bf70:	00036040 	call	3604 <draw_driver>
//				cleanCell(9,9);
				drawExplosion(counter % 36,9,9);
    bf74:	e0bff617 	ldw	r2,-40(fp)
    bf78:	01400904 	movi	r5,36
    bf7c:	1009883a 	mov	r4,r2
    bf80:	000c55c0 	call	c55c <__modsi3>
    bf84:	10bfffcc 	andi	r2,r2,65535
    bf88:	01800244 	movi	r6,9
    bf8c:	01400244 	movi	r5,9
    bf90:	1009883a 	mov	r4,r2
    bf94:	00043d00 	call	43d0 <drawExplosion>

				draw_driver(414,300,414+31,300+31,32*10,32*6,2);
    bf98:	00800084 	movi	r2,2
    bf9c:	d8800215 	stw	r2,8(sp)
    bfa0:	00803004 	movi	r2,192
    bfa4:	d8800115 	stw	r2,4(sp)
    bfa8:	00805004 	movi	r2,320
    bfac:	d8800015 	stw	r2,0(sp)
    bfb0:	01c052c4 	movi	r7,331
    bfb4:	01806f44 	movi	r6,445
    bfb8:	01404b04 	movi	r5,300
    bfbc:	01006784 	movi	r4,414
    bfc0:	00036040 	call	3604 <draw_driver>
//				cleanCell(10,6);
				drawExplosion(counter % 36,10,6);
    bfc4:	e0bff617 	ldw	r2,-40(fp)
    bfc8:	01400904 	movi	r5,36
    bfcc:	1009883a 	mov	r4,r2
    bfd0:	000c55c0 	call	c55c <__modsi3>
    bfd4:	10bfffcc 	andi	r2,r2,65535
    bfd8:	01800184 	movi	r6,6
    bfdc:	01400284 	movi	r5,10
    bfe0:	1009883a 	mov	r4,r2
    bfe4:	00043d00 	call	43d0 <drawExplosion>
				draw_driver(414,300,414+31,300+31,32*10,32*5,2);
    bfe8:	00800084 	movi	r2,2
    bfec:	d8800215 	stw	r2,8(sp)
    bff0:	00802804 	movi	r2,160
    bff4:	d8800115 	stw	r2,4(sp)
    bff8:	00805004 	movi	r2,320
    bffc:	d8800015 	stw	r2,0(sp)
    c000:	01c052c4 	movi	r7,331
    c004:	01806f44 	movi	r6,445
    c008:	01404b04 	movi	r5,300
    c00c:	01006784 	movi	r4,414
    c010:	00036040 	call	3604 <draw_driver>
//				cleanCell(10,5);
				drawExplosion(counter % 36,10,5);
    c014:	e0bff617 	ldw	r2,-40(fp)
    c018:	01400904 	movi	r5,36
    c01c:	1009883a 	mov	r4,r2
    c020:	000c55c0 	call	c55c <__modsi3>
    c024:	10bfffcc 	andi	r2,r2,65535
    c028:	01800144 	movi	r6,5
    c02c:	01400284 	movi	r5,10
    c030:	1009883a 	mov	r4,r2
    c034:	00043d00 	call	43d0 <drawExplosion>

				draw_driver(414,300,414+31,300+31,32*10,32*8,2);
    c038:	00800084 	movi	r2,2
    c03c:	d8800215 	stw	r2,8(sp)
    c040:	00804004 	movi	r2,256
    c044:	d8800115 	stw	r2,4(sp)
    c048:	00805004 	movi	r2,320
    c04c:	d8800015 	stw	r2,0(sp)
    c050:	01c052c4 	movi	r7,331
    c054:	01806f44 	movi	r6,445
    c058:	01404b04 	movi	r5,300
    c05c:	01006784 	movi	r4,414
    c060:	00036040 	call	3604 <draw_driver>
//				cleanCell(10,8);
				drawExplosion(counter % 36,10,8);
    c064:	e0bff617 	ldw	r2,-40(fp)
    c068:	01400904 	movi	r5,36
    c06c:	1009883a 	mov	r4,r2
    c070:	000c55c0 	call	c55c <__modsi3>
    c074:	10bfffcc 	andi	r2,r2,65535
    c078:	01800204 	movi	r6,8
    c07c:	01400284 	movi	r5,10
    c080:	1009883a 	mov	r4,r2
    c084:	00043d00 	call	43d0 <drawExplosion>
				draw_driver(414,300,414+31,300+31,32*10,32*9,2);
    c088:	00800084 	movi	r2,2
    c08c:	d8800215 	stw	r2,8(sp)
    c090:	00804804 	movi	r2,288
    c094:	d8800115 	stw	r2,4(sp)
    c098:	00805004 	movi	r2,320
    c09c:	d8800015 	stw	r2,0(sp)
    c0a0:	01c052c4 	movi	r7,331
    c0a4:	01806f44 	movi	r6,445
    c0a8:	01404b04 	movi	r5,300
    c0ac:	01006784 	movi	r4,414
    c0b0:	00036040 	call	3604 <draw_driver>
//				cleanCell(10,9);
				drawExplosion(counter % 36,10,9);
    c0b4:	e0bff617 	ldw	r2,-40(fp)
    c0b8:	01400904 	movi	r5,36
    c0bc:	1009883a 	mov	r4,r2
    c0c0:	000c55c0 	call	c55c <__modsi3>
    c0c4:	10bfffcc 	andi	r2,r2,65535
    c0c8:	01800244 	movi	r6,9
    c0cc:	01400284 	movi	r5,10
    c0d0:	1009883a 	mov	r4,r2
    c0d4:	00043d00 	call	43d0 <drawExplosion>

				draw_driver(414,300,414+31,300+31,32*8,32*7,2);
    c0d8:	00800084 	movi	r2,2
    c0dc:	d8800215 	stw	r2,8(sp)
    c0e0:	00803804 	movi	r2,224
    c0e4:	d8800115 	stw	r2,4(sp)
    c0e8:	00804004 	movi	r2,256
    c0ec:	d8800015 	stw	r2,0(sp)
    c0f0:	01c052c4 	movi	r7,331
    c0f4:	01806f44 	movi	r6,445
    c0f8:	01404b04 	movi	r5,300
    c0fc:	01006784 	movi	r4,414
    c100:	00036040 	call	3604 <draw_driver>
//				cleanCell(8,7);
				drawExplosion(counter % 36,8,7);
    c104:	e0bff617 	ldw	r2,-40(fp)
    c108:	01400904 	movi	r5,36
    c10c:	1009883a 	mov	r4,r2
    c110:	000c55c0 	call	c55c <__modsi3>
    c114:	10bfffcc 	andi	r2,r2,65535
    c118:	018001c4 	movi	r6,7
    c11c:	01400204 	movi	r5,8
    c120:	1009883a 	mov	r4,r2
    c124:	00043d00 	call	43d0 <drawExplosion>
				draw_driver(414,300,414+31,300+31,32*7,32*7,2);
    c128:	00800084 	movi	r2,2
    c12c:	d8800215 	stw	r2,8(sp)
    c130:	00803804 	movi	r2,224
    c134:	d8800115 	stw	r2,4(sp)
    c138:	00803804 	movi	r2,224
    c13c:	d8800015 	stw	r2,0(sp)
    c140:	01c052c4 	movi	r7,331
    c144:	01806f44 	movi	r6,445
    c148:	01404b04 	movi	r5,300
    c14c:	01006784 	movi	r4,414
    c150:	00036040 	call	3604 <draw_driver>
//				cleanCell(7,7);
				drawExplosion(counter % 36,7,7);
    c154:	e0bff617 	ldw	r2,-40(fp)
    c158:	01400904 	movi	r5,36
    c15c:	1009883a 	mov	r4,r2
    c160:	000c55c0 	call	c55c <__modsi3>
    c164:	10bfffcc 	andi	r2,r2,65535
    c168:	018001c4 	movi	r6,7
    c16c:	014001c4 	movi	r5,7
    c170:	1009883a 	mov	r4,r2
    c174:	00043d00 	call	43d0 <drawExplosion>

				draw_driver(414,300,414+31,300+31,32*11,32*7,2);
    c178:	00800084 	movi	r2,2
    c17c:	d8800215 	stw	r2,8(sp)
    c180:	00803804 	movi	r2,224
    c184:	d8800115 	stw	r2,4(sp)
    c188:	00805804 	movi	r2,352
    c18c:	d8800015 	stw	r2,0(sp)
    c190:	01c052c4 	movi	r7,331
    c194:	01806f44 	movi	r6,445
    c198:	01404b04 	movi	r5,300
    c19c:	01006784 	movi	r4,414
    c1a0:	00036040 	call	3604 <draw_driver>
//				cleanCell(11,7);
				drawExplosion(counter % 36,11,7);
    c1a4:	e0bff617 	ldw	r2,-40(fp)
    c1a8:	01400904 	movi	r5,36
    c1ac:	1009883a 	mov	r4,r2
    c1b0:	000c55c0 	call	c55c <__modsi3>
    c1b4:	10bfffcc 	andi	r2,r2,65535
    c1b8:	018001c4 	movi	r6,7
    c1bc:	014002c4 	movi	r5,11
    c1c0:	1009883a 	mov	r4,r2
    c1c4:	00043d00 	call	43d0 <drawExplosion>
		//		cleanCell(12,7);
		//		drawExplosion(counter % 36,12,7);
				draw_driver(player1_hurt_x0, player1_hurt_y0, player1_hurt_x1, player1_hurt_y1, 384,224, 1);
    c1c8:	00800044 	movi	r2,1
    c1cc:	d8800215 	stw	r2,8(sp)
    c1d0:	00803804 	movi	r2,224
    c1d4:	d8800115 	stw	r2,4(sp)
    c1d8:	00806004 	movi	r2,384
    c1dc:	d8800015 	stw	r2,0(sp)
    c1e0:	01c06704 	movi	r7,412
    c1e4:	018051c4 	movi	r6,327
    c1e8:	014060c4 	movi	r5,387
    c1ec:	01004b84 	movi	r4,302
    c1f0:	00036040 	call	3604 <draw_driver>
				draw_driver(player2_front0_x0, player2_front0_y0, player2_front0_x1, player2_front0_y1, 192,224, 1);
    c1f4:	00800044 	movi	r2,1
    c1f8:	d8800215 	stw	r2,8(sp)
    c1fc:	00803804 	movi	r2,224
    c200:	d8800115 	stw	r2,4(sp)
    c204:	00803004 	movi	r2,192
    c208:	d8800015 	stw	r2,0(sp)
    c20c:	01c00704 	movi	r7,28
    c210:	01805a44 	movi	r6,361
    c214:	014000c4 	movi	r5,3
    c218:	01005404 	movi	r4,336
    c21c:	00036040 	call	3604 <draw_driver>

				counter ++;
    c220:	e0bff617 	ldw	r2,-40(fp)
    c224:	10800044 	addi	r2,r2,1
    c228:	e0bff615 	stw	r2,-40(fp)
		}

		if (slow_down_counter % 7 == 0){
    c22c:	e0bff817 	ldw	r2,-32(fp)
    c230:	014001c4 	movi	r5,7
    c234:	1009883a 	mov	r4,r2
    c238:	000c55c0 	call	c55c <__modsi3>
    c23c:	1000781e 	bne	r2,zero,c420 <begin_anim+0x824>

			//Draw Bomb Loading
			if (counter > 0){
    c240:	e0bff617 	ldw	r2,-40(fp)
    c244:	0080100e 	bge	zero,r2,c288 <begin_anim+0x68c>
				draw_driver(414,300,414+31,300+31,32*7,32*12,2);
    c248:	00800084 	movi	r2,2
    c24c:	d8800215 	stw	r2,8(sp)
    c250:	00806004 	movi	r2,384
    c254:	d8800115 	stw	r2,4(sp)
    c258:	00803804 	movi	r2,224
    c25c:	d8800015 	stw	r2,0(sp)
    c260:	01c052c4 	movi	r7,331
    c264:	01806f44 	movi	r6,445
    c268:	01404b04 	movi	r5,300
    c26c:	01006784 	movi	r4,414
    c270:	00036040 	call	3604 <draw_driver>
//				cleanCell(7,12);
				drawCoin(7,12,&begin_coin[0]);
    c274:	e0bff904 	addi	r2,fp,-28
    c278:	100d883a 	mov	r6,r2
    c27c:	01400304 	movi	r5,12
    c280:	010001c4 	movi	r4,7
    c284:	0007e940 	call	7e94 <drawCoin>

			}

			if (counter > 12){
    c288:	e0bff617 	ldw	r2,-40(fp)
    c28c:	10800350 	cmplti	r2,r2,13
    c290:	1000111e 	bne	r2,zero,c2d8 <begin_anim+0x6dc>
				draw_driver(414,300,414+31,300+31,32*8,32*12,2);
    c294:	00800084 	movi	r2,2
    c298:	d8800215 	stw	r2,8(sp)
    c29c:	00806004 	movi	r2,384
    c2a0:	d8800115 	stw	r2,4(sp)
    c2a4:	00804004 	movi	r2,256
    c2a8:	d8800015 	stw	r2,0(sp)
    c2ac:	01c052c4 	movi	r7,331
    c2b0:	01806f44 	movi	r6,445
    c2b4:	01404b04 	movi	r5,300
    c2b8:	01006784 	movi	r4,414
    c2bc:	00036040 	call	3604 <draw_driver>
//				cleanCell(8,12);
				drawCoin(8,12,&begin_coin[1]);
    c2c0:	e0bff904 	addi	r2,fp,-28
    c2c4:	10800104 	addi	r2,r2,4
    c2c8:	100d883a 	mov	r6,r2
    c2cc:	01400304 	movi	r5,12
    c2d0:	01000204 	movi	r4,8
    c2d4:	0007e940 	call	7e94 <drawCoin>
			}

			if (counter > 24){
    c2d8:	e0bff617 	ldw	r2,-40(fp)
    c2dc:	10800650 	cmplti	r2,r2,25
    c2e0:	1000111e 	bne	r2,zero,c328 <begin_anim+0x72c>
				draw_driver(414,300,414+31,300+31,32*9,32*12,2);
    c2e4:	00800084 	movi	r2,2
    c2e8:	d8800215 	stw	r2,8(sp)
    c2ec:	00806004 	movi	r2,384
    c2f0:	d8800115 	stw	r2,4(sp)
    c2f4:	00804804 	movi	r2,288
    c2f8:	d8800015 	stw	r2,0(sp)
    c2fc:	01c052c4 	movi	r7,331
    c300:	01806f44 	movi	r6,445
    c304:	01404b04 	movi	r5,300
    c308:	01006784 	movi	r4,414
    c30c:	00036040 	call	3604 <draw_driver>
//				cleanCell(9,12);
				drawCoin(9,12,&begin_coin[2]);
    c310:	e0bff904 	addi	r2,fp,-28
    c314:	10800204 	addi	r2,r2,8
    c318:	100d883a 	mov	r6,r2
    c31c:	01400304 	movi	r5,12
    c320:	01000244 	movi	r4,9
    c324:	0007e940 	call	7e94 <drawCoin>
			}

			if (counter > 36){
    c328:	e0bff617 	ldw	r2,-40(fp)
    c32c:	10800950 	cmplti	r2,r2,37
    c330:	1000111e 	bne	r2,zero,c378 <begin_anim+0x77c>
				draw_driver(414,300,414+31,300+31,32*10,32*12,2);
    c334:	00800084 	movi	r2,2
    c338:	d8800215 	stw	r2,8(sp)
    c33c:	00806004 	movi	r2,384
    c340:	d8800115 	stw	r2,4(sp)
    c344:	00805004 	movi	r2,320
    c348:	d8800015 	stw	r2,0(sp)
    c34c:	01c052c4 	movi	r7,331
    c350:	01806f44 	movi	r6,445
    c354:	01404b04 	movi	r5,300
    c358:	01006784 	movi	r4,414
    c35c:	00036040 	call	3604 <draw_driver>
//				cleanCell(10,12);
				drawCoin(10,12,&begin_coin[3]);
    c360:	e0bff904 	addi	r2,fp,-28
    c364:	10800304 	addi	r2,r2,12
    c368:	100d883a 	mov	r6,r2
    c36c:	01400304 	movi	r5,12
    c370:	01000284 	movi	r4,10
    c374:	0007e940 	call	7e94 <drawCoin>
			}

			if (counter > 48){
    c378:	e0bff617 	ldw	r2,-40(fp)
    c37c:	10800c50 	cmplti	r2,r2,49
    c380:	1000111e 	bne	r2,zero,c3c8 <begin_anim+0x7cc>
				draw_driver(414,300,414+31,300+31,32*11,32*12,2);
    c384:	00800084 	movi	r2,2
    c388:	d8800215 	stw	r2,8(sp)
    c38c:	00806004 	movi	r2,384
    c390:	d8800115 	stw	r2,4(sp)
    c394:	00805804 	movi	r2,352
    c398:	d8800015 	stw	r2,0(sp)
    c39c:	01c052c4 	movi	r7,331
    c3a0:	01806f44 	movi	r6,445
    c3a4:	01404b04 	movi	r5,300
    c3a8:	01006784 	movi	r4,414
    c3ac:	00036040 	call	3604 <draw_driver>
//				cleanCell(11,12);
				drawCoin(11,12,&begin_coin[4]);
    c3b0:	e0bff904 	addi	r2,fp,-28
    c3b4:	10800404 	addi	r2,r2,16
    c3b8:	100d883a 	mov	r6,r2
    c3bc:	01400304 	movi	r5,12
    c3c0:	010002c4 	movi	r4,11
    c3c4:	0007e940 	call	7e94 <drawCoin>
			}

			if (counter > 60){
    c3c8:	e0bff617 	ldw	r2,-40(fp)
    c3cc:	10800f50 	cmplti	r2,r2,61
    c3d0:	1000111e 	bne	r2,zero,c418 <begin_anim+0x81c>
				draw_driver(414,300,414+31,300+31,32*12,32*12,2);
    c3d4:	00800084 	movi	r2,2
    c3d8:	d8800215 	stw	r2,8(sp)
    c3dc:	00806004 	movi	r2,384
    c3e0:	d8800115 	stw	r2,4(sp)
    c3e4:	00806004 	movi	r2,384
    c3e8:	d8800015 	stw	r2,0(sp)
    c3ec:	01c052c4 	movi	r7,331
    c3f0:	01806f44 	movi	r6,445
    c3f4:	01404b04 	movi	r5,300
    c3f8:	01006784 	movi	r4,414
    c3fc:	00036040 	call	3604 <draw_driver>
//				cleanCell(12,12);
				drawCoin(12,12,&begin_coin[5]);
    c400:	e0bff904 	addi	r2,fp,-28
    c404:	10800504 	addi	r2,r2,20
    c408:	100d883a 	mov	r6,r2
    c40c:	01400304 	movi	r5,12
    c410:	01000304 	movi	r4,12
    c414:	0007e940 	call	7e94 <drawCoin>
			}

			delay(5);
    c418:	01000144 	movi	r4,5
    c41c:	00038500 	call	3850 <delay>
	for (int i = 0; i < 6; i++){
		(begin_coin[6]).counter = 0;
	}


	for (int slow_down_counter = 0; slow_down_counter < 72*100; slow_down_counter++){
    c420:	e0bff817 	ldw	r2,-32(fp)
    c424:	10800044 	addi	r2,r2,1
    c428:	e0bff815 	stw	r2,-32(fp)
    c42c:	e0bff817 	ldw	r2,-32(fp)
    c430:	10870810 	cmplti	r2,r2,7200
    c434:	103e831e 	bne	r2,zero,be44 <__alt_data_end+0xf800be44>
			}

			delay(5);
		}
	}
	Audio_Select('1');
    c438:	01000c44 	movi	r4,49
    c43c:	0002d880 	call	2d88 <Audio_Select>
	changeBackVolume(3);
    c440:	010000c4 	movi	r4,3
    c444:	0002c640 	call	2c64 <changeBackVolume>
}
    c448:	0001883a 	nop
    c44c:	e6ffff04 	addi	sp,fp,-4
    c450:	dfc00217 	ldw	ra,8(sp)
    c454:	df000117 	ldw	fp,4(sp)
    c458:	dc000017 	ldw	r16,0(sp)
    c45c:	dec00304 	addi	sp,sp,12
    c460:	f800283a 	ret

0000c464 <__fixunsdfsi>:
    c464:	defffd04 	addi	sp,sp,-12
    c468:	000d883a 	mov	r6,zero
    c46c:	01d07834 	movhi	r7,16864
    c470:	dc400115 	stw	r17,4(sp)
    c474:	dc000015 	stw	r16,0(sp)
    c478:	dfc00215 	stw	ra,8(sp)
    c47c:	2023883a 	mov	r17,r4
    c480:	2821883a 	mov	r16,r5
    c484:	000d0840 	call	d084 <__gedf2>
    c488:	1000080e 	bge	r2,zero,c4ac <__fixunsdfsi+0x48>
    c48c:	8809883a 	mov	r4,r17
    c490:	800b883a 	mov	r5,r16
    c494:	000da5c0 	call	da5c <__fixdfsi>
    c498:	dfc00217 	ldw	ra,8(sp)
    c49c:	dc400117 	ldw	r17,4(sp)
    c4a0:	dc000017 	ldw	r16,0(sp)
    c4a4:	dec00304 	addi	sp,sp,12
    c4a8:	f800283a 	ret
    c4ac:	000d883a 	mov	r6,zero
    c4b0:	01d07834 	movhi	r7,16864
    c4b4:	8809883a 	mov	r4,r17
    c4b8:	800b883a 	mov	r5,r16
    c4bc:	000d1600 	call	d160 <__subdf3>
    c4c0:	180b883a 	mov	r5,r3
    c4c4:	1009883a 	mov	r4,r2
    c4c8:	000da5c0 	call	da5c <__fixdfsi>
    c4cc:	00e00034 	movhi	r3,32768
    c4d0:	10c5883a 	add	r2,r2,r3
    c4d4:	003ff006 	br	c498 <__alt_data_end+0xf800c498>

0000c4d8 <__divsi3>:
    c4d8:	20001b16 	blt	r4,zero,c548 <__divsi3+0x70>
    c4dc:	000f883a 	mov	r7,zero
    c4e0:	28001616 	blt	r5,zero,c53c <__divsi3+0x64>
    c4e4:	200d883a 	mov	r6,r4
    c4e8:	29001a2e 	bgeu	r5,r4,c554 <__divsi3+0x7c>
    c4ec:	00800804 	movi	r2,32
    c4f0:	00c00044 	movi	r3,1
    c4f4:	00000106 	br	c4fc <__divsi3+0x24>
    c4f8:	10000d26 	beq	r2,zero,c530 <__divsi3+0x58>
    c4fc:	294b883a 	add	r5,r5,r5
    c500:	10bfffc4 	addi	r2,r2,-1
    c504:	18c7883a 	add	r3,r3,r3
    c508:	293ffb36 	bltu	r5,r4,c4f8 <__alt_data_end+0xf800c4f8>
    c50c:	0005883a 	mov	r2,zero
    c510:	18000726 	beq	r3,zero,c530 <__divsi3+0x58>
    c514:	0005883a 	mov	r2,zero
    c518:	31400236 	bltu	r6,r5,c524 <__divsi3+0x4c>
    c51c:	314dc83a 	sub	r6,r6,r5
    c520:	10c4b03a 	or	r2,r2,r3
    c524:	1806d07a 	srli	r3,r3,1
    c528:	280ad07a 	srli	r5,r5,1
    c52c:	183ffa1e 	bne	r3,zero,c518 <__alt_data_end+0xf800c518>
    c530:	38000126 	beq	r7,zero,c538 <__divsi3+0x60>
    c534:	0085c83a 	sub	r2,zero,r2
    c538:	f800283a 	ret
    c53c:	014bc83a 	sub	r5,zero,r5
    c540:	39c0005c 	xori	r7,r7,1
    c544:	003fe706 	br	c4e4 <__alt_data_end+0xf800c4e4>
    c548:	0109c83a 	sub	r4,zero,r4
    c54c:	01c00044 	movi	r7,1
    c550:	003fe306 	br	c4e0 <__alt_data_end+0xf800c4e0>
    c554:	00c00044 	movi	r3,1
    c558:	003fee06 	br	c514 <__alt_data_end+0xf800c514>

0000c55c <__modsi3>:
    c55c:	20001716 	blt	r4,zero,c5bc <__modsi3+0x60>
    c560:	000f883a 	mov	r7,zero
    c564:	2005883a 	mov	r2,r4
    c568:	28001216 	blt	r5,zero,c5b4 <__modsi3+0x58>
    c56c:	2900162e 	bgeu	r5,r4,c5c8 <__modsi3+0x6c>
    c570:	01800804 	movi	r6,32
    c574:	00c00044 	movi	r3,1
    c578:	00000106 	br	c580 <__modsi3+0x24>
    c57c:	30000a26 	beq	r6,zero,c5a8 <__modsi3+0x4c>
    c580:	294b883a 	add	r5,r5,r5
    c584:	31bfffc4 	addi	r6,r6,-1
    c588:	18c7883a 	add	r3,r3,r3
    c58c:	293ffb36 	bltu	r5,r4,c57c <__alt_data_end+0xf800c57c>
    c590:	18000526 	beq	r3,zero,c5a8 <__modsi3+0x4c>
    c594:	1806d07a 	srli	r3,r3,1
    c598:	11400136 	bltu	r2,r5,c5a0 <__modsi3+0x44>
    c59c:	1145c83a 	sub	r2,r2,r5
    c5a0:	280ad07a 	srli	r5,r5,1
    c5a4:	183ffb1e 	bne	r3,zero,c594 <__alt_data_end+0xf800c594>
    c5a8:	38000126 	beq	r7,zero,c5b0 <__modsi3+0x54>
    c5ac:	0085c83a 	sub	r2,zero,r2
    c5b0:	f800283a 	ret
    c5b4:	014bc83a 	sub	r5,zero,r5
    c5b8:	003fec06 	br	c56c <__alt_data_end+0xf800c56c>
    c5bc:	0109c83a 	sub	r4,zero,r4
    c5c0:	01c00044 	movi	r7,1
    c5c4:	003fe706 	br	c564 <__alt_data_end+0xf800c564>
    c5c8:	00c00044 	movi	r3,1
    c5cc:	003ff106 	br	c594 <__alt_data_end+0xf800c594>

0000c5d0 <__udivsi3>:
    c5d0:	200d883a 	mov	r6,r4
    c5d4:	2900152e 	bgeu	r5,r4,c62c <__udivsi3+0x5c>
    c5d8:	28001416 	blt	r5,zero,c62c <__udivsi3+0x5c>
    c5dc:	00800804 	movi	r2,32
    c5e0:	00c00044 	movi	r3,1
    c5e4:	00000206 	br	c5f0 <__udivsi3+0x20>
    c5e8:	10000e26 	beq	r2,zero,c624 <__udivsi3+0x54>
    c5ec:	28000516 	blt	r5,zero,c604 <__udivsi3+0x34>
    c5f0:	294b883a 	add	r5,r5,r5
    c5f4:	10bfffc4 	addi	r2,r2,-1
    c5f8:	18c7883a 	add	r3,r3,r3
    c5fc:	293ffa36 	bltu	r5,r4,c5e8 <__alt_data_end+0xf800c5e8>
    c600:	18000826 	beq	r3,zero,c624 <__udivsi3+0x54>
    c604:	0005883a 	mov	r2,zero
    c608:	31400236 	bltu	r6,r5,c614 <__udivsi3+0x44>
    c60c:	314dc83a 	sub	r6,r6,r5
    c610:	10c4b03a 	or	r2,r2,r3
    c614:	1806d07a 	srli	r3,r3,1
    c618:	280ad07a 	srli	r5,r5,1
    c61c:	183ffa1e 	bne	r3,zero,c608 <__alt_data_end+0xf800c608>
    c620:	f800283a 	ret
    c624:	0005883a 	mov	r2,zero
    c628:	f800283a 	ret
    c62c:	00c00044 	movi	r3,1
    c630:	003ff406 	br	c604 <__alt_data_end+0xf800c604>

0000c634 <__umodsi3>:
    c634:	2005883a 	mov	r2,r4
    c638:	2900122e 	bgeu	r5,r4,c684 <__umodsi3+0x50>
    c63c:	28001116 	blt	r5,zero,c684 <__umodsi3+0x50>
    c640:	01800804 	movi	r6,32
    c644:	00c00044 	movi	r3,1
    c648:	00000206 	br	c654 <__umodsi3+0x20>
    c64c:	30000c26 	beq	r6,zero,c680 <__umodsi3+0x4c>
    c650:	28000516 	blt	r5,zero,c668 <__umodsi3+0x34>
    c654:	294b883a 	add	r5,r5,r5
    c658:	31bfffc4 	addi	r6,r6,-1
    c65c:	18c7883a 	add	r3,r3,r3
    c660:	293ffa36 	bltu	r5,r4,c64c <__alt_data_end+0xf800c64c>
    c664:	18000626 	beq	r3,zero,c680 <__umodsi3+0x4c>
    c668:	1806d07a 	srli	r3,r3,1
    c66c:	11400136 	bltu	r2,r5,c674 <__umodsi3+0x40>
    c670:	1145c83a 	sub	r2,r2,r5
    c674:	280ad07a 	srli	r5,r5,1
    c678:	183ffb1e 	bne	r3,zero,c668 <__alt_data_end+0xf800c668>
    c67c:	f800283a 	ret
    c680:	f800283a 	ret
    c684:	00c00044 	movi	r3,1
    c688:	003ff706 	br	c668 <__alt_data_end+0xf800c668>

0000c68c <__mulsi3>:
    c68c:	0005883a 	mov	r2,zero
    c690:	20000726 	beq	r4,zero,c6b0 <__mulsi3+0x24>
    c694:	20c0004c 	andi	r3,r4,1
    c698:	2008d07a 	srli	r4,r4,1
    c69c:	18000126 	beq	r3,zero,c6a4 <__mulsi3+0x18>
    c6a0:	1145883a 	add	r2,r2,r5
    c6a4:	294b883a 	add	r5,r5,r5
    c6a8:	203ffa1e 	bne	r4,zero,c694 <__alt_data_end+0xf800c694>
    c6ac:	f800283a 	ret
    c6b0:	f800283a 	ret

0000c6b4 <__divdf3>:
    c6b4:	defff004 	addi	sp,sp,-64
    c6b8:	dc800815 	stw	r18,32(sp)
    c6bc:	2824d53a 	srli	r18,r5,20
    c6c0:	dd800c15 	stw	r22,48(sp)
    c6c4:	282cd7fa 	srli	r22,r5,31
    c6c8:	dc000615 	stw	r16,24(sp)
    c6cc:	04000434 	movhi	r16,16
    c6d0:	843fffc4 	addi	r16,r16,-1
    c6d4:	dfc00f15 	stw	ra,60(sp)
    c6d8:	df000e15 	stw	fp,56(sp)
    c6dc:	ddc00d15 	stw	r23,52(sp)
    c6e0:	dd400b15 	stw	r21,44(sp)
    c6e4:	dd000a15 	stw	r20,40(sp)
    c6e8:	dcc00915 	stw	r19,36(sp)
    c6ec:	dc400715 	stw	r17,28(sp)
    c6f0:	9481ffcc 	andi	r18,r18,2047
    c6f4:	2c20703a 	and	r16,r5,r16
    c6f8:	b2003fcc 	andi	r8,r22,255
    c6fc:	90006126 	beq	r18,zero,c884 <__divdf3+0x1d0>
    c700:	0081ffc4 	movi	r2,2047
    c704:	202b883a 	mov	r21,r4
    c708:	90803726 	beq	r18,r2,c7e8 <__divdf3+0x134>
    c70c:	80800434 	orhi	r2,r16,16
    c710:	100490fa 	slli	r2,r2,3
    c714:	2020d77a 	srli	r16,r4,29
    c718:	202a90fa 	slli	r21,r4,3
    c71c:	94bf0044 	addi	r18,r18,-1023
    c720:	80a0b03a 	or	r16,r16,r2
    c724:	0013883a 	mov	r9,zero
    c728:	000b883a 	mov	r5,zero
    c72c:	3806d53a 	srli	r3,r7,20
    c730:	382ed7fa 	srli	r23,r7,31
    c734:	04400434 	movhi	r17,16
    c738:	8c7fffc4 	addi	r17,r17,-1
    c73c:	18c1ffcc 	andi	r3,r3,2047
    c740:	3029883a 	mov	r20,r6
    c744:	3c62703a 	and	r17,r7,r17
    c748:	bf003fcc 	andi	fp,r23,255
    c74c:	18006e26 	beq	r3,zero,c908 <__divdf3+0x254>
    c750:	0081ffc4 	movi	r2,2047
    c754:	18806626 	beq	r3,r2,c8f0 <__divdf3+0x23c>
    c758:	88800434 	orhi	r2,r17,16
    c75c:	100490fa 	slli	r2,r2,3
    c760:	3022d77a 	srli	r17,r6,29
    c764:	302890fa 	slli	r20,r6,3
    c768:	18ff0044 	addi	r3,r3,-1023
    c76c:	88a2b03a 	or	r17,r17,r2
    c770:	000f883a 	mov	r7,zero
    c774:	b5e6f03a 	xor	r19,r22,r23
    c778:	3a4cb03a 	or	r6,r7,r9
    c77c:	008003c4 	movi	r2,15
    c780:	9809883a 	mov	r4,r19
    c784:	90c7c83a 	sub	r3,r18,r3
    c788:	9cc03fcc 	andi	r19,r19,255
    c78c:	11809636 	bltu	r2,r6,c9e8 <__divdf3+0x334>
    c790:	300c90ba 	slli	r6,r6,2
    c794:	00800074 	movhi	r2,1
    c798:	10b1ea04 	addi	r2,r2,-14424
    c79c:	308d883a 	add	r6,r6,r2
    c7a0:	30800017 	ldw	r2,0(r6)
    c7a4:	1000683a 	jmp	r2
    c7a8:	0000c9e8 	cmpgeui	zero,zero,807
    c7ac:	0000c820 	cmpeqi	zero,zero,800
    c7b0:	0000c9d8 	cmpnei	zero,zero,807
    c7b4:	0000c814 	movui	zero,800
    c7b8:	0000c9d8 	cmpnei	zero,zero,807
    c7bc:	0000c9ac 	andhi	zero,zero,806
    c7c0:	0000c9d8 	cmpnei	zero,zero,807
    c7c4:	0000c814 	movui	zero,800
    c7c8:	0000c820 	cmpeqi	zero,zero,800
    c7cc:	0000c820 	cmpeqi	zero,zero,800
    c7d0:	0000c9ac 	andhi	zero,zero,806
    c7d4:	0000c814 	movui	zero,800
    c7d8:	0000c804 	movi	zero,800
    c7dc:	0000c804 	movi	zero,800
    c7e0:	0000c804 	movi	zero,800
    c7e4:	0000cd70 	cmpltui	zero,zero,821
    c7e8:	2404b03a 	or	r2,r4,r16
    c7ec:	10006c1e 	bne	r2,zero,c9a0 <__divdf3+0x2ec>
    c7f0:	02400204 	movi	r9,8
    c7f4:	0021883a 	mov	r16,zero
    c7f8:	002b883a 	mov	r21,zero
    c7fc:	01400084 	movi	r5,2
    c800:	003fca06 	br	c72c <__alt_data_end+0xf800c72c>
    c804:	8023883a 	mov	r17,r16
    c808:	a829883a 	mov	r20,r21
    c80c:	4039883a 	mov	fp,r8
    c810:	280f883a 	mov	r7,r5
    c814:	00800084 	movi	r2,2
    c818:	3881601e 	bne	r7,r2,cd9c <__divdf3+0x6e8>
    c81c:	e027883a 	mov	r19,fp
    c820:	9900004c 	andi	r4,r19,1
    c824:	0081ffc4 	movi	r2,2047
    c828:	0021883a 	mov	r16,zero
    c82c:	002b883a 	mov	r21,zero
    c830:	1004953a 	slli	r2,r2,20
    c834:	20c03fcc 	andi	r3,r4,255
    c838:	01400434 	movhi	r5,16
    c83c:	297fffc4 	addi	r5,r5,-1
    c840:	180697fa 	slli	r3,r3,31
    c844:	8160703a 	and	r16,r16,r5
    c848:	80a0b03a 	or	r16,r16,r2
    c84c:	80c6b03a 	or	r3,r16,r3
    c850:	a805883a 	mov	r2,r21
    c854:	dfc00f17 	ldw	ra,60(sp)
    c858:	df000e17 	ldw	fp,56(sp)
    c85c:	ddc00d17 	ldw	r23,52(sp)
    c860:	dd800c17 	ldw	r22,48(sp)
    c864:	dd400b17 	ldw	r21,44(sp)
    c868:	dd000a17 	ldw	r20,40(sp)
    c86c:	dcc00917 	ldw	r19,36(sp)
    c870:	dc800817 	ldw	r18,32(sp)
    c874:	dc400717 	ldw	r17,28(sp)
    c878:	dc000617 	ldw	r16,24(sp)
    c87c:	dec01004 	addi	sp,sp,64
    c880:	f800283a 	ret
    c884:	2404b03a 	or	r2,r4,r16
    c888:	2023883a 	mov	r17,r4
    c88c:	10003f26 	beq	r2,zero,c98c <__divdf3+0x2d8>
    c890:	80015e26 	beq	r16,zero,ce0c <__divdf3+0x758>
    c894:	8009883a 	mov	r4,r16
    c898:	d9800215 	stw	r6,8(sp)
    c89c:	d9c00515 	stw	r7,20(sp)
    c8a0:	da000415 	stw	r8,16(sp)
    c8a4:	000db840 	call	db84 <__clzsi2>
    c8a8:	d9800217 	ldw	r6,8(sp)
    c8ac:	d9c00517 	ldw	r7,20(sp)
    c8b0:	da000417 	ldw	r8,16(sp)
    c8b4:	113ffd44 	addi	r4,r2,-11
    c8b8:	00c00704 	movi	r3,28
    c8bc:	19014f16 	blt	r3,r4,cdfc <__divdf3+0x748>
    c8c0:	00c00744 	movi	r3,29
    c8c4:	157ffe04 	addi	r21,r2,-8
    c8c8:	1907c83a 	sub	r3,r3,r4
    c8cc:	8560983a 	sll	r16,r16,r21
    c8d0:	88c6d83a 	srl	r3,r17,r3
    c8d4:	8d6a983a 	sll	r21,r17,r21
    c8d8:	1c20b03a 	or	r16,r3,r16
    c8dc:	1080fcc4 	addi	r2,r2,1011
    c8e0:	00a5c83a 	sub	r18,zero,r2
    c8e4:	0013883a 	mov	r9,zero
    c8e8:	000b883a 	mov	r5,zero
    c8ec:	003f8f06 	br	c72c <__alt_data_end+0xf800c72c>
    c8f0:	3444b03a 	or	r2,r6,r17
    c8f4:	1000231e 	bne	r2,zero,c984 <__divdf3+0x2d0>
    c8f8:	0023883a 	mov	r17,zero
    c8fc:	0029883a 	mov	r20,zero
    c900:	01c00084 	movi	r7,2
    c904:	003f9b06 	br	c774 <__alt_data_end+0xf800c774>
    c908:	3444b03a 	or	r2,r6,r17
    c90c:	10001926 	beq	r2,zero,c974 <__divdf3+0x2c0>
    c910:	88014b26 	beq	r17,zero,ce40 <__divdf3+0x78c>
    c914:	8809883a 	mov	r4,r17
    c918:	d9400115 	stw	r5,4(sp)
    c91c:	d9800215 	stw	r6,8(sp)
    c920:	da000415 	stw	r8,16(sp)
    c924:	da400315 	stw	r9,12(sp)
    c928:	000db840 	call	db84 <__clzsi2>
    c92c:	d9400117 	ldw	r5,4(sp)
    c930:	d9800217 	ldw	r6,8(sp)
    c934:	da000417 	ldw	r8,16(sp)
    c938:	da400317 	ldw	r9,12(sp)
    c93c:	113ffd44 	addi	r4,r2,-11
    c940:	00c00704 	movi	r3,28
    c944:	19013a16 	blt	r3,r4,ce30 <__divdf3+0x77c>
    c948:	00c00744 	movi	r3,29
    c94c:	153ffe04 	addi	r20,r2,-8
    c950:	1907c83a 	sub	r3,r3,r4
    c954:	8d22983a 	sll	r17,r17,r20
    c958:	30c6d83a 	srl	r3,r6,r3
    c95c:	3528983a 	sll	r20,r6,r20
    c960:	1c62b03a 	or	r17,r3,r17
    c964:	1080fcc4 	addi	r2,r2,1011
    c968:	0087c83a 	sub	r3,zero,r2
    c96c:	000f883a 	mov	r7,zero
    c970:	003f8006 	br	c774 <__alt_data_end+0xf800c774>
    c974:	0023883a 	mov	r17,zero
    c978:	0029883a 	mov	r20,zero
    c97c:	01c00044 	movi	r7,1
    c980:	003f7c06 	br	c774 <__alt_data_end+0xf800c774>
    c984:	01c000c4 	movi	r7,3
    c988:	003f7a06 	br	c774 <__alt_data_end+0xf800c774>
    c98c:	02400104 	movi	r9,4
    c990:	0021883a 	mov	r16,zero
    c994:	002b883a 	mov	r21,zero
    c998:	01400044 	movi	r5,1
    c99c:	003f6306 	br	c72c <__alt_data_end+0xf800c72c>
    c9a0:	02400304 	movi	r9,12
    c9a4:	014000c4 	movi	r5,3
    c9a8:	003f6006 	br	c72c <__alt_data_end+0xf800c72c>
    c9ac:	04000434 	movhi	r16,16
    c9b0:	0009883a 	mov	r4,zero
    c9b4:	843fffc4 	addi	r16,r16,-1
    c9b8:	057fffc4 	movi	r21,-1
    c9bc:	0081ffc4 	movi	r2,2047
    c9c0:	003f9b06 	br	c830 <__alt_data_end+0xf800c830>
    c9c4:	00c00044 	movi	r3,1
    c9c8:	1887c83a 	sub	r3,r3,r2
    c9cc:	01000e04 	movi	r4,56
    c9d0:	20c1530e 	bge	r4,r3,cf20 <__divdf3+0x86c>
    c9d4:	9900004c 	andi	r4,r19,1
    c9d8:	0005883a 	mov	r2,zero
    c9dc:	0021883a 	mov	r16,zero
    c9e0:	002b883a 	mov	r21,zero
    c9e4:	003f9206 	br	c830 <__alt_data_end+0xf800c830>
    c9e8:	8c012e36 	bltu	r17,r16,cea4 <__divdf3+0x7f0>
    c9ec:	84412c26 	beq	r16,r17,cea0 <__divdf3+0x7ec>
    c9f0:	a82f883a 	mov	r23,r21
    c9f4:	18ffffc4 	addi	r3,r3,-1
    c9f8:	002b883a 	mov	r21,zero
    c9fc:	a004d63a 	srli	r2,r20,24
    ca00:	8822923a 	slli	r17,r17,8
    ca04:	a028923a 	slli	r20,r20,8
    ca08:	8009883a 	mov	r4,r16
    ca0c:	88acb03a 	or	r22,r17,r2
    ca10:	dd000015 	stw	r20,0(sp)
    ca14:	b028d43a 	srli	r20,r22,16
    ca18:	d8c00215 	stw	r3,8(sp)
    ca1c:	b4bfffcc 	andi	r18,r22,65535
    ca20:	a00b883a 	mov	r5,r20
    ca24:	000c5d00 	call	c5d0 <__udivsi3>
    ca28:	100b883a 	mov	r5,r2
    ca2c:	9009883a 	mov	r4,r18
    ca30:	1023883a 	mov	r17,r2
    ca34:	000c68c0 	call	c68c <__mulsi3>
    ca38:	8009883a 	mov	r4,r16
    ca3c:	a00b883a 	mov	r5,r20
    ca40:	1039883a 	mov	fp,r2
    ca44:	000c6340 	call	c634 <__umodsi3>
    ca48:	1004943a 	slli	r2,r2,16
    ca4c:	b808d43a 	srli	r4,r23,16
    ca50:	d8c00217 	ldw	r3,8(sp)
    ca54:	2084b03a 	or	r2,r4,r2
    ca58:	1700062e 	bgeu	r2,fp,ca74 <__divdf3+0x3c0>
    ca5c:	1585883a 	add	r2,r2,r22
    ca60:	893fffc4 	addi	r4,r17,-1
    ca64:	15811d36 	bltu	r2,r22,cedc <__divdf3+0x828>
    ca68:	17011c2e 	bgeu	r2,fp,cedc <__divdf3+0x828>
    ca6c:	8c7fff84 	addi	r17,r17,-2
    ca70:	1585883a 	add	r2,r2,r22
    ca74:	1739c83a 	sub	fp,r2,fp
    ca78:	a00b883a 	mov	r5,r20
    ca7c:	e009883a 	mov	r4,fp
    ca80:	d8c00215 	stw	r3,8(sp)
    ca84:	000c5d00 	call	c5d0 <__udivsi3>
    ca88:	100b883a 	mov	r5,r2
    ca8c:	9009883a 	mov	r4,r18
    ca90:	1021883a 	mov	r16,r2
    ca94:	000c68c0 	call	c68c <__mulsi3>
    ca98:	a00b883a 	mov	r5,r20
    ca9c:	e009883a 	mov	r4,fp
    caa0:	d8800415 	stw	r2,16(sp)
    caa4:	000c6340 	call	c634 <__umodsi3>
    caa8:	1004943a 	slli	r2,r2,16
    caac:	da000417 	ldw	r8,16(sp)
    cab0:	bdffffcc 	andi	r23,r23,65535
    cab4:	b884b03a 	or	r2,r23,r2
    cab8:	d8c00217 	ldw	r3,8(sp)
    cabc:	1200062e 	bgeu	r2,r8,cad8 <__divdf3+0x424>
    cac0:	1585883a 	add	r2,r2,r22
    cac4:	813fffc4 	addi	r4,r16,-1
    cac8:	15810236 	bltu	r2,r22,ced4 <__divdf3+0x820>
    cacc:	1201012e 	bgeu	r2,r8,ced4 <__divdf3+0x820>
    cad0:	843fff84 	addi	r16,r16,-2
    cad4:	1585883a 	add	r2,r2,r22
    cad8:	8822943a 	slli	r17,r17,16
    cadc:	d9800017 	ldw	r6,0(sp)
    cae0:	1211c83a 	sub	r8,r2,r8
    cae4:	8c22b03a 	or	r17,r17,r16
    cae8:	373fffcc 	andi	fp,r6,65535
    caec:	8abfffcc 	andi	r10,r17,65535
    caf0:	8820d43a 	srli	r16,r17,16
    caf4:	5009883a 	mov	r4,r10
    caf8:	e00b883a 	mov	r5,fp
    cafc:	302ed43a 	srli	r23,r6,16
    cb00:	d8c00215 	stw	r3,8(sp)
    cb04:	da000415 	stw	r8,16(sp)
    cb08:	da800115 	stw	r10,4(sp)
    cb0c:	000c68c0 	call	c68c <__mulsi3>
    cb10:	800b883a 	mov	r5,r16
    cb14:	e009883a 	mov	r4,fp
    cb18:	d8800515 	stw	r2,20(sp)
    cb1c:	000c68c0 	call	c68c <__mulsi3>
    cb20:	8009883a 	mov	r4,r16
    cb24:	b80b883a 	mov	r5,r23
    cb28:	d8800315 	stw	r2,12(sp)
    cb2c:	000c68c0 	call	c68c <__mulsi3>
    cb30:	da800117 	ldw	r10,4(sp)
    cb34:	b80b883a 	mov	r5,r23
    cb38:	1021883a 	mov	r16,r2
    cb3c:	5009883a 	mov	r4,r10
    cb40:	000c68c0 	call	c68c <__mulsi3>
    cb44:	d9c00517 	ldw	r7,20(sp)
    cb48:	da400317 	ldw	r9,12(sp)
    cb4c:	d8c00217 	ldw	r3,8(sp)
    cb50:	3808d43a 	srli	r4,r7,16
    cb54:	1245883a 	add	r2,r2,r9
    cb58:	da000417 	ldw	r8,16(sp)
    cb5c:	2085883a 	add	r2,r4,r2
    cb60:	1240022e 	bgeu	r2,r9,cb6c <__divdf3+0x4b8>
    cb64:	01000074 	movhi	r4,1
    cb68:	8121883a 	add	r16,r16,r4
    cb6c:	1008d43a 	srli	r4,r2,16
    cb70:	1004943a 	slli	r2,r2,16
    cb74:	39ffffcc 	andi	r7,r7,65535
    cb78:	2409883a 	add	r4,r4,r16
    cb7c:	11c5883a 	add	r2,r2,r7
    cb80:	4100bb36 	bltu	r8,r4,ce70 <__divdf3+0x7bc>
    cb84:	4100d726 	beq	r8,r4,cee4 <__divdf3+0x830>
    cb88:	4109c83a 	sub	r4,r8,r4
    cb8c:	a8a1c83a 	sub	r16,r21,r2
    cb90:	ac2b803a 	cmpltu	r21,r21,r16
    cb94:	256bc83a 	sub	r21,r4,r21
    cb98:	b540d926 	beq	r22,r21,cf00 <__divdf3+0x84c>
    cb9c:	a00b883a 	mov	r5,r20
    cba0:	a809883a 	mov	r4,r21
    cba4:	d8c00215 	stw	r3,8(sp)
    cba8:	000c5d00 	call	c5d0 <__udivsi3>
    cbac:	100b883a 	mov	r5,r2
    cbb0:	9009883a 	mov	r4,r18
    cbb4:	d8800515 	stw	r2,20(sp)
    cbb8:	000c68c0 	call	c68c <__mulsi3>
    cbbc:	a809883a 	mov	r4,r21
    cbc0:	a00b883a 	mov	r5,r20
    cbc4:	d8800415 	stw	r2,16(sp)
    cbc8:	000c6340 	call	c634 <__umodsi3>
    cbcc:	1004943a 	slli	r2,r2,16
    cbd0:	8008d43a 	srli	r4,r16,16
    cbd4:	da000417 	ldw	r8,16(sp)
    cbd8:	d8c00217 	ldw	r3,8(sp)
    cbdc:	2084b03a 	or	r2,r4,r2
    cbe0:	d9c00517 	ldw	r7,20(sp)
    cbe4:	1200062e 	bgeu	r2,r8,cc00 <__divdf3+0x54c>
    cbe8:	1585883a 	add	r2,r2,r22
    cbec:	393fffc4 	addi	r4,r7,-1
    cbf0:	1580c536 	bltu	r2,r22,cf08 <__divdf3+0x854>
    cbf4:	1200c42e 	bgeu	r2,r8,cf08 <__divdf3+0x854>
    cbf8:	39ffff84 	addi	r7,r7,-2
    cbfc:	1585883a 	add	r2,r2,r22
    cc00:	122bc83a 	sub	r21,r2,r8
    cc04:	a00b883a 	mov	r5,r20
    cc08:	a809883a 	mov	r4,r21
    cc0c:	d8c00215 	stw	r3,8(sp)
    cc10:	d9c00515 	stw	r7,20(sp)
    cc14:	000c5d00 	call	c5d0 <__udivsi3>
    cc18:	9009883a 	mov	r4,r18
    cc1c:	100b883a 	mov	r5,r2
    cc20:	d8800415 	stw	r2,16(sp)
    cc24:	000c68c0 	call	c68c <__mulsi3>
    cc28:	a809883a 	mov	r4,r21
    cc2c:	a00b883a 	mov	r5,r20
    cc30:	1025883a 	mov	r18,r2
    cc34:	000c6340 	call	c634 <__umodsi3>
    cc38:	1004943a 	slli	r2,r2,16
    cc3c:	813fffcc 	andi	r4,r16,65535
    cc40:	d8c00217 	ldw	r3,8(sp)
    cc44:	20a0b03a 	or	r16,r4,r2
    cc48:	d9c00517 	ldw	r7,20(sp)
    cc4c:	da000417 	ldw	r8,16(sp)
    cc50:	8480062e 	bgeu	r16,r18,cc6c <__divdf3+0x5b8>
    cc54:	85a1883a 	add	r16,r16,r22
    cc58:	40bfffc4 	addi	r2,r8,-1
    cc5c:	8580ac36 	bltu	r16,r22,cf10 <__divdf3+0x85c>
    cc60:	8480ab2e 	bgeu	r16,r18,cf10 <__divdf3+0x85c>
    cc64:	423fff84 	addi	r8,r8,-2
    cc68:	85a1883a 	add	r16,r16,r22
    cc6c:	3804943a 	slli	r2,r7,16
    cc70:	84a1c83a 	sub	r16,r16,r18
    cc74:	e009883a 	mov	r4,fp
    cc78:	1228b03a 	or	r20,r2,r8
    cc7c:	a1ffffcc 	andi	r7,r20,65535
    cc80:	a024d43a 	srli	r18,r20,16
    cc84:	380b883a 	mov	r5,r7
    cc88:	d8c00215 	stw	r3,8(sp)
    cc8c:	d9c00515 	stw	r7,20(sp)
    cc90:	000c68c0 	call	c68c <__mulsi3>
    cc94:	900b883a 	mov	r5,r18
    cc98:	e009883a 	mov	r4,fp
    cc9c:	102b883a 	mov	r21,r2
    cca0:	000c68c0 	call	c68c <__mulsi3>
    cca4:	900b883a 	mov	r5,r18
    cca8:	b809883a 	mov	r4,r23
    ccac:	1039883a 	mov	fp,r2
    ccb0:	000c68c0 	call	c68c <__mulsi3>
    ccb4:	d9c00517 	ldw	r7,20(sp)
    ccb8:	b80b883a 	mov	r5,r23
    ccbc:	1025883a 	mov	r18,r2
    ccc0:	3809883a 	mov	r4,r7
    ccc4:	000c68c0 	call	c68c <__mulsi3>
    ccc8:	a808d43a 	srli	r4,r21,16
    cccc:	1705883a 	add	r2,r2,fp
    ccd0:	d8c00217 	ldw	r3,8(sp)
    ccd4:	2085883a 	add	r2,r4,r2
    ccd8:	1700022e 	bgeu	r2,fp,cce4 <__divdf3+0x630>
    ccdc:	01000074 	movhi	r4,1
    cce0:	9125883a 	add	r18,r18,r4
    cce4:	1008d43a 	srli	r4,r2,16
    cce8:	1004943a 	slli	r2,r2,16
    ccec:	ad7fffcc 	andi	r21,r21,65535
    ccf0:	2489883a 	add	r4,r4,r18
    ccf4:	1545883a 	add	r2,r2,r21
    ccf8:	81003836 	bltu	r16,r4,cddc <__divdf3+0x728>
    ccfc:	81003626 	beq	r16,r4,cdd8 <__divdf3+0x724>
    cd00:	a5000054 	ori	r20,r20,1
    cd04:	1880ffc4 	addi	r2,r3,1023
    cd08:	00bf2e0e 	bge	zero,r2,c9c4 <__alt_data_end+0xf800c9c4>
    cd0c:	a10001cc 	andi	r4,r20,7
    cd10:	20000726 	beq	r4,zero,cd30 <__divdf3+0x67c>
    cd14:	a10003cc 	andi	r4,r20,15
    cd18:	01400104 	movi	r5,4
    cd1c:	21400426 	beq	r4,r5,cd30 <__divdf3+0x67c>
    cd20:	a149883a 	add	r4,r20,r5
    cd24:	2529803a 	cmpltu	r20,r4,r20
    cd28:	8d23883a 	add	r17,r17,r20
    cd2c:	2029883a 	mov	r20,r4
    cd30:	8900402c 	andhi	r4,r17,256
    cd34:	20000426 	beq	r4,zero,cd48 <__divdf3+0x694>
    cd38:	18810004 	addi	r2,r3,1024
    cd3c:	00ffc034 	movhi	r3,65280
    cd40:	18ffffc4 	addi	r3,r3,-1
    cd44:	88e2703a 	and	r17,r17,r3
    cd48:	00c1ff84 	movi	r3,2046
    cd4c:	18beb416 	blt	r3,r2,c820 <__alt_data_end+0xf800c820>
    cd50:	a028d0fa 	srli	r20,r20,3
    cd54:	882a977a 	slli	r21,r17,29
    cd58:	8820927a 	slli	r16,r17,9
    cd5c:	1081ffcc 	andi	r2,r2,2047
    cd60:	ad2ab03a 	or	r21,r21,r20
    cd64:	8020d33a 	srli	r16,r16,12
    cd68:	9900004c 	andi	r4,r19,1
    cd6c:	003eb006 	br	c830 <__alt_data_end+0xf800c830>
    cd70:	8080022c 	andhi	r2,r16,8
    cd74:	10001226 	beq	r2,zero,cdc0 <__divdf3+0x70c>
    cd78:	8880022c 	andhi	r2,r17,8
    cd7c:	1000101e 	bne	r2,zero,cdc0 <__divdf3+0x70c>
    cd80:	00800434 	movhi	r2,16
    cd84:	8c000234 	orhi	r16,r17,8
    cd88:	10bfffc4 	addi	r2,r2,-1
    cd8c:	b809883a 	mov	r4,r23
    cd90:	80a0703a 	and	r16,r16,r2
    cd94:	a02b883a 	mov	r21,r20
    cd98:	003f0806 	br	c9bc <__alt_data_end+0xf800c9bc>
    cd9c:	008000c4 	movi	r2,3
    cda0:	3880b126 	beq	r7,r2,d068 <__divdf3+0x9b4>
    cda4:	00800044 	movi	r2,1
    cda8:	38805b1e 	bne	r7,r2,cf18 <__divdf3+0x864>
    cdac:	e009883a 	mov	r4,fp
    cdb0:	0005883a 	mov	r2,zero
    cdb4:	0021883a 	mov	r16,zero
    cdb8:	002b883a 	mov	r21,zero
    cdbc:	003e9c06 	br	c830 <__alt_data_end+0xf800c830>
    cdc0:	00800434 	movhi	r2,16
    cdc4:	84000234 	orhi	r16,r16,8
    cdc8:	10bfffc4 	addi	r2,r2,-1
    cdcc:	b009883a 	mov	r4,r22
    cdd0:	80a0703a 	and	r16,r16,r2
    cdd4:	003ef906 	br	c9bc <__alt_data_end+0xf800c9bc>
    cdd8:	103fca26 	beq	r2,zero,cd04 <__alt_data_end+0xf800cd04>
    cddc:	b421883a 	add	r16,r22,r16
    cde0:	a17fffc4 	addi	r5,r20,-1
    cde4:	8580422e 	bgeu	r16,r22,cef0 <__divdf3+0x83c>
    cde8:	2829883a 	mov	r20,r5
    cdec:	813fc41e 	bne	r16,r4,cd00 <__alt_data_end+0xf800cd00>
    cdf0:	d9800017 	ldw	r6,0(sp)
    cdf4:	30bfc21e 	bne	r6,r2,cd00 <__alt_data_end+0xf800cd00>
    cdf8:	003fc206 	br	cd04 <__alt_data_end+0xf800cd04>
    cdfc:	143ff604 	addi	r16,r2,-40
    ce00:	8c20983a 	sll	r16,r17,r16
    ce04:	002b883a 	mov	r21,zero
    ce08:	003eb406 	br	c8dc <__alt_data_end+0xf800c8dc>
    ce0c:	d9800215 	stw	r6,8(sp)
    ce10:	d9c00515 	stw	r7,20(sp)
    ce14:	da000415 	stw	r8,16(sp)
    ce18:	000db840 	call	db84 <__clzsi2>
    ce1c:	10800804 	addi	r2,r2,32
    ce20:	da000417 	ldw	r8,16(sp)
    ce24:	d9c00517 	ldw	r7,20(sp)
    ce28:	d9800217 	ldw	r6,8(sp)
    ce2c:	003ea106 	br	c8b4 <__alt_data_end+0xf800c8b4>
    ce30:	147ff604 	addi	r17,r2,-40
    ce34:	3462983a 	sll	r17,r6,r17
    ce38:	0029883a 	mov	r20,zero
    ce3c:	003ec906 	br	c964 <__alt_data_end+0xf800c964>
    ce40:	3009883a 	mov	r4,r6
    ce44:	d9400115 	stw	r5,4(sp)
    ce48:	d9800215 	stw	r6,8(sp)
    ce4c:	da000415 	stw	r8,16(sp)
    ce50:	da400315 	stw	r9,12(sp)
    ce54:	000db840 	call	db84 <__clzsi2>
    ce58:	10800804 	addi	r2,r2,32
    ce5c:	da400317 	ldw	r9,12(sp)
    ce60:	da000417 	ldw	r8,16(sp)
    ce64:	d9800217 	ldw	r6,8(sp)
    ce68:	d9400117 	ldw	r5,4(sp)
    ce6c:	003eb306 	br	c93c <__alt_data_end+0xf800c93c>
    ce70:	d9800017 	ldw	r6,0(sp)
    ce74:	a9ab883a 	add	r21,r21,r6
    ce78:	a98b803a 	cmpltu	r5,r21,r6
    ce7c:	2d8b883a 	add	r5,r5,r22
    ce80:	2a11883a 	add	r8,r5,r8
    ce84:	897fffc4 	addi	r5,r17,-1
    ce88:	b2000c2e 	bgeu	r22,r8,cebc <__divdf3+0x808>
    ce8c:	41003f36 	bltu	r8,r4,cf8c <__divdf3+0x8d8>
    ce90:	22006c26 	beq	r4,r8,d044 <__divdf3+0x990>
    ce94:	4109c83a 	sub	r4,r8,r4
    ce98:	2823883a 	mov	r17,r5
    ce9c:	003f3b06 	br	cb8c <__alt_data_end+0xf800cb8c>
    cea0:	ad3ed336 	bltu	r21,r20,c9f0 <__alt_data_end+0xf800c9f0>
    cea4:	a804d07a 	srli	r2,r21,1
    cea8:	802e97fa 	slli	r23,r16,31
    ceac:	a82a97fa 	slli	r21,r21,31
    ceb0:	8020d07a 	srli	r16,r16,1
    ceb4:	b8aeb03a 	or	r23,r23,r2
    ceb8:	003ed006 	br	c9fc <__alt_data_end+0xf800c9fc>
    cebc:	b23ff51e 	bne	r22,r8,ce94 <__alt_data_end+0xf800ce94>
    cec0:	d9800017 	ldw	r6,0(sp)
    cec4:	a9bff12e 	bgeu	r21,r6,ce8c <__alt_data_end+0xf800ce8c>
    cec8:	b109c83a 	sub	r4,r22,r4
    cecc:	2823883a 	mov	r17,r5
    ced0:	003f2e06 	br	cb8c <__alt_data_end+0xf800cb8c>
    ced4:	2021883a 	mov	r16,r4
    ced8:	003eff06 	br	cad8 <__alt_data_end+0xf800cad8>
    cedc:	2023883a 	mov	r17,r4
    cee0:	003ee406 	br	ca74 <__alt_data_end+0xf800ca74>
    cee4:	a8bfe236 	bltu	r21,r2,ce70 <__alt_data_end+0xf800ce70>
    cee8:	0009883a 	mov	r4,zero
    ceec:	003f2706 	br	cb8c <__alt_data_end+0xf800cb8c>
    cef0:	81002d36 	bltu	r16,r4,cfa8 <__divdf3+0x8f4>
    cef4:	24005626 	beq	r4,r16,d050 <__divdf3+0x99c>
    cef8:	2829883a 	mov	r20,r5
    cefc:	003f8006 	br	cd00 <__alt_data_end+0xf800cd00>
    cf00:	053fffc4 	movi	r20,-1
    cf04:	003f7f06 	br	cd04 <__alt_data_end+0xf800cd04>
    cf08:	200f883a 	mov	r7,r4
    cf0c:	003f3c06 	br	cc00 <__alt_data_end+0xf800cc00>
    cf10:	1011883a 	mov	r8,r2
    cf14:	003f5506 	br	cc6c <__alt_data_end+0xf800cc6c>
    cf18:	e027883a 	mov	r19,fp
    cf1c:	003f7906 	br	cd04 <__alt_data_end+0xf800cd04>
    cf20:	010007c4 	movi	r4,31
    cf24:	20c02816 	blt	r4,r3,cfc8 <__divdf3+0x914>
    cf28:	00800804 	movi	r2,32
    cf2c:	10c5c83a 	sub	r2,r2,r3
    cf30:	888a983a 	sll	r5,r17,r2
    cf34:	a0c8d83a 	srl	r4,r20,r3
    cf38:	a084983a 	sll	r2,r20,r2
    cf3c:	88e2d83a 	srl	r17,r17,r3
    cf40:	2906b03a 	or	r3,r5,r4
    cf44:	1004c03a 	cmpne	r2,r2,zero
    cf48:	1886b03a 	or	r3,r3,r2
    cf4c:	188001cc 	andi	r2,r3,7
    cf50:	10000726 	beq	r2,zero,cf70 <__divdf3+0x8bc>
    cf54:	188003cc 	andi	r2,r3,15
    cf58:	01000104 	movi	r4,4
    cf5c:	11000426 	beq	r2,r4,cf70 <__divdf3+0x8bc>
    cf60:	1805883a 	mov	r2,r3
    cf64:	10c00104 	addi	r3,r2,4
    cf68:	1885803a 	cmpltu	r2,r3,r2
    cf6c:	88a3883a 	add	r17,r17,r2
    cf70:	8880202c 	andhi	r2,r17,128
    cf74:	10002926 	beq	r2,zero,d01c <__divdf3+0x968>
    cf78:	9900004c 	andi	r4,r19,1
    cf7c:	00800044 	movi	r2,1
    cf80:	0021883a 	mov	r16,zero
    cf84:	002b883a 	mov	r21,zero
    cf88:	003e2906 	br	c830 <__alt_data_end+0xf800c830>
    cf8c:	d9800017 	ldw	r6,0(sp)
    cf90:	8c7fff84 	addi	r17,r17,-2
    cf94:	a9ab883a 	add	r21,r21,r6
    cf98:	a98b803a 	cmpltu	r5,r21,r6
    cf9c:	2d8b883a 	add	r5,r5,r22
    cfa0:	2a11883a 	add	r8,r5,r8
    cfa4:	003ef806 	br	cb88 <__alt_data_end+0xf800cb88>
    cfa8:	d9800017 	ldw	r6,0(sp)
    cfac:	318f883a 	add	r7,r6,r6
    cfb0:	398b803a 	cmpltu	r5,r7,r6
    cfb4:	2d8d883a 	add	r6,r5,r22
    cfb8:	81a1883a 	add	r16,r16,r6
    cfbc:	a17fff84 	addi	r5,r20,-2
    cfc0:	d9c00015 	stw	r7,0(sp)
    cfc4:	003f8806 	br	cde8 <__alt_data_end+0xf800cde8>
    cfc8:	013ff844 	movi	r4,-31
    cfcc:	2085c83a 	sub	r2,r4,r2
    cfd0:	8888d83a 	srl	r4,r17,r2
    cfd4:	00800804 	movi	r2,32
    cfd8:	18802126 	beq	r3,r2,d060 <__divdf3+0x9ac>
    cfdc:	04001004 	movi	r16,64
    cfe0:	80c7c83a 	sub	r3,r16,r3
    cfe4:	88e0983a 	sll	r16,r17,r3
    cfe8:	8504b03a 	or	r2,r16,r20
    cfec:	1004c03a 	cmpne	r2,r2,zero
    cff0:	2084b03a 	or	r2,r4,r2
    cff4:	144001cc 	andi	r17,r2,7
    cff8:	88000d1e 	bne	r17,zero,d030 <__divdf3+0x97c>
    cffc:	0021883a 	mov	r16,zero
    d000:	102ad0fa 	srli	r21,r2,3
    d004:	9900004c 	andi	r4,r19,1
    d008:	0005883a 	mov	r2,zero
    d00c:	ac6ab03a 	or	r21,r21,r17
    d010:	003e0706 	br	c830 <__alt_data_end+0xf800c830>
    d014:	1007883a 	mov	r3,r2
    d018:	0023883a 	mov	r17,zero
    d01c:	8820927a 	slli	r16,r17,9
    d020:	1805883a 	mov	r2,r3
    d024:	8822977a 	slli	r17,r17,29
    d028:	8020d33a 	srli	r16,r16,12
    d02c:	003ff406 	br	d000 <__alt_data_end+0xf800d000>
    d030:	10c003cc 	andi	r3,r2,15
    d034:	01000104 	movi	r4,4
    d038:	193ff626 	beq	r3,r4,d014 <__alt_data_end+0xf800d014>
    d03c:	0023883a 	mov	r17,zero
    d040:	003fc806 	br	cf64 <__alt_data_end+0xf800cf64>
    d044:	a8bfd136 	bltu	r21,r2,cf8c <__alt_data_end+0xf800cf8c>
    d048:	2823883a 	mov	r17,r5
    d04c:	003fa606 	br	cee8 <__alt_data_end+0xf800cee8>
    d050:	d9800017 	ldw	r6,0(sp)
    d054:	30bfd436 	bltu	r6,r2,cfa8 <__alt_data_end+0xf800cfa8>
    d058:	2829883a 	mov	r20,r5
    d05c:	003f6406 	br	cdf0 <__alt_data_end+0xf800cdf0>
    d060:	0021883a 	mov	r16,zero
    d064:	003fe006 	br	cfe8 <__alt_data_end+0xf800cfe8>
    d068:	00800434 	movhi	r2,16
    d06c:	8c000234 	orhi	r16,r17,8
    d070:	10bfffc4 	addi	r2,r2,-1
    d074:	e009883a 	mov	r4,fp
    d078:	80a0703a 	and	r16,r16,r2
    d07c:	a02b883a 	mov	r21,r20
    d080:	003e4e06 	br	c9bc <__alt_data_end+0xf800c9bc>

0000d084 <__gedf2>:
    d084:	2804d53a 	srli	r2,r5,20
    d088:	3806d53a 	srli	r3,r7,20
    d08c:	02000434 	movhi	r8,16
    d090:	423fffc4 	addi	r8,r8,-1
    d094:	1081ffcc 	andi	r2,r2,2047
    d098:	0241ffc4 	movi	r9,2047
    d09c:	2a14703a 	and	r10,r5,r8
    d0a0:	18c1ffcc 	andi	r3,r3,2047
    d0a4:	3a10703a 	and	r8,r7,r8
    d0a8:	280ad7fa 	srli	r5,r5,31
    d0ac:	380ed7fa 	srli	r7,r7,31
    d0b0:	12401d26 	beq	r2,r9,d128 <__gedf2+0xa4>
    d0b4:	0241ffc4 	movi	r9,2047
    d0b8:	1a401226 	beq	r3,r9,d104 <__gedf2+0x80>
    d0bc:	1000081e 	bne	r2,zero,d0e0 <__gedf2+0x5c>
    d0c0:	2296b03a 	or	r11,r4,r10
    d0c4:	5813003a 	cmpeq	r9,r11,zero
    d0c8:	1800091e 	bne	r3,zero,d0f0 <__gedf2+0x6c>
    d0cc:	3218b03a 	or	r12,r6,r8
    d0d0:	6000071e 	bne	r12,zero,d0f0 <__gedf2+0x6c>
    d0d4:	0005883a 	mov	r2,zero
    d0d8:	5800101e 	bne	r11,zero,d11c <__gedf2+0x98>
    d0dc:	f800283a 	ret
    d0e0:	18000c1e 	bne	r3,zero,d114 <__gedf2+0x90>
    d0e4:	3212b03a 	or	r9,r6,r8
    d0e8:	48000c26 	beq	r9,zero,d11c <__gedf2+0x98>
    d0ec:	0013883a 	mov	r9,zero
    d0f0:	39c03fcc 	andi	r7,r7,255
    d0f4:	48000826 	beq	r9,zero,d118 <__gedf2+0x94>
    d0f8:	38000926 	beq	r7,zero,d120 <__gedf2+0x9c>
    d0fc:	00800044 	movi	r2,1
    d100:	f800283a 	ret
    d104:	3212b03a 	or	r9,r6,r8
    d108:	483fec26 	beq	r9,zero,d0bc <__alt_data_end+0xf800d0bc>
    d10c:	00bfff84 	movi	r2,-2
    d110:	f800283a 	ret
    d114:	39c03fcc 	andi	r7,r7,255
    d118:	29c00626 	beq	r5,r7,d134 <__gedf2+0xb0>
    d11c:	283ff726 	beq	r5,zero,d0fc <__alt_data_end+0xf800d0fc>
    d120:	00bfffc4 	movi	r2,-1
    d124:	f800283a 	ret
    d128:	2292b03a 	or	r9,r4,r10
    d12c:	483fe126 	beq	r9,zero,d0b4 <__alt_data_end+0xf800d0b4>
    d130:	003ff606 	br	d10c <__alt_data_end+0xf800d10c>
    d134:	18bff916 	blt	r3,r2,d11c <__alt_data_end+0xf800d11c>
    d138:	10c00316 	blt	r2,r3,d148 <__gedf2+0xc4>
    d13c:	42bff736 	bltu	r8,r10,d11c <__alt_data_end+0xf800d11c>
    d140:	52000326 	beq	r10,r8,d150 <__gedf2+0xcc>
    d144:	5200042e 	bgeu	r10,r8,d158 <__gedf2+0xd4>
    d148:	283fec1e 	bne	r5,zero,d0fc <__alt_data_end+0xf800d0fc>
    d14c:	003ff406 	br	d120 <__alt_data_end+0xf800d120>
    d150:	313ff236 	bltu	r6,r4,d11c <__alt_data_end+0xf800d11c>
    d154:	21bffc36 	bltu	r4,r6,d148 <__alt_data_end+0xf800d148>
    d158:	0005883a 	mov	r2,zero
    d15c:	f800283a 	ret

0000d160 <__subdf3>:
    d160:	02000434 	movhi	r8,16
    d164:	423fffc4 	addi	r8,r8,-1
    d168:	defffb04 	addi	sp,sp,-20
    d16c:	2a14703a 	and	r10,r5,r8
    d170:	3812d53a 	srli	r9,r7,20
    d174:	3a10703a 	and	r8,r7,r8
    d178:	2006d77a 	srli	r3,r4,29
    d17c:	3004d77a 	srli	r2,r6,29
    d180:	dc000015 	stw	r16,0(sp)
    d184:	501490fa 	slli	r10,r10,3
    d188:	2820d53a 	srli	r16,r5,20
    d18c:	401090fa 	slli	r8,r8,3
    d190:	dc800215 	stw	r18,8(sp)
    d194:	dc400115 	stw	r17,4(sp)
    d198:	dfc00415 	stw	ra,16(sp)
    d19c:	202290fa 	slli	r17,r4,3
    d1a0:	dcc00315 	stw	r19,12(sp)
    d1a4:	4a41ffcc 	andi	r9,r9,2047
    d1a8:	0101ffc4 	movi	r4,2047
    d1ac:	2824d7fa 	srli	r18,r5,31
    d1b0:	8401ffcc 	andi	r16,r16,2047
    d1b4:	50c6b03a 	or	r3,r10,r3
    d1b8:	380ed7fa 	srli	r7,r7,31
    d1bc:	408ab03a 	or	r5,r8,r2
    d1c0:	300c90fa 	slli	r6,r6,3
    d1c4:	49009626 	beq	r9,r4,d420 <__subdf3+0x2c0>
    d1c8:	39c0005c 	xori	r7,r7,1
    d1cc:	8245c83a 	sub	r2,r16,r9
    d1d0:	3c807426 	beq	r7,r18,d3a4 <__subdf3+0x244>
    d1d4:	0080af0e 	bge	zero,r2,d494 <__subdf3+0x334>
    d1d8:	48002a1e 	bne	r9,zero,d284 <__subdf3+0x124>
    d1dc:	2988b03a 	or	r4,r5,r6
    d1e0:	20009a1e 	bne	r4,zero,d44c <__subdf3+0x2ec>
    d1e4:	888001cc 	andi	r2,r17,7
    d1e8:	10000726 	beq	r2,zero,d208 <__subdf3+0xa8>
    d1ec:	888003cc 	andi	r2,r17,15
    d1f0:	01000104 	movi	r4,4
    d1f4:	11000426 	beq	r2,r4,d208 <__subdf3+0xa8>
    d1f8:	890b883a 	add	r5,r17,r4
    d1fc:	2c63803a 	cmpltu	r17,r5,r17
    d200:	1c47883a 	add	r3,r3,r17
    d204:	2823883a 	mov	r17,r5
    d208:	1880202c 	andhi	r2,r3,128
    d20c:	10005926 	beq	r2,zero,d374 <__subdf3+0x214>
    d210:	84000044 	addi	r16,r16,1
    d214:	0081ffc4 	movi	r2,2047
    d218:	8080be26 	beq	r16,r2,d514 <__subdf3+0x3b4>
    d21c:	017fe034 	movhi	r5,65408
    d220:	297fffc4 	addi	r5,r5,-1
    d224:	1946703a 	and	r3,r3,r5
    d228:	1804977a 	slli	r2,r3,29
    d22c:	1806927a 	slli	r3,r3,9
    d230:	8822d0fa 	srli	r17,r17,3
    d234:	8401ffcc 	andi	r16,r16,2047
    d238:	180ad33a 	srli	r5,r3,12
    d23c:	9100004c 	andi	r4,r18,1
    d240:	1444b03a 	or	r2,r2,r17
    d244:	80c1ffcc 	andi	r3,r16,2047
    d248:	1820953a 	slli	r16,r3,20
    d24c:	20c03fcc 	andi	r3,r4,255
    d250:	180897fa 	slli	r4,r3,31
    d254:	00c00434 	movhi	r3,16
    d258:	18ffffc4 	addi	r3,r3,-1
    d25c:	28c6703a 	and	r3,r5,r3
    d260:	1c06b03a 	or	r3,r3,r16
    d264:	1906b03a 	or	r3,r3,r4
    d268:	dfc00417 	ldw	ra,16(sp)
    d26c:	dcc00317 	ldw	r19,12(sp)
    d270:	dc800217 	ldw	r18,8(sp)
    d274:	dc400117 	ldw	r17,4(sp)
    d278:	dc000017 	ldw	r16,0(sp)
    d27c:	dec00504 	addi	sp,sp,20
    d280:	f800283a 	ret
    d284:	0101ffc4 	movi	r4,2047
    d288:	813fd626 	beq	r16,r4,d1e4 <__alt_data_end+0xf800d1e4>
    d28c:	29402034 	orhi	r5,r5,128
    d290:	01000e04 	movi	r4,56
    d294:	2080a316 	blt	r4,r2,d524 <__subdf3+0x3c4>
    d298:	010007c4 	movi	r4,31
    d29c:	2080c616 	blt	r4,r2,d5b8 <__subdf3+0x458>
    d2a0:	01000804 	movi	r4,32
    d2a4:	2089c83a 	sub	r4,r4,r2
    d2a8:	2910983a 	sll	r8,r5,r4
    d2ac:	308ed83a 	srl	r7,r6,r2
    d2b0:	3108983a 	sll	r4,r6,r4
    d2b4:	2884d83a 	srl	r2,r5,r2
    d2b8:	41ccb03a 	or	r6,r8,r7
    d2bc:	2008c03a 	cmpne	r4,r4,zero
    d2c0:	310cb03a 	or	r6,r6,r4
    d2c4:	898dc83a 	sub	r6,r17,r6
    d2c8:	89a3803a 	cmpltu	r17,r17,r6
    d2cc:	1887c83a 	sub	r3,r3,r2
    d2d0:	1c47c83a 	sub	r3,r3,r17
    d2d4:	3023883a 	mov	r17,r6
    d2d8:	1880202c 	andhi	r2,r3,128
    d2dc:	10002326 	beq	r2,zero,d36c <__subdf3+0x20c>
    d2e0:	04c02034 	movhi	r19,128
    d2e4:	9cffffc4 	addi	r19,r19,-1
    d2e8:	1ce6703a 	and	r19,r3,r19
    d2ec:	98007a26 	beq	r19,zero,d4d8 <__subdf3+0x378>
    d2f0:	9809883a 	mov	r4,r19
    d2f4:	000db840 	call	db84 <__clzsi2>
    d2f8:	113ffe04 	addi	r4,r2,-8
    d2fc:	00c007c4 	movi	r3,31
    d300:	19007b16 	blt	r3,r4,d4f0 <__subdf3+0x390>
    d304:	00800804 	movi	r2,32
    d308:	1105c83a 	sub	r2,r2,r4
    d30c:	8884d83a 	srl	r2,r17,r2
    d310:	9906983a 	sll	r3,r19,r4
    d314:	8922983a 	sll	r17,r17,r4
    d318:	10c4b03a 	or	r2,r2,r3
    d31c:	24007816 	blt	r4,r16,d500 <__subdf3+0x3a0>
    d320:	2421c83a 	sub	r16,r4,r16
    d324:	80c00044 	addi	r3,r16,1
    d328:	010007c4 	movi	r4,31
    d32c:	20c09516 	blt	r4,r3,d584 <__subdf3+0x424>
    d330:	01400804 	movi	r5,32
    d334:	28cbc83a 	sub	r5,r5,r3
    d338:	88c8d83a 	srl	r4,r17,r3
    d33c:	8962983a 	sll	r17,r17,r5
    d340:	114a983a 	sll	r5,r2,r5
    d344:	10c6d83a 	srl	r3,r2,r3
    d348:	8804c03a 	cmpne	r2,r17,zero
    d34c:	290ab03a 	or	r5,r5,r4
    d350:	28a2b03a 	or	r17,r5,r2
    d354:	0021883a 	mov	r16,zero
    d358:	003fa206 	br	d1e4 <__alt_data_end+0xf800d1e4>
    d35c:	2090b03a 	or	r8,r4,r2
    d360:	40018e26 	beq	r8,zero,d99c <__subdf3+0x83c>
    d364:	1007883a 	mov	r3,r2
    d368:	2023883a 	mov	r17,r4
    d36c:	888001cc 	andi	r2,r17,7
    d370:	103f9e1e 	bne	r2,zero,d1ec <__alt_data_end+0xf800d1ec>
    d374:	1804977a 	slli	r2,r3,29
    d378:	8822d0fa 	srli	r17,r17,3
    d37c:	1810d0fa 	srli	r8,r3,3
    d380:	9100004c 	andi	r4,r18,1
    d384:	1444b03a 	or	r2,r2,r17
    d388:	00c1ffc4 	movi	r3,2047
    d38c:	80c02826 	beq	r16,r3,d430 <__subdf3+0x2d0>
    d390:	01400434 	movhi	r5,16
    d394:	297fffc4 	addi	r5,r5,-1
    d398:	80e0703a 	and	r16,r16,r3
    d39c:	414a703a 	and	r5,r8,r5
    d3a0:	003fa806 	br	d244 <__alt_data_end+0xf800d244>
    d3a4:	0080630e 	bge	zero,r2,d534 <__subdf3+0x3d4>
    d3a8:	48003026 	beq	r9,zero,d46c <__subdf3+0x30c>
    d3ac:	0101ffc4 	movi	r4,2047
    d3b0:	813f8c26 	beq	r16,r4,d1e4 <__alt_data_end+0xf800d1e4>
    d3b4:	29402034 	orhi	r5,r5,128
    d3b8:	01000e04 	movi	r4,56
    d3bc:	2080a90e 	bge	r4,r2,d664 <__subdf3+0x504>
    d3c0:	298cb03a 	or	r6,r5,r6
    d3c4:	3012c03a 	cmpne	r9,r6,zero
    d3c8:	0005883a 	mov	r2,zero
    d3cc:	4c53883a 	add	r9,r9,r17
    d3d0:	4c63803a 	cmpltu	r17,r9,r17
    d3d4:	10c7883a 	add	r3,r2,r3
    d3d8:	88c7883a 	add	r3,r17,r3
    d3dc:	4823883a 	mov	r17,r9
    d3e0:	1880202c 	andhi	r2,r3,128
    d3e4:	1000d026 	beq	r2,zero,d728 <__subdf3+0x5c8>
    d3e8:	84000044 	addi	r16,r16,1
    d3ec:	0081ffc4 	movi	r2,2047
    d3f0:	8080fe26 	beq	r16,r2,d7ec <__subdf3+0x68c>
    d3f4:	00bfe034 	movhi	r2,65408
    d3f8:	10bfffc4 	addi	r2,r2,-1
    d3fc:	1886703a 	and	r3,r3,r2
    d400:	880ad07a 	srli	r5,r17,1
    d404:	180497fa 	slli	r2,r3,31
    d408:	8900004c 	andi	r4,r17,1
    d40c:	2922b03a 	or	r17,r5,r4
    d410:	1806d07a 	srli	r3,r3,1
    d414:	1462b03a 	or	r17,r2,r17
    d418:	3825883a 	mov	r18,r7
    d41c:	003f7106 	br	d1e4 <__alt_data_end+0xf800d1e4>
    d420:	2984b03a 	or	r2,r5,r6
    d424:	103f6826 	beq	r2,zero,d1c8 <__alt_data_end+0xf800d1c8>
    d428:	39c03fcc 	andi	r7,r7,255
    d42c:	003f6706 	br	d1cc <__alt_data_end+0xf800d1cc>
    d430:	4086b03a 	or	r3,r8,r2
    d434:	18015226 	beq	r3,zero,d980 <__subdf3+0x820>
    d438:	00c00434 	movhi	r3,16
    d43c:	41400234 	orhi	r5,r8,8
    d440:	18ffffc4 	addi	r3,r3,-1
    d444:	28ca703a 	and	r5,r5,r3
    d448:	003f7e06 	br	d244 <__alt_data_end+0xf800d244>
    d44c:	10bfffc4 	addi	r2,r2,-1
    d450:	1000491e 	bne	r2,zero,d578 <__subdf3+0x418>
    d454:	898fc83a 	sub	r7,r17,r6
    d458:	89e3803a 	cmpltu	r17,r17,r7
    d45c:	1947c83a 	sub	r3,r3,r5
    d460:	1c47c83a 	sub	r3,r3,r17
    d464:	3823883a 	mov	r17,r7
    d468:	003f9b06 	br	d2d8 <__alt_data_end+0xf800d2d8>
    d46c:	2988b03a 	or	r4,r5,r6
    d470:	203f5c26 	beq	r4,zero,d1e4 <__alt_data_end+0xf800d1e4>
    d474:	10bfffc4 	addi	r2,r2,-1
    d478:	1000931e 	bne	r2,zero,d6c8 <__subdf3+0x568>
    d47c:	898d883a 	add	r6,r17,r6
    d480:	3463803a 	cmpltu	r17,r6,r17
    d484:	1947883a 	add	r3,r3,r5
    d488:	88c7883a 	add	r3,r17,r3
    d48c:	3023883a 	mov	r17,r6
    d490:	003fd306 	br	d3e0 <__alt_data_end+0xf800d3e0>
    d494:	1000541e 	bne	r2,zero,d5e8 <__subdf3+0x488>
    d498:	80800044 	addi	r2,r16,1
    d49c:	1081ffcc 	andi	r2,r2,2047
    d4a0:	01000044 	movi	r4,1
    d4a4:	2080a20e 	bge	r4,r2,d730 <__subdf3+0x5d0>
    d4a8:	8989c83a 	sub	r4,r17,r6
    d4ac:	8905803a 	cmpltu	r2,r17,r4
    d4b0:	1967c83a 	sub	r19,r3,r5
    d4b4:	98a7c83a 	sub	r19,r19,r2
    d4b8:	9880202c 	andhi	r2,r19,128
    d4bc:	10006326 	beq	r2,zero,d64c <__subdf3+0x4ec>
    d4c0:	3463c83a 	sub	r17,r6,r17
    d4c4:	28c7c83a 	sub	r3,r5,r3
    d4c8:	344d803a 	cmpltu	r6,r6,r17
    d4cc:	19a7c83a 	sub	r19,r3,r6
    d4d0:	3825883a 	mov	r18,r7
    d4d4:	983f861e 	bne	r19,zero,d2f0 <__alt_data_end+0xf800d2f0>
    d4d8:	8809883a 	mov	r4,r17
    d4dc:	000db840 	call	db84 <__clzsi2>
    d4e0:	10800804 	addi	r2,r2,32
    d4e4:	113ffe04 	addi	r4,r2,-8
    d4e8:	00c007c4 	movi	r3,31
    d4ec:	193f850e 	bge	r3,r4,d304 <__alt_data_end+0xf800d304>
    d4f0:	10bff604 	addi	r2,r2,-40
    d4f4:	8884983a 	sll	r2,r17,r2
    d4f8:	0023883a 	mov	r17,zero
    d4fc:	243f880e 	bge	r4,r16,d320 <__alt_data_end+0xf800d320>
    d500:	00ffe034 	movhi	r3,65408
    d504:	18ffffc4 	addi	r3,r3,-1
    d508:	8121c83a 	sub	r16,r16,r4
    d50c:	10c6703a 	and	r3,r2,r3
    d510:	003f3406 	br	d1e4 <__alt_data_end+0xf800d1e4>
    d514:	9100004c 	andi	r4,r18,1
    d518:	000b883a 	mov	r5,zero
    d51c:	0005883a 	mov	r2,zero
    d520:	003f4806 	br	d244 <__alt_data_end+0xf800d244>
    d524:	298cb03a 	or	r6,r5,r6
    d528:	300cc03a 	cmpne	r6,r6,zero
    d52c:	0005883a 	mov	r2,zero
    d530:	003f6406 	br	d2c4 <__alt_data_end+0xf800d2c4>
    d534:	10009a1e 	bne	r2,zero,d7a0 <__subdf3+0x640>
    d538:	82400044 	addi	r9,r16,1
    d53c:	4881ffcc 	andi	r2,r9,2047
    d540:	02800044 	movi	r10,1
    d544:	5080670e 	bge	r10,r2,d6e4 <__subdf3+0x584>
    d548:	0081ffc4 	movi	r2,2047
    d54c:	4880af26 	beq	r9,r2,d80c <__subdf3+0x6ac>
    d550:	898d883a 	add	r6,r17,r6
    d554:	1945883a 	add	r2,r3,r5
    d558:	3447803a 	cmpltu	r3,r6,r17
    d55c:	1887883a 	add	r3,r3,r2
    d560:	182297fa 	slli	r17,r3,31
    d564:	300cd07a 	srli	r6,r6,1
    d568:	1806d07a 	srli	r3,r3,1
    d56c:	4821883a 	mov	r16,r9
    d570:	89a2b03a 	or	r17,r17,r6
    d574:	003f1b06 	br	d1e4 <__alt_data_end+0xf800d1e4>
    d578:	0101ffc4 	movi	r4,2047
    d57c:	813f441e 	bne	r16,r4,d290 <__alt_data_end+0xf800d290>
    d580:	003f1806 	br	d1e4 <__alt_data_end+0xf800d1e4>
    d584:	843ff844 	addi	r16,r16,-31
    d588:	01400804 	movi	r5,32
    d58c:	1408d83a 	srl	r4,r2,r16
    d590:	19405026 	beq	r3,r5,d6d4 <__subdf3+0x574>
    d594:	01401004 	movi	r5,64
    d598:	28c7c83a 	sub	r3,r5,r3
    d59c:	10c4983a 	sll	r2,r2,r3
    d5a0:	88a2b03a 	or	r17,r17,r2
    d5a4:	8822c03a 	cmpne	r17,r17,zero
    d5a8:	2462b03a 	or	r17,r4,r17
    d5ac:	0007883a 	mov	r3,zero
    d5b0:	0021883a 	mov	r16,zero
    d5b4:	003f6d06 	br	d36c <__alt_data_end+0xf800d36c>
    d5b8:	11fff804 	addi	r7,r2,-32
    d5bc:	01000804 	movi	r4,32
    d5c0:	29ced83a 	srl	r7,r5,r7
    d5c4:	11004526 	beq	r2,r4,d6dc <__subdf3+0x57c>
    d5c8:	01001004 	movi	r4,64
    d5cc:	2089c83a 	sub	r4,r4,r2
    d5d0:	2904983a 	sll	r2,r5,r4
    d5d4:	118cb03a 	or	r6,r2,r6
    d5d8:	300cc03a 	cmpne	r6,r6,zero
    d5dc:	398cb03a 	or	r6,r7,r6
    d5e0:	0005883a 	mov	r2,zero
    d5e4:	003f3706 	br	d2c4 <__alt_data_end+0xf800d2c4>
    d5e8:	80002a26 	beq	r16,zero,d694 <__subdf3+0x534>
    d5ec:	0101ffc4 	movi	r4,2047
    d5f0:	49006626 	beq	r9,r4,d78c <__subdf3+0x62c>
    d5f4:	0085c83a 	sub	r2,zero,r2
    d5f8:	18c02034 	orhi	r3,r3,128
    d5fc:	01000e04 	movi	r4,56
    d600:	20807e16 	blt	r4,r2,d7fc <__subdf3+0x69c>
    d604:	010007c4 	movi	r4,31
    d608:	2080e716 	blt	r4,r2,d9a8 <__subdf3+0x848>
    d60c:	01000804 	movi	r4,32
    d610:	2089c83a 	sub	r4,r4,r2
    d614:	1914983a 	sll	r10,r3,r4
    d618:	8890d83a 	srl	r8,r17,r2
    d61c:	8908983a 	sll	r4,r17,r4
    d620:	1884d83a 	srl	r2,r3,r2
    d624:	5222b03a 	or	r17,r10,r8
    d628:	2006c03a 	cmpne	r3,r4,zero
    d62c:	88e2b03a 	or	r17,r17,r3
    d630:	3463c83a 	sub	r17,r6,r17
    d634:	2885c83a 	sub	r2,r5,r2
    d638:	344d803a 	cmpltu	r6,r6,r17
    d63c:	1187c83a 	sub	r3,r2,r6
    d640:	4821883a 	mov	r16,r9
    d644:	3825883a 	mov	r18,r7
    d648:	003f2306 	br	d2d8 <__alt_data_end+0xf800d2d8>
    d64c:	24d0b03a 	or	r8,r4,r19
    d650:	40001b1e 	bne	r8,zero,d6c0 <__subdf3+0x560>
    d654:	0005883a 	mov	r2,zero
    d658:	0009883a 	mov	r4,zero
    d65c:	0021883a 	mov	r16,zero
    d660:	003f4906 	br	d388 <__alt_data_end+0xf800d388>
    d664:	010007c4 	movi	r4,31
    d668:	20803a16 	blt	r4,r2,d754 <__subdf3+0x5f4>
    d66c:	01000804 	movi	r4,32
    d670:	2089c83a 	sub	r4,r4,r2
    d674:	2912983a 	sll	r9,r5,r4
    d678:	3090d83a 	srl	r8,r6,r2
    d67c:	3108983a 	sll	r4,r6,r4
    d680:	2884d83a 	srl	r2,r5,r2
    d684:	4a12b03a 	or	r9,r9,r8
    d688:	2008c03a 	cmpne	r4,r4,zero
    d68c:	4912b03a 	or	r9,r9,r4
    d690:	003f4e06 	br	d3cc <__alt_data_end+0xf800d3cc>
    d694:	1c48b03a 	or	r4,r3,r17
    d698:	20003c26 	beq	r4,zero,d78c <__subdf3+0x62c>
    d69c:	0084303a 	nor	r2,zero,r2
    d6a0:	1000381e 	bne	r2,zero,d784 <__subdf3+0x624>
    d6a4:	3463c83a 	sub	r17,r6,r17
    d6a8:	28c5c83a 	sub	r2,r5,r3
    d6ac:	344d803a 	cmpltu	r6,r6,r17
    d6b0:	1187c83a 	sub	r3,r2,r6
    d6b4:	4821883a 	mov	r16,r9
    d6b8:	3825883a 	mov	r18,r7
    d6bc:	003f0606 	br	d2d8 <__alt_data_end+0xf800d2d8>
    d6c0:	2023883a 	mov	r17,r4
    d6c4:	003f0906 	br	d2ec <__alt_data_end+0xf800d2ec>
    d6c8:	0101ffc4 	movi	r4,2047
    d6cc:	813f3a1e 	bne	r16,r4,d3b8 <__alt_data_end+0xf800d3b8>
    d6d0:	003ec406 	br	d1e4 <__alt_data_end+0xf800d1e4>
    d6d4:	0005883a 	mov	r2,zero
    d6d8:	003fb106 	br	d5a0 <__alt_data_end+0xf800d5a0>
    d6dc:	0005883a 	mov	r2,zero
    d6e0:	003fbc06 	br	d5d4 <__alt_data_end+0xf800d5d4>
    d6e4:	1c44b03a 	or	r2,r3,r17
    d6e8:	80008e1e 	bne	r16,zero,d924 <__subdf3+0x7c4>
    d6ec:	1000c826 	beq	r2,zero,da10 <__subdf3+0x8b0>
    d6f0:	2984b03a 	or	r2,r5,r6
    d6f4:	103ebb26 	beq	r2,zero,d1e4 <__alt_data_end+0xf800d1e4>
    d6f8:	8989883a 	add	r4,r17,r6
    d6fc:	1945883a 	add	r2,r3,r5
    d700:	2447803a 	cmpltu	r3,r4,r17
    d704:	1887883a 	add	r3,r3,r2
    d708:	1880202c 	andhi	r2,r3,128
    d70c:	2023883a 	mov	r17,r4
    d710:	103f1626 	beq	r2,zero,d36c <__alt_data_end+0xf800d36c>
    d714:	00bfe034 	movhi	r2,65408
    d718:	10bfffc4 	addi	r2,r2,-1
    d71c:	5021883a 	mov	r16,r10
    d720:	1886703a 	and	r3,r3,r2
    d724:	003eaf06 	br	d1e4 <__alt_data_end+0xf800d1e4>
    d728:	3825883a 	mov	r18,r7
    d72c:	003f0f06 	br	d36c <__alt_data_end+0xf800d36c>
    d730:	1c44b03a 	or	r2,r3,r17
    d734:	8000251e 	bne	r16,zero,d7cc <__subdf3+0x66c>
    d738:	1000661e 	bne	r2,zero,d8d4 <__subdf3+0x774>
    d73c:	2990b03a 	or	r8,r5,r6
    d740:	40009626 	beq	r8,zero,d99c <__subdf3+0x83c>
    d744:	2807883a 	mov	r3,r5
    d748:	3023883a 	mov	r17,r6
    d74c:	3825883a 	mov	r18,r7
    d750:	003ea406 	br	d1e4 <__alt_data_end+0xf800d1e4>
    d754:	127ff804 	addi	r9,r2,-32
    d758:	01000804 	movi	r4,32
    d75c:	2a52d83a 	srl	r9,r5,r9
    d760:	11008c26 	beq	r2,r4,d994 <__subdf3+0x834>
    d764:	01001004 	movi	r4,64
    d768:	2085c83a 	sub	r2,r4,r2
    d76c:	2884983a 	sll	r2,r5,r2
    d770:	118cb03a 	or	r6,r2,r6
    d774:	300cc03a 	cmpne	r6,r6,zero
    d778:	4992b03a 	or	r9,r9,r6
    d77c:	0005883a 	mov	r2,zero
    d780:	003f1206 	br	d3cc <__alt_data_end+0xf800d3cc>
    d784:	0101ffc4 	movi	r4,2047
    d788:	493f9c1e 	bne	r9,r4,d5fc <__alt_data_end+0xf800d5fc>
    d78c:	2807883a 	mov	r3,r5
    d790:	3023883a 	mov	r17,r6
    d794:	4821883a 	mov	r16,r9
    d798:	3825883a 	mov	r18,r7
    d79c:	003e9106 	br	d1e4 <__alt_data_end+0xf800d1e4>
    d7a0:	80001f1e 	bne	r16,zero,d820 <__subdf3+0x6c0>
    d7a4:	1c48b03a 	or	r4,r3,r17
    d7a8:	20005a26 	beq	r4,zero,d914 <__subdf3+0x7b4>
    d7ac:	0084303a 	nor	r2,zero,r2
    d7b0:	1000561e 	bne	r2,zero,d90c <__subdf3+0x7ac>
    d7b4:	89a3883a 	add	r17,r17,r6
    d7b8:	1945883a 	add	r2,r3,r5
    d7bc:	898d803a 	cmpltu	r6,r17,r6
    d7c0:	3087883a 	add	r3,r6,r2
    d7c4:	4821883a 	mov	r16,r9
    d7c8:	003f0506 	br	d3e0 <__alt_data_end+0xf800d3e0>
    d7cc:	10002b1e 	bne	r2,zero,d87c <__subdf3+0x71c>
    d7d0:	2984b03a 	or	r2,r5,r6
    d7d4:	10008026 	beq	r2,zero,d9d8 <__subdf3+0x878>
    d7d8:	2807883a 	mov	r3,r5
    d7dc:	3023883a 	mov	r17,r6
    d7e0:	3825883a 	mov	r18,r7
    d7e4:	0401ffc4 	movi	r16,2047
    d7e8:	003e7e06 	br	d1e4 <__alt_data_end+0xf800d1e4>
    d7ec:	3809883a 	mov	r4,r7
    d7f0:	0011883a 	mov	r8,zero
    d7f4:	0005883a 	mov	r2,zero
    d7f8:	003ee306 	br	d388 <__alt_data_end+0xf800d388>
    d7fc:	1c62b03a 	or	r17,r3,r17
    d800:	8822c03a 	cmpne	r17,r17,zero
    d804:	0005883a 	mov	r2,zero
    d808:	003f8906 	br	d630 <__alt_data_end+0xf800d630>
    d80c:	3809883a 	mov	r4,r7
    d810:	4821883a 	mov	r16,r9
    d814:	0011883a 	mov	r8,zero
    d818:	0005883a 	mov	r2,zero
    d81c:	003eda06 	br	d388 <__alt_data_end+0xf800d388>
    d820:	0101ffc4 	movi	r4,2047
    d824:	49003b26 	beq	r9,r4,d914 <__subdf3+0x7b4>
    d828:	0085c83a 	sub	r2,zero,r2
    d82c:	18c02034 	orhi	r3,r3,128
    d830:	01000e04 	movi	r4,56
    d834:	20806e16 	blt	r4,r2,d9f0 <__subdf3+0x890>
    d838:	010007c4 	movi	r4,31
    d83c:	20807716 	blt	r4,r2,da1c <__subdf3+0x8bc>
    d840:	01000804 	movi	r4,32
    d844:	2089c83a 	sub	r4,r4,r2
    d848:	1914983a 	sll	r10,r3,r4
    d84c:	8890d83a 	srl	r8,r17,r2
    d850:	8908983a 	sll	r4,r17,r4
    d854:	1884d83a 	srl	r2,r3,r2
    d858:	5222b03a 	or	r17,r10,r8
    d85c:	2006c03a 	cmpne	r3,r4,zero
    d860:	88e2b03a 	or	r17,r17,r3
    d864:	89a3883a 	add	r17,r17,r6
    d868:	1145883a 	add	r2,r2,r5
    d86c:	898d803a 	cmpltu	r6,r17,r6
    d870:	3087883a 	add	r3,r6,r2
    d874:	4821883a 	mov	r16,r9
    d878:	003ed906 	br	d3e0 <__alt_data_end+0xf800d3e0>
    d87c:	2984b03a 	or	r2,r5,r6
    d880:	10004226 	beq	r2,zero,d98c <__subdf3+0x82c>
    d884:	1808d0fa 	srli	r4,r3,3
    d888:	8822d0fa 	srli	r17,r17,3
    d88c:	1806977a 	slli	r3,r3,29
    d890:	2080022c 	andhi	r2,r4,8
    d894:	1c62b03a 	or	r17,r3,r17
    d898:	10000826 	beq	r2,zero,d8bc <__subdf3+0x75c>
    d89c:	2812d0fa 	srli	r9,r5,3
    d8a0:	4880022c 	andhi	r2,r9,8
    d8a4:	1000051e 	bne	r2,zero,d8bc <__subdf3+0x75c>
    d8a8:	300cd0fa 	srli	r6,r6,3
    d8ac:	2804977a 	slli	r2,r5,29
    d8b0:	4809883a 	mov	r4,r9
    d8b4:	3825883a 	mov	r18,r7
    d8b8:	11a2b03a 	or	r17,r2,r6
    d8bc:	8806d77a 	srli	r3,r17,29
    d8c0:	200890fa 	slli	r4,r4,3
    d8c4:	882290fa 	slli	r17,r17,3
    d8c8:	0401ffc4 	movi	r16,2047
    d8cc:	1906b03a 	or	r3,r3,r4
    d8d0:	003e4406 	br	d1e4 <__alt_data_end+0xf800d1e4>
    d8d4:	2984b03a 	or	r2,r5,r6
    d8d8:	103e4226 	beq	r2,zero,d1e4 <__alt_data_end+0xf800d1e4>
    d8dc:	8989c83a 	sub	r4,r17,r6
    d8e0:	8911803a 	cmpltu	r8,r17,r4
    d8e4:	1945c83a 	sub	r2,r3,r5
    d8e8:	1205c83a 	sub	r2,r2,r8
    d8ec:	1200202c 	andhi	r8,r2,128
    d8f0:	403e9a26 	beq	r8,zero,d35c <__alt_data_end+0xf800d35c>
    d8f4:	3463c83a 	sub	r17,r6,r17
    d8f8:	28c5c83a 	sub	r2,r5,r3
    d8fc:	344d803a 	cmpltu	r6,r6,r17
    d900:	1187c83a 	sub	r3,r2,r6
    d904:	3825883a 	mov	r18,r7
    d908:	003e3606 	br	d1e4 <__alt_data_end+0xf800d1e4>
    d90c:	0101ffc4 	movi	r4,2047
    d910:	493fc71e 	bne	r9,r4,d830 <__alt_data_end+0xf800d830>
    d914:	2807883a 	mov	r3,r5
    d918:	3023883a 	mov	r17,r6
    d91c:	4821883a 	mov	r16,r9
    d920:	003e3006 	br	d1e4 <__alt_data_end+0xf800d1e4>
    d924:	10003626 	beq	r2,zero,da00 <__subdf3+0x8a0>
    d928:	2984b03a 	or	r2,r5,r6
    d92c:	10001726 	beq	r2,zero,d98c <__subdf3+0x82c>
    d930:	1808d0fa 	srli	r4,r3,3
    d934:	8822d0fa 	srli	r17,r17,3
    d938:	1806977a 	slli	r3,r3,29
    d93c:	2080022c 	andhi	r2,r4,8
    d940:	1c62b03a 	or	r17,r3,r17
    d944:	10000726 	beq	r2,zero,d964 <__subdf3+0x804>
    d948:	2812d0fa 	srli	r9,r5,3
    d94c:	4880022c 	andhi	r2,r9,8
    d950:	1000041e 	bne	r2,zero,d964 <__subdf3+0x804>
    d954:	300cd0fa 	srli	r6,r6,3
    d958:	2804977a 	slli	r2,r5,29
    d95c:	4809883a 	mov	r4,r9
    d960:	11a2b03a 	or	r17,r2,r6
    d964:	8806d77a 	srli	r3,r17,29
    d968:	200890fa 	slli	r4,r4,3
    d96c:	882290fa 	slli	r17,r17,3
    d970:	3825883a 	mov	r18,r7
    d974:	1906b03a 	or	r3,r3,r4
    d978:	0401ffc4 	movi	r16,2047
    d97c:	003e1906 	br	d1e4 <__alt_data_end+0xf800d1e4>
    d980:	000b883a 	mov	r5,zero
    d984:	0005883a 	mov	r2,zero
    d988:	003e2e06 	br	d244 <__alt_data_end+0xf800d244>
    d98c:	0401ffc4 	movi	r16,2047
    d990:	003e1406 	br	d1e4 <__alt_data_end+0xf800d1e4>
    d994:	0005883a 	mov	r2,zero
    d998:	003f7506 	br	d770 <__alt_data_end+0xf800d770>
    d99c:	0005883a 	mov	r2,zero
    d9a0:	0009883a 	mov	r4,zero
    d9a4:	003e7806 	br	d388 <__alt_data_end+0xf800d388>
    d9a8:	123ff804 	addi	r8,r2,-32
    d9ac:	01000804 	movi	r4,32
    d9b0:	1a10d83a 	srl	r8,r3,r8
    d9b4:	11002526 	beq	r2,r4,da4c <__subdf3+0x8ec>
    d9b8:	01001004 	movi	r4,64
    d9bc:	2085c83a 	sub	r2,r4,r2
    d9c0:	1884983a 	sll	r2,r3,r2
    d9c4:	1444b03a 	or	r2,r2,r17
    d9c8:	1004c03a 	cmpne	r2,r2,zero
    d9cc:	40a2b03a 	or	r17,r8,r2
    d9d0:	0005883a 	mov	r2,zero
    d9d4:	003f1606 	br	d630 <__alt_data_end+0xf800d630>
    d9d8:	02000434 	movhi	r8,16
    d9dc:	0009883a 	mov	r4,zero
    d9e0:	423fffc4 	addi	r8,r8,-1
    d9e4:	00bfffc4 	movi	r2,-1
    d9e8:	0401ffc4 	movi	r16,2047
    d9ec:	003e6606 	br	d388 <__alt_data_end+0xf800d388>
    d9f0:	1c62b03a 	or	r17,r3,r17
    d9f4:	8822c03a 	cmpne	r17,r17,zero
    d9f8:	0005883a 	mov	r2,zero
    d9fc:	003f9906 	br	d864 <__alt_data_end+0xf800d864>
    da00:	2807883a 	mov	r3,r5
    da04:	3023883a 	mov	r17,r6
    da08:	0401ffc4 	movi	r16,2047
    da0c:	003df506 	br	d1e4 <__alt_data_end+0xf800d1e4>
    da10:	2807883a 	mov	r3,r5
    da14:	3023883a 	mov	r17,r6
    da18:	003df206 	br	d1e4 <__alt_data_end+0xf800d1e4>
    da1c:	123ff804 	addi	r8,r2,-32
    da20:	01000804 	movi	r4,32
    da24:	1a10d83a 	srl	r8,r3,r8
    da28:	11000a26 	beq	r2,r4,da54 <__subdf3+0x8f4>
    da2c:	01001004 	movi	r4,64
    da30:	2085c83a 	sub	r2,r4,r2
    da34:	1884983a 	sll	r2,r3,r2
    da38:	1444b03a 	or	r2,r2,r17
    da3c:	1004c03a 	cmpne	r2,r2,zero
    da40:	40a2b03a 	or	r17,r8,r2
    da44:	0005883a 	mov	r2,zero
    da48:	003f8606 	br	d864 <__alt_data_end+0xf800d864>
    da4c:	0005883a 	mov	r2,zero
    da50:	003fdc06 	br	d9c4 <__alt_data_end+0xf800d9c4>
    da54:	0005883a 	mov	r2,zero
    da58:	003ff706 	br	da38 <__alt_data_end+0xf800da38>

0000da5c <__fixdfsi>:
    da5c:	280cd53a 	srli	r6,r5,20
    da60:	00c00434 	movhi	r3,16
    da64:	18ffffc4 	addi	r3,r3,-1
    da68:	3181ffcc 	andi	r6,r6,2047
    da6c:	01c0ff84 	movi	r7,1022
    da70:	28c6703a 	and	r3,r5,r3
    da74:	280ad7fa 	srli	r5,r5,31
    da78:	3980120e 	bge	r7,r6,dac4 <__fixdfsi+0x68>
    da7c:	00810744 	movi	r2,1053
    da80:	11800c16 	blt	r2,r6,dab4 <__fixdfsi+0x58>
    da84:	00810cc4 	movi	r2,1075
    da88:	1185c83a 	sub	r2,r2,r6
    da8c:	01c007c4 	movi	r7,31
    da90:	18c00434 	orhi	r3,r3,16
    da94:	38800d16 	blt	r7,r2,dacc <__fixdfsi+0x70>
    da98:	31befb44 	addi	r6,r6,-1043
    da9c:	2084d83a 	srl	r2,r4,r2
    daa0:	1986983a 	sll	r3,r3,r6
    daa4:	1884b03a 	or	r2,r3,r2
    daa8:	28000726 	beq	r5,zero,dac8 <__fixdfsi+0x6c>
    daac:	0085c83a 	sub	r2,zero,r2
    dab0:	f800283a 	ret
    dab4:	00a00034 	movhi	r2,32768
    dab8:	10bfffc4 	addi	r2,r2,-1
    dabc:	2885883a 	add	r2,r5,r2
    dac0:	f800283a 	ret
    dac4:	0005883a 	mov	r2,zero
    dac8:	f800283a 	ret
    dacc:	008104c4 	movi	r2,1043
    dad0:	1185c83a 	sub	r2,r2,r6
    dad4:	1884d83a 	srl	r2,r3,r2
    dad8:	003ff306 	br	daa8 <__alt_data_end+0xf800daa8>

0000dadc <__floatunsidf>:
    dadc:	defffe04 	addi	sp,sp,-8
    dae0:	dc000015 	stw	r16,0(sp)
    dae4:	dfc00115 	stw	ra,4(sp)
    dae8:	2021883a 	mov	r16,r4
    daec:	20002226 	beq	r4,zero,db78 <__floatunsidf+0x9c>
    daf0:	000db840 	call	db84 <__clzsi2>
    daf4:	01010784 	movi	r4,1054
    daf8:	2089c83a 	sub	r4,r4,r2
    dafc:	01810cc4 	movi	r6,1075
    db00:	310dc83a 	sub	r6,r6,r4
    db04:	00c007c4 	movi	r3,31
    db08:	1980120e 	bge	r3,r6,db54 <__floatunsidf+0x78>
    db0c:	00c104c4 	movi	r3,1043
    db10:	1907c83a 	sub	r3,r3,r4
    db14:	80ca983a 	sll	r5,r16,r3
    db18:	00800434 	movhi	r2,16
    db1c:	10bfffc4 	addi	r2,r2,-1
    db20:	2101ffcc 	andi	r4,r4,2047
    db24:	0021883a 	mov	r16,zero
    db28:	288a703a 	and	r5,r5,r2
    db2c:	2008953a 	slli	r4,r4,20
    db30:	00c00434 	movhi	r3,16
    db34:	18ffffc4 	addi	r3,r3,-1
    db38:	28c6703a 	and	r3,r5,r3
    db3c:	8005883a 	mov	r2,r16
    db40:	1906b03a 	or	r3,r3,r4
    db44:	dfc00117 	ldw	ra,4(sp)
    db48:	dc000017 	ldw	r16,0(sp)
    db4c:	dec00204 	addi	sp,sp,8
    db50:	f800283a 	ret
    db54:	00c002c4 	movi	r3,11
    db58:	188bc83a 	sub	r5,r3,r2
    db5c:	814ad83a 	srl	r5,r16,r5
    db60:	00c00434 	movhi	r3,16
    db64:	18ffffc4 	addi	r3,r3,-1
    db68:	81a0983a 	sll	r16,r16,r6
    db6c:	2101ffcc 	andi	r4,r4,2047
    db70:	28ca703a 	and	r5,r5,r3
    db74:	003fed06 	br	db2c <__alt_data_end+0xf800db2c>
    db78:	0009883a 	mov	r4,zero
    db7c:	000b883a 	mov	r5,zero
    db80:	003fea06 	br	db2c <__alt_data_end+0xf800db2c>

0000db84 <__clzsi2>:
    db84:	00bfffd4 	movui	r2,65535
    db88:	11000536 	bltu	r2,r4,dba0 <__clzsi2+0x1c>
    db8c:	00803fc4 	movi	r2,255
    db90:	11000f36 	bltu	r2,r4,dbd0 <__clzsi2+0x4c>
    db94:	00800804 	movi	r2,32
    db98:	0007883a 	mov	r3,zero
    db9c:	00000506 	br	dbb4 <__clzsi2+0x30>
    dba0:	00804034 	movhi	r2,256
    dba4:	10bfffc4 	addi	r2,r2,-1
    dba8:	11000c2e 	bgeu	r2,r4,dbdc <__clzsi2+0x58>
    dbac:	00800204 	movi	r2,8
    dbb0:	00c00604 	movi	r3,24
    dbb4:	20c8d83a 	srl	r4,r4,r3
    dbb8:	00c000b4 	movhi	r3,2
    dbbc:	18f23e04 	addi	r3,r3,-14088
    dbc0:	1909883a 	add	r4,r3,r4
    dbc4:	20c00003 	ldbu	r3,0(r4)
    dbc8:	10c5c83a 	sub	r2,r2,r3
    dbcc:	f800283a 	ret
    dbd0:	00800604 	movi	r2,24
    dbd4:	00c00204 	movi	r3,8
    dbd8:	003ff606 	br	dbb4 <__alt_data_end+0xf800dbb4>
    dbdc:	00800404 	movi	r2,16
    dbe0:	1007883a 	mov	r3,r2
    dbe4:	003ff306 	br	dbb4 <__alt_data_end+0xf800dbb4>

0000dbe8 <clock>:
    dbe8:	008000b4 	movhi	r2,2
    dbec:	10b9c804 	addi	r2,r2,-6368
    dbf0:	11000017 	ldw	r4,0(r2)
    dbf4:	defffb04 	addi	sp,sp,-20
    dbf8:	d80b883a 	mov	r5,sp
    dbfc:	dfc00415 	stw	ra,16(sp)
    dc00:	000e7100 	call	e710 <_times_r>
    dc04:	00ffffc4 	movi	r3,-1
    dc08:	10c00726 	beq	r2,r3,dc28 <clock+0x40>
    dc0c:	d8c00017 	ldw	r3,0(sp)
    dc10:	d8800117 	ldw	r2,4(sp)
    dc14:	1885883a 	add	r2,r3,r2
    dc18:	d8c00217 	ldw	r3,8(sp)
    dc1c:	10c7883a 	add	r3,r2,r3
    dc20:	d8800317 	ldw	r2,12(sp)
    dc24:	1885883a 	add	r2,r3,r2
    dc28:	dfc00417 	ldw	ra,16(sp)
    dc2c:	dec00504 	addi	sp,sp,20
    dc30:	f800283a 	ret

0000dc34 <malloc>:
    dc34:	008000b4 	movhi	r2,2
    dc38:	10b9c804 	addi	r2,r2,-6368
    dc3c:	200b883a 	mov	r5,r4
    dc40:	11000017 	ldw	r4,0(r2)
    dc44:	000dc5c1 	jmpi	dc5c <_malloc_r>

0000dc48 <free>:
    dc48:	008000b4 	movhi	r2,2
    dc4c:	10b9c804 	addi	r2,r2,-6368
    dc50:	200b883a 	mov	r5,r4
    dc54:	11000017 	ldw	r4,0(r2)
    dc58:	0012c4c1 	jmpi	12c4c <_free_r>

0000dc5c <_malloc_r>:
    dc5c:	defff504 	addi	sp,sp,-44
    dc60:	dc800315 	stw	r18,12(sp)
    dc64:	dfc00a15 	stw	ra,40(sp)
    dc68:	df000915 	stw	fp,36(sp)
    dc6c:	ddc00815 	stw	r23,32(sp)
    dc70:	dd800715 	stw	r22,28(sp)
    dc74:	dd400615 	stw	r21,24(sp)
    dc78:	dd000515 	stw	r20,20(sp)
    dc7c:	dcc00415 	stw	r19,16(sp)
    dc80:	dc400215 	stw	r17,8(sp)
    dc84:	dc000115 	stw	r16,4(sp)
    dc88:	288002c4 	addi	r2,r5,11
    dc8c:	00c00584 	movi	r3,22
    dc90:	2025883a 	mov	r18,r4
    dc94:	18807f2e 	bgeu	r3,r2,de94 <_malloc_r+0x238>
    dc98:	047ffe04 	movi	r17,-8
    dc9c:	1462703a 	and	r17,r2,r17
    dca0:	8800a316 	blt	r17,zero,df30 <_malloc_r+0x2d4>
    dca4:	8940a236 	bltu	r17,r5,df30 <_malloc_r+0x2d4>
    dca8:	0019bb80 	call	19bb8 <__malloc_lock>
    dcac:	00807dc4 	movi	r2,503
    dcb0:	1441e92e 	bgeu	r2,r17,e458 <_malloc_r+0x7fc>
    dcb4:	8804d27a 	srli	r2,r17,9
    dcb8:	1000a126 	beq	r2,zero,df40 <_malloc_r+0x2e4>
    dcbc:	00c00104 	movi	r3,4
    dcc0:	18811e36 	bltu	r3,r2,e13c <_malloc_r+0x4e0>
    dcc4:	8804d1ba 	srli	r2,r17,6
    dcc8:	12000e44 	addi	r8,r2,57
    dccc:	11c00e04 	addi	r7,r2,56
    dcd0:	4209883a 	add	r4,r8,r8
    dcd4:	04c000b4 	movhi	r19,2
    dcd8:	2109883a 	add	r4,r4,r4
    dcdc:	9cf41904 	addi	r19,r19,-12188
    dce0:	2109883a 	add	r4,r4,r4
    dce4:	9909883a 	add	r4,r19,r4
    dce8:	24000117 	ldw	r16,4(r4)
    dcec:	213ffe04 	addi	r4,r4,-8
    dcf0:	24009726 	beq	r4,r16,df50 <_malloc_r+0x2f4>
    dcf4:	80800117 	ldw	r2,4(r16)
    dcf8:	01bfff04 	movi	r6,-4
    dcfc:	014003c4 	movi	r5,15
    dd00:	1184703a 	and	r2,r2,r6
    dd04:	1447c83a 	sub	r3,r2,r17
    dd08:	28c00716 	blt	r5,r3,dd28 <_malloc_r+0xcc>
    dd0c:	1800920e 	bge	r3,zero,df58 <_malloc_r+0x2fc>
    dd10:	84000317 	ldw	r16,12(r16)
    dd14:	24008e26 	beq	r4,r16,df50 <_malloc_r+0x2f4>
    dd18:	80800117 	ldw	r2,4(r16)
    dd1c:	1184703a 	and	r2,r2,r6
    dd20:	1447c83a 	sub	r3,r2,r17
    dd24:	28fff90e 	bge	r5,r3,dd0c <__alt_data_end+0xf800dd0c>
    dd28:	3809883a 	mov	r4,r7
    dd2c:	018000b4 	movhi	r6,2
    dd30:	9c000417 	ldw	r16,16(r19)
    dd34:	31b41904 	addi	r6,r6,-12188
    dd38:	32000204 	addi	r8,r6,8
    dd3c:	82013426 	beq	r16,r8,e210 <_malloc_r+0x5b4>
    dd40:	80c00117 	ldw	r3,4(r16)
    dd44:	00bfff04 	movi	r2,-4
    dd48:	188e703a 	and	r7,r3,r2
    dd4c:	3c45c83a 	sub	r2,r7,r17
    dd50:	00c003c4 	movi	r3,15
    dd54:	18811f16 	blt	r3,r2,e1d4 <_malloc_r+0x578>
    dd58:	32000515 	stw	r8,20(r6)
    dd5c:	32000415 	stw	r8,16(r6)
    dd60:	10007f0e 	bge	r2,zero,df60 <_malloc_r+0x304>
    dd64:	00807fc4 	movi	r2,511
    dd68:	11c0fd36 	bltu	r2,r7,e160 <_malloc_r+0x504>
    dd6c:	3806d0fa 	srli	r3,r7,3
    dd70:	01c00044 	movi	r7,1
    dd74:	30800117 	ldw	r2,4(r6)
    dd78:	19400044 	addi	r5,r3,1
    dd7c:	294b883a 	add	r5,r5,r5
    dd80:	1807d0ba 	srai	r3,r3,2
    dd84:	294b883a 	add	r5,r5,r5
    dd88:	294b883a 	add	r5,r5,r5
    dd8c:	298b883a 	add	r5,r5,r6
    dd90:	38c6983a 	sll	r3,r7,r3
    dd94:	29c00017 	ldw	r7,0(r5)
    dd98:	2a7ffe04 	addi	r9,r5,-8
    dd9c:	1886b03a 	or	r3,r3,r2
    dda0:	82400315 	stw	r9,12(r16)
    dda4:	81c00215 	stw	r7,8(r16)
    dda8:	30c00115 	stw	r3,4(r6)
    ddac:	2c000015 	stw	r16,0(r5)
    ddb0:	3c000315 	stw	r16,12(r7)
    ddb4:	2005d0ba 	srai	r2,r4,2
    ddb8:	01400044 	movi	r5,1
    ddbc:	288a983a 	sll	r5,r5,r2
    ddc0:	19406f36 	bltu	r3,r5,df80 <_malloc_r+0x324>
    ddc4:	28c4703a 	and	r2,r5,r3
    ddc8:	10000a1e 	bne	r2,zero,ddf4 <_malloc_r+0x198>
    ddcc:	00bfff04 	movi	r2,-4
    ddd0:	294b883a 	add	r5,r5,r5
    ddd4:	2088703a 	and	r4,r4,r2
    ddd8:	28c4703a 	and	r2,r5,r3
    dddc:	21000104 	addi	r4,r4,4
    dde0:	1000041e 	bne	r2,zero,ddf4 <_malloc_r+0x198>
    dde4:	294b883a 	add	r5,r5,r5
    dde8:	28c4703a 	and	r2,r5,r3
    ddec:	21000104 	addi	r4,r4,4
    ddf0:	103ffc26 	beq	r2,zero,dde4 <__alt_data_end+0xf800dde4>
    ddf4:	02bfff04 	movi	r10,-4
    ddf8:	024003c4 	movi	r9,15
    ddfc:	21800044 	addi	r6,r4,1
    de00:	318d883a 	add	r6,r6,r6
    de04:	318d883a 	add	r6,r6,r6
    de08:	318d883a 	add	r6,r6,r6
    de0c:	998d883a 	add	r6,r19,r6
    de10:	333ffe04 	addi	r12,r6,-8
    de14:	2017883a 	mov	r11,r4
    de18:	31800104 	addi	r6,r6,4
    de1c:	34000017 	ldw	r16,0(r6)
    de20:	31fffd04 	addi	r7,r6,-12
    de24:	81c0041e 	bne	r16,r7,de38 <_malloc_r+0x1dc>
    de28:	0000fb06 	br	e218 <_malloc_r+0x5bc>
    de2c:	1801030e 	bge	r3,zero,e23c <_malloc_r+0x5e0>
    de30:	84000317 	ldw	r16,12(r16)
    de34:	81c0f826 	beq	r16,r7,e218 <_malloc_r+0x5bc>
    de38:	80800117 	ldw	r2,4(r16)
    de3c:	1284703a 	and	r2,r2,r10
    de40:	1447c83a 	sub	r3,r2,r17
    de44:	48fff90e 	bge	r9,r3,de2c <__alt_data_end+0xf800de2c>
    de48:	80800317 	ldw	r2,12(r16)
    de4c:	81000217 	ldw	r4,8(r16)
    de50:	89400054 	ori	r5,r17,1
    de54:	81400115 	stw	r5,4(r16)
    de58:	20800315 	stw	r2,12(r4)
    de5c:	11000215 	stw	r4,8(r2)
    de60:	8463883a 	add	r17,r16,r17
    de64:	9c400515 	stw	r17,20(r19)
    de68:	9c400415 	stw	r17,16(r19)
    de6c:	18800054 	ori	r2,r3,1
    de70:	88800115 	stw	r2,4(r17)
    de74:	8a000315 	stw	r8,12(r17)
    de78:	8a000215 	stw	r8,8(r17)
    de7c:	88e3883a 	add	r17,r17,r3
    de80:	88c00015 	stw	r3,0(r17)
    de84:	9009883a 	mov	r4,r18
    de88:	0019bdc0 	call	19bdc <__malloc_unlock>
    de8c:	80800204 	addi	r2,r16,8
    de90:	00001b06 	br	df00 <_malloc_r+0x2a4>
    de94:	04400404 	movi	r17,16
    de98:	89402536 	bltu	r17,r5,df30 <_malloc_r+0x2d4>
    de9c:	0019bb80 	call	19bb8 <__malloc_lock>
    dea0:	00800184 	movi	r2,6
    dea4:	01000084 	movi	r4,2
    dea8:	04c000b4 	movhi	r19,2
    deac:	1085883a 	add	r2,r2,r2
    deb0:	9cf41904 	addi	r19,r19,-12188
    deb4:	1085883a 	add	r2,r2,r2
    deb8:	9885883a 	add	r2,r19,r2
    debc:	14000117 	ldw	r16,4(r2)
    dec0:	10fffe04 	addi	r3,r2,-8
    dec4:	80c0d926 	beq	r16,r3,e22c <_malloc_r+0x5d0>
    dec8:	80c00117 	ldw	r3,4(r16)
    decc:	81000317 	ldw	r4,12(r16)
    ded0:	00bfff04 	movi	r2,-4
    ded4:	1884703a 	and	r2,r3,r2
    ded8:	81400217 	ldw	r5,8(r16)
    dedc:	8085883a 	add	r2,r16,r2
    dee0:	10c00117 	ldw	r3,4(r2)
    dee4:	29000315 	stw	r4,12(r5)
    dee8:	21400215 	stw	r5,8(r4)
    deec:	18c00054 	ori	r3,r3,1
    def0:	10c00115 	stw	r3,4(r2)
    def4:	9009883a 	mov	r4,r18
    def8:	0019bdc0 	call	19bdc <__malloc_unlock>
    defc:	80800204 	addi	r2,r16,8
    df00:	dfc00a17 	ldw	ra,40(sp)
    df04:	df000917 	ldw	fp,36(sp)
    df08:	ddc00817 	ldw	r23,32(sp)
    df0c:	dd800717 	ldw	r22,28(sp)
    df10:	dd400617 	ldw	r21,24(sp)
    df14:	dd000517 	ldw	r20,20(sp)
    df18:	dcc00417 	ldw	r19,16(sp)
    df1c:	dc800317 	ldw	r18,12(sp)
    df20:	dc400217 	ldw	r17,8(sp)
    df24:	dc000117 	ldw	r16,4(sp)
    df28:	dec00b04 	addi	sp,sp,44
    df2c:	f800283a 	ret
    df30:	00800304 	movi	r2,12
    df34:	90800015 	stw	r2,0(r18)
    df38:	0005883a 	mov	r2,zero
    df3c:	003ff006 	br	df00 <__alt_data_end+0xf800df00>
    df40:	01002004 	movi	r4,128
    df44:	02001004 	movi	r8,64
    df48:	01c00fc4 	movi	r7,63
    df4c:	003f6106 	br	dcd4 <__alt_data_end+0xf800dcd4>
    df50:	4009883a 	mov	r4,r8
    df54:	003f7506 	br	dd2c <__alt_data_end+0xf800dd2c>
    df58:	81000317 	ldw	r4,12(r16)
    df5c:	003fde06 	br	ded8 <__alt_data_end+0xf800ded8>
    df60:	81c5883a 	add	r2,r16,r7
    df64:	11400117 	ldw	r5,4(r2)
    df68:	9009883a 	mov	r4,r18
    df6c:	29400054 	ori	r5,r5,1
    df70:	11400115 	stw	r5,4(r2)
    df74:	0019bdc0 	call	19bdc <__malloc_unlock>
    df78:	80800204 	addi	r2,r16,8
    df7c:	003fe006 	br	df00 <__alt_data_end+0xf800df00>
    df80:	9c000217 	ldw	r16,8(r19)
    df84:	00bfff04 	movi	r2,-4
    df88:	85800117 	ldw	r22,4(r16)
    df8c:	b0ac703a 	and	r22,r22,r2
    df90:	b4400336 	bltu	r22,r17,dfa0 <_malloc_r+0x344>
    df94:	b445c83a 	sub	r2,r22,r17
    df98:	00c003c4 	movi	r3,15
    df9c:	18805d16 	blt	r3,r2,e114 <_malloc_r+0x4b8>
    dfa0:	05c000b4 	movhi	r23,2
    dfa4:	008000b4 	movhi	r2,2
    dfa8:	1080be04 	addi	r2,r2,760
    dfac:	bdf9c904 	addi	r23,r23,-6364
    dfb0:	15400017 	ldw	r21,0(r2)
    dfb4:	b8c00017 	ldw	r3,0(r23)
    dfb8:	00bfffc4 	movi	r2,-1
    dfbc:	858d883a 	add	r6,r16,r22
    dfc0:	8d6b883a 	add	r21,r17,r21
    dfc4:	1880ea26 	beq	r3,r2,e370 <_malloc_r+0x714>
    dfc8:	ad4403c4 	addi	r21,r21,4111
    dfcc:	00bc0004 	movi	r2,-4096
    dfd0:	a8aa703a 	and	r21,r21,r2
    dfd4:	a80b883a 	mov	r5,r21
    dfd8:	9009883a 	mov	r4,r18
    dfdc:	d9800015 	stw	r6,0(sp)
    dfe0:	000e6240 	call	e624 <_sbrk_r>
    dfe4:	1029883a 	mov	r20,r2
    dfe8:	00bfffc4 	movi	r2,-1
    dfec:	d9800017 	ldw	r6,0(sp)
    dff0:	a080e826 	beq	r20,r2,e394 <_malloc_r+0x738>
    dff4:	a180a636 	bltu	r20,r6,e290 <_malloc_r+0x634>
    dff8:	070000b4 	movhi	fp,2
    dffc:	e700ca04 	addi	fp,fp,808
    e000:	e0800017 	ldw	r2,0(fp)
    e004:	a887883a 	add	r3,r21,r2
    e008:	e0c00015 	stw	r3,0(fp)
    e00c:	3500e626 	beq	r6,r20,e3a8 <_malloc_r+0x74c>
    e010:	b9000017 	ldw	r4,0(r23)
    e014:	00bfffc4 	movi	r2,-1
    e018:	2080ee26 	beq	r4,r2,e3d4 <_malloc_r+0x778>
    e01c:	a185c83a 	sub	r2,r20,r6
    e020:	10c5883a 	add	r2,r2,r3
    e024:	e0800015 	stw	r2,0(fp)
    e028:	a0c001cc 	andi	r3,r20,7
    e02c:	1800bc26 	beq	r3,zero,e320 <_malloc_r+0x6c4>
    e030:	a0e9c83a 	sub	r20,r20,r3
    e034:	00840204 	movi	r2,4104
    e038:	a5000204 	addi	r20,r20,8
    e03c:	10c7c83a 	sub	r3,r2,r3
    e040:	a545883a 	add	r2,r20,r21
    e044:	1083ffcc 	andi	r2,r2,4095
    e048:	18abc83a 	sub	r21,r3,r2
    e04c:	a80b883a 	mov	r5,r21
    e050:	9009883a 	mov	r4,r18
    e054:	000e6240 	call	e624 <_sbrk_r>
    e058:	00ffffc4 	movi	r3,-1
    e05c:	10c0e126 	beq	r2,r3,e3e4 <_malloc_r+0x788>
    e060:	1505c83a 	sub	r2,r2,r20
    e064:	1545883a 	add	r2,r2,r21
    e068:	10800054 	ori	r2,r2,1
    e06c:	e0c00017 	ldw	r3,0(fp)
    e070:	9d000215 	stw	r20,8(r19)
    e074:	a0800115 	stw	r2,4(r20)
    e078:	a8c7883a 	add	r3,r21,r3
    e07c:	e0c00015 	stw	r3,0(fp)
    e080:	84c00e26 	beq	r16,r19,e0bc <_malloc_r+0x460>
    e084:	018003c4 	movi	r6,15
    e088:	3580a72e 	bgeu	r6,r22,e328 <_malloc_r+0x6cc>
    e08c:	81400117 	ldw	r5,4(r16)
    e090:	013ffe04 	movi	r4,-8
    e094:	b0bffd04 	addi	r2,r22,-12
    e098:	1104703a 	and	r2,r2,r4
    e09c:	2900004c 	andi	r4,r5,1
    e0a0:	2088b03a 	or	r4,r4,r2
    e0a4:	81000115 	stw	r4,4(r16)
    e0a8:	01400144 	movi	r5,5
    e0ac:	8089883a 	add	r4,r16,r2
    e0b0:	21400115 	stw	r5,4(r4)
    e0b4:	21400215 	stw	r5,8(r4)
    e0b8:	3080cd36 	bltu	r6,r2,e3f0 <_malloc_r+0x794>
    e0bc:	008000b4 	movhi	r2,2
    e0c0:	1080bd04 	addi	r2,r2,756
    e0c4:	11000017 	ldw	r4,0(r2)
    e0c8:	20c0012e 	bgeu	r4,r3,e0d0 <_malloc_r+0x474>
    e0cc:	10c00015 	stw	r3,0(r2)
    e0d0:	008000b4 	movhi	r2,2
    e0d4:	1080bc04 	addi	r2,r2,752
    e0d8:	11000017 	ldw	r4,0(r2)
    e0dc:	9c000217 	ldw	r16,8(r19)
    e0e0:	20c0012e 	bgeu	r4,r3,e0e8 <_malloc_r+0x48c>
    e0e4:	10c00015 	stw	r3,0(r2)
    e0e8:	80c00117 	ldw	r3,4(r16)
    e0ec:	00bfff04 	movi	r2,-4
    e0f0:	1886703a 	and	r3,r3,r2
    e0f4:	1c45c83a 	sub	r2,r3,r17
    e0f8:	1c400236 	bltu	r3,r17,e104 <_malloc_r+0x4a8>
    e0fc:	00c003c4 	movi	r3,15
    e100:	18800416 	blt	r3,r2,e114 <_malloc_r+0x4b8>
    e104:	9009883a 	mov	r4,r18
    e108:	0019bdc0 	call	19bdc <__malloc_unlock>
    e10c:	0005883a 	mov	r2,zero
    e110:	003f7b06 	br	df00 <__alt_data_end+0xf800df00>
    e114:	88c00054 	ori	r3,r17,1
    e118:	80c00115 	stw	r3,4(r16)
    e11c:	8463883a 	add	r17,r16,r17
    e120:	10800054 	ori	r2,r2,1
    e124:	9c400215 	stw	r17,8(r19)
    e128:	88800115 	stw	r2,4(r17)
    e12c:	9009883a 	mov	r4,r18
    e130:	0019bdc0 	call	19bdc <__malloc_unlock>
    e134:	80800204 	addi	r2,r16,8
    e138:	003f7106 	br	df00 <__alt_data_end+0xf800df00>
    e13c:	00c00504 	movi	r3,20
    e140:	18804a2e 	bgeu	r3,r2,e26c <_malloc_r+0x610>
    e144:	00c01504 	movi	r3,84
    e148:	18806e36 	bltu	r3,r2,e304 <_malloc_r+0x6a8>
    e14c:	8804d33a 	srli	r2,r17,12
    e150:	12001bc4 	addi	r8,r2,111
    e154:	11c01b84 	addi	r7,r2,110
    e158:	4209883a 	add	r4,r8,r8
    e15c:	003edd06 	br	dcd4 <__alt_data_end+0xf800dcd4>
    e160:	3804d27a 	srli	r2,r7,9
    e164:	00c00104 	movi	r3,4
    e168:	1880442e 	bgeu	r3,r2,e27c <_malloc_r+0x620>
    e16c:	00c00504 	movi	r3,20
    e170:	18808136 	bltu	r3,r2,e378 <_malloc_r+0x71c>
    e174:	11401704 	addi	r5,r2,92
    e178:	10c016c4 	addi	r3,r2,91
    e17c:	294b883a 	add	r5,r5,r5
    e180:	294b883a 	add	r5,r5,r5
    e184:	294b883a 	add	r5,r5,r5
    e188:	994b883a 	add	r5,r19,r5
    e18c:	28800017 	ldw	r2,0(r5)
    e190:	018000b4 	movhi	r6,2
    e194:	297ffe04 	addi	r5,r5,-8
    e198:	31b41904 	addi	r6,r6,-12188
    e19c:	28806526 	beq	r5,r2,e334 <_malloc_r+0x6d8>
    e1a0:	01bfff04 	movi	r6,-4
    e1a4:	10c00117 	ldw	r3,4(r2)
    e1a8:	1986703a 	and	r3,r3,r6
    e1ac:	38c0022e 	bgeu	r7,r3,e1b8 <_malloc_r+0x55c>
    e1b0:	10800217 	ldw	r2,8(r2)
    e1b4:	28bffb1e 	bne	r5,r2,e1a4 <__alt_data_end+0xf800e1a4>
    e1b8:	11400317 	ldw	r5,12(r2)
    e1bc:	98c00117 	ldw	r3,4(r19)
    e1c0:	81400315 	stw	r5,12(r16)
    e1c4:	80800215 	stw	r2,8(r16)
    e1c8:	2c000215 	stw	r16,8(r5)
    e1cc:	14000315 	stw	r16,12(r2)
    e1d0:	003ef806 	br	ddb4 <__alt_data_end+0xf800ddb4>
    e1d4:	88c00054 	ori	r3,r17,1
    e1d8:	80c00115 	stw	r3,4(r16)
    e1dc:	8463883a 	add	r17,r16,r17
    e1e0:	34400515 	stw	r17,20(r6)
    e1e4:	34400415 	stw	r17,16(r6)
    e1e8:	10c00054 	ori	r3,r2,1
    e1ec:	8a000315 	stw	r8,12(r17)
    e1f0:	8a000215 	stw	r8,8(r17)
    e1f4:	88c00115 	stw	r3,4(r17)
    e1f8:	88a3883a 	add	r17,r17,r2
    e1fc:	88800015 	stw	r2,0(r17)
    e200:	9009883a 	mov	r4,r18
    e204:	0019bdc0 	call	19bdc <__malloc_unlock>
    e208:	80800204 	addi	r2,r16,8
    e20c:	003f3c06 	br	df00 <__alt_data_end+0xf800df00>
    e210:	30c00117 	ldw	r3,4(r6)
    e214:	003ee706 	br	ddb4 <__alt_data_end+0xf800ddb4>
    e218:	5ac00044 	addi	r11,r11,1
    e21c:	588000cc 	andi	r2,r11,3
    e220:	31800204 	addi	r6,r6,8
    e224:	103efd1e 	bne	r2,zero,de1c <__alt_data_end+0xf800de1c>
    e228:	00002406 	br	e2bc <_malloc_r+0x660>
    e22c:	14000317 	ldw	r16,12(r2)
    e230:	143f251e 	bne	r2,r16,dec8 <__alt_data_end+0xf800dec8>
    e234:	21000084 	addi	r4,r4,2
    e238:	003ebc06 	br	dd2c <__alt_data_end+0xf800dd2c>
    e23c:	8085883a 	add	r2,r16,r2
    e240:	10c00117 	ldw	r3,4(r2)
    e244:	81000317 	ldw	r4,12(r16)
    e248:	81400217 	ldw	r5,8(r16)
    e24c:	18c00054 	ori	r3,r3,1
    e250:	10c00115 	stw	r3,4(r2)
    e254:	29000315 	stw	r4,12(r5)
    e258:	21400215 	stw	r5,8(r4)
    e25c:	9009883a 	mov	r4,r18
    e260:	0019bdc0 	call	19bdc <__malloc_unlock>
    e264:	80800204 	addi	r2,r16,8
    e268:	003f2506 	br	df00 <__alt_data_end+0xf800df00>
    e26c:	12001704 	addi	r8,r2,92
    e270:	11c016c4 	addi	r7,r2,91
    e274:	4209883a 	add	r4,r8,r8
    e278:	003e9606 	br	dcd4 <__alt_data_end+0xf800dcd4>
    e27c:	3804d1ba 	srli	r2,r7,6
    e280:	11400e44 	addi	r5,r2,57
    e284:	10c00e04 	addi	r3,r2,56
    e288:	294b883a 	add	r5,r5,r5
    e28c:	003fbc06 	br	e180 <__alt_data_end+0xf800e180>
    e290:	84ff5926 	beq	r16,r19,dff8 <__alt_data_end+0xf800dff8>
    e294:	008000b4 	movhi	r2,2
    e298:	10b41904 	addi	r2,r2,-12188
    e29c:	14000217 	ldw	r16,8(r2)
    e2a0:	00bfff04 	movi	r2,-4
    e2a4:	80c00117 	ldw	r3,4(r16)
    e2a8:	1886703a 	and	r3,r3,r2
    e2ac:	003f9106 	br	e0f4 <__alt_data_end+0xf800e0f4>
    e2b0:	60800217 	ldw	r2,8(r12)
    e2b4:	213fffc4 	addi	r4,r4,-1
    e2b8:	1300651e 	bne	r2,r12,e450 <_malloc_r+0x7f4>
    e2bc:	208000cc 	andi	r2,r4,3
    e2c0:	633ffe04 	addi	r12,r12,-8
    e2c4:	103ffa1e 	bne	r2,zero,e2b0 <__alt_data_end+0xf800e2b0>
    e2c8:	98800117 	ldw	r2,4(r19)
    e2cc:	0146303a 	nor	r3,zero,r5
    e2d0:	1884703a 	and	r2,r3,r2
    e2d4:	98800115 	stw	r2,4(r19)
    e2d8:	294b883a 	add	r5,r5,r5
    e2dc:	117f2836 	bltu	r2,r5,df80 <__alt_data_end+0xf800df80>
    e2e0:	283f2726 	beq	r5,zero,df80 <__alt_data_end+0xf800df80>
    e2e4:	2886703a 	and	r3,r5,r2
    e2e8:	5809883a 	mov	r4,r11
    e2ec:	183ec31e 	bne	r3,zero,ddfc <__alt_data_end+0xf800ddfc>
    e2f0:	294b883a 	add	r5,r5,r5
    e2f4:	2886703a 	and	r3,r5,r2
    e2f8:	21000104 	addi	r4,r4,4
    e2fc:	183ffc26 	beq	r3,zero,e2f0 <__alt_data_end+0xf800e2f0>
    e300:	003ebe06 	br	ddfc <__alt_data_end+0xf800ddfc>
    e304:	00c05504 	movi	r3,340
    e308:	18801236 	bltu	r3,r2,e354 <_malloc_r+0x6f8>
    e30c:	8804d3fa 	srli	r2,r17,15
    e310:	12001e04 	addi	r8,r2,120
    e314:	11c01dc4 	addi	r7,r2,119
    e318:	4209883a 	add	r4,r8,r8
    e31c:	003e6d06 	br	dcd4 <__alt_data_end+0xf800dcd4>
    e320:	00c40004 	movi	r3,4096
    e324:	003f4606 	br	e040 <__alt_data_end+0xf800e040>
    e328:	00800044 	movi	r2,1
    e32c:	a0800115 	stw	r2,4(r20)
    e330:	003f7406 	br	e104 <__alt_data_end+0xf800e104>
    e334:	1805d0ba 	srai	r2,r3,2
    e338:	01c00044 	movi	r7,1
    e33c:	30c00117 	ldw	r3,4(r6)
    e340:	388e983a 	sll	r7,r7,r2
    e344:	2805883a 	mov	r2,r5
    e348:	38c6b03a 	or	r3,r7,r3
    e34c:	30c00115 	stw	r3,4(r6)
    e350:	003f9b06 	br	e1c0 <__alt_data_end+0xf800e1c0>
    e354:	00c15504 	movi	r3,1364
    e358:	18801a36 	bltu	r3,r2,e3c4 <_malloc_r+0x768>
    e35c:	8804d4ba 	srli	r2,r17,18
    e360:	12001f44 	addi	r8,r2,125
    e364:	11c01f04 	addi	r7,r2,124
    e368:	4209883a 	add	r4,r8,r8
    e36c:	003e5906 	br	dcd4 <__alt_data_end+0xf800dcd4>
    e370:	ad400404 	addi	r21,r21,16
    e374:	003f1706 	br	dfd4 <__alt_data_end+0xf800dfd4>
    e378:	00c01504 	movi	r3,84
    e37c:	18802336 	bltu	r3,r2,e40c <_malloc_r+0x7b0>
    e380:	3804d33a 	srli	r2,r7,12
    e384:	11401bc4 	addi	r5,r2,111
    e388:	10c01b84 	addi	r3,r2,110
    e38c:	294b883a 	add	r5,r5,r5
    e390:	003f7b06 	br	e180 <__alt_data_end+0xf800e180>
    e394:	9c000217 	ldw	r16,8(r19)
    e398:	00bfff04 	movi	r2,-4
    e39c:	80c00117 	ldw	r3,4(r16)
    e3a0:	1886703a 	and	r3,r3,r2
    e3a4:	003f5306 	br	e0f4 <__alt_data_end+0xf800e0f4>
    e3a8:	3083ffcc 	andi	r2,r6,4095
    e3ac:	103f181e 	bne	r2,zero,e010 <__alt_data_end+0xf800e010>
    e3b0:	99000217 	ldw	r4,8(r19)
    e3b4:	b545883a 	add	r2,r22,r21
    e3b8:	10800054 	ori	r2,r2,1
    e3bc:	20800115 	stw	r2,4(r4)
    e3c0:	003f3e06 	br	e0bc <__alt_data_end+0xf800e0bc>
    e3c4:	01003f84 	movi	r4,254
    e3c8:	02001fc4 	movi	r8,127
    e3cc:	01c01f84 	movi	r7,126
    e3d0:	003e4006 	br	dcd4 <__alt_data_end+0xf800dcd4>
    e3d4:	008000b4 	movhi	r2,2
    e3d8:	10b9c904 	addi	r2,r2,-6364
    e3dc:	15000015 	stw	r20,0(r2)
    e3e0:	003f1106 	br	e028 <__alt_data_end+0xf800e028>
    e3e4:	00800044 	movi	r2,1
    e3e8:	002b883a 	mov	r21,zero
    e3ec:	003f1f06 	br	e06c <__alt_data_end+0xf800e06c>
    e3f0:	81400204 	addi	r5,r16,8
    e3f4:	9009883a 	mov	r4,r18
    e3f8:	0012c4c0 	call	12c4c <_free_r>
    e3fc:	008000b4 	movhi	r2,2
    e400:	1080ca04 	addi	r2,r2,808
    e404:	10c00017 	ldw	r3,0(r2)
    e408:	003f2c06 	br	e0bc <__alt_data_end+0xf800e0bc>
    e40c:	00c05504 	movi	r3,340
    e410:	18800536 	bltu	r3,r2,e428 <_malloc_r+0x7cc>
    e414:	3804d3fa 	srli	r2,r7,15
    e418:	11401e04 	addi	r5,r2,120
    e41c:	10c01dc4 	addi	r3,r2,119
    e420:	294b883a 	add	r5,r5,r5
    e424:	003f5606 	br	e180 <__alt_data_end+0xf800e180>
    e428:	00c15504 	movi	r3,1364
    e42c:	18800536 	bltu	r3,r2,e444 <_malloc_r+0x7e8>
    e430:	3804d4ba 	srli	r2,r7,18
    e434:	11401f44 	addi	r5,r2,125
    e438:	10c01f04 	addi	r3,r2,124
    e43c:	294b883a 	add	r5,r5,r5
    e440:	003f4f06 	br	e180 <__alt_data_end+0xf800e180>
    e444:	01403f84 	movi	r5,254
    e448:	00c01f84 	movi	r3,126
    e44c:	003f4c06 	br	e180 <__alt_data_end+0xf800e180>
    e450:	98800117 	ldw	r2,4(r19)
    e454:	003fa006 	br	e2d8 <__alt_data_end+0xf800e2d8>
    e458:	8808d0fa 	srli	r4,r17,3
    e45c:	20800044 	addi	r2,r4,1
    e460:	1085883a 	add	r2,r2,r2
    e464:	003e9006 	br	dea8 <__alt_data_end+0xf800dea8>

0000e468 <_printf_r>:
    e468:	defffd04 	addi	sp,sp,-12
    e46c:	2805883a 	mov	r2,r5
    e470:	dfc00015 	stw	ra,0(sp)
    e474:	d9800115 	stw	r6,4(sp)
    e478:	d9c00215 	stw	r7,8(sp)
    e47c:	21400217 	ldw	r5,8(r4)
    e480:	d9c00104 	addi	r7,sp,4
    e484:	100d883a 	mov	r6,r2
    e488:	000e7180 	call	e718 <___vfprintf_internal_r>
    e48c:	dfc00017 	ldw	ra,0(sp)
    e490:	dec00304 	addi	sp,sp,12
    e494:	f800283a 	ret

0000e498 <printf>:
    e498:	defffc04 	addi	sp,sp,-16
    e49c:	dfc00015 	stw	ra,0(sp)
    e4a0:	d9400115 	stw	r5,4(sp)
    e4a4:	d9800215 	stw	r6,8(sp)
    e4a8:	d9c00315 	stw	r7,12(sp)
    e4ac:	008000b4 	movhi	r2,2
    e4b0:	10b9c804 	addi	r2,r2,-6368
    e4b4:	10800017 	ldw	r2,0(r2)
    e4b8:	200b883a 	mov	r5,r4
    e4bc:	d9800104 	addi	r6,sp,4
    e4c0:	11000217 	ldw	r4,8(r2)
    e4c4:	00109f40 	call	109f4 <__vfprintf_internal>
    e4c8:	dfc00017 	ldw	ra,0(sp)
    e4cc:	dec00404 	addi	sp,sp,16
    e4d0:	f800283a 	ret

0000e4d4 <_puts_r>:
    e4d4:	defff604 	addi	sp,sp,-40
    e4d8:	dc000715 	stw	r16,28(sp)
    e4dc:	2021883a 	mov	r16,r4
    e4e0:	2809883a 	mov	r4,r5
    e4e4:	dc400815 	stw	r17,32(sp)
    e4e8:	dfc00915 	stw	ra,36(sp)
    e4ec:	2823883a 	mov	r17,r5
    e4f0:	000e6780 	call	e678 <strlen>
    e4f4:	10c00044 	addi	r3,r2,1
    e4f8:	d8800115 	stw	r2,4(sp)
    e4fc:	008000b4 	movhi	r2,2
    e500:	10b27f04 	addi	r2,r2,-13828
    e504:	d8800215 	stw	r2,8(sp)
    e508:	00800044 	movi	r2,1
    e50c:	d8800315 	stw	r2,12(sp)
    e510:	00800084 	movi	r2,2
    e514:	dc400015 	stw	r17,0(sp)
    e518:	d8c00615 	stw	r3,24(sp)
    e51c:	dec00415 	stw	sp,16(sp)
    e520:	d8800515 	stw	r2,20(sp)
    e524:	80000226 	beq	r16,zero,e530 <_puts_r+0x5c>
    e528:	80800e17 	ldw	r2,56(r16)
    e52c:	10001426 	beq	r2,zero,e580 <_puts_r+0xac>
    e530:	81400217 	ldw	r5,8(r16)
    e534:	2880030b 	ldhu	r2,12(r5)
    e538:	10c8000c 	andi	r3,r2,8192
    e53c:	1800061e 	bne	r3,zero,e558 <_puts_r+0x84>
    e540:	29001917 	ldw	r4,100(r5)
    e544:	00f7ffc4 	movi	r3,-8193
    e548:	10880014 	ori	r2,r2,8192
    e54c:	20c6703a 	and	r3,r4,r3
    e550:	2880030d 	sth	r2,12(r5)
    e554:	28c01915 	stw	r3,100(r5)
    e558:	d9800404 	addi	r6,sp,16
    e55c:	8009883a 	mov	r4,r16
    e560:	0012f5c0 	call	12f5c <__sfvwrite_r>
    e564:	1000091e 	bne	r2,zero,e58c <_puts_r+0xb8>
    e568:	00800284 	movi	r2,10
    e56c:	dfc00917 	ldw	ra,36(sp)
    e570:	dc400817 	ldw	r17,32(sp)
    e574:	dc000717 	ldw	r16,28(sp)
    e578:	dec00a04 	addi	sp,sp,40
    e57c:	f800283a 	ret
    e580:	8009883a 	mov	r4,r16
    e584:	0012ad80 	call	12ad8 <__sinit>
    e588:	003fe906 	br	e530 <__alt_data_end+0xf800e530>
    e58c:	00bfffc4 	movi	r2,-1
    e590:	003ff606 	br	e56c <__alt_data_end+0xf800e56c>

0000e594 <puts>:
    e594:	008000b4 	movhi	r2,2
    e598:	10b9c804 	addi	r2,r2,-6368
    e59c:	200b883a 	mov	r5,r4
    e5a0:	11000017 	ldw	r4,0(r2)
    e5a4:	000e4d41 	jmpi	e4d4 <_puts_r>

0000e5a8 <srand>:
    e5a8:	008000b4 	movhi	r2,2
    e5ac:	10b9c804 	addi	r2,r2,-6368
    e5b0:	10800017 	ldw	r2,0(r2)
    e5b4:	11002915 	stw	r4,164(r2)
    e5b8:	10002a15 	stw	zero,168(r2)
    e5bc:	f800283a 	ret

0000e5c0 <rand>:
    e5c0:	008000b4 	movhi	r2,2
    e5c4:	defffe04 	addi	sp,sp,-8
    e5c8:	10b9c804 	addi	r2,r2,-6368
    e5cc:	dc000015 	stw	r16,0(sp)
    e5d0:	14000017 	ldw	r16,0(r2)
    e5d4:	dfc00115 	stw	ra,4(sp)
    e5d8:	01932574 	movhi	r6,19605
    e5dc:	81002917 	ldw	r4,164(r16)
    e5e0:	81402a17 	ldw	r5,168(r16)
    e5e4:	01d614b4 	movhi	r7,22610
    e5e8:	319fcb44 	addi	r6,r6,32557
    e5ec:	39fd0b44 	addi	r7,r7,-3027
    e5f0:	00175e00 	call	175e0 <__muldi3>
    e5f4:	11000044 	addi	r4,r2,1
    e5f8:	2085803a 	cmpltu	r2,r4,r2
    e5fc:	10c7883a 	add	r3,r2,r3
    e600:	00a00034 	movhi	r2,32768
    e604:	10bfffc4 	addi	r2,r2,-1
    e608:	1884703a 	and	r2,r3,r2
    e60c:	81002915 	stw	r4,164(r16)
    e610:	80c02a15 	stw	r3,168(r16)
    e614:	dfc00117 	ldw	ra,4(sp)
    e618:	dc000017 	ldw	r16,0(sp)
    e61c:	dec00204 	addi	sp,sp,8
    e620:	f800283a 	ret

0000e624 <_sbrk_r>:
    e624:	defffd04 	addi	sp,sp,-12
    e628:	dc000015 	stw	r16,0(sp)
    e62c:	040000b4 	movhi	r16,2
    e630:	dc400115 	stw	r17,4(sp)
    e634:	8400bf04 	addi	r16,r16,764
    e638:	2023883a 	mov	r17,r4
    e63c:	2809883a 	mov	r4,r5
    e640:	dfc00215 	stw	ra,8(sp)
    e644:	80000015 	stw	zero,0(r16)
    e648:	0019dc40 	call	19dc4 <sbrk>
    e64c:	00ffffc4 	movi	r3,-1
    e650:	10c00526 	beq	r2,r3,e668 <_sbrk_r+0x44>
    e654:	dfc00217 	ldw	ra,8(sp)
    e658:	dc400117 	ldw	r17,4(sp)
    e65c:	dc000017 	ldw	r16,0(sp)
    e660:	dec00304 	addi	sp,sp,12
    e664:	f800283a 	ret
    e668:	80c00017 	ldw	r3,0(r16)
    e66c:	183ff926 	beq	r3,zero,e654 <__alt_data_end+0xf800e654>
    e670:	88c00015 	stw	r3,0(r17)
    e674:	003ff706 	br	e654 <__alt_data_end+0xf800e654>

0000e678 <strlen>:
    e678:	208000cc 	andi	r2,r4,3
    e67c:	10002026 	beq	r2,zero,e700 <strlen+0x88>
    e680:	20800007 	ldb	r2,0(r4)
    e684:	10002026 	beq	r2,zero,e708 <strlen+0x90>
    e688:	2005883a 	mov	r2,r4
    e68c:	00000206 	br	e698 <strlen+0x20>
    e690:	10c00007 	ldb	r3,0(r2)
    e694:	18001826 	beq	r3,zero,e6f8 <strlen+0x80>
    e698:	10800044 	addi	r2,r2,1
    e69c:	10c000cc 	andi	r3,r2,3
    e6a0:	183ffb1e 	bne	r3,zero,e690 <__alt_data_end+0xf800e690>
    e6a4:	10c00017 	ldw	r3,0(r2)
    e6a8:	01ffbff4 	movhi	r7,65279
    e6ac:	39ffbfc4 	addi	r7,r7,-257
    e6b0:	00ca303a 	nor	r5,zero,r3
    e6b4:	01a02074 	movhi	r6,32897
    e6b8:	19c7883a 	add	r3,r3,r7
    e6bc:	31a02004 	addi	r6,r6,-32640
    e6c0:	1946703a 	and	r3,r3,r5
    e6c4:	1986703a 	and	r3,r3,r6
    e6c8:	1800091e 	bne	r3,zero,e6f0 <strlen+0x78>
    e6cc:	10800104 	addi	r2,r2,4
    e6d0:	10c00017 	ldw	r3,0(r2)
    e6d4:	19cb883a 	add	r5,r3,r7
    e6d8:	00c6303a 	nor	r3,zero,r3
    e6dc:	28c6703a 	and	r3,r5,r3
    e6e0:	1986703a 	and	r3,r3,r6
    e6e4:	183ff926 	beq	r3,zero,e6cc <__alt_data_end+0xf800e6cc>
    e6e8:	00000106 	br	e6f0 <strlen+0x78>
    e6ec:	10800044 	addi	r2,r2,1
    e6f0:	10c00007 	ldb	r3,0(r2)
    e6f4:	183ffd1e 	bne	r3,zero,e6ec <__alt_data_end+0xf800e6ec>
    e6f8:	1105c83a 	sub	r2,r2,r4
    e6fc:	f800283a 	ret
    e700:	2005883a 	mov	r2,r4
    e704:	003fe706 	br	e6a4 <__alt_data_end+0xf800e6a4>
    e708:	0005883a 	mov	r2,zero
    e70c:	f800283a 	ret

0000e710 <_times_r>:
    e710:	2809883a 	mov	r4,r5
    e714:	0019eb01 	jmpi	19eb0 <times>

0000e718 <___vfprintf_internal_r>:
    e718:	deffb804 	addi	sp,sp,-288
    e71c:	dfc04715 	stw	ra,284(sp)
    e720:	ddc04515 	stw	r23,276(sp)
    e724:	dd404315 	stw	r21,268(sp)
    e728:	d9002d15 	stw	r4,180(sp)
    e72c:	282f883a 	mov	r23,r5
    e730:	302b883a 	mov	r21,r6
    e734:	d9c02e15 	stw	r7,184(sp)
    e738:	df004615 	stw	fp,280(sp)
    e73c:	dd804415 	stw	r22,272(sp)
    e740:	dd004215 	stw	r20,264(sp)
    e744:	dcc04115 	stw	r19,260(sp)
    e748:	dc804015 	stw	r18,256(sp)
    e74c:	dc403f15 	stw	r17,252(sp)
    e750:	dc003e15 	stw	r16,248(sp)
    e754:	00136580 	call	13658 <_localeconv_r>
    e758:	10800017 	ldw	r2,0(r2)
    e75c:	1009883a 	mov	r4,r2
    e760:	d8803415 	stw	r2,208(sp)
    e764:	000e6780 	call	e678 <strlen>
    e768:	d8803715 	stw	r2,220(sp)
    e76c:	d8802d17 	ldw	r2,180(sp)
    e770:	10000226 	beq	r2,zero,e77c <___vfprintf_internal_r+0x64>
    e774:	10800e17 	ldw	r2,56(r2)
    e778:	1000fb26 	beq	r2,zero,eb68 <___vfprintf_internal_r+0x450>
    e77c:	b880030b 	ldhu	r2,12(r23)
    e780:	10c8000c 	andi	r3,r2,8192
    e784:	1800061e 	bne	r3,zero,e7a0 <___vfprintf_internal_r+0x88>
    e788:	b9001917 	ldw	r4,100(r23)
    e78c:	00f7ffc4 	movi	r3,-8193
    e790:	10880014 	ori	r2,r2,8192
    e794:	20c6703a 	and	r3,r4,r3
    e798:	b880030d 	sth	r2,12(r23)
    e79c:	b8c01915 	stw	r3,100(r23)
    e7a0:	10c0020c 	andi	r3,r2,8
    e7a4:	1800c326 	beq	r3,zero,eab4 <___vfprintf_internal_r+0x39c>
    e7a8:	b8c00417 	ldw	r3,16(r23)
    e7ac:	1800c126 	beq	r3,zero,eab4 <___vfprintf_internal_r+0x39c>
    e7b0:	1080068c 	andi	r2,r2,26
    e7b4:	00c00284 	movi	r3,10
    e7b8:	10c0c626 	beq	r2,r3,ead4 <___vfprintf_internal_r+0x3bc>
    e7bc:	d8c00404 	addi	r3,sp,16
    e7c0:	050000b4 	movhi	r20,2
    e7c4:	d9001e04 	addi	r4,sp,120
    e7c8:	a5329084 	addi	r20,r20,-13758
    e7cc:	d8c01e15 	stw	r3,120(sp)
    e7d0:	d8002015 	stw	zero,128(sp)
    e7d4:	d8001f15 	stw	zero,124(sp)
    e7d8:	d8003315 	stw	zero,204(sp)
    e7dc:	d8003615 	stw	zero,216(sp)
    e7e0:	d8003815 	stw	zero,224(sp)
    e7e4:	1811883a 	mov	r8,r3
    e7e8:	d8003915 	stw	zero,228(sp)
    e7ec:	d8003a15 	stw	zero,232(sp)
    e7f0:	d8002f15 	stw	zero,188(sp)
    e7f4:	d9002815 	stw	r4,160(sp)
    e7f8:	a8800007 	ldb	r2,0(r21)
    e7fc:	10028b26 	beq	r2,zero,f22c <___vfprintf_internal_r+0xb14>
    e800:	00c00944 	movi	r3,37
    e804:	a823883a 	mov	r17,r21
    e808:	10c0021e 	bne	r2,r3,e814 <___vfprintf_internal_r+0xfc>
    e80c:	00001406 	br	e860 <___vfprintf_internal_r+0x148>
    e810:	10c00326 	beq	r2,r3,e820 <___vfprintf_internal_r+0x108>
    e814:	8c400044 	addi	r17,r17,1
    e818:	88800007 	ldb	r2,0(r17)
    e81c:	103ffc1e 	bne	r2,zero,e810 <__alt_data_end+0xf800e810>
    e820:	8d61c83a 	sub	r16,r17,r21
    e824:	80000e26 	beq	r16,zero,e860 <___vfprintf_internal_r+0x148>
    e828:	d8c02017 	ldw	r3,128(sp)
    e82c:	d8801f17 	ldw	r2,124(sp)
    e830:	45400015 	stw	r21,0(r8)
    e834:	1c07883a 	add	r3,r3,r16
    e838:	10800044 	addi	r2,r2,1
    e83c:	d8c02015 	stw	r3,128(sp)
    e840:	44000115 	stw	r16,4(r8)
    e844:	d8801f15 	stw	r2,124(sp)
    e848:	00c001c4 	movi	r3,7
    e84c:	1880a916 	blt	r3,r2,eaf4 <___vfprintf_internal_r+0x3dc>
    e850:	42000204 	addi	r8,r8,8
    e854:	d9402f17 	ldw	r5,188(sp)
    e858:	2c0b883a 	add	r5,r5,r16
    e85c:	d9402f15 	stw	r5,188(sp)
    e860:	88800007 	ldb	r2,0(r17)
    e864:	1000aa26 	beq	r2,zero,eb10 <___vfprintf_internal_r+0x3f8>
    e868:	8d400044 	addi	r21,r17,1
    e86c:	8c400047 	ldb	r17,1(r17)
    e870:	0021883a 	mov	r16,zero
    e874:	00bfffc4 	movi	r2,-1
    e878:	0025883a 	mov	r18,zero
    e87c:	dc002905 	stb	r16,164(sp)
    e880:	d8002785 	stb	zero,158(sp)
    e884:	d8002b05 	stb	zero,172(sp)
    e888:	d8802a15 	stw	r2,168(sp)
    e88c:	d8003115 	stw	zero,196(sp)
    e890:	04c01604 	movi	r19,88
    e894:	05800244 	movi	r22,9
    e898:	9021883a 	mov	r16,r18
    e89c:	4039883a 	mov	fp,r8
    e8a0:	ad400044 	addi	r21,r21,1
    e8a4:	88bff804 	addi	r2,r17,-32
    e8a8:	98833236 	bltu	r19,r2,f574 <___vfprintf_internal_r+0xe5c>
    e8ac:	100490ba 	slli	r2,r2,2
    e8b0:	00c00074 	movhi	r3,1
    e8b4:	18fa3104 	addi	r3,r3,-5948
    e8b8:	10c5883a 	add	r2,r2,r3
    e8bc:	10800017 	ldw	r2,0(r2)
    e8c0:	1000683a 	jmp	r2
    e8c4:	0000f46c 	andhi	zero,zero,977
    e8c8:	0000f574 	movhi	zero,981
    e8cc:	0000f574 	movhi	zero,981
    e8d0:	0000f48c 	andi	zero,zero,978
    e8d4:	0000f574 	movhi	zero,981
    e8d8:	0000f574 	movhi	zero,981
    e8dc:	0000f574 	movhi	zero,981
    e8e0:	0000f574 	movhi	zero,981
    e8e4:	0000f574 	movhi	zero,981
    e8e8:	0000f574 	movhi	zero,981
    e8ec:	0000eb74 	movhi	zero,941
    e8f0:	0000f37c 	xorhi	zero,zero,973
    e8f4:	0000f574 	movhi	zero,981
    e8f8:	0000ea38 	rdprs	zero,zero,936
    e8fc:	0000eb98 	cmpnei	zero,zero,942
    e900:	0000f574 	movhi	zero,981
    e904:	0000ebe8 	cmpgeui	zero,zero,943
    e908:	0000ebf4 	movhi	zero,943
    e90c:	0000ebf4 	movhi	zero,943
    e910:	0000ebf4 	movhi	zero,943
    e914:	0000ebf4 	movhi	zero,943
    e918:	0000ebf4 	movhi	zero,943
    e91c:	0000ebf4 	movhi	zero,943
    e920:	0000ebf4 	movhi	zero,943
    e924:	0000ebf4 	movhi	zero,943
    e928:	0000ebf4 	movhi	zero,943
    e92c:	0000f574 	movhi	zero,981
    e930:	0000f574 	movhi	zero,981
    e934:	0000f574 	movhi	zero,981
    e938:	0000f574 	movhi	zero,981
    e93c:	0000f574 	movhi	zero,981
    e940:	0000f574 	movhi	zero,981
    e944:	0000f574 	movhi	zero,981
    e948:	0000f574 	movhi	zero,981
    e94c:	0000f574 	movhi	zero,981
    e950:	0000f574 	movhi	zero,981
    e954:	0000ec30 	cmpltui	zero,zero,944
    e958:	0000ecf8 	rdprs	zero,zero,947
    e95c:	0000f574 	movhi	zero,981
    e960:	0000ecf8 	rdprs	zero,zero,947
    e964:	0000f574 	movhi	zero,981
    e968:	0000f574 	movhi	zero,981
    e96c:	0000f574 	movhi	zero,981
    e970:	0000f574 	movhi	zero,981
    e974:	0000eda4 	muli	zero,zero,950
    e978:	0000f574 	movhi	zero,981
    e97c:	0000f574 	movhi	zero,981
    e980:	0000edb0 	cmpltui	zero,zero,950
    e984:	0000f574 	movhi	zero,981
    e988:	0000f574 	movhi	zero,981
    e98c:	0000f574 	movhi	zero,981
    e990:	0000f574 	movhi	zero,981
    e994:	0000f574 	movhi	zero,981
    e998:	0000f234 	movhi	zero,968
    e99c:	0000f574 	movhi	zero,981
    e9a0:	0000f574 	movhi	zero,981
    e9a4:	0000f2a0 	cmpeqi	zero,zero,970
    e9a8:	0000f574 	movhi	zero,981
    e9ac:	0000f574 	movhi	zero,981
    e9b0:	0000f574 	movhi	zero,981
    e9b4:	0000f574 	movhi	zero,981
    e9b8:	0000f574 	movhi	zero,981
    e9bc:	0000f574 	movhi	zero,981
    e9c0:	0000f574 	movhi	zero,981
    e9c4:	0000f574 	movhi	zero,981
    e9c8:	0000f574 	movhi	zero,981
    e9cc:	0000f574 	movhi	zero,981
    e9d0:	0000f518 	cmpnei	zero,zero,980
    e9d4:	0000f498 	cmpnei	zero,zero,978
    e9d8:	0000ecf8 	rdprs	zero,zero,947
    e9dc:	0000ecf8 	rdprs	zero,zero,947
    e9e0:	0000ecf8 	rdprs	zero,zero,947
    e9e4:	0000f4b8 	rdprs	zero,zero,978
    e9e8:	0000f498 	cmpnei	zero,zero,978
    e9ec:	0000f574 	movhi	zero,981
    e9f0:	0000f574 	movhi	zero,981
    e9f4:	0000f4c4 	movi	zero,979
    e9f8:	0000f574 	movhi	zero,981
    e9fc:	0000f4d8 	cmpnei	zero,zero,979
    ea00:	0000f35c 	xori	zero,zero,973
    ea04:	0000ea44 	movi	zero,937
    ea08:	0000f394 	movui	zero,974
    ea0c:	0000f574 	movhi	zero,981
    ea10:	0000f3a0 	cmpeqi	zero,zero,974
    ea14:	0000f574 	movhi	zero,981
    ea18:	0000f404 	movi	zero,976
    ea1c:	0000f574 	movhi	zero,981
    ea20:	0000f574 	movhi	zero,981
    ea24:	0000f424 	muli	zero,zero,976
    ea28:	d8c03117 	ldw	r3,196(sp)
    ea2c:	d8802e15 	stw	r2,184(sp)
    ea30:	00c7c83a 	sub	r3,zero,r3
    ea34:	d8c03115 	stw	r3,196(sp)
    ea38:	84000114 	ori	r16,r16,4
    ea3c:	ac400007 	ldb	r17,0(r21)
    ea40:	003f9706 	br	e8a0 <__alt_data_end+0xf800e8a0>
    ea44:	00800c04 	movi	r2,48
    ea48:	d8802705 	stb	r2,156(sp)
    ea4c:	00801e04 	movi	r2,120
    ea50:	d8802745 	stb	r2,157(sp)
    ea54:	d9002a17 	ldw	r4,168(sp)
    ea58:	d8802e17 	ldw	r2,184(sp)
    ea5c:	d8002785 	stb	zero,158(sp)
    ea60:	e011883a 	mov	r8,fp
    ea64:	10c00104 	addi	r3,r2,4
    ea68:	14c00017 	ldw	r19,0(r2)
    ea6c:	002d883a 	mov	r22,zero
    ea70:	80800094 	ori	r2,r16,2
    ea74:	2002ca16 	blt	r4,zero,f5a0 <___vfprintf_internal_r+0xe88>
    ea78:	00bfdfc4 	movi	r2,-129
    ea7c:	80a4703a 	and	r18,r16,r2
    ea80:	d8c02e15 	stw	r3,184(sp)
    ea84:	94800094 	ori	r18,r18,2
    ea88:	9802b41e 	bne	r19,zero,f55c <___vfprintf_internal_r+0xe44>
    ea8c:	014000b4 	movhi	r5,2
    ea90:	29728904 	addi	r5,r5,-13788
    ea94:	d9403915 	stw	r5,228(sp)
    ea98:	04401e04 	movi	r17,120
    ea9c:	d8802a17 	ldw	r2,168(sp)
    eaa0:	0039883a 	mov	fp,zero
    eaa4:	1001fa26 	beq	r2,zero,f290 <___vfprintf_internal_r+0xb78>
    eaa8:	0027883a 	mov	r19,zero
    eaac:	002d883a 	mov	r22,zero
    eab0:	00021906 	br	f318 <___vfprintf_internal_r+0xc00>
    eab4:	d9002d17 	ldw	r4,180(sp)
    eab8:	b80b883a 	mov	r5,r23
    eabc:	0010acc0 	call	10acc <__swsetup_r>
    eac0:	1005dc1e 	bne	r2,zero,10234 <___vfprintf_internal_r+0x1b1c>
    eac4:	b880030b 	ldhu	r2,12(r23)
    eac8:	00c00284 	movi	r3,10
    eacc:	1080068c 	andi	r2,r2,26
    ead0:	10ff3a1e 	bne	r2,r3,e7bc <__alt_data_end+0xf800e7bc>
    ead4:	b880038f 	ldh	r2,14(r23)
    ead8:	103f3816 	blt	r2,zero,e7bc <__alt_data_end+0xf800e7bc>
    eadc:	d9c02e17 	ldw	r7,184(sp)
    eae0:	d9002d17 	ldw	r4,180(sp)
    eae4:	a80d883a 	mov	r6,r21
    eae8:	b80b883a 	mov	r5,r23
    eaec:	0010a100 	call	10a10 <__sbprintf>
    eaf0:	00001106 	br	eb38 <___vfprintf_internal_r+0x420>
    eaf4:	d9002d17 	ldw	r4,180(sp)
    eaf8:	d9801e04 	addi	r6,sp,120
    eafc:	b80b883a 	mov	r5,r23
    eb00:	00156980 	call	15698 <__sprint_r>
    eb04:	1000081e 	bne	r2,zero,eb28 <___vfprintf_internal_r+0x410>
    eb08:	da000404 	addi	r8,sp,16
    eb0c:	003f5106 	br	e854 <__alt_data_end+0xf800e854>
    eb10:	d8802017 	ldw	r2,128(sp)
    eb14:	10000426 	beq	r2,zero,eb28 <___vfprintf_internal_r+0x410>
    eb18:	d9002d17 	ldw	r4,180(sp)
    eb1c:	d9801e04 	addi	r6,sp,120
    eb20:	b80b883a 	mov	r5,r23
    eb24:	00156980 	call	15698 <__sprint_r>
    eb28:	b880030b 	ldhu	r2,12(r23)
    eb2c:	1080100c 	andi	r2,r2,64
    eb30:	1005c01e 	bne	r2,zero,10234 <___vfprintf_internal_r+0x1b1c>
    eb34:	d8802f17 	ldw	r2,188(sp)
    eb38:	dfc04717 	ldw	ra,284(sp)
    eb3c:	df004617 	ldw	fp,280(sp)
    eb40:	ddc04517 	ldw	r23,276(sp)
    eb44:	dd804417 	ldw	r22,272(sp)
    eb48:	dd404317 	ldw	r21,268(sp)
    eb4c:	dd004217 	ldw	r20,264(sp)
    eb50:	dcc04117 	ldw	r19,260(sp)
    eb54:	dc804017 	ldw	r18,256(sp)
    eb58:	dc403f17 	ldw	r17,252(sp)
    eb5c:	dc003e17 	ldw	r16,248(sp)
    eb60:	dec04804 	addi	sp,sp,288
    eb64:	f800283a 	ret
    eb68:	d9002d17 	ldw	r4,180(sp)
    eb6c:	0012ad80 	call	12ad8 <__sinit>
    eb70:	003f0206 	br	e77c <__alt_data_end+0xf800e77c>
    eb74:	d9002e17 	ldw	r4,184(sp)
    eb78:	d9402e17 	ldw	r5,184(sp)
    eb7c:	21000017 	ldw	r4,0(r4)
    eb80:	28800104 	addi	r2,r5,4
    eb84:	d9003115 	stw	r4,196(sp)
    eb88:	203fa716 	blt	r4,zero,ea28 <__alt_data_end+0xf800ea28>
    eb8c:	d8802e15 	stw	r2,184(sp)
    eb90:	ac400007 	ldb	r17,0(r21)
    eb94:	003f4206 	br	e8a0 <__alt_data_end+0xf800e8a0>
    eb98:	ac400007 	ldb	r17,0(r21)
    eb9c:	01000a84 	movi	r4,42
    eba0:	a8c00044 	addi	r3,r21,1
    eba4:	89075826 	beq	r17,r4,10908 <___vfprintf_internal_r+0x21f0>
    eba8:	8cbff404 	addi	r18,r17,-48
    ebac:	b486ae36 	bltu	r22,r18,10668 <___vfprintf_internal_r+0x1f50>
    ebb0:	0009883a 	mov	r4,zero
    ebb4:	1823883a 	mov	r17,r3
    ebb8:	01400284 	movi	r5,10
    ebbc:	000c68c0 	call	c68c <__mulsi3>
    ebc0:	88c00007 	ldb	r3,0(r17)
    ebc4:	1489883a 	add	r4,r2,r18
    ebc8:	8d400044 	addi	r21,r17,1
    ebcc:	1cbff404 	addi	r18,r3,-48
    ebd0:	a823883a 	mov	r17,r21
    ebd4:	b4bff82e 	bgeu	r22,r18,ebb8 <__alt_data_end+0xf800ebb8>
    ebd8:	1823883a 	mov	r17,r3
    ebdc:	2005f616 	blt	r4,zero,103b8 <___vfprintf_internal_r+0x1ca0>
    ebe0:	d9002a15 	stw	r4,168(sp)
    ebe4:	003f2f06 	br	e8a4 <__alt_data_end+0xf800e8a4>
    ebe8:	84002014 	ori	r16,r16,128
    ebec:	ac400007 	ldb	r17,0(r21)
    ebf0:	003f2b06 	br	e8a0 <__alt_data_end+0xf800e8a0>
    ebf4:	8cbff404 	addi	r18,r17,-48
    ebf8:	d8003115 	stw	zero,196(sp)
    ebfc:	0009883a 	mov	r4,zero
    ec00:	a823883a 	mov	r17,r21
    ec04:	01400284 	movi	r5,10
    ec08:	000c68c0 	call	c68c <__mulsi3>
    ec0c:	88c00007 	ldb	r3,0(r17)
    ec10:	9089883a 	add	r4,r18,r2
    ec14:	ad400044 	addi	r21,r21,1
    ec18:	1cbff404 	addi	r18,r3,-48
    ec1c:	a823883a 	mov	r17,r21
    ec20:	b4bff82e 	bgeu	r22,r18,ec04 <__alt_data_end+0xf800ec04>
    ec24:	1823883a 	mov	r17,r3
    ec28:	d9003115 	stw	r4,196(sp)
    ec2c:	003f1d06 	br	e8a4 <__alt_data_end+0xf800e8a4>
    ec30:	8025883a 	mov	r18,r16
    ec34:	dc002903 	ldbu	r16,164(sp)
    ec38:	e011883a 	mov	r8,fp
    ec3c:	84003fcc 	andi	r16,r16,255
    ec40:	8007531e 	bne	r16,zero,10990 <___vfprintf_internal_r+0x2278>
    ec44:	94800414 	ori	r18,r18,16
    ec48:	9080080c 	andi	r2,r18,32
    ec4c:	1003a326 	beq	r2,zero,fadc <___vfprintf_internal_r+0x13c4>
    ec50:	d9002e17 	ldw	r4,184(sp)
    ec54:	20800117 	ldw	r2,4(r4)
    ec58:	24c00017 	ldw	r19,0(r4)
    ec5c:	21000204 	addi	r4,r4,8
    ec60:	d9002e15 	stw	r4,184(sp)
    ec64:	102d883a 	mov	r22,r2
    ec68:	10047316 	blt	r2,zero,fe38 <___vfprintf_internal_r+0x1720>
    ec6c:	d9002a17 	ldw	r4,168(sp)
    ec70:	df002783 	ldbu	fp,158(sp)
    ec74:	2003e416 	blt	r4,zero,fc08 <___vfprintf_internal_r+0x14f0>
    ec78:	00ffdfc4 	movi	r3,-129
    ec7c:	9d84b03a 	or	r2,r19,r22
    ec80:	90e4703a 	and	r18,r18,r3
    ec84:	10018026 	beq	r2,zero,f288 <___vfprintf_internal_r+0xb70>
    ec88:	b003ab26 	beq	r22,zero,fb38 <___vfprintf_internal_r+0x1420>
    ec8c:	dc402915 	stw	r17,164(sp)
    ec90:	dc001e04 	addi	r16,sp,120
    ec94:	b023883a 	mov	r17,r22
    ec98:	402d883a 	mov	r22,r8
    ec9c:	9809883a 	mov	r4,r19
    eca0:	880b883a 	mov	r5,r17
    eca4:	01800284 	movi	r6,10
    eca8:	000f883a 	mov	r7,zero
    ecac:	0017ce80 	call	17ce8 <__umoddi3>
    ecb0:	10800c04 	addi	r2,r2,48
    ecb4:	843fffc4 	addi	r16,r16,-1
    ecb8:	9809883a 	mov	r4,r19
    ecbc:	880b883a 	mov	r5,r17
    ecc0:	80800005 	stb	r2,0(r16)
    ecc4:	01800284 	movi	r6,10
    ecc8:	000f883a 	mov	r7,zero
    eccc:	00176ec0 	call	176ec <__udivdi3>
    ecd0:	1027883a 	mov	r19,r2
    ecd4:	10c4b03a 	or	r2,r2,r3
    ecd8:	1823883a 	mov	r17,r3
    ecdc:	103fef1e 	bne	r2,zero,ec9c <__alt_data_end+0xf800ec9c>
    ece0:	d8c02817 	ldw	r3,160(sp)
    ece4:	dc402917 	ldw	r17,164(sp)
    ece8:	b011883a 	mov	r8,r22
    ecec:	1c07c83a 	sub	r3,r3,r16
    ecf0:	d8c02b15 	stw	r3,172(sp)
    ecf4:	00005f06 	br	ee74 <___vfprintf_internal_r+0x75c>
    ecf8:	8025883a 	mov	r18,r16
    ecfc:	dc002903 	ldbu	r16,164(sp)
    ed00:	e011883a 	mov	r8,fp
    ed04:	84003fcc 	andi	r16,r16,255
    ed08:	80071e1e 	bne	r16,zero,10984 <___vfprintf_internal_r+0x226c>
    ed0c:	9080020c 	andi	r2,r18,8
    ed10:	1004af26 	beq	r2,zero,ffd0 <___vfprintf_internal_r+0x18b8>
    ed14:	d9002e17 	ldw	r4,184(sp)
    ed18:	d9402e17 	ldw	r5,184(sp)
    ed1c:	d8802e17 	ldw	r2,184(sp)
    ed20:	21000017 	ldw	r4,0(r4)
    ed24:	29400117 	ldw	r5,4(r5)
    ed28:	10800204 	addi	r2,r2,8
    ed2c:	d9003615 	stw	r4,216(sp)
    ed30:	d9403815 	stw	r5,224(sp)
    ed34:	d8802e15 	stw	r2,184(sp)
    ed38:	d9003617 	ldw	r4,216(sp)
    ed3c:	d9403817 	ldw	r5,224(sp)
    ed40:	da003d15 	stw	r8,244(sp)
    ed44:	04000044 	movi	r16,1
    ed48:	00153100 	call	15310 <__fpclassifyd>
    ed4c:	da003d17 	ldw	r8,244(sp)
    ed50:	1404441e 	bne	r2,r16,fe64 <___vfprintf_internal_r+0x174c>
    ed54:	d9003617 	ldw	r4,216(sp)
    ed58:	d9403817 	ldw	r5,224(sp)
    ed5c:	000d883a 	mov	r6,zero
    ed60:	000f883a 	mov	r7,zero
    ed64:	0018be00 	call	18be0 <__ledf2>
    ed68:	da003d17 	ldw	r8,244(sp)
    ed6c:	1005e316 	blt	r2,zero,104fc <___vfprintf_internal_r+0x1de4>
    ed70:	df002783 	ldbu	fp,158(sp)
    ed74:	008011c4 	movi	r2,71
    ed78:	1445580e 	bge	r2,r17,102dc <___vfprintf_internal_r+0x1bc4>
    ed7c:	040000b4 	movhi	r16,2
    ed80:	84328104 	addi	r16,r16,-13820
    ed84:	00c000c4 	movi	r3,3
    ed88:	00bfdfc4 	movi	r2,-129
    ed8c:	d8c02915 	stw	r3,164(sp)
    ed90:	90a4703a 	and	r18,r18,r2
    ed94:	d8c02b15 	stw	r3,172(sp)
    ed98:	d8002a15 	stw	zero,168(sp)
    ed9c:	d8003215 	stw	zero,200(sp)
    eda0:	00003a06 	br	ee8c <___vfprintf_internal_r+0x774>
    eda4:	84000214 	ori	r16,r16,8
    eda8:	ac400007 	ldb	r17,0(r21)
    edac:	003ebc06 	br	e8a0 <__alt_data_end+0xf800e8a0>
    edb0:	8025883a 	mov	r18,r16
    edb4:	dc002903 	ldbu	r16,164(sp)
    edb8:	e011883a 	mov	r8,fp
    edbc:	84003fcc 	andi	r16,r16,255
    edc0:	8007001e 	bne	r16,zero,109c4 <___vfprintf_internal_r+0x22ac>
    edc4:	94800414 	ori	r18,r18,16
    edc8:	9080080c 	andi	r2,r18,32
    edcc:	1002fa26 	beq	r2,zero,f9b8 <___vfprintf_internal_r+0x12a0>
    edd0:	d9002e17 	ldw	r4,184(sp)
    edd4:	d9402a17 	ldw	r5,168(sp)
    edd8:	d8002785 	stb	zero,158(sp)
    eddc:	20800204 	addi	r2,r4,8
    ede0:	24c00017 	ldw	r19,0(r4)
    ede4:	25800117 	ldw	r22,4(r4)
    ede8:	2804b116 	blt	r5,zero,100b0 <___vfprintf_internal_r+0x1998>
    edec:	013fdfc4 	movi	r4,-129
    edf0:	9d86b03a 	or	r3,r19,r22
    edf4:	d8802e15 	stw	r2,184(sp)
    edf8:	9124703a 	and	r18,r18,r4
    edfc:	1802fb1e 	bne	r3,zero,f9ec <___vfprintf_internal_r+0x12d4>
    ee00:	d8c02a17 	ldw	r3,168(sp)
    ee04:	0039883a 	mov	fp,zero
    ee08:	1805e526 	beq	r3,zero,105a0 <___vfprintf_internal_r+0x1e88>
    ee0c:	0027883a 	mov	r19,zero
    ee10:	002d883a 	mov	r22,zero
    ee14:	dc001e04 	addi	r16,sp,120
    ee18:	9806d0fa 	srli	r3,r19,3
    ee1c:	b008977a 	slli	r4,r22,29
    ee20:	b02cd0fa 	srli	r22,r22,3
    ee24:	9cc001cc 	andi	r19,r19,7
    ee28:	98800c04 	addi	r2,r19,48
    ee2c:	843fffc4 	addi	r16,r16,-1
    ee30:	20e6b03a 	or	r19,r4,r3
    ee34:	80800005 	stb	r2,0(r16)
    ee38:	9d86b03a 	or	r3,r19,r22
    ee3c:	183ff61e 	bne	r3,zero,ee18 <__alt_data_end+0xf800ee18>
    ee40:	90c0004c 	andi	r3,r18,1
    ee44:	18014126 	beq	r3,zero,f34c <___vfprintf_internal_r+0xc34>
    ee48:	10803fcc 	andi	r2,r2,255
    ee4c:	1080201c 	xori	r2,r2,128
    ee50:	10bfe004 	addi	r2,r2,-128
    ee54:	00c00c04 	movi	r3,48
    ee58:	10c13c26 	beq	r2,r3,f34c <___vfprintf_internal_r+0xc34>
    ee5c:	80ffffc5 	stb	r3,-1(r16)
    ee60:	d8c02817 	ldw	r3,160(sp)
    ee64:	80bfffc4 	addi	r2,r16,-1
    ee68:	1021883a 	mov	r16,r2
    ee6c:	1887c83a 	sub	r3,r3,r2
    ee70:	d8c02b15 	stw	r3,172(sp)
    ee74:	d8802b17 	ldw	r2,172(sp)
    ee78:	d9002a17 	ldw	r4,168(sp)
    ee7c:	1100010e 	bge	r2,r4,ee84 <___vfprintf_internal_r+0x76c>
    ee80:	2005883a 	mov	r2,r4
    ee84:	d8802915 	stw	r2,164(sp)
    ee88:	d8003215 	stw	zero,200(sp)
    ee8c:	e7003fcc 	andi	fp,fp,255
    ee90:	e700201c 	xori	fp,fp,128
    ee94:	e73fe004 	addi	fp,fp,-128
    ee98:	e0000326 	beq	fp,zero,eea8 <___vfprintf_internal_r+0x790>
    ee9c:	d8c02917 	ldw	r3,164(sp)
    eea0:	18c00044 	addi	r3,r3,1
    eea4:	d8c02915 	stw	r3,164(sp)
    eea8:	90c0008c 	andi	r3,r18,2
    eeac:	d8c02c15 	stw	r3,176(sp)
    eeb0:	18000326 	beq	r3,zero,eec0 <___vfprintf_internal_r+0x7a8>
    eeb4:	d8c02917 	ldw	r3,164(sp)
    eeb8:	18c00084 	addi	r3,r3,2
    eebc:	d8c02915 	stw	r3,164(sp)
    eec0:	90c0210c 	andi	r3,r18,132
    eec4:	d8c03015 	stw	r3,192(sp)
    eec8:	1801c51e 	bne	r3,zero,f5e0 <___vfprintf_internal_r+0xec8>
    eecc:	d9003117 	ldw	r4,196(sp)
    eed0:	d8c02917 	ldw	r3,164(sp)
    eed4:	20e7c83a 	sub	r19,r4,r3
    eed8:	04c1c10e 	bge	zero,r19,f5e0 <___vfprintf_internal_r+0xec8>
    eedc:	02400404 	movi	r9,16
    eee0:	d8c02017 	ldw	r3,128(sp)
    eee4:	d8801f17 	ldw	r2,124(sp)
    eee8:	4cc52f0e 	bge	r9,r19,103a8 <___vfprintf_internal_r+0x1c90>
    eeec:	014000b4 	movhi	r5,2
    eef0:	29729484 	addi	r5,r5,-13742
    eef4:	dc403b15 	stw	r17,236(sp)
    eef8:	d9403515 	stw	r5,212(sp)
    eefc:	9823883a 	mov	r17,r19
    ef00:	482d883a 	mov	r22,r9
    ef04:	9027883a 	mov	r19,r18
    ef08:	070001c4 	movi	fp,7
    ef0c:	8025883a 	mov	r18,r16
    ef10:	dc002d17 	ldw	r16,180(sp)
    ef14:	00000306 	br	ef24 <___vfprintf_internal_r+0x80c>
    ef18:	8c7ffc04 	addi	r17,r17,-16
    ef1c:	42000204 	addi	r8,r8,8
    ef20:	b440130e 	bge	r22,r17,ef70 <___vfprintf_internal_r+0x858>
    ef24:	010000b4 	movhi	r4,2
    ef28:	18c00404 	addi	r3,r3,16
    ef2c:	10800044 	addi	r2,r2,1
    ef30:	21329484 	addi	r4,r4,-13742
    ef34:	41000015 	stw	r4,0(r8)
    ef38:	45800115 	stw	r22,4(r8)
    ef3c:	d8c02015 	stw	r3,128(sp)
    ef40:	d8801f15 	stw	r2,124(sp)
    ef44:	e0bff40e 	bge	fp,r2,ef18 <__alt_data_end+0xf800ef18>
    ef48:	d9801e04 	addi	r6,sp,120
    ef4c:	b80b883a 	mov	r5,r23
    ef50:	8009883a 	mov	r4,r16
    ef54:	00156980 	call	15698 <__sprint_r>
    ef58:	103ef31e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    ef5c:	8c7ffc04 	addi	r17,r17,-16
    ef60:	d8c02017 	ldw	r3,128(sp)
    ef64:	d8801f17 	ldw	r2,124(sp)
    ef68:	da000404 	addi	r8,sp,16
    ef6c:	b47fed16 	blt	r22,r17,ef24 <__alt_data_end+0xf800ef24>
    ef70:	9021883a 	mov	r16,r18
    ef74:	9825883a 	mov	r18,r19
    ef78:	8827883a 	mov	r19,r17
    ef7c:	dc403b17 	ldw	r17,236(sp)
    ef80:	d9403517 	ldw	r5,212(sp)
    ef84:	98c7883a 	add	r3,r19,r3
    ef88:	10800044 	addi	r2,r2,1
    ef8c:	41400015 	stw	r5,0(r8)
    ef90:	44c00115 	stw	r19,4(r8)
    ef94:	d8c02015 	stw	r3,128(sp)
    ef98:	d8801f15 	stw	r2,124(sp)
    ef9c:	010001c4 	movi	r4,7
    efa0:	2082c516 	blt	r4,r2,fab8 <___vfprintf_internal_r+0x13a0>
    efa4:	df002787 	ldb	fp,158(sp)
    efa8:	42000204 	addi	r8,r8,8
    efac:	e0000c26 	beq	fp,zero,efe0 <___vfprintf_internal_r+0x8c8>
    efb0:	d8801f17 	ldw	r2,124(sp)
    efb4:	d9002784 	addi	r4,sp,158
    efb8:	18c00044 	addi	r3,r3,1
    efbc:	10800044 	addi	r2,r2,1
    efc0:	41000015 	stw	r4,0(r8)
    efc4:	01000044 	movi	r4,1
    efc8:	41000115 	stw	r4,4(r8)
    efcc:	d8c02015 	stw	r3,128(sp)
    efd0:	d8801f15 	stw	r2,124(sp)
    efd4:	010001c4 	movi	r4,7
    efd8:	20825e16 	blt	r4,r2,f954 <___vfprintf_internal_r+0x123c>
    efdc:	42000204 	addi	r8,r8,8
    efe0:	d8802c17 	ldw	r2,176(sp)
    efe4:	10000c26 	beq	r2,zero,f018 <___vfprintf_internal_r+0x900>
    efe8:	d8801f17 	ldw	r2,124(sp)
    efec:	d9002704 	addi	r4,sp,156
    eff0:	18c00084 	addi	r3,r3,2
    eff4:	10800044 	addi	r2,r2,1
    eff8:	41000015 	stw	r4,0(r8)
    effc:	01000084 	movi	r4,2
    f000:	41000115 	stw	r4,4(r8)
    f004:	d8c02015 	stw	r3,128(sp)
    f008:	d8801f15 	stw	r2,124(sp)
    f00c:	010001c4 	movi	r4,7
    f010:	20825816 	blt	r4,r2,f974 <___vfprintf_internal_r+0x125c>
    f014:	42000204 	addi	r8,r8,8
    f018:	d9003017 	ldw	r4,192(sp)
    f01c:	00802004 	movi	r2,128
    f020:	2081bb26 	beq	r4,r2,f710 <___vfprintf_internal_r+0xff8>
    f024:	d9402a17 	ldw	r5,168(sp)
    f028:	d8802b17 	ldw	r2,172(sp)
    f02c:	28adc83a 	sub	r22,r5,r2
    f030:	0580310e 	bge	zero,r22,f0f8 <___vfprintf_internal_r+0x9e0>
    f034:	07000404 	movi	fp,16
    f038:	d8801f17 	ldw	r2,124(sp)
    f03c:	e584360e 	bge	fp,r22,10118 <___vfprintf_internal_r+0x1a00>
    f040:	014000b4 	movhi	r5,2
    f044:	29729084 	addi	r5,r5,-13758
    f048:	dc402a15 	stw	r17,168(sp)
    f04c:	d9402c15 	stw	r5,176(sp)
    f050:	b023883a 	mov	r17,r22
    f054:	04c001c4 	movi	r19,7
    f058:	a82d883a 	mov	r22,r21
    f05c:	902b883a 	mov	r21,r18
    f060:	8025883a 	mov	r18,r16
    f064:	dc002d17 	ldw	r16,180(sp)
    f068:	00000306 	br	f078 <___vfprintf_internal_r+0x960>
    f06c:	8c7ffc04 	addi	r17,r17,-16
    f070:	42000204 	addi	r8,r8,8
    f074:	e440110e 	bge	fp,r17,f0bc <___vfprintf_internal_r+0x9a4>
    f078:	18c00404 	addi	r3,r3,16
    f07c:	10800044 	addi	r2,r2,1
    f080:	45000015 	stw	r20,0(r8)
    f084:	47000115 	stw	fp,4(r8)
    f088:	d8c02015 	stw	r3,128(sp)
    f08c:	d8801f15 	stw	r2,124(sp)
    f090:	98bff60e 	bge	r19,r2,f06c <__alt_data_end+0xf800f06c>
    f094:	d9801e04 	addi	r6,sp,120
    f098:	b80b883a 	mov	r5,r23
    f09c:	8009883a 	mov	r4,r16
    f0a0:	00156980 	call	15698 <__sprint_r>
    f0a4:	103ea01e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    f0a8:	8c7ffc04 	addi	r17,r17,-16
    f0ac:	d8c02017 	ldw	r3,128(sp)
    f0b0:	d8801f17 	ldw	r2,124(sp)
    f0b4:	da000404 	addi	r8,sp,16
    f0b8:	e47fef16 	blt	fp,r17,f078 <__alt_data_end+0xf800f078>
    f0bc:	9021883a 	mov	r16,r18
    f0c0:	a825883a 	mov	r18,r21
    f0c4:	b02b883a 	mov	r21,r22
    f0c8:	882d883a 	mov	r22,r17
    f0cc:	dc402a17 	ldw	r17,168(sp)
    f0d0:	d9002c17 	ldw	r4,176(sp)
    f0d4:	1d87883a 	add	r3,r3,r22
    f0d8:	10800044 	addi	r2,r2,1
    f0dc:	41000015 	stw	r4,0(r8)
    f0e0:	45800115 	stw	r22,4(r8)
    f0e4:	d8c02015 	stw	r3,128(sp)
    f0e8:	d8801f15 	stw	r2,124(sp)
    f0ec:	010001c4 	movi	r4,7
    f0f0:	20821016 	blt	r4,r2,f934 <___vfprintf_internal_r+0x121c>
    f0f4:	42000204 	addi	r8,r8,8
    f0f8:	9080400c 	andi	r2,r18,256
    f0fc:	10013a1e 	bne	r2,zero,f5e8 <___vfprintf_internal_r+0xed0>
    f100:	d9402b17 	ldw	r5,172(sp)
    f104:	d8801f17 	ldw	r2,124(sp)
    f108:	44000015 	stw	r16,0(r8)
    f10c:	1947883a 	add	r3,r3,r5
    f110:	10800044 	addi	r2,r2,1
    f114:	41400115 	stw	r5,4(r8)
    f118:	d8c02015 	stw	r3,128(sp)
    f11c:	d8801f15 	stw	r2,124(sp)
    f120:	010001c4 	movi	r4,7
    f124:	2081f516 	blt	r4,r2,f8fc <___vfprintf_internal_r+0x11e4>
    f128:	42000204 	addi	r8,r8,8
    f12c:	9480010c 	andi	r18,r18,4
    f130:	90003226 	beq	r18,zero,f1fc <___vfprintf_internal_r+0xae4>
    f134:	d9403117 	ldw	r5,196(sp)
    f138:	d8802917 	ldw	r2,164(sp)
    f13c:	28a1c83a 	sub	r16,r5,r2
    f140:	04002e0e 	bge	zero,r16,f1fc <___vfprintf_internal_r+0xae4>
    f144:	04400404 	movi	r17,16
    f148:	d8801f17 	ldw	r2,124(sp)
    f14c:	8c04c40e 	bge	r17,r16,10460 <___vfprintf_internal_r+0x1d48>
    f150:	014000b4 	movhi	r5,2
    f154:	29729484 	addi	r5,r5,-13742
    f158:	d9403515 	stw	r5,212(sp)
    f15c:	048001c4 	movi	r18,7
    f160:	dcc02d17 	ldw	r19,180(sp)
    f164:	00000306 	br	f174 <___vfprintf_internal_r+0xa5c>
    f168:	843ffc04 	addi	r16,r16,-16
    f16c:	42000204 	addi	r8,r8,8
    f170:	8c00130e 	bge	r17,r16,f1c0 <___vfprintf_internal_r+0xaa8>
    f174:	010000b4 	movhi	r4,2
    f178:	18c00404 	addi	r3,r3,16
    f17c:	10800044 	addi	r2,r2,1
    f180:	21329484 	addi	r4,r4,-13742
    f184:	41000015 	stw	r4,0(r8)
    f188:	44400115 	stw	r17,4(r8)
    f18c:	d8c02015 	stw	r3,128(sp)
    f190:	d8801f15 	stw	r2,124(sp)
    f194:	90bff40e 	bge	r18,r2,f168 <__alt_data_end+0xf800f168>
    f198:	d9801e04 	addi	r6,sp,120
    f19c:	b80b883a 	mov	r5,r23
    f1a0:	9809883a 	mov	r4,r19
    f1a4:	00156980 	call	15698 <__sprint_r>
    f1a8:	103e5f1e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    f1ac:	843ffc04 	addi	r16,r16,-16
    f1b0:	d8c02017 	ldw	r3,128(sp)
    f1b4:	d8801f17 	ldw	r2,124(sp)
    f1b8:	da000404 	addi	r8,sp,16
    f1bc:	8c3fed16 	blt	r17,r16,f174 <__alt_data_end+0xf800f174>
    f1c0:	d9403517 	ldw	r5,212(sp)
    f1c4:	1c07883a 	add	r3,r3,r16
    f1c8:	10800044 	addi	r2,r2,1
    f1cc:	41400015 	stw	r5,0(r8)
    f1d0:	44000115 	stw	r16,4(r8)
    f1d4:	d8c02015 	stw	r3,128(sp)
    f1d8:	d8801f15 	stw	r2,124(sp)
    f1dc:	010001c4 	movi	r4,7
    f1e0:	2080060e 	bge	r4,r2,f1fc <___vfprintf_internal_r+0xae4>
    f1e4:	d9002d17 	ldw	r4,180(sp)
    f1e8:	d9801e04 	addi	r6,sp,120
    f1ec:	b80b883a 	mov	r5,r23
    f1f0:	00156980 	call	15698 <__sprint_r>
    f1f4:	103e4c1e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    f1f8:	d8c02017 	ldw	r3,128(sp)
    f1fc:	d8803117 	ldw	r2,196(sp)
    f200:	d9002917 	ldw	r4,164(sp)
    f204:	1100010e 	bge	r2,r4,f20c <___vfprintf_internal_r+0xaf4>
    f208:	2005883a 	mov	r2,r4
    f20c:	d9402f17 	ldw	r5,188(sp)
    f210:	288b883a 	add	r5,r5,r2
    f214:	d9402f15 	stw	r5,188(sp)
    f218:	1801c01e 	bne	r3,zero,f91c <___vfprintf_internal_r+0x1204>
    f21c:	a8800007 	ldb	r2,0(r21)
    f220:	d8001f15 	stw	zero,124(sp)
    f224:	da000404 	addi	r8,sp,16
    f228:	103d751e 	bne	r2,zero,e800 <__alt_data_end+0xf800e800>
    f22c:	a823883a 	mov	r17,r21
    f230:	003d8b06 	br	e860 <__alt_data_end+0xf800e860>
    f234:	8025883a 	mov	r18,r16
    f238:	dc002903 	ldbu	r16,164(sp)
    f23c:	e011883a 	mov	r8,fp
    f240:	84003fcc 	andi	r16,r16,255
    f244:	8005e51e 	bne	r16,zero,109dc <___vfprintf_internal_r+0x22c4>
    f248:	94800414 	ori	r18,r18,16
    f24c:	9080080c 	andi	r2,r18,32
    f250:	10022b26 	beq	r2,zero,fb00 <___vfprintf_internal_r+0x13e8>
    f254:	d9002e17 	ldw	r4,184(sp)
    f258:	d9402a17 	ldw	r5,168(sp)
    f25c:	d8002785 	stb	zero,158(sp)
    f260:	20c00204 	addi	r3,r4,8
    f264:	24c00017 	ldw	r19,0(r4)
    f268:	25800117 	ldw	r22,4(r4)
    f26c:	28042e16 	blt	r5,zero,10328 <___vfprintf_internal_r+0x1c10>
    f270:	013fdfc4 	movi	r4,-129
    f274:	9d84b03a 	or	r2,r19,r22
    f278:	d8c02e15 	stw	r3,184(sp)
    f27c:	9124703a 	and	r18,r18,r4
    f280:	0039883a 	mov	fp,zero
    f284:	103e801e 	bne	r2,zero,ec88 <__alt_data_end+0xf800ec88>
    f288:	d9002a17 	ldw	r4,168(sp)
    f28c:	2002e01e 	bne	r4,zero,fe10 <___vfprintf_internal_r+0x16f8>
    f290:	d8002a15 	stw	zero,168(sp)
    f294:	d8002b15 	stw	zero,172(sp)
    f298:	dc001e04 	addi	r16,sp,120
    f29c:	003ef506 	br	ee74 <__alt_data_end+0xf800ee74>
    f2a0:	8025883a 	mov	r18,r16
    f2a4:	dc002903 	ldbu	r16,164(sp)
    f2a8:	e011883a 	mov	r8,fp
    f2ac:	84003fcc 	andi	r16,r16,255
    f2b0:	8005ba1e 	bne	r16,zero,1099c <___vfprintf_internal_r+0x2284>
    f2b4:	010000b4 	movhi	r4,2
    f2b8:	21328404 	addi	r4,r4,-13808
    f2bc:	d9003915 	stw	r4,228(sp)
    f2c0:	9080080c 	andi	r2,r18,32
    f2c4:	10006126 	beq	r2,zero,f44c <___vfprintf_internal_r+0xd34>
    f2c8:	d9402e17 	ldw	r5,184(sp)
    f2cc:	2cc00017 	ldw	r19,0(r5)
    f2d0:	2d800117 	ldw	r22,4(r5)
    f2d4:	29400204 	addi	r5,r5,8
    f2d8:	d9402e15 	stw	r5,184(sp)
    f2dc:	9080004c 	andi	r2,r18,1
    f2e0:	1001ac26 	beq	r2,zero,f994 <___vfprintf_internal_r+0x127c>
    f2e4:	9d84b03a 	or	r2,r19,r22
    f2e8:	10038526 	beq	r2,zero,10100 <___vfprintf_internal_r+0x19e8>
    f2ec:	d8c02a17 	ldw	r3,168(sp)
    f2f0:	00800c04 	movi	r2,48
    f2f4:	d8802705 	stb	r2,156(sp)
    f2f8:	dc402745 	stb	r17,157(sp)
    f2fc:	d8002785 	stb	zero,158(sp)
    f300:	90800094 	ori	r2,r18,2
    f304:	18047916 	blt	r3,zero,104ec <___vfprintf_internal_r+0x1dd4>
    f308:	00bfdfc4 	movi	r2,-129
    f30c:	90a4703a 	and	r18,r18,r2
    f310:	94800094 	ori	r18,r18,2
    f314:	0039883a 	mov	fp,zero
    f318:	d9003917 	ldw	r4,228(sp)
    f31c:	dc001e04 	addi	r16,sp,120
    f320:	988003cc 	andi	r2,r19,15
    f324:	b006973a 	slli	r3,r22,28
    f328:	2085883a 	add	r2,r4,r2
    f32c:	9826d13a 	srli	r19,r19,4
    f330:	10800003 	ldbu	r2,0(r2)
    f334:	b02cd13a 	srli	r22,r22,4
    f338:	843fffc4 	addi	r16,r16,-1
    f33c:	1ce6b03a 	or	r19,r3,r19
    f340:	80800005 	stb	r2,0(r16)
    f344:	9d84b03a 	or	r2,r19,r22
    f348:	103ff51e 	bne	r2,zero,f320 <__alt_data_end+0xf800f320>
    f34c:	d8c02817 	ldw	r3,160(sp)
    f350:	1c07c83a 	sub	r3,r3,r16
    f354:	d8c02b15 	stw	r3,172(sp)
    f358:	003ec606 	br	ee74 <__alt_data_end+0xf800ee74>
    f35c:	8025883a 	mov	r18,r16
    f360:	dc002903 	ldbu	r16,164(sp)
    f364:	e011883a 	mov	r8,fp
    f368:	84003fcc 	andi	r16,r16,255
    f36c:	803e9626 	beq	r16,zero,edc8 <__alt_data_end+0xf800edc8>
    f370:	d8c02b03 	ldbu	r3,172(sp)
    f374:	d8c02785 	stb	r3,158(sp)
    f378:	003e9306 	br	edc8 <__alt_data_end+0xf800edc8>
    f37c:	00c00044 	movi	r3,1
    f380:	d8c02905 	stb	r3,164(sp)
    f384:	00c00ac4 	movi	r3,43
    f388:	d8c02b05 	stb	r3,172(sp)
    f38c:	ac400007 	ldb	r17,0(r21)
    f390:	003d4306 	br	e8a0 <__alt_data_end+0xf800e8a0>
    f394:	84000814 	ori	r16,r16,32
    f398:	ac400007 	ldb	r17,0(r21)
    f39c:	003d4006 	br	e8a0 <__alt_data_end+0xf800e8a0>
    f3a0:	d8802e17 	ldw	r2,184(sp)
    f3a4:	8025883a 	mov	r18,r16
    f3a8:	d8002785 	stb	zero,158(sp)
    f3ac:	14000017 	ldw	r16,0(r2)
    f3b0:	e011883a 	mov	r8,fp
    f3b4:	14c00104 	addi	r19,r2,4
    f3b8:	80042d26 	beq	r16,zero,10470 <___vfprintf_internal_r+0x1d58>
    f3bc:	d8c02a17 	ldw	r3,168(sp)
    f3c0:	1803e416 	blt	r3,zero,10354 <___vfprintf_internal_r+0x1c3c>
    f3c4:	180d883a 	mov	r6,r3
    f3c8:	000b883a 	mov	r5,zero
    f3cc:	8009883a 	mov	r4,r16
    f3d0:	df003d15 	stw	fp,244(sp)
    f3d4:	00138440 	call	13844 <memchr>
    f3d8:	da003d17 	ldw	r8,244(sp)
    f3dc:	10046826 	beq	r2,zero,10580 <___vfprintf_internal_r+0x1e68>
    f3e0:	1405c83a 	sub	r2,r2,r16
    f3e4:	d8802b15 	stw	r2,172(sp)
    f3e8:	1003e016 	blt	r2,zero,1036c <___vfprintf_internal_r+0x1c54>
    f3ec:	df002783 	ldbu	fp,158(sp)
    f3f0:	d8802915 	stw	r2,164(sp)
    f3f4:	dcc02e15 	stw	r19,184(sp)
    f3f8:	d8002a15 	stw	zero,168(sp)
    f3fc:	d8003215 	stw	zero,200(sp)
    f400:	003ea206 	br	ee8c <__alt_data_end+0xf800ee8c>
    f404:	8025883a 	mov	r18,r16
    f408:	dc002903 	ldbu	r16,164(sp)
    f40c:	e011883a 	mov	r8,fp
    f410:	84003fcc 	andi	r16,r16,255
    f414:	803f8d26 	beq	r16,zero,f24c <__alt_data_end+0xf800f24c>
    f418:	d8c02b03 	ldbu	r3,172(sp)
    f41c:	d8c02785 	stb	r3,158(sp)
    f420:	003f8a06 	br	f24c <__alt_data_end+0xf800f24c>
    f424:	8025883a 	mov	r18,r16
    f428:	dc002903 	ldbu	r16,164(sp)
    f42c:	e011883a 	mov	r8,fp
    f430:	84003fcc 	andi	r16,r16,255
    f434:	8005661e 	bne	r16,zero,109d0 <___vfprintf_internal_r+0x22b8>
    f438:	010000b4 	movhi	r4,2
    f43c:	21328904 	addi	r4,r4,-13788
    f440:	d9003915 	stw	r4,228(sp)
    f444:	9080080c 	andi	r2,r18,32
    f448:	103f9f1e 	bne	r2,zero,f2c8 <__alt_data_end+0xf800f2c8>
    f44c:	9080040c 	andi	r2,r18,16
    f450:	1002eb26 	beq	r2,zero,10000 <___vfprintf_internal_r+0x18e8>
    f454:	d8802e17 	ldw	r2,184(sp)
    f458:	002d883a 	mov	r22,zero
    f45c:	14c00017 	ldw	r19,0(r2)
    f460:	10800104 	addi	r2,r2,4
    f464:	d8802e15 	stw	r2,184(sp)
    f468:	003f9c06 	br	f2dc <__alt_data_end+0xf800f2dc>
    f46c:	d8802b07 	ldb	r2,172(sp)
    f470:	1002e11e 	bne	r2,zero,fff8 <___vfprintf_internal_r+0x18e0>
    f474:	00c00044 	movi	r3,1
    f478:	d8c02905 	stb	r3,164(sp)
    f47c:	00c00804 	movi	r3,32
    f480:	d8c02b05 	stb	r3,172(sp)
    f484:	ac400007 	ldb	r17,0(r21)
    f488:	003d0506 	br	e8a0 <__alt_data_end+0xf800e8a0>
    f48c:	84000054 	ori	r16,r16,1
    f490:	ac400007 	ldb	r17,0(r21)
    f494:	003d0206 	br	e8a0 <__alt_data_end+0xf800e8a0>
    f498:	8025883a 	mov	r18,r16
    f49c:	dc002903 	ldbu	r16,164(sp)
    f4a0:	e011883a 	mov	r8,fp
    f4a4:	84003fcc 	andi	r16,r16,255
    f4a8:	803de726 	beq	r16,zero,ec48 <__alt_data_end+0xf800ec48>
    f4ac:	d8c02b03 	ldbu	r3,172(sp)
    f4b0:	d8c02785 	stb	r3,158(sp)
    f4b4:	003de406 	br	ec48 <__alt_data_end+0xf800ec48>
    f4b8:	84001014 	ori	r16,r16,64
    f4bc:	ac400007 	ldb	r17,0(r21)
    f4c0:	003cf706 	br	e8a0 <__alt_data_end+0xf800e8a0>
    f4c4:	ac400007 	ldb	r17,0(r21)
    f4c8:	00801b04 	movi	r2,108
    f4cc:	88838f26 	beq	r17,r2,1030c <___vfprintf_internal_r+0x1bf4>
    f4d0:	84000414 	ori	r16,r16,16
    f4d4:	003cf206 	br	e8a0 <__alt_data_end+0xf800e8a0>
    f4d8:	8025883a 	mov	r18,r16
    f4dc:	dc002903 	ldbu	r16,164(sp)
    f4e0:	e011883a 	mov	r8,fp
    f4e4:	84003fcc 	andi	r16,r16,255
    f4e8:	80053f1e 	bne	r16,zero,109e8 <___vfprintf_internal_r+0x22d0>
    f4ec:	9080080c 	andi	r2,r18,32
    f4f0:	1002d226 	beq	r2,zero,1003c <___vfprintf_internal_r+0x1924>
    f4f4:	d9002e17 	ldw	r4,184(sp)
    f4f8:	d9402f17 	ldw	r5,188(sp)
    f4fc:	20800017 	ldw	r2,0(r4)
    f500:	2807d7fa 	srai	r3,r5,31
    f504:	21000104 	addi	r4,r4,4
    f508:	d9002e15 	stw	r4,184(sp)
    f50c:	11400015 	stw	r5,0(r2)
    f510:	10c00115 	stw	r3,4(r2)
    f514:	003cb806 	br	e7f8 <__alt_data_end+0xf800e7f8>
    f518:	d8c02e17 	ldw	r3,184(sp)
    f51c:	d9002e17 	ldw	r4,184(sp)
    f520:	8025883a 	mov	r18,r16
    f524:	18800017 	ldw	r2,0(r3)
    f528:	21000104 	addi	r4,r4,4
    f52c:	00c00044 	movi	r3,1
    f530:	e011883a 	mov	r8,fp
    f534:	d8c02915 	stw	r3,164(sp)
    f538:	d8002785 	stb	zero,158(sp)
    f53c:	d8801405 	stb	r2,80(sp)
    f540:	d9002e15 	stw	r4,184(sp)
    f544:	d8c02b15 	stw	r3,172(sp)
    f548:	d8002a15 	stw	zero,168(sp)
    f54c:	d8003215 	stw	zero,200(sp)
    f550:	dc001404 	addi	r16,sp,80
    f554:	0039883a 	mov	fp,zero
    f558:	003e5306 	br	eea8 <__alt_data_end+0xf800eea8>
    f55c:	010000b4 	movhi	r4,2
    f560:	21328904 	addi	r4,r4,-13788
    f564:	0039883a 	mov	fp,zero
    f568:	d9003915 	stw	r4,228(sp)
    f56c:	04401e04 	movi	r17,120
    f570:	003f6906 	br	f318 <__alt_data_end+0xf800f318>
    f574:	8025883a 	mov	r18,r16
    f578:	dc002903 	ldbu	r16,164(sp)
    f57c:	e011883a 	mov	r8,fp
    f580:	84003fcc 	andi	r16,r16,255
    f584:	8005081e 	bne	r16,zero,109a8 <___vfprintf_internal_r+0x2290>
    f588:	883d6126 	beq	r17,zero,eb10 <__alt_data_end+0xf800eb10>
    f58c:	00c00044 	movi	r3,1
    f590:	d8c02915 	stw	r3,164(sp)
    f594:	dc401405 	stb	r17,80(sp)
    f598:	d8002785 	stb	zero,158(sp)
    f59c:	003fe906 	br	f544 <__alt_data_end+0xf800f544>
    f5a0:	014000b4 	movhi	r5,2
    f5a4:	29728904 	addi	r5,r5,-13788
    f5a8:	d9403915 	stw	r5,228(sp)
    f5ac:	d8c02e15 	stw	r3,184(sp)
    f5b0:	1025883a 	mov	r18,r2
    f5b4:	04401e04 	movi	r17,120
    f5b8:	9d84b03a 	or	r2,r19,r22
    f5bc:	1000fc1e 	bne	r2,zero,f9b0 <___vfprintf_internal_r+0x1298>
    f5c0:	0039883a 	mov	fp,zero
    f5c4:	00800084 	movi	r2,2
    f5c8:	10803fcc 	andi	r2,r2,255
    f5cc:	00c00044 	movi	r3,1
    f5d0:	10c20f26 	beq	r2,r3,fe10 <___vfprintf_internal_r+0x16f8>
    f5d4:	00c00084 	movi	r3,2
    f5d8:	10fd3326 	beq	r2,r3,eaa8 <__alt_data_end+0xf800eaa8>
    f5dc:	003e0b06 	br	ee0c <__alt_data_end+0xf800ee0c>
    f5e0:	d8c02017 	ldw	r3,128(sp)
    f5e4:	003e7106 	br	efac <__alt_data_end+0xf800efac>
    f5e8:	00801944 	movi	r2,101
    f5ec:	14407e0e 	bge	r2,r17,f7e8 <___vfprintf_internal_r+0x10d0>
    f5f0:	d9003617 	ldw	r4,216(sp)
    f5f4:	d9403817 	ldw	r5,224(sp)
    f5f8:	000d883a 	mov	r6,zero
    f5fc:	000f883a 	mov	r7,zero
    f600:	d8c03c15 	stw	r3,240(sp)
    f604:	da003d15 	stw	r8,244(sp)
    f608:	0018b580 	call	18b58 <__eqdf2>
    f60c:	d8c03c17 	ldw	r3,240(sp)
    f610:	da003d17 	ldw	r8,244(sp)
    f614:	1000f71e 	bne	r2,zero,f9f4 <___vfprintf_internal_r+0x12dc>
    f618:	d8801f17 	ldw	r2,124(sp)
    f61c:	010000b4 	movhi	r4,2
    f620:	21329004 	addi	r4,r4,-13760
    f624:	18c00044 	addi	r3,r3,1
    f628:	10800044 	addi	r2,r2,1
    f62c:	41000015 	stw	r4,0(r8)
    f630:	01000044 	movi	r4,1
    f634:	41000115 	stw	r4,4(r8)
    f638:	d8c02015 	stw	r3,128(sp)
    f63c:	d8801f15 	stw	r2,124(sp)
    f640:	010001c4 	movi	r4,7
    f644:	2082b816 	blt	r4,r2,10128 <___vfprintf_internal_r+0x1a10>
    f648:	42000204 	addi	r8,r8,8
    f64c:	d8802617 	ldw	r2,152(sp)
    f650:	d9403317 	ldw	r5,204(sp)
    f654:	11400216 	blt	r2,r5,f660 <___vfprintf_internal_r+0xf48>
    f658:	9080004c 	andi	r2,r18,1
    f65c:	103eb326 	beq	r2,zero,f12c <__alt_data_end+0xf800f12c>
    f660:	d8803717 	ldw	r2,220(sp)
    f664:	d9003417 	ldw	r4,208(sp)
    f668:	d9403717 	ldw	r5,220(sp)
    f66c:	1887883a 	add	r3,r3,r2
    f670:	d8801f17 	ldw	r2,124(sp)
    f674:	41000015 	stw	r4,0(r8)
    f678:	41400115 	stw	r5,4(r8)
    f67c:	10800044 	addi	r2,r2,1
    f680:	d8c02015 	stw	r3,128(sp)
    f684:	d8801f15 	stw	r2,124(sp)
    f688:	010001c4 	movi	r4,7
    f68c:	20832916 	blt	r4,r2,10334 <___vfprintf_internal_r+0x1c1c>
    f690:	42000204 	addi	r8,r8,8
    f694:	d8803317 	ldw	r2,204(sp)
    f698:	143fffc4 	addi	r16,r2,-1
    f69c:	043ea30e 	bge	zero,r16,f12c <__alt_data_end+0xf800f12c>
    f6a0:	04400404 	movi	r17,16
    f6a4:	d8801f17 	ldw	r2,124(sp)
    f6a8:	8c00880e 	bge	r17,r16,f8cc <___vfprintf_internal_r+0x11b4>
    f6ac:	014000b4 	movhi	r5,2
    f6b0:	29729084 	addi	r5,r5,-13758
    f6b4:	d9402c15 	stw	r5,176(sp)
    f6b8:	058001c4 	movi	r22,7
    f6bc:	dcc02d17 	ldw	r19,180(sp)
    f6c0:	00000306 	br	f6d0 <___vfprintf_internal_r+0xfb8>
    f6c4:	42000204 	addi	r8,r8,8
    f6c8:	843ffc04 	addi	r16,r16,-16
    f6cc:	8c00820e 	bge	r17,r16,f8d8 <___vfprintf_internal_r+0x11c0>
    f6d0:	18c00404 	addi	r3,r3,16
    f6d4:	10800044 	addi	r2,r2,1
    f6d8:	45000015 	stw	r20,0(r8)
    f6dc:	44400115 	stw	r17,4(r8)
    f6e0:	d8c02015 	stw	r3,128(sp)
    f6e4:	d8801f15 	stw	r2,124(sp)
    f6e8:	b0bff60e 	bge	r22,r2,f6c4 <__alt_data_end+0xf800f6c4>
    f6ec:	d9801e04 	addi	r6,sp,120
    f6f0:	b80b883a 	mov	r5,r23
    f6f4:	9809883a 	mov	r4,r19
    f6f8:	00156980 	call	15698 <__sprint_r>
    f6fc:	103d0a1e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    f700:	d8c02017 	ldw	r3,128(sp)
    f704:	d8801f17 	ldw	r2,124(sp)
    f708:	da000404 	addi	r8,sp,16
    f70c:	003fee06 	br	f6c8 <__alt_data_end+0xf800f6c8>
    f710:	d9403117 	ldw	r5,196(sp)
    f714:	d8802917 	ldw	r2,164(sp)
    f718:	28adc83a 	sub	r22,r5,r2
    f71c:	05be410e 	bge	zero,r22,f024 <__alt_data_end+0xf800f024>
    f720:	07000404 	movi	fp,16
    f724:	d8801f17 	ldw	r2,124(sp)
    f728:	e5838f0e 	bge	fp,r22,10568 <___vfprintf_internal_r+0x1e50>
    f72c:	014000b4 	movhi	r5,2
    f730:	29729084 	addi	r5,r5,-13758
    f734:	dc403015 	stw	r17,192(sp)
    f738:	d9402c15 	stw	r5,176(sp)
    f73c:	b023883a 	mov	r17,r22
    f740:	04c001c4 	movi	r19,7
    f744:	a82d883a 	mov	r22,r21
    f748:	902b883a 	mov	r21,r18
    f74c:	8025883a 	mov	r18,r16
    f750:	dc002d17 	ldw	r16,180(sp)
    f754:	00000306 	br	f764 <___vfprintf_internal_r+0x104c>
    f758:	8c7ffc04 	addi	r17,r17,-16
    f75c:	42000204 	addi	r8,r8,8
    f760:	e440110e 	bge	fp,r17,f7a8 <___vfprintf_internal_r+0x1090>
    f764:	18c00404 	addi	r3,r3,16
    f768:	10800044 	addi	r2,r2,1
    f76c:	45000015 	stw	r20,0(r8)
    f770:	47000115 	stw	fp,4(r8)
    f774:	d8c02015 	stw	r3,128(sp)
    f778:	d8801f15 	stw	r2,124(sp)
    f77c:	98bff60e 	bge	r19,r2,f758 <__alt_data_end+0xf800f758>
    f780:	d9801e04 	addi	r6,sp,120
    f784:	b80b883a 	mov	r5,r23
    f788:	8009883a 	mov	r4,r16
    f78c:	00156980 	call	15698 <__sprint_r>
    f790:	103ce51e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    f794:	8c7ffc04 	addi	r17,r17,-16
    f798:	d8c02017 	ldw	r3,128(sp)
    f79c:	d8801f17 	ldw	r2,124(sp)
    f7a0:	da000404 	addi	r8,sp,16
    f7a4:	e47fef16 	blt	fp,r17,f764 <__alt_data_end+0xf800f764>
    f7a8:	9021883a 	mov	r16,r18
    f7ac:	a825883a 	mov	r18,r21
    f7b0:	b02b883a 	mov	r21,r22
    f7b4:	882d883a 	mov	r22,r17
    f7b8:	dc403017 	ldw	r17,192(sp)
    f7bc:	d9002c17 	ldw	r4,176(sp)
    f7c0:	1d87883a 	add	r3,r3,r22
    f7c4:	10800044 	addi	r2,r2,1
    f7c8:	41000015 	stw	r4,0(r8)
    f7cc:	45800115 	stw	r22,4(r8)
    f7d0:	d8c02015 	stw	r3,128(sp)
    f7d4:	d8801f15 	stw	r2,124(sp)
    f7d8:	010001c4 	movi	r4,7
    f7dc:	20818e16 	blt	r4,r2,fe18 <___vfprintf_internal_r+0x1700>
    f7e0:	42000204 	addi	r8,r8,8
    f7e4:	003e0f06 	br	f024 <__alt_data_end+0xf800f024>
    f7e8:	d9403317 	ldw	r5,204(sp)
    f7ec:	00800044 	movi	r2,1
    f7f0:	18c00044 	addi	r3,r3,1
    f7f4:	1141530e 	bge	r2,r5,fd44 <___vfprintf_internal_r+0x162c>
    f7f8:	dc401f17 	ldw	r17,124(sp)
    f7fc:	00800044 	movi	r2,1
    f800:	40800115 	stw	r2,4(r8)
    f804:	8c400044 	addi	r17,r17,1
    f808:	44000015 	stw	r16,0(r8)
    f80c:	d8c02015 	stw	r3,128(sp)
    f810:	dc401f15 	stw	r17,124(sp)
    f814:	008001c4 	movi	r2,7
    f818:	14416b16 	blt	r2,r17,fdc8 <___vfprintf_internal_r+0x16b0>
    f81c:	42000204 	addi	r8,r8,8
    f820:	d8803717 	ldw	r2,220(sp)
    f824:	d9003417 	ldw	r4,208(sp)
    f828:	8c400044 	addi	r17,r17,1
    f82c:	10c7883a 	add	r3,r2,r3
    f830:	40800115 	stw	r2,4(r8)
    f834:	41000015 	stw	r4,0(r8)
    f838:	d8c02015 	stw	r3,128(sp)
    f83c:	dc401f15 	stw	r17,124(sp)
    f840:	008001c4 	movi	r2,7
    f844:	14416916 	blt	r2,r17,fdec <___vfprintf_internal_r+0x16d4>
    f848:	45800204 	addi	r22,r8,8
    f84c:	d9003617 	ldw	r4,216(sp)
    f850:	d9403817 	ldw	r5,224(sp)
    f854:	000d883a 	mov	r6,zero
    f858:	000f883a 	mov	r7,zero
    f85c:	d8c03c15 	stw	r3,240(sp)
    f860:	0018b580 	call	18b58 <__eqdf2>
    f864:	d8c03c17 	ldw	r3,240(sp)
    f868:	1000bc26 	beq	r2,zero,fb5c <___vfprintf_internal_r+0x1444>
    f86c:	d9403317 	ldw	r5,204(sp)
    f870:	84000044 	addi	r16,r16,1
    f874:	8c400044 	addi	r17,r17,1
    f878:	28bfffc4 	addi	r2,r5,-1
    f87c:	1887883a 	add	r3,r3,r2
    f880:	b0800115 	stw	r2,4(r22)
    f884:	b4000015 	stw	r16,0(r22)
    f888:	d8c02015 	stw	r3,128(sp)
    f88c:	dc401f15 	stw	r17,124(sp)
    f890:	008001c4 	movi	r2,7
    f894:	14414316 	blt	r2,r17,fda4 <___vfprintf_internal_r+0x168c>
    f898:	b5800204 	addi	r22,r22,8
    f89c:	d9003a17 	ldw	r4,232(sp)
    f8a0:	df0022c4 	addi	fp,sp,139
    f8a4:	8c400044 	addi	r17,r17,1
    f8a8:	20c7883a 	add	r3,r4,r3
    f8ac:	b7000015 	stw	fp,0(r22)
    f8b0:	b1000115 	stw	r4,4(r22)
    f8b4:	d8c02015 	stw	r3,128(sp)
    f8b8:	dc401f15 	stw	r17,124(sp)
    f8bc:	008001c4 	movi	r2,7
    f8c0:	14400e16 	blt	r2,r17,f8fc <___vfprintf_internal_r+0x11e4>
    f8c4:	b2000204 	addi	r8,r22,8
    f8c8:	003e1806 	br	f12c <__alt_data_end+0xf800f12c>
    f8cc:	010000b4 	movhi	r4,2
    f8d0:	21329084 	addi	r4,r4,-13758
    f8d4:	d9002c15 	stw	r4,176(sp)
    f8d8:	d9002c17 	ldw	r4,176(sp)
    f8dc:	1c07883a 	add	r3,r3,r16
    f8e0:	44000115 	stw	r16,4(r8)
    f8e4:	41000015 	stw	r4,0(r8)
    f8e8:	10800044 	addi	r2,r2,1
    f8ec:	d8c02015 	stw	r3,128(sp)
    f8f0:	d8801f15 	stw	r2,124(sp)
    f8f4:	010001c4 	movi	r4,7
    f8f8:	20be0b0e 	bge	r4,r2,f128 <__alt_data_end+0xf800f128>
    f8fc:	d9002d17 	ldw	r4,180(sp)
    f900:	d9801e04 	addi	r6,sp,120
    f904:	b80b883a 	mov	r5,r23
    f908:	00156980 	call	15698 <__sprint_r>
    f90c:	103c861e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    f910:	d8c02017 	ldw	r3,128(sp)
    f914:	da000404 	addi	r8,sp,16
    f918:	003e0406 	br	f12c <__alt_data_end+0xf800f12c>
    f91c:	d9002d17 	ldw	r4,180(sp)
    f920:	d9801e04 	addi	r6,sp,120
    f924:	b80b883a 	mov	r5,r23
    f928:	00156980 	call	15698 <__sprint_r>
    f92c:	103e3b26 	beq	r2,zero,f21c <__alt_data_end+0xf800f21c>
    f930:	003c7d06 	br	eb28 <__alt_data_end+0xf800eb28>
    f934:	d9002d17 	ldw	r4,180(sp)
    f938:	d9801e04 	addi	r6,sp,120
    f93c:	b80b883a 	mov	r5,r23
    f940:	00156980 	call	15698 <__sprint_r>
    f944:	103c781e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    f948:	d8c02017 	ldw	r3,128(sp)
    f94c:	da000404 	addi	r8,sp,16
    f950:	003de906 	br	f0f8 <__alt_data_end+0xf800f0f8>
    f954:	d9002d17 	ldw	r4,180(sp)
    f958:	d9801e04 	addi	r6,sp,120
    f95c:	b80b883a 	mov	r5,r23
    f960:	00156980 	call	15698 <__sprint_r>
    f964:	103c701e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    f968:	d8c02017 	ldw	r3,128(sp)
    f96c:	da000404 	addi	r8,sp,16
    f970:	003d9b06 	br	efe0 <__alt_data_end+0xf800efe0>
    f974:	d9002d17 	ldw	r4,180(sp)
    f978:	d9801e04 	addi	r6,sp,120
    f97c:	b80b883a 	mov	r5,r23
    f980:	00156980 	call	15698 <__sprint_r>
    f984:	103c681e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    f988:	d8c02017 	ldw	r3,128(sp)
    f98c:	da000404 	addi	r8,sp,16
    f990:	003da106 	br	f018 <__alt_data_end+0xf800f018>
    f994:	d9402a17 	ldw	r5,168(sp)
    f998:	d8002785 	stb	zero,158(sp)
    f99c:	283f0616 	blt	r5,zero,f5b8 <__alt_data_end+0xf800f5b8>
    f9a0:	00ffdfc4 	movi	r3,-129
    f9a4:	9d84b03a 	or	r2,r19,r22
    f9a8:	90e4703a 	and	r18,r18,r3
    f9ac:	103c3b26 	beq	r2,zero,ea9c <__alt_data_end+0xf800ea9c>
    f9b0:	0039883a 	mov	fp,zero
    f9b4:	003e5806 	br	f318 <__alt_data_end+0xf800f318>
    f9b8:	9080040c 	andi	r2,r18,16
    f9bc:	1001b326 	beq	r2,zero,1008c <___vfprintf_internal_r+0x1974>
    f9c0:	d8c02e17 	ldw	r3,184(sp)
    f9c4:	d9002a17 	ldw	r4,168(sp)
    f9c8:	d8002785 	stb	zero,158(sp)
    f9cc:	18800104 	addi	r2,r3,4
    f9d0:	1cc00017 	ldw	r19,0(r3)
    f9d4:	002d883a 	mov	r22,zero
    f9d8:	2001b516 	blt	r4,zero,100b0 <___vfprintf_internal_r+0x1998>
    f9dc:	00ffdfc4 	movi	r3,-129
    f9e0:	d8802e15 	stw	r2,184(sp)
    f9e4:	90e4703a 	and	r18,r18,r3
    f9e8:	983d0526 	beq	r19,zero,ee00 <__alt_data_end+0xf800ee00>
    f9ec:	0039883a 	mov	fp,zero
    f9f0:	003d0806 	br	ee14 <__alt_data_end+0xf800ee14>
    f9f4:	dc402617 	ldw	r17,152(sp)
    f9f8:	0441d30e 	bge	zero,r17,10148 <___vfprintf_internal_r+0x1a30>
    f9fc:	dc403217 	ldw	r17,200(sp)
    fa00:	d8803317 	ldw	r2,204(sp)
    fa04:	1440010e 	bge	r2,r17,fa0c <___vfprintf_internal_r+0x12f4>
    fa08:	1023883a 	mov	r17,r2
    fa0c:	04400a0e 	bge	zero,r17,fa38 <___vfprintf_internal_r+0x1320>
    fa10:	d8801f17 	ldw	r2,124(sp)
    fa14:	1c47883a 	add	r3,r3,r17
    fa18:	44000015 	stw	r16,0(r8)
    fa1c:	10800044 	addi	r2,r2,1
    fa20:	44400115 	stw	r17,4(r8)
    fa24:	d8c02015 	stw	r3,128(sp)
    fa28:	d8801f15 	stw	r2,124(sp)
    fa2c:	010001c4 	movi	r4,7
    fa30:	20826516 	blt	r4,r2,103c8 <___vfprintf_internal_r+0x1cb0>
    fa34:	42000204 	addi	r8,r8,8
    fa38:	88026116 	blt	r17,zero,103c0 <___vfprintf_internal_r+0x1ca8>
    fa3c:	d9003217 	ldw	r4,200(sp)
    fa40:	2463c83a 	sub	r17,r4,r17
    fa44:	04407b0e 	bge	zero,r17,fc34 <___vfprintf_internal_r+0x151c>
    fa48:	05800404 	movi	r22,16
    fa4c:	d8801f17 	ldw	r2,124(sp)
    fa50:	b4419d0e 	bge	r22,r17,100c8 <___vfprintf_internal_r+0x19b0>
    fa54:	010000b4 	movhi	r4,2
    fa58:	21329084 	addi	r4,r4,-13758
    fa5c:	d9002c15 	stw	r4,176(sp)
    fa60:	070001c4 	movi	fp,7
    fa64:	dcc02d17 	ldw	r19,180(sp)
    fa68:	00000306 	br	fa78 <___vfprintf_internal_r+0x1360>
    fa6c:	42000204 	addi	r8,r8,8
    fa70:	8c7ffc04 	addi	r17,r17,-16
    fa74:	b441970e 	bge	r22,r17,100d4 <___vfprintf_internal_r+0x19bc>
    fa78:	18c00404 	addi	r3,r3,16
    fa7c:	10800044 	addi	r2,r2,1
    fa80:	45000015 	stw	r20,0(r8)
    fa84:	45800115 	stw	r22,4(r8)
    fa88:	d8c02015 	stw	r3,128(sp)
    fa8c:	d8801f15 	stw	r2,124(sp)
    fa90:	e0bff60e 	bge	fp,r2,fa6c <__alt_data_end+0xf800fa6c>
    fa94:	d9801e04 	addi	r6,sp,120
    fa98:	b80b883a 	mov	r5,r23
    fa9c:	9809883a 	mov	r4,r19
    faa0:	00156980 	call	15698 <__sprint_r>
    faa4:	103c201e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    faa8:	d8c02017 	ldw	r3,128(sp)
    faac:	d8801f17 	ldw	r2,124(sp)
    fab0:	da000404 	addi	r8,sp,16
    fab4:	003fee06 	br	fa70 <__alt_data_end+0xf800fa70>
    fab8:	d9002d17 	ldw	r4,180(sp)
    fabc:	d9801e04 	addi	r6,sp,120
    fac0:	b80b883a 	mov	r5,r23
    fac4:	00156980 	call	15698 <__sprint_r>
    fac8:	103c171e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    facc:	d8c02017 	ldw	r3,128(sp)
    fad0:	df002787 	ldb	fp,158(sp)
    fad4:	da000404 	addi	r8,sp,16
    fad8:	003d3406 	br	efac <__alt_data_end+0xf800efac>
    fadc:	9080040c 	andi	r2,r18,16
    fae0:	10016126 	beq	r2,zero,10068 <___vfprintf_internal_r+0x1950>
    fae4:	d9402e17 	ldw	r5,184(sp)
    fae8:	2cc00017 	ldw	r19,0(r5)
    faec:	29400104 	addi	r5,r5,4
    faf0:	d9402e15 	stw	r5,184(sp)
    faf4:	982dd7fa 	srai	r22,r19,31
    faf8:	b005883a 	mov	r2,r22
    fafc:	003c5a06 	br	ec68 <__alt_data_end+0xf800ec68>
    fb00:	9080040c 	andi	r2,r18,16
    fb04:	10003526 	beq	r2,zero,fbdc <___vfprintf_internal_r+0x14c4>
    fb08:	d8c02e17 	ldw	r3,184(sp)
    fb0c:	d9002a17 	ldw	r4,168(sp)
    fb10:	d8002785 	stb	zero,158(sp)
    fb14:	18800104 	addi	r2,r3,4
    fb18:	1cc00017 	ldw	r19,0(r3)
    fb1c:	002d883a 	mov	r22,zero
    fb20:	20003716 	blt	r4,zero,fc00 <___vfprintf_internal_r+0x14e8>
    fb24:	00ffdfc4 	movi	r3,-129
    fb28:	d8802e15 	stw	r2,184(sp)
    fb2c:	90e4703a 	and	r18,r18,r3
    fb30:	0039883a 	mov	fp,zero
    fb34:	983dd426 	beq	r19,zero,f288 <__alt_data_end+0xf800f288>
    fb38:	00800244 	movi	r2,9
    fb3c:	14fc5336 	bltu	r2,r19,ec8c <__alt_data_end+0xf800ec8c>
    fb40:	d8c02817 	ldw	r3,160(sp)
    fb44:	dc001dc4 	addi	r16,sp,119
    fb48:	9cc00c04 	addi	r19,r19,48
    fb4c:	1c07c83a 	sub	r3,r3,r16
    fb50:	dcc01dc5 	stb	r19,119(sp)
    fb54:	d8c02b15 	stw	r3,172(sp)
    fb58:	003cc606 	br	ee74 <__alt_data_end+0xf800ee74>
    fb5c:	d8803317 	ldw	r2,204(sp)
    fb60:	143fffc4 	addi	r16,r2,-1
    fb64:	043f4d0e 	bge	zero,r16,f89c <__alt_data_end+0xf800f89c>
    fb68:	07000404 	movi	fp,16
    fb6c:	e400810e 	bge	fp,r16,fd74 <___vfprintf_internal_r+0x165c>
    fb70:	014000b4 	movhi	r5,2
    fb74:	29729084 	addi	r5,r5,-13758
    fb78:	d9402c15 	stw	r5,176(sp)
    fb7c:	01c001c4 	movi	r7,7
    fb80:	dcc02d17 	ldw	r19,180(sp)
    fb84:	00000306 	br	fb94 <___vfprintf_internal_r+0x147c>
    fb88:	b5800204 	addi	r22,r22,8
    fb8c:	843ffc04 	addi	r16,r16,-16
    fb90:	e4007b0e 	bge	fp,r16,fd80 <___vfprintf_internal_r+0x1668>
    fb94:	18c00404 	addi	r3,r3,16
    fb98:	8c400044 	addi	r17,r17,1
    fb9c:	b5000015 	stw	r20,0(r22)
    fba0:	b7000115 	stw	fp,4(r22)
    fba4:	d8c02015 	stw	r3,128(sp)
    fba8:	dc401f15 	stw	r17,124(sp)
    fbac:	3c7ff60e 	bge	r7,r17,fb88 <__alt_data_end+0xf800fb88>
    fbb0:	d9801e04 	addi	r6,sp,120
    fbb4:	b80b883a 	mov	r5,r23
    fbb8:	9809883a 	mov	r4,r19
    fbbc:	d9c03c15 	stw	r7,240(sp)
    fbc0:	00156980 	call	15698 <__sprint_r>
    fbc4:	d9c03c17 	ldw	r7,240(sp)
    fbc8:	103bd71e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    fbcc:	d8c02017 	ldw	r3,128(sp)
    fbd0:	dc401f17 	ldw	r17,124(sp)
    fbd4:	dd800404 	addi	r22,sp,16
    fbd8:	003fec06 	br	fb8c <__alt_data_end+0xf800fb8c>
    fbdc:	9080100c 	andi	r2,r18,64
    fbe0:	d8002785 	stb	zero,158(sp)
    fbe4:	10010e26 	beq	r2,zero,10020 <___vfprintf_internal_r+0x1908>
    fbe8:	d9402e17 	ldw	r5,184(sp)
    fbec:	d8c02a17 	ldw	r3,168(sp)
    fbf0:	002d883a 	mov	r22,zero
    fbf4:	28800104 	addi	r2,r5,4
    fbf8:	2cc0000b 	ldhu	r19,0(r5)
    fbfc:	183fc90e 	bge	r3,zero,fb24 <__alt_data_end+0xf800fb24>
    fc00:	d8802e15 	stw	r2,184(sp)
    fc04:	0039883a 	mov	fp,zero
    fc08:	9d84b03a 	or	r2,r19,r22
    fc0c:	103c1e1e 	bne	r2,zero,ec88 <__alt_data_end+0xf800ec88>
    fc10:	00800044 	movi	r2,1
    fc14:	003e6c06 	br	f5c8 <__alt_data_end+0xf800f5c8>
    fc18:	d9002d17 	ldw	r4,180(sp)
    fc1c:	d9801e04 	addi	r6,sp,120
    fc20:	b80b883a 	mov	r5,r23
    fc24:	00156980 	call	15698 <__sprint_r>
    fc28:	103bbf1e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    fc2c:	d8c02017 	ldw	r3,128(sp)
    fc30:	da000404 	addi	r8,sp,16
    fc34:	d9003217 	ldw	r4,200(sp)
    fc38:	d8802617 	ldw	r2,152(sp)
    fc3c:	d9403317 	ldw	r5,204(sp)
    fc40:	8123883a 	add	r17,r16,r4
    fc44:	11400216 	blt	r2,r5,fc50 <___vfprintf_internal_r+0x1538>
    fc48:	9100004c 	andi	r4,r18,1
    fc4c:	20000d26 	beq	r4,zero,fc84 <___vfprintf_internal_r+0x156c>
    fc50:	d9003717 	ldw	r4,220(sp)
    fc54:	d9403417 	ldw	r5,208(sp)
    fc58:	1907883a 	add	r3,r3,r4
    fc5c:	d9001f17 	ldw	r4,124(sp)
    fc60:	41400015 	stw	r5,0(r8)
    fc64:	d9403717 	ldw	r5,220(sp)
    fc68:	21000044 	addi	r4,r4,1
    fc6c:	d8c02015 	stw	r3,128(sp)
    fc70:	41400115 	stw	r5,4(r8)
    fc74:	d9001f15 	stw	r4,124(sp)
    fc78:	014001c4 	movi	r5,7
    fc7c:	2901e816 	blt	r5,r4,10420 <___vfprintf_internal_r+0x1d08>
    fc80:	42000204 	addi	r8,r8,8
    fc84:	d9003317 	ldw	r4,204(sp)
    fc88:	8121883a 	add	r16,r16,r4
    fc8c:	2085c83a 	sub	r2,r4,r2
    fc90:	8461c83a 	sub	r16,r16,r17
    fc94:	1400010e 	bge	r2,r16,fc9c <___vfprintf_internal_r+0x1584>
    fc98:	1021883a 	mov	r16,r2
    fc9c:	04000a0e 	bge	zero,r16,fcc8 <___vfprintf_internal_r+0x15b0>
    fca0:	d9001f17 	ldw	r4,124(sp)
    fca4:	1c07883a 	add	r3,r3,r16
    fca8:	44400015 	stw	r17,0(r8)
    fcac:	21000044 	addi	r4,r4,1
    fcb0:	44000115 	stw	r16,4(r8)
    fcb4:	d8c02015 	stw	r3,128(sp)
    fcb8:	d9001f15 	stw	r4,124(sp)
    fcbc:	014001c4 	movi	r5,7
    fcc0:	2901fb16 	blt	r5,r4,104b0 <___vfprintf_internal_r+0x1d98>
    fcc4:	42000204 	addi	r8,r8,8
    fcc8:	8001f716 	blt	r16,zero,104a8 <___vfprintf_internal_r+0x1d90>
    fccc:	1421c83a 	sub	r16,r2,r16
    fcd0:	043d160e 	bge	zero,r16,f12c <__alt_data_end+0xf800f12c>
    fcd4:	04400404 	movi	r17,16
    fcd8:	d8801f17 	ldw	r2,124(sp)
    fcdc:	8c3efb0e 	bge	r17,r16,f8cc <__alt_data_end+0xf800f8cc>
    fce0:	014000b4 	movhi	r5,2
    fce4:	29729084 	addi	r5,r5,-13758
    fce8:	d9402c15 	stw	r5,176(sp)
    fcec:	058001c4 	movi	r22,7
    fcf0:	dcc02d17 	ldw	r19,180(sp)
    fcf4:	00000306 	br	fd04 <___vfprintf_internal_r+0x15ec>
    fcf8:	42000204 	addi	r8,r8,8
    fcfc:	843ffc04 	addi	r16,r16,-16
    fd00:	8c3ef50e 	bge	r17,r16,f8d8 <__alt_data_end+0xf800f8d8>
    fd04:	18c00404 	addi	r3,r3,16
    fd08:	10800044 	addi	r2,r2,1
    fd0c:	45000015 	stw	r20,0(r8)
    fd10:	44400115 	stw	r17,4(r8)
    fd14:	d8c02015 	stw	r3,128(sp)
    fd18:	d8801f15 	stw	r2,124(sp)
    fd1c:	b0bff60e 	bge	r22,r2,fcf8 <__alt_data_end+0xf800fcf8>
    fd20:	d9801e04 	addi	r6,sp,120
    fd24:	b80b883a 	mov	r5,r23
    fd28:	9809883a 	mov	r4,r19
    fd2c:	00156980 	call	15698 <__sprint_r>
    fd30:	103b7d1e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    fd34:	d8c02017 	ldw	r3,128(sp)
    fd38:	d8801f17 	ldw	r2,124(sp)
    fd3c:	da000404 	addi	r8,sp,16
    fd40:	003fee06 	br	fcfc <__alt_data_end+0xf800fcfc>
    fd44:	9088703a 	and	r4,r18,r2
    fd48:	203eab1e 	bne	r4,zero,f7f8 <__alt_data_end+0xf800f7f8>
    fd4c:	dc401f17 	ldw	r17,124(sp)
    fd50:	40800115 	stw	r2,4(r8)
    fd54:	44000015 	stw	r16,0(r8)
    fd58:	8c400044 	addi	r17,r17,1
    fd5c:	d8c02015 	stw	r3,128(sp)
    fd60:	dc401f15 	stw	r17,124(sp)
    fd64:	008001c4 	movi	r2,7
    fd68:	14400e16 	blt	r2,r17,fda4 <___vfprintf_internal_r+0x168c>
    fd6c:	45800204 	addi	r22,r8,8
    fd70:	003eca06 	br	f89c <__alt_data_end+0xf800f89c>
    fd74:	010000b4 	movhi	r4,2
    fd78:	21329084 	addi	r4,r4,-13758
    fd7c:	d9002c15 	stw	r4,176(sp)
    fd80:	d8802c17 	ldw	r2,176(sp)
    fd84:	1c07883a 	add	r3,r3,r16
    fd88:	8c400044 	addi	r17,r17,1
    fd8c:	b0800015 	stw	r2,0(r22)
    fd90:	b4000115 	stw	r16,4(r22)
    fd94:	d8c02015 	stw	r3,128(sp)
    fd98:	dc401f15 	stw	r17,124(sp)
    fd9c:	008001c4 	movi	r2,7
    fda0:	147ebd0e 	bge	r2,r17,f898 <__alt_data_end+0xf800f898>
    fda4:	d9002d17 	ldw	r4,180(sp)
    fda8:	d9801e04 	addi	r6,sp,120
    fdac:	b80b883a 	mov	r5,r23
    fdb0:	00156980 	call	15698 <__sprint_r>
    fdb4:	103b5c1e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    fdb8:	d8c02017 	ldw	r3,128(sp)
    fdbc:	dc401f17 	ldw	r17,124(sp)
    fdc0:	dd800404 	addi	r22,sp,16
    fdc4:	003eb506 	br	f89c <__alt_data_end+0xf800f89c>
    fdc8:	d9002d17 	ldw	r4,180(sp)
    fdcc:	d9801e04 	addi	r6,sp,120
    fdd0:	b80b883a 	mov	r5,r23
    fdd4:	00156980 	call	15698 <__sprint_r>
    fdd8:	103b531e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    fddc:	d8c02017 	ldw	r3,128(sp)
    fde0:	dc401f17 	ldw	r17,124(sp)
    fde4:	da000404 	addi	r8,sp,16
    fde8:	003e8d06 	br	f820 <__alt_data_end+0xf800f820>
    fdec:	d9002d17 	ldw	r4,180(sp)
    fdf0:	d9801e04 	addi	r6,sp,120
    fdf4:	b80b883a 	mov	r5,r23
    fdf8:	00156980 	call	15698 <__sprint_r>
    fdfc:	103b4a1e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    fe00:	d8c02017 	ldw	r3,128(sp)
    fe04:	dc401f17 	ldw	r17,124(sp)
    fe08:	dd800404 	addi	r22,sp,16
    fe0c:	003e8f06 	br	f84c <__alt_data_end+0xf800f84c>
    fe10:	0027883a 	mov	r19,zero
    fe14:	003f4a06 	br	fb40 <__alt_data_end+0xf800fb40>
    fe18:	d9002d17 	ldw	r4,180(sp)
    fe1c:	d9801e04 	addi	r6,sp,120
    fe20:	b80b883a 	mov	r5,r23
    fe24:	00156980 	call	15698 <__sprint_r>
    fe28:	103b3f1e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
    fe2c:	d8c02017 	ldw	r3,128(sp)
    fe30:	da000404 	addi	r8,sp,16
    fe34:	003c7b06 	br	f024 <__alt_data_end+0xf800f024>
    fe38:	d9402a17 	ldw	r5,168(sp)
    fe3c:	04e7c83a 	sub	r19,zero,r19
    fe40:	07000b44 	movi	fp,45
    fe44:	9804c03a 	cmpne	r2,r19,zero
    fe48:	05adc83a 	sub	r22,zero,r22
    fe4c:	df002785 	stb	fp,158(sp)
    fe50:	b0adc83a 	sub	r22,r22,r2
    fe54:	28017b16 	blt	r5,zero,10444 <___vfprintf_internal_r+0x1d2c>
    fe58:	00bfdfc4 	movi	r2,-129
    fe5c:	90a4703a 	and	r18,r18,r2
    fe60:	003b8906 	br	ec88 <__alt_data_end+0xf800ec88>
    fe64:	d9003617 	ldw	r4,216(sp)
    fe68:	d9403817 	ldw	r5,224(sp)
    fe6c:	da003d15 	stw	r8,244(sp)
    fe70:	00153100 	call	15310 <__fpclassifyd>
    fe74:	da003d17 	ldw	r8,244(sp)
    fe78:	1000f026 	beq	r2,zero,1023c <___vfprintf_internal_r+0x1b24>
    fe7c:	d9002a17 	ldw	r4,168(sp)
    fe80:	05bff7c4 	movi	r22,-33
    fe84:	00bfffc4 	movi	r2,-1
    fe88:	8dac703a 	and	r22,r17,r22
    fe8c:	20820026 	beq	r4,r2,10690 <___vfprintf_internal_r+0x1f78>
    fe90:	008011c4 	movi	r2,71
    fe94:	b081f726 	beq	r22,r2,10674 <___vfprintf_internal_r+0x1f5c>
    fe98:	d9003817 	ldw	r4,224(sp)
    fe9c:	90c04014 	ori	r3,r18,256
    fea0:	d8c02c15 	stw	r3,176(sp)
    fea4:	20021516 	blt	r4,zero,106fc <___vfprintf_internal_r+0x1fe4>
    fea8:	dcc03817 	ldw	r19,224(sp)
    feac:	d8002905 	stb	zero,164(sp)
    feb0:	00801984 	movi	r2,102
    feb4:	8881f926 	beq	r17,r2,1069c <___vfprintf_internal_r+0x1f84>
    feb8:	00801184 	movi	r2,70
    febc:	88821c26 	beq	r17,r2,10730 <___vfprintf_internal_r+0x2018>
    fec0:	00801144 	movi	r2,69
    fec4:	b081ef26 	beq	r22,r2,10684 <___vfprintf_internal_r+0x1f6c>
    fec8:	d8c02a17 	ldw	r3,168(sp)
    fecc:	d8802104 	addi	r2,sp,132
    fed0:	d8800315 	stw	r2,12(sp)
    fed4:	d9403617 	ldw	r5,216(sp)
    fed8:	d8802504 	addi	r2,sp,148
    fedc:	d9002d17 	ldw	r4,180(sp)
    fee0:	d8800215 	stw	r2,8(sp)
    fee4:	d8802604 	addi	r2,sp,152
    fee8:	d8c00015 	stw	r3,0(sp)
    feec:	d8800115 	stw	r2,4(sp)
    fef0:	01c00084 	movi	r7,2
    fef4:	980d883a 	mov	r6,r19
    fef8:	d8c03c15 	stw	r3,240(sp)
    fefc:	da003d15 	stw	r8,244(sp)
    ff00:	0010e480 	call	10e48 <_dtoa_r>
    ff04:	1021883a 	mov	r16,r2
    ff08:	008019c4 	movi	r2,103
    ff0c:	d8c03c17 	ldw	r3,240(sp)
    ff10:	da003d17 	ldw	r8,244(sp)
    ff14:	88817126 	beq	r17,r2,104dc <___vfprintf_internal_r+0x1dc4>
    ff18:	008011c4 	movi	r2,71
    ff1c:	88829126 	beq	r17,r2,10964 <___vfprintf_internal_r+0x224c>
    ff20:	80f9883a 	add	fp,r16,r3
    ff24:	d9003617 	ldw	r4,216(sp)
    ff28:	000d883a 	mov	r6,zero
    ff2c:	000f883a 	mov	r7,zero
    ff30:	980b883a 	mov	r5,r19
    ff34:	da003d15 	stw	r8,244(sp)
    ff38:	0018b580 	call	18b58 <__eqdf2>
    ff3c:	da003d17 	ldw	r8,244(sp)
    ff40:	10018d26 	beq	r2,zero,10578 <___vfprintf_internal_r+0x1e60>
    ff44:	d8802117 	ldw	r2,132(sp)
    ff48:	1700062e 	bgeu	r2,fp,ff64 <___vfprintf_internal_r+0x184c>
    ff4c:	01000c04 	movi	r4,48
    ff50:	10c00044 	addi	r3,r2,1
    ff54:	d8c02115 	stw	r3,132(sp)
    ff58:	11000005 	stb	r4,0(r2)
    ff5c:	d8802117 	ldw	r2,132(sp)
    ff60:	173ffb36 	bltu	r2,fp,ff50 <__alt_data_end+0xf800ff50>
    ff64:	1405c83a 	sub	r2,r2,r16
    ff68:	d8803315 	stw	r2,204(sp)
    ff6c:	008011c4 	movi	r2,71
    ff70:	b0817626 	beq	r22,r2,1054c <___vfprintf_internal_r+0x1e34>
    ff74:	00801944 	movi	r2,101
    ff78:	1442800e 	bge	r2,r17,1097c <___vfprintf_internal_r+0x2264>
    ff7c:	d8c02617 	ldw	r3,152(sp)
    ff80:	00801984 	movi	r2,102
    ff84:	d8c03215 	stw	r3,200(sp)
    ff88:	8881fe26 	beq	r17,r2,10784 <___vfprintf_internal_r+0x206c>
    ff8c:	d8c03217 	ldw	r3,200(sp)
    ff90:	d9003317 	ldw	r4,204(sp)
    ff94:	1901dd16 	blt	r3,r4,1070c <___vfprintf_internal_r+0x1ff4>
    ff98:	9480004c 	andi	r18,r18,1
    ff9c:	90022b1e 	bne	r18,zero,1084c <___vfprintf_internal_r+0x2134>
    ffa0:	1805883a 	mov	r2,r3
    ffa4:	18028316 	blt	r3,zero,109b4 <___vfprintf_internal_r+0x229c>
    ffa8:	d8c03217 	ldw	r3,200(sp)
    ffac:	044019c4 	movi	r17,103
    ffb0:	d8c02b15 	stw	r3,172(sp)
    ffb4:	df002907 	ldb	fp,164(sp)
    ffb8:	e001531e 	bne	fp,zero,10508 <___vfprintf_internal_r+0x1df0>
    ffbc:	df002783 	ldbu	fp,158(sp)
    ffc0:	d8802915 	stw	r2,164(sp)
    ffc4:	dc802c17 	ldw	r18,176(sp)
    ffc8:	d8002a15 	stw	zero,168(sp)
    ffcc:	003baf06 	br	ee8c <__alt_data_end+0xf800ee8c>
    ffd0:	d8c02e17 	ldw	r3,184(sp)
    ffd4:	d9002e17 	ldw	r4,184(sp)
    ffd8:	d9402e17 	ldw	r5,184(sp)
    ffdc:	18c00017 	ldw	r3,0(r3)
    ffe0:	21000117 	ldw	r4,4(r4)
    ffe4:	29400204 	addi	r5,r5,8
    ffe8:	d8c03615 	stw	r3,216(sp)
    ffec:	d9003815 	stw	r4,224(sp)
    fff0:	d9402e15 	stw	r5,184(sp)
    fff4:	003b5006 	br	ed38 <__alt_data_end+0xf800ed38>
    fff8:	ac400007 	ldb	r17,0(r21)
    fffc:	003a2806 	br	e8a0 <__alt_data_end+0xf800e8a0>
   10000:	9080100c 	andi	r2,r18,64
   10004:	1000a826 	beq	r2,zero,102a8 <___vfprintf_internal_r+0x1b90>
   10008:	d8c02e17 	ldw	r3,184(sp)
   1000c:	002d883a 	mov	r22,zero
   10010:	1cc0000b 	ldhu	r19,0(r3)
   10014:	18c00104 	addi	r3,r3,4
   10018:	d8c02e15 	stw	r3,184(sp)
   1001c:	003caf06 	br	f2dc <__alt_data_end+0xf800f2dc>
   10020:	d9002e17 	ldw	r4,184(sp)
   10024:	d9402a17 	ldw	r5,168(sp)
   10028:	002d883a 	mov	r22,zero
   1002c:	20800104 	addi	r2,r4,4
   10030:	24c00017 	ldw	r19,0(r4)
   10034:	283ebb0e 	bge	r5,zero,fb24 <__alt_data_end+0xf800fb24>
   10038:	003ef106 	br	fc00 <__alt_data_end+0xf800fc00>
   1003c:	9080040c 	andi	r2,r18,16
   10040:	1000921e 	bne	r2,zero,1028c <___vfprintf_internal_r+0x1b74>
   10044:	9480100c 	andi	r18,r18,64
   10048:	90013926 	beq	r18,zero,10530 <___vfprintf_internal_r+0x1e18>
   1004c:	d9402e17 	ldw	r5,184(sp)
   10050:	d8c02f17 	ldw	r3,188(sp)
   10054:	28800017 	ldw	r2,0(r5)
   10058:	29400104 	addi	r5,r5,4
   1005c:	d9402e15 	stw	r5,184(sp)
   10060:	10c0000d 	sth	r3,0(r2)
   10064:	0039e406 	br	e7f8 <__alt_data_end+0xf800e7f8>
   10068:	9080100c 	andi	r2,r18,64
   1006c:	10008026 	beq	r2,zero,10270 <___vfprintf_internal_r+0x1b58>
   10070:	d8802e17 	ldw	r2,184(sp)
   10074:	14c0000f 	ldh	r19,0(r2)
   10078:	10800104 	addi	r2,r2,4
   1007c:	d8802e15 	stw	r2,184(sp)
   10080:	982dd7fa 	srai	r22,r19,31
   10084:	b005883a 	mov	r2,r22
   10088:	003af706 	br	ec68 <__alt_data_end+0xf800ec68>
   1008c:	9080100c 	andi	r2,r18,64
   10090:	d8002785 	stb	zero,158(sp)
   10094:	10008a1e 	bne	r2,zero,102c0 <___vfprintf_internal_r+0x1ba8>
   10098:	d9002e17 	ldw	r4,184(sp)
   1009c:	d9402a17 	ldw	r5,168(sp)
   100a0:	002d883a 	mov	r22,zero
   100a4:	20800104 	addi	r2,r4,4
   100a8:	24c00017 	ldw	r19,0(r4)
   100ac:	283e4b0e 	bge	r5,zero,f9dc <__alt_data_end+0xf800f9dc>
   100b0:	9d86b03a 	or	r3,r19,r22
   100b4:	d8802e15 	stw	r2,184(sp)
   100b8:	183e4c1e 	bne	r3,zero,f9ec <__alt_data_end+0xf800f9ec>
   100bc:	0039883a 	mov	fp,zero
   100c0:	0005883a 	mov	r2,zero
   100c4:	003d4006 	br	f5c8 <__alt_data_end+0xf800f5c8>
   100c8:	014000b4 	movhi	r5,2
   100cc:	29729084 	addi	r5,r5,-13758
   100d0:	d9402c15 	stw	r5,176(sp)
   100d4:	d9402c17 	ldw	r5,176(sp)
   100d8:	1c47883a 	add	r3,r3,r17
   100dc:	10800044 	addi	r2,r2,1
   100e0:	41400015 	stw	r5,0(r8)
   100e4:	44400115 	stw	r17,4(r8)
   100e8:	d8c02015 	stw	r3,128(sp)
   100ec:	d8801f15 	stw	r2,124(sp)
   100f0:	010001c4 	movi	r4,7
   100f4:	20bec816 	blt	r4,r2,fc18 <__alt_data_end+0xf800fc18>
   100f8:	42000204 	addi	r8,r8,8
   100fc:	003ecd06 	br	fc34 <__alt_data_end+0xf800fc34>
   10100:	d9002a17 	ldw	r4,168(sp)
   10104:	d8002785 	stb	zero,158(sp)
   10108:	203d2d16 	blt	r4,zero,f5c0 <__alt_data_end+0xf800f5c0>
   1010c:	00bfdfc4 	movi	r2,-129
   10110:	90a4703a 	and	r18,r18,r2
   10114:	003a6106 	br	ea9c <__alt_data_end+0xf800ea9c>
   10118:	010000b4 	movhi	r4,2
   1011c:	21329084 	addi	r4,r4,-13758
   10120:	d9002c15 	stw	r4,176(sp)
   10124:	003bea06 	br	f0d0 <__alt_data_end+0xf800f0d0>
   10128:	d9002d17 	ldw	r4,180(sp)
   1012c:	d9801e04 	addi	r6,sp,120
   10130:	b80b883a 	mov	r5,r23
   10134:	00156980 	call	15698 <__sprint_r>
   10138:	103a7b1e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
   1013c:	d8c02017 	ldw	r3,128(sp)
   10140:	da000404 	addi	r8,sp,16
   10144:	003d4106 	br	f64c <__alt_data_end+0xf800f64c>
   10148:	d8801f17 	ldw	r2,124(sp)
   1014c:	014000b4 	movhi	r5,2
   10150:	01000044 	movi	r4,1
   10154:	18c00044 	addi	r3,r3,1
   10158:	10800044 	addi	r2,r2,1
   1015c:	29729004 	addi	r5,r5,-13760
   10160:	41000115 	stw	r4,4(r8)
   10164:	41400015 	stw	r5,0(r8)
   10168:	d8c02015 	stw	r3,128(sp)
   1016c:	d8801f15 	stw	r2,124(sp)
   10170:	010001c4 	movi	r4,7
   10174:	20805c16 	blt	r4,r2,102e8 <___vfprintf_internal_r+0x1bd0>
   10178:	42000204 	addi	r8,r8,8
   1017c:	8800041e 	bne	r17,zero,10190 <___vfprintf_internal_r+0x1a78>
   10180:	d8803317 	ldw	r2,204(sp)
   10184:	1000021e 	bne	r2,zero,10190 <___vfprintf_internal_r+0x1a78>
   10188:	9080004c 	andi	r2,r18,1
   1018c:	103be726 	beq	r2,zero,f12c <__alt_data_end+0xf800f12c>
   10190:	d9003717 	ldw	r4,220(sp)
   10194:	d8801f17 	ldw	r2,124(sp)
   10198:	d9403417 	ldw	r5,208(sp)
   1019c:	20c7883a 	add	r3,r4,r3
   101a0:	10800044 	addi	r2,r2,1
   101a4:	41000115 	stw	r4,4(r8)
   101a8:	41400015 	stw	r5,0(r8)
   101ac:	d8c02015 	stw	r3,128(sp)
   101b0:	d8801f15 	stw	r2,124(sp)
   101b4:	010001c4 	movi	r4,7
   101b8:	20812116 	blt	r4,r2,10640 <___vfprintf_internal_r+0x1f28>
   101bc:	42000204 	addi	r8,r8,8
   101c0:	0463c83a 	sub	r17,zero,r17
   101c4:	0440730e 	bge	zero,r17,10394 <___vfprintf_internal_r+0x1c7c>
   101c8:	05800404 	movi	r22,16
   101cc:	b440860e 	bge	r22,r17,103e8 <___vfprintf_internal_r+0x1cd0>
   101d0:	014000b4 	movhi	r5,2
   101d4:	29729084 	addi	r5,r5,-13758
   101d8:	d9402c15 	stw	r5,176(sp)
   101dc:	070001c4 	movi	fp,7
   101e0:	dcc02d17 	ldw	r19,180(sp)
   101e4:	00000306 	br	101f4 <___vfprintf_internal_r+0x1adc>
   101e8:	42000204 	addi	r8,r8,8
   101ec:	8c7ffc04 	addi	r17,r17,-16
   101f0:	b440800e 	bge	r22,r17,103f4 <___vfprintf_internal_r+0x1cdc>
   101f4:	18c00404 	addi	r3,r3,16
   101f8:	10800044 	addi	r2,r2,1
   101fc:	45000015 	stw	r20,0(r8)
   10200:	45800115 	stw	r22,4(r8)
   10204:	d8c02015 	stw	r3,128(sp)
   10208:	d8801f15 	stw	r2,124(sp)
   1020c:	e0bff60e 	bge	fp,r2,101e8 <__alt_data_end+0xf80101e8>
   10210:	d9801e04 	addi	r6,sp,120
   10214:	b80b883a 	mov	r5,r23
   10218:	9809883a 	mov	r4,r19
   1021c:	00156980 	call	15698 <__sprint_r>
   10220:	103a411e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
   10224:	d8c02017 	ldw	r3,128(sp)
   10228:	d8801f17 	ldw	r2,124(sp)
   1022c:	da000404 	addi	r8,sp,16
   10230:	003fee06 	br	101ec <__alt_data_end+0xf80101ec>
   10234:	00bfffc4 	movi	r2,-1
   10238:	003a3f06 	br	eb38 <__alt_data_end+0xf800eb38>
   1023c:	008011c4 	movi	r2,71
   10240:	1440b816 	blt	r2,r17,10524 <___vfprintf_internal_r+0x1e0c>
   10244:	040000b4 	movhi	r16,2
   10248:	84328204 	addi	r16,r16,-13816
   1024c:	00c000c4 	movi	r3,3
   10250:	00bfdfc4 	movi	r2,-129
   10254:	d8c02915 	stw	r3,164(sp)
   10258:	90a4703a 	and	r18,r18,r2
   1025c:	df002783 	ldbu	fp,158(sp)
   10260:	d8c02b15 	stw	r3,172(sp)
   10264:	d8002a15 	stw	zero,168(sp)
   10268:	d8003215 	stw	zero,200(sp)
   1026c:	003b0706 	br	ee8c <__alt_data_end+0xf800ee8c>
   10270:	d8c02e17 	ldw	r3,184(sp)
   10274:	1cc00017 	ldw	r19,0(r3)
   10278:	18c00104 	addi	r3,r3,4
   1027c:	d8c02e15 	stw	r3,184(sp)
   10280:	982dd7fa 	srai	r22,r19,31
   10284:	b005883a 	mov	r2,r22
   10288:	003a7706 	br	ec68 <__alt_data_end+0xf800ec68>
   1028c:	d8c02e17 	ldw	r3,184(sp)
   10290:	d9002f17 	ldw	r4,188(sp)
   10294:	18800017 	ldw	r2,0(r3)
   10298:	18c00104 	addi	r3,r3,4
   1029c:	d8c02e15 	stw	r3,184(sp)
   102a0:	11000015 	stw	r4,0(r2)
   102a4:	00395406 	br	e7f8 <__alt_data_end+0xf800e7f8>
   102a8:	d9002e17 	ldw	r4,184(sp)
   102ac:	002d883a 	mov	r22,zero
   102b0:	24c00017 	ldw	r19,0(r4)
   102b4:	21000104 	addi	r4,r4,4
   102b8:	d9002e15 	stw	r4,184(sp)
   102bc:	003c0706 	br	f2dc <__alt_data_end+0xf800f2dc>
   102c0:	d9402e17 	ldw	r5,184(sp)
   102c4:	d8c02a17 	ldw	r3,168(sp)
   102c8:	002d883a 	mov	r22,zero
   102cc:	28800104 	addi	r2,r5,4
   102d0:	2cc0000b 	ldhu	r19,0(r5)
   102d4:	183dc10e 	bge	r3,zero,f9dc <__alt_data_end+0xf800f9dc>
   102d8:	003f7506 	br	100b0 <__alt_data_end+0xf80100b0>
   102dc:	040000b4 	movhi	r16,2
   102e0:	84328004 	addi	r16,r16,-13824
   102e4:	003aa706 	br	ed84 <__alt_data_end+0xf800ed84>
   102e8:	d9002d17 	ldw	r4,180(sp)
   102ec:	d9801e04 	addi	r6,sp,120
   102f0:	b80b883a 	mov	r5,r23
   102f4:	00156980 	call	15698 <__sprint_r>
   102f8:	103a0b1e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
   102fc:	dc402617 	ldw	r17,152(sp)
   10300:	d8c02017 	ldw	r3,128(sp)
   10304:	da000404 	addi	r8,sp,16
   10308:	003f9c06 	br	1017c <__alt_data_end+0xf801017c>
   1030c:	ac400043 	ldbu	r17,1(r21)
   10310:	84000814 	ori	r16,r16,32
   10314:	ad400044 	addi	r21,r21,1
   10318:	8c403fcc 	andi	r17,r17,255
   1031c:	8c40201c 	xori	r17,r17,128
   10320:	8c7fe004 	addi	r17,r17,-128
   10324:	00395e06 	br	e8a0 <__alt_data_end+0xf800e8a0>
   10328:	d8c02e15 	stw	r3,184(sp)
   1032c:	0039883a 	mov	fp,zero
   10330:	003e3506 	br	fc08 <__alt_data_end+0xf800fc08>
   10334:	d9002d17 	ldw	r4,180(sp)
   10338:	d9801e04 	addi	r6,sp,120
   1033c:	b80b883a 	mov	r5,r23
   10340:	00156980 	call	15698 <__sprint_r>
   10344:	1039f81e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
   10348:	d8c02017 	ldw	r3,128(sp)
   1034c:	da000404 	addi	r8,sp,16
   10350:	003cd006 	br	f694 <__alt_data_end+0xf800f694>
   10354:	8009883a 	mov	r4,r16
   10358:	df003d15 	stw	fp,244(sp)
   1035c:	000e6780 	call	e678 <strlen>
   10360:	d8802b15 	stw	r2,172(sp)
   10364:	da003d17 	ldw	r8,244(sp)
   10368:	103c200e 	bge	r2,zero,f3ec <__alt_data_end+0xf800f3ec>
   1036c:	0005883a 	mov	r2,zero
   10370:	003c1e06 	br	f3ec <__alt_data_end+0xf800f3ec>
   10374:	d9002d17 	ldw	r4,180(sp)
   10378:	d9801e04 	addi	r6,sp,120
   1037c:	b80b883a 	mov	r5,r23
   10380:	00156980 	call	15698 <__sprint_r>
   10384:	1039e81e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
   10388:	d8c02017 	ldw	r3,128(sp)
   1038c:	d8801f17 	ldw	r2,124(sp)
   10390:	da000404 	addi	r8,sp,16
   10394:	d9403317 	ldw	r5,204(sp)
   10398:	10800044 	addi	r2,r2,1
   1039c:	44000015 	stw	r16,0(r8)
   103a0:	28c7883a 	add	r3,r5,r3
   103a4:	003b5b06 	br	f114 <__alt_data_end+0xf800f114>
   103a8:	010000b4 	movhi	r4,2
   103ac:	21329484 	addi	r4,r4,-13742
   103b0:	d9003515 	stw	r4,212(sp)
   103b4:	003af206 	br	ef80 <__alt_data_end+0xf800ef80>
   103b8:	013fffc4 	movi	r4,-1
   103bc:	003a0806 	br	ebe0 <__alt_data_end+0xf800ebe0>
   103c0:	0023883a 	mov	r17,zero
   103c4:	003d9d06 	br	fa3c <__alt_data_end+0xf800fa3c>
   103c8:	d9002d17 	ldw	r4,180(sp)
   103cc:	d9801e04 	addi	r6,sp,120
   103d0:	b80b883a 	mov	r5,r23
   103d4:	00156980 	call	15698 <__sprint_r>
   103d8:	1039d31e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
   103dc:	d8c02017 	ldw	r3,128(sp)
   103e0:	da000404 	addi	r8,sp,16
   103e4:	003d9406 	br	fa38 <__alt_data_end+0xf800fa38>
   103e8:	010000b4 	movhi	r4,2
   103ec:	21329084 	addi	r4,r4,-13758
   103f0:	d9002c15 	stw	r4,176(sp)
   103f4:	d9002c17 	ldw	r4,176(sp)
   103f8:	1c47883a 	add	r3,r3,r17
   103fc:	10800044 	addi	r2,r2,1
   10400:	41000015 	stw	r4,0(r8)
   10404:	44400115 	stw	r17,4(r8)
   10408:	d8c02015 	stw	r3,128(sp)
   1040c:	d8801f15 	stw	r2,124(sp)
   10410:	010001c4 	movi	r4,7
   10414:	20bfd716 	blt	r4,r2,10374 <__alt_data_end+0xf8010374>
   10418:	42000204 	addi	r8,r8,8
   1041c:	003fdd06 	br	10394 <__alt_data_end+0xf8010394>
   10420:	d9002d17 	ldw	r4,180(sp)
   10424:	d9801e04 	addi	r6,sp,120
   10428:	b80b883a 	mov	r5,r23
   1042c:	00156980 	call	15698 <__sprint_r>
   10430:	1039bd1e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
   10434:	d8802617 	ldw	r2,152(sp)
   10438:	d8c02017 	ldw	r3,128(sp)
   1043c:	da000404 	addi	r8,sp,16
   10440:	003e1006 	br	fc84 <__alt_data_end+0xf800fc84>
   10444:	00800044 	movi	r2,1
   10448:	10803fcc 	andi	r2,r2,255
   1044c:	00c00044 	movi	r3,1
   10450:	10fa0d26 	beq	r2,r3,ec88 <__alt_data_end+0xf800ec88>
   10454:	00c00084 	movi	r3,2
   10458:	10fbaf26 	beq	r2,r3,f318 <__alt_data_end+0xf800f318>
   1045c:	003a6d06 	br	ee14 <__alt_data_end+0xf800ee14>
   10460:	010000b4 	movhi	r4,2
   10464:	21329484 	addi	r4,r4,-13742
   10468:	d9003515 	stw	r4,212(sp)
   1046c:	003b5406 	br	f1c0 <__alt_data_end+0xf800f1c0>
   10470:	d8802a17 	ldw	r2,168(sp)
   10474:	00c00184 	movi	r3,6
   10478:	1880012e 	bgeu	r3,r2,10480 <___vfprintf_internal_r+0x1d68>
   1047c:	1805883a 	mov	r2,r3
   10480:	d8802b15 	stw	r2,172(sp)
   10484:	1000ef16 	blt	r2,zero,10844 <___vfprintf_internal_r+0x212c>
   10488:	040000b4 	movhi	r16,2
   1048c:	d8802915 	stw	r2,164(sp)
   10490:	dcc02e15 	stw	r19,184(sp)
   10494:	d8002a15 	stw	zero,168(sp)
   10498:	d8003215 	stw	zero,200(sp)
   1049c:	84328e04 	addi	r16,r16,-13768
   104a0:	0039883a 	mov	fp,zero
   104a4:	003a8006 	br	eea8 <__alt_data_end+0xf800eea8>
   104a8:	0021883a 	mov	r16,zero
   104ac:	003e0706 	br	fccc <__alt_data_end+0xf800fccc>
   104b0:	d9002d17 	ldw	r4,180(sp)
   104b4:	d9801e04 	addi	r6,sp,120
   104b8:	b80b883a 	mov	r5,r23
   104bc:	00156980 	call	15698 <__sprint_r>
   104c0:	1039991e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
   104c4:	d8802617 	ldw	r2,152(sp)
   104c8:	d9403317 	ldw	r5,204(sp)
   104cc:	d8c02017 	ldw	r3,128(sp)
   104d0:	da000404 	addi	r8,sp,16
   104d4:	2885c83a 	sub	r2,r5,r2
   104d8:	003dfb06 	br	fcc8 <__alt_data_end+0xf800fcc8>
   104dc:	9080004c 	andi	r2,r18,1
   104e0:	103e8f1e 	bne	r2,zero,ff20 <__alt_data_end+0xf800ff20>
   104e4:	d8802117 	ldw	r2,132(sp)
   104e8:	003e9e06 	br	ff64 <__alt_data_end+0xf800ff64>
   104ec:	1025883a 	mov	r18,r2
   104f0:	0039883a 	mov	fp,zero
   104f4:	00800084 	movi	r2,2
   104f8:	003fd306 	br	10448 <__alt_data_end+0xf8010448>
   104fc:	07000b44 	movi	fp,45
   10500:	df002785 	stb	fp,158(sp)
   10504:	003a1b06 	br	ed74 <__alt_data_end+0xf800ed74>
   10508:	00c00b44 	movi	r3,45
   1050c:	d8c02785 	stb	r3,158(sp)
   10510:	d8802915 	stw	r2,164(sp)
   10514:	dc802c17 	ldw	r18,176(sp)
   10518:	d8002a15 	stw	zero,168(sp)
   1051c:	07000b44 	movi	fp,45
   10520:	003a5e06 	br	ee9c <__alt_data_end+0xf800ee9c>
   10524:	040000b4 	movhi	r16,2
   10528:	84328304 	addi	r16,r16,-13812
   1052c:	003f4706 	br	1024c <__alt_data_end+0xf801024c>
   10530:	d9002e17 	ldw	r4,184(sp)
   10534:	d9402f17 	ldw	r5,188(sp)
   10538:	20800017 	ldw	r2,0(r4)
   1053c:	21000104 	addi	r4,r4,4
   10540:	d9002e15 	stw	r4,184(sp)
   10544:	11400015 	stw	r5,0(r2)
   10548:	0038ab06 	br	e7f8 <__alt_data_end+0xf800e7f8>
   1054c:	dd802617 	ldw	r22,152(sp)
   10550:	00bfff44 	movi	r2,-3
   10554:	b0801c16 	blt	r22,r2,105c8 <___vfprintf_internal_r+0x1eb0>
   10558:	d9402a17 	ldw	r5,168(sp)
   1055c:	2d801a16 	blt	r5,r22,105c8 <___vfprintf_internal_r+0x1eb0>
   10560:	dd803215 	stw	r22,200(sp)
   10564:	003e8906 	br	ff8c <__alt_data_end+0xf800ff8c>
   10568:	010000b4 	movhi	r4,2
   1056c:	21329084 	addi	r4,r4,-13758
   10570:	d9002c15 	stw	r4,176(sp)
   10574:	003c9106 	br	f7bc <__alt_data_end+0xf800f7bc>
   10578:	e005883a 	mov	r2,fp
   1057c:	003e7906 	br	ff64 <__alt_data_end+0xf800ff64>
   10580:	d9002a17 	ldw	r4,168(sp)
   10584:	df002783 	ldbu	fp,158(sp)
   10588:	dcc02e15 	stw	r19,184(sp)
   1058c:	d9002915 	stw	r4,164(sp)
   10590:	d9002b15 	stw	r4,172(sp)
   10594:	d8002a15 	stw	zero,168(sp)
   10598:	d8003215 	stw	zero,200(sp)
   1059c:	003a3b06 	br	ee8c <__alt_data_end+0xf800ee8c>
   105a0:	9080004c 	andi	r2,r18,1
   105a4:	0039883a 	mov	fp,zero
   105a8:	10000426 	beq	r2,zero,105bc <___vfprintf_internal_r+0x1ea4>
   105ac:	00800c04 	movi	r2,48
   105b0:	dc001dc4 	addi	r16,sp,119
   105b4:	d8801dc5 	stb	r2,119(sp)
   105b8:	003b6406 	br	f34c <__alt_data_end+0xf800f34c>
   105bc:	d8002b15 	stw	zero,172(sp)
   105c0:	dc001e04 	addi	r16,sp,120
   105c4:	003a2b06 	br	ee74 <__alt_data_end+0xf800ee74>
   105c8:	8c7fff84 	addi	r17,r17,-2
   105cc:	b5bfffc4 	addi	r22,r22,-1
   105d0:	dd802615 	stw	r22,152(sp)
   105d4:	dc4022c5 	stb	r17,139(sp)
   105d8:	b000bf16 	blt	r22,zero,108d8 <___vfprintf_internal_r+0x21c0>
   105dc:	00800ac4 	movi	r2,43
   105e0:	d8802305 	stb	r2,140(sp)
   105e4:	00800244 	movi	r2,9
   105e8:	15807016 	blt	r2,r22,107ac <___vfprintf_internal_r+0x2094>
   105ec:	00800c04 	movi	r2,48
   105f0:	b5800c04 	addi	r22,r22,48
   105f4:	d8802345 	stb	r2,141(sp)
   105f8:	dd802385 	stb	r22,142(sp)
   105fc:	d88023c4 	addi	r2,sp,143
   10600:	df0022c4 	addi	fp,sp,139
   10604:	d8c03317 	ldw	r3,204(sp)
   10608:	1739c83a 	sub	fp,r2,fp
   1060c:	d9003317 	ldw	r4,204(sp)
   10610:	e0c7883a 	add	r3,fp,r3
   10614:	df003a15 	stw	fp,232(sp)
   10618:	d8c02b15 	stw	r3,172(sp)
   1061c:	00800044 	movi	r2,1
   10620:	1100b30e 	bge	r2,r4,108f0 <___vfprintf_internal_r+0x21d8>
   10624:	d8c02b17 	ldw	r3,172(sp)
   10628:	18c00044 	addi	r3,r3,1
   1062c:	d8c02b15 	stw	r3,172(sp)
   10630:	1805883a 	mov	r2,r3
   10634:	1800ac16 	blt	r3,zero,108e8 <___vfprintf_internal_r+0x21d0>
   10638:	d8003215 	stw	zero,200(sp)
   1063c:	003e5d06 	br	ffb4 <__alt_data_end+0xf800ffb4>
   10640:	d9002d17 	ldw	r4,180(sp)
   10644:	d9801e04 	addi	r6,sp,120
   10648:	b80b883a 	mov	r5,r23
   1064c:	00156980 	call	15698 <__sprint_r>
   10650:	1039351e 	bne	r2,zero,eb28 <__alt_data_end+0xf800eb28>
   10654:	dc402617 	ldw	r17,152(sp)
   10658:	d8c02017 	ldw	r3,128(sp)
   1065c:	d8801f17 	ldw	r2,124(sp)
   10660:	da000404 	addi	r8,sp,16
   10664:	003ed606 	br	101c0 <__alt_data_end+0xf80101c0>
   10668:	182b883a 	mov	r21,r3
   1066c:	d8002a15 	stw	zero,168(sp)
   10670:	00388c06 	br	e8a4 <__alt_data_end+0xf800e8a4>
   10674:	d8802a17 	ldw	r2,168(sp)
   10678:	103e071e 	bne	r2,zero,fe98 <__alt_data_end+0xf800fe98>
   1067c:	dc002a15 	stw	r16,168(sp)
   10680:	003e0506 	br	fe98 <__alt_data_end+0xf800fe98>
   10684:	d9002a17 	ldw	r4,168(sp)
   10688:	20c00044 	addi	r3,r4,1
   1068c:	003e0f06 	br	fecc <__alt_data_end+0xf800fecc>
   10690:	01400184 	movi	r5,6
   10694:	d9402a15 	stw	r5,168(sp)
   10698:	003dff06 	br	fe98 <__alt_data_end+0xf800fe98>
   1069c:	d8802104 	addi	r2,sp,132
   106a0:	d8800315 	stw	r2,12(sp)
   106a4:	d8802504 	addi	r2,sp,148
   106a8:	d8800215 	stw	r2,8(sp)
   106ac:	d8802604 	addi	r2,sp,152
   106b0:	d8800115 	stw	r2,4(sp)
   106b4:	d8802a17 	ldw	r2,168(sp)
   106b8:	d9403617 	ldw	r5,216(sp)
   106bc:	d9002d17 	ldw	r4,180(sp)
   106c0:	d8800015 	stw	r2,0(sp)
   106c4:	01c000c4 	movi	r7,3
   106c8:	980d883a 	mov	r6,r19
   106cc:	da003d15 	stw	r8,244(sp)
   106d0:	0010e480 	call	10e48 <_dtoa_r>
   106d4:	d8c02a17 	ldw	r3,168(sp)
   106d8:	da003d17 	ldw	r8,244(sp)
   106dc:	1021883a 	mov	r16,r2
   106e0:	10f9883a 	add	fp,r2,r3
   106e4:	81000007 	ldb	r4,0(r16)
   106e8:	00800c04 	movi	r2,48
   106ec:	20805e26 	beq	r4,r2,10868 <___vfprintf_internal_r+0x2150>
   106f0:	d8c02617 	ldw	r3,152(sp)
   106f4:	e0f9883a 	add	fp,fp,r3
   106f8:	003e0a06 	br	ff24 <__alt_data_end+0xf800ff24>
   106fc:	00c00b44 	movi	r3,45
   10700:	24e0003c 	xorhi	r19,r4,32768
   10704:	d8c02905 	stb	r3,164(sp)
   10708:	003de906 	br	feb0 <__alt_data_end+0xf800feb0>
   1070c:	d8c03217 	ldw	r3,200(sp)
   10710:	00c07a0e 	bge	zero,r3,108fc <___vfprintf_internal_r+0x21e4>
   10714:	00800044 	movi	r2,1
   10718:	d9003317 	ldw	r4,204(sp)
   1071c:	1105883a 	add	r2,r2,r4
   10720:	d8802b15 	stw	r2,172(sp)
   10724:	10004e16 	blt	r2,zero,10860 <___vfprintf_internal_r+0x2148>
   10728:	044019c4 	movi	r17,103
   1072c:	003e2106 	br	ffb4 <__alt_data_end+0xf800ffb4>
   10730:	d9002a17 	ldw	r4,168(sp)
   10734:	d8802104 	addi	r2,sp,132
   10738:	d8800315 	stw	r2,12(sp)
   1073c:	d9000015 	stw	r4,0(sp)
   10740:	d8802504 	addi	r2,sp,148
   10744:	d9403617 	ldw	r5,216(sp)
   10748:	d9002d17 	ldw	r4,180(sp)
   1074c:	d8800215 	stw	r2,8(sp)
   10750:	d8802604 	addi	r2,sp,152
   10754:	d8800115 	stw	r2,4(sp)
   10758:	01c000c4 	movi	r7,3
   1075c:	980d883a 	mov	r6,r19
   10760:	da003d15 	stw	r8,244(sp)
   10764:	0010e480 	call	10e48 <_dtoa_r>
   10768:	d8c02a17 	ldw	r3,168(sp)
   1076c:	da003d17 	ldw	r8,244(sp)
   10770:	1021883a 	mov	r16,r2
   10774:	00801184 	movi	r2,70
   10778:	80f9883a 	add	fp,r16,r3
   1077c:	88bfd926 	beq	r17,r2,106e4 <__alt_data_end+0xf80106e4>
   10780:	003de806 	br	ff24 <__alt_data_end+0xf800ff24>
   10784:	d9002a17 	ldw	r4,168(sp)
   10788:	00c04d0e 	bge	zero,r3,108c0 <___vfprintf_internal_r+0x21a8>
   1078c:	2000441e 	bne	r4,zero,108a0 <___vfprintf_internal_r+0x2188>
   10790:	9480004c 	andi	r18,r18,1
   10794:	9000421e 	bne	r18,zero,108a0 <___vfprintf_internal_r+0x2188>
   10798:	1805883a 	mov	r2,r3
   1079c:	18006f16 	blt	r3,zero,1095c <___vfprintf_internal_r+0x2244>
   107a0:	d8c03217 	ldw	r3,200(sp)
   107a4:	d8c02b15 	stw	r3,172(sp)
   107a8:	003e0206 	br	ffb4 <__alt_data_end+0xf800ffb4>
   107ac:	df0022c4 	addi	fp,sp,139
   107b0:	dc002a15 	stw	r16,168(sp)
   107b4:	4027883a 	mov	r19,r8
   107b8:	e021883a 	mov	r16,fp
   107bc:	b009883a 	mov	r4,r22
   107c0:	01400284 	movi	r5,10
   107c4:	000c55c0 	call	c55c <__modsi3>
   107c8:	10800c04 	addi	r2,r2,48
   107cc:	843fffc4 	addi	r16,r16,-1
   107d0:	b009883a 	mov	r4,r22
   107d4:	01400284 	movi	r5,10
   107d8:	80800005 	stb	r2,0(r16)
   107dc:	000c4d80 	call	c4d8 <__divsi3>
   107e0:	102d883a 	mov	r22,r2
   107e4:	00800244 	movi	r2,9
   107e8:	15bff416 	blt	r2,r22,107bc <__alt_data_end+0xf80107bc>
   107ec:	9811883a 	mov	r8,r19
   107f0:	b0800c04 	addi	r2,r22,48
   107f4:	8027883a 	mov	r19,r16
   107f8:	997fffc4 	addi	r5,r19,-1
   107fc:	98bfffc5 	stb	r2,-1(r19)
   10800:	dc002a17 	ldw	r16,168(sp)
   10804:	2f006d2e 	bgeu	r5,fp,109bc <___vfprintf_internal_r+0x22a4>
   10808:	d9c02384 	addi	r7,sp,142
   1080c:	3ccfc83a 	sub	r7,r7,r19
   10810:	d9002344 	addi	r4,sp,141
   10814:	e1cf883a 	add	r7,fp,r7
   10818:	00000106 	br	10820 <___vfprintf_internal_r+0x2108>
   1081c:	28800003 	ldbu	r2,0(r5)
   10820:	20800005 	stb	r2,0(r4)
   10824:	21000044 	addi	r4,r4,1
   10828:	29400044 	addi	r5,r5,1
   1082c:	393ffb1e 	bne	r7,r4,1081c <__alt_data_end+0xf801081c>
   10830:	d8802304 	addi	r2,sp,140
   10834:	14c5c83a 	sub	r2,r2,r19
   10838:	d8c02344 	addi	r3,sp,141
   1083c:	1885883a 	add	r2,r3,r2
   10840:	003f7006 	br	10604 <__alt_data_end+0xf8010604>
   10844:	0005883a 	mov	r2,zero
   10848:	003f0f06 	br	10488 <__alt_data_end+0xf8010488>
   1084c:	d8c03217 	ldw	r3,200(sp)
   10850:	18c00044 	addi	r3,r3,1
   10854:	d8c02b15 	stw	r3,172(sp)
   10858:	1805883a 	mov	r2,r3
   1085c:	183fb20e 	bge	r3,zero,10728 <__alt_data_end+0xf8010728>
   10860:	0005883a 	mov	r2,zero
   10864:	003fb006 	br	10728 <__alt_data_end+0xf8010728>
   10868:	d9003617 	ldw	r4,216(sp)
   1086c:	000d883a 	mov	r6,zero
   10870:	000f883a 	mov	r7,zero
   10874:	980b883a 	mov	r5,r19
   10878:	d8c03c15 	stw	r3,240(sp)
   1087c:	da003d15 	stw	r8,244(sp)
   10880:	0018b580 	call	18b58 <__eqdf2>
   10884:	d8c03c17 	ldw	r3,240(sp)
   10888:	da003d17 	ldw	r8,244(sp)
   1088c:	103f9826 	beq	r2,zero,106f0 <__alt_data_end+0xf80106f0>
   10890:	00800044 	movi	r2,1
   10894:	10c7c83a 	sub	r3,r2,r3
   10898:	d8c02615 	stw	r3,152(sp)
   1089c:	003f9506 	br	106f4 <__alt_data_end+0xf80106f4>
   108a0:	d9002a17 	ldw	r4,168(sp)
   108a4:	d8c03217 	ldw	r3,200(sp)
   108a8:	20800044 	addi	r2,r4,1
   108ac:	1885883a 	add	r2,r3,r2
   108b0:	d8802b15 	stw	r2,172(sp)
   108b4:	103dbf0e 	bge	r2,zero,ffb4 <__alt_data_end+0xf800ffb4>
   108b8:	0005883a 	mov	r2,zero
   108bc:	003dbd06 	br	ffb4 <__alt_data_end+0xf800ffb4>
   108c0:	2000201e 	bne	r4,zero,10944 <___vfprintf_internal_r+0x222c>
   108c4:	9480004c 	andi	r18,r18,1
   108c8:	90001e1e 	bne	r18,zero,10944 <___vfprintf_internal_r+0x222c>
   108cc:	00800044 	movi	r2,1
   108d0:	d8802b15 	stw	r2,172(sp)
   108d4:	003db706 	br	ffb4 <__alt_data_end+0xf800ffb4>
   108d8:	00800b44 	movi	r2,45
   108dc:	05adc83a 	sub	r22,zero,r22
   108e0:	d8802305 	stb	r2,140(sp)
   108e4:	003f3f06 	br	105e4 <__alt_data_end+0xf80105e4>
   108e8:	0005883a 	mov	r2,zero
   108ec:	003f5206 	br	10638 <__alt_data_end+0xf8010638>
   108f0:	90a4703a 	and	r18,r18,r2
   108f4:	903f4e26 	beq	r18,zero,10630 <__alt_data_end+0xf8010630>
   108f8:	003f4a06 	br	10624 <__alt_data_end+0xf8010624>
   108fc:	00800084 	movi	r2,2
   10900:	10c5c83a 	sub	r2,r2,r3
   10904:	003f8406 	br	10718 <__alt_data_end+0xf8010718>
   10908:	d9402e17 	ldw	r5,184(sp)
   1090c:	d9002e17 	ldw	r4,184(sp)
   10910:	ac400043 	ldbu	r17,1(r21)
   10914:	29400017 	ldw	r5,0(r5)
   10918:	20800104 	addi	r2,r4,4
   1091c:	d8802e15 	stw	r2,184(sp)
   10920:	d9402a15 	stw	r5,168(sp)
   10924:	182b883a 	mov	r21,r3
   10928:	283e7b0e 	bge	r5,zero,10318 <__alt_data_end+0xf8010318>
   1092c:	8c403fcc 	andi	r17,r17,255
   10930:	017fffc4 	movi	r5,-1
   10934:	8c40201c 	xori	r17,r17,128
   10938:	d9402a15 	stw	r5,168(sp)
   1093c:	8c7fe004 	addi	r17,r17,-128
   10940:	0037d706 	br	e8a0 <__alt_data_end+0xf800e8a0>
   10944:	d8c02a17 	ldw	r3,168(sp)
   10948:	18c00084 	addi	r3,r3,2
   1094c:	d8c02b15 	stw	r3,172(sp)
   10950:	1805883a 	mov	r2,r3
   10954:	183d970e 	bge	r3,zero,ffb4 <__alt_data_end+0xf800ffb4>
   10958:	003fd706 	br	108b8 <__alt_data_end+0xf80108b8>
   1095c:	0005883a 	mov	r2,zero
   10960:	003f8f06 	br	107a0 <__alt_data_end+0xf80107a0>
   10964:	9080004c 	andi	r2,r18,1
   10968:	103f821e 	bne	r2,zero,10774 <__alt_data_end+0xf8010774>
   1096c:	d8802117 	ldw	r2,132(sp)
   10970:	1405c83a 	sub	r2,r2,r16
   10974:	d8803315 	stw	r2,204(sp)
   10978:	b47ef426 	beq	r22,r17,1054c <__alt_data_end+0xf801054c>
   1097c:	dd802617 	ldw	r22,152(sp)
   10980:	003f1206 	br	105cc <__alt_data_end+0xf80105cc>
   10984:	d8c02b03 	ldbu	r3,172(sp)
   10988:	d8c02785 	stb	r3,158(sp)
   1098c:	0038df06 	br	ed0c <__alt_data_end+0xf800ed0c>
   10990:	d8c02b03 	ldbu	r3,172(sp)
   10994:	d8c02785 	stb	r3,158(sp)
   10998:	0038aa06 	br	ec44 <__alt_data_end+0xf800ec44>
   1099c:	d8c02b03 	ldbu	r3,172(sp)
   109a0:	d8c02785 	stb	r3,158(sp)
   109a4:	003a4306 	br	f2b4 <__alt_data_end+0xf800f2b4>
   109a8:	d8c02b03 	ldbu	r3,172(sp)
   109ac:	d8c02785 	stb	r3,158(sp)
   109b0:	003af506 	br	f588 <__alt_data_end+0xf800f588>
   109b4:	0005883a 	mov	r2,zero
   109b8:	003d7b06 	br	ffa8 <__alt_data_end+0xf800ffa8>
   109bc:	d8802344 	addi	r2,sp,141
   109c0:	003f1006 	br	10604 <__alt_data_end+0xf8010604>
   109c4:	d8c02b03 	ldbu	r3,172(sp)
   109c8:	d8c02785 	stb	r3,158(sp)
   109cc:	0038fd06 	br	edc4 <__alt_data_end+0xf800edc4>
   109d0:	d8c02b03 	ldbu	r3,172(sp)
   109d4:	d8c02785 	stb	r3,158(sp)
   109d8:	003a9706 	br	f438 <__alt_data_end+0xf800f438>
   109dc:	d8c02b03 	ldbu	r3,172(sp)
   109e0:	d8c02785 	stb	r3,158(sp)
   109e4:	003a1806 	br	f248 <__alt_data_end+0xf800f248>
   109e8:	d8c02b03 	ldbu	r3,172(sp)
   109ec:	d8c02785 	stb	r3,158(sp)
   109f0:	003abe06 	br	f4ec <__alt_data_end+0xf800f4ec>

000109f4 <__vfprintf_internal>:
   109f4:	008000b4 	movhi	r2,2
   109f8:	10b9c804 	addi	r2,r2,-6368
   109fc:	300f883a 	mov	r7,r6
   10a00:	280d883a 	mov	r6,r5
   10a04:	200b883a 	mov	r5,r4
   10a08:	11000017 	ldw	r4,0(r2)
   10a0c:	000e7181 	jmpi	e718 <___vfprintf_internal_r>

00010a10 <__sbprintf>:
   10a10:	2880030b 	ldhu	r2,12(r5)
   10a14:	2ac01917 	ldw	r11,100(r5)
   10a18:	2a80038b 	ldhu	r10,14(r5)
   10a1c:	2a400717 	ldw	r9,28(r5)
   10a20:	2a000917 	ldw	r8,36(r5)
   10a24:	defee204 	addi	sp,sp,-1144
   10a28:	00c10004 	movi	r3,1024
   10a2c:	dc011a15 	stw	r16,1128(sp)
   10a30:	10bfff4c 	andi	r2,r2,65533
   10a34:	2821883a 	mov	r16,r5
   10a38:	d8cb883a 	add	r5,sp,r3
   10a3c:	dc811c15 	stw	r18,1136(sp)
   10a40:	dc411b15 	stw	r17,1132(sp)
   10a44:	dfc11d15 	stw	ra,1140(sp)
   10a48:	2025883a 	mov	r18,r4
   10a4c:	d881030d 	sth	r2,1036(sp)
   10a50:	dac11915 	stw	r11,1124(sp)
   10a54:	da81038d 	sth	r10,1038(sp)
   10a58:	da410715 	stw	r9,1052(sp)
   10a5c:	da010915 	stw	r8,1060(sp)
   10a60:	dec10015 	stw	sp,1024(sp)
   10a64:	dec10415 	stw	sp,1040(sp)
   10a68:	d8c10215 	stw	r3,1032(sp)
   10a6c:	d8c10515 	stw	r3,1044(sp)
   10a70:	d8010615 	stw	zero,1048(sp)
   10a74:	000e7180 	call	e718 <___vfprintf_internal_r>
   10a78:	1023883a 	mov	r17,r2
   10a7c:	10000416 	blt	r2,zero,10a90 <__sbprintf+0x80>
   10a80:	d9410004 	addi	r5,sp,1024
   10a84:	9009883a 	mov	r4,r18
   10a88:	00126ec0 	call	126ec <_fflush_r>
   10a8c:	10000d1e 	bne	r2,zero,10ac4 <__sbprintf+0xb4>
   10a90:	d881030b 	ldhu	r2,1036(sp)
   10a94:	1080100c 	andi	r2,r2,64
   10a98:	10000326 	beq	r2,zero,10aa8 <__sbprintf+0x98>
   10a9c:	8080030b 	ldhu	r2,12(r16)
   10aa0:	10801014 	ori	r2,r2,64
   10aa4:	8080030d 	sth	r2,12(r16)
   10aa8:	8805883a 	mov	r2,r17
   10aac:	dfc11d17 	ldw	ra,1140(sp)
   10ab0:	dc811c17 	ldw	r18,1136(sp)
   10ab4:	dc411b17 	ldw	r17,1132(sp)
   10ab8:	dc011a17 	ldw	r16,1128(sp)
   10abc:	dec11e04 	addi	sp,sp,1144
   10ac0:	f800283a 	ret
   10ac4:	047fffc4 	movi	r17,-1
   10ac8:	003ff106 	br	10a90 <__alt_data_end+0xf8010a90>

00010acc <__swsetup_r>:
   10acc:	008000b4 	movhi	r2,2
   10ad0:	defffd04 	addi	sp,sp,-12
   10ad4:	10b9c804 	addi	r2,r2,-6368
   10ad8:	dc400115 	stw	r17,4(sp)
   10adc:	2023883a 	mov	r17,r4
   10ae0:	11000017 	ldw	r4,0(r2)
   10ae4:	dc000015 	stw	r16,0(sp)
   10ae8:	dfc00215 	stw	ra,8(sp)
   10aec:	2821883a 	mov	r16,r5
   10af0:	20000226 	beq	r4,zero,10afc <__swsetup_r+0x30>
   10af4:	20800e17 	ldw	r2,56(r4)
   10af8:	10003126 	beq	r2,zero,10bc0 <__swsetup_r+0xf4>
   10afc:	8080030b 	ldhu	r2,12(r16)
   10b00:	10c0020c 	andi	r3,r2,8
   10b04:	1009883a 	mov	r4,r2
   10b08:	18000f26 	beq	r3,zero,10b48 <__swsetup_r+0x7c>
   10b0c:	80c00417 	ldw	r3,16(r16)
   10b10:	18001526 	beq	r3,zero,10b68 <__swsetup_r+0x9c>
   10b14:	1100004c 	andi	r4,r2,1
   10b18:	20001c1e 	bne	r4,zero,10b8c <__swsetup_r+0xc0>
   10b1c:	1080008c 	andi	r2,r2,2
   10b20:	1000291e 	bne	r2,zero,10bc8 <__swsetup_r+0xfc>
   10b24:	80800517 	ldw	r2,20(r16)
   10b28:	80800215 	stw	r2,8(r16)
   10b2c:	18001c26 	beq	r3,zero,10ba0 <__swsetup_r+0xd4>
   10b30:	0005883a 	mov	r2,zero
   10b34:	dfc00217 	ldw	ra,8(sp)
   10b38:	dc400117 	ldw	r17,4(sp)
   10b3c:	dc000017 	ldw	r16,0(sp)
   10b40:	dec00304 	addi	sp,sp,12
   10b44:	f800283a 	ret
   10b48:	2080040c 	andi	r2,r4,16
   10b4c:	10002e26 	beq	r2,zero,10c08 <__swsetup_r+0x13c>
   10b50:	2080010c 	andi	r2,r4,4
   10b54:	10001e1e 	bne	r2,zero,10bd0 <__swsetup_r+0x104>
   10b58:	80c00417 	ldw	r3,16(r16)
   10b5c:	20800214 	ori	r2,r4,8
   10b60:	8080030d 	sth	r2,12(r16)
   10b64:	183feb1e 	bne	r3,zero,10b14 <__alt_data_end+0xf8010b14>
   10b68:	1100a00c 	andi	r4,r2,640
   10b6c:	01408004 	movi	r5,512
   10b70:	217fe826 	beq	r4,r5,10b14 <__alt_data_end+0xf8010b14>
   10b74:	800b883a 	mov	r5,r16
   10b78:	8809883a 	mov	r4,r17
   10b7c:	00136880 	call	13688 <__smakebuf_r>
   10b80:	8080030b 	ldhu	r2,12(r16)
   10b84:	80c00417 	ldw	r3,16(r16)
   10b88:	003fe206 	br	10b14 <__alt_data_end+0xf8010b14>
   10b8c:	80800517 	ldw	r2,20(r16)
   10b90:	80000215 	stw	zero,8(r16)
   10b94:	0085c83a 	sub	r2,zero,r2
   10b98:	80800615 	stw	r2,24(r16)
   10b9c:	183fe41e 	bne	r3,zero,10b30 <__alt_data_end+0xf8010b30>
   10ba0:	80c0030b 	ldhu	r3,12(r16)
   10ba4:	0005883a 	mov	r2,zero
   10ba8:	1900200c 	andi	r4,r3,128
   10bac:	203fe126 	beq	r4,zero,10b34 <__alt_data_end+0xf8010b34>
   10bb0:	18c01014 	ori	r3,r3,64
   10bb4:	80c0030d 	sth	r3,12(r16)
   10bb8:	00bfffc4 	movi	r2,-1
   10bbc:	003fdd06 	br	10b34 <__alt_data_end+0xf8010b34>
   10bc0:	0012ad80 	call	12ad8 <__sinit>
   10bc4:	003fcd06 	br	10afc <__alt_data_end+0xf8010afc>
   10bc8:	0005883a 	mov	r2,zero
   10bcc:	003fd606 	br	10b28 <__alt_data_end+0xf8010b28>
   10bd0:	81400c17 	ldw	r5,48(r16)
   10bd4:	28000626 	beq	r5,zero,10bf0 <__swsetup_r+0x124>
   10bd8:	80801004 	addi	r2,r16,64
   10bdc:	28800326 	beq	r5,r2,10bec <__swsetup_r+0x120>
   10be0:	8809883a 	mov	r4,r17
   10be4:	0012c4c0 	call	12c4c <_free_r>
   10be8:	8100030b 	ldhu	r4,12(r16)
   10bec:	80000c15 	stw	zero,48(r16)
   10bf0:	80c00417 	ldw	r3,16(r16)
   10bf4:	00bff6c4 	movi	r2,-37
   10bf8:	1108703a 	and	r4,r2,r4
   10bfc:	80000115 	stw	zero,4(r16)
   10c00:	80c00015 	stw	r3,0(r16)
   10c04:	003fd506 	br	10b5c <__alt_data_end+0xf8010b5c>
   10c08:	00800244 	movi	r2,9
   10c0c:	88800015 	stw	r2,0(r17)
   10c10:	20801014 	ori	r2,r4,64
   10c14:	8080030d 	sth	r2,12(r16)
   10c18:	00bfffc4 	movi	r2,-1
   10c1c:	003fc506 	br	10b34 <__alt_data_end+0xf8010b34>

00010c20 <quorem>:
   10c20:	defff204 	addi	sp,sp,-56
   10c24:	ddc00b15 	stw	r23,44(sp)
   10c28:	20800417 	ldw	r2,16(r4)
   10c2c:	2dc00417 	ldw	r23,16(r5)
   10c30:	dfc00d15 	stw	ra,52(sp)
   10c34:	df000c15 	stw	fp,48(sp)
   10c38:	dd800a15 	stw	r22,40(sp)
   10c3c:	dd400915 	stw	r21,36(sp)
   10c40:	dd000815 	stw	r20,32(sp)
   10c44:	dcc00715 	stw	r19,28(sp)
   10c48:	dc800615 	stw	r18,24(sp)
   10c4c:	dc400515 	stw	r17,20(sp)
   10c50:	dc000415 	stw	r16,16(sp)
   10c54:	15c07a16 	blt	r2,r23,10e40 <quorem+0x220>
   10c58:	bdffffc4 	addi	r23,r23,-1
   10c5c:	bde9883a 	add	r20,r23,r23
   10c60:	28c00504 	addi	r3,r5,20
   10c64:	a529883a 	add	r20,r20,r20
   10c68:	1d39883a 	add	fp,r3,r20
   10c6c:	24c00504 	addi	r19,r4,20
   10c70:	d9400215 	stw	r5,8(sp)
   10c74:	9d29883a 	add	r20,r19,r20
   10c78:	e1400017 	ldw	r5,0(fp)
   10c7c:	d9000015 	stw	r4,0(sp)
   10c80:	a1000017 	ldw	r4,0(r20)
   10c84:	29400044 	addi	r5,r5,1
   10c88:	d8c00115 	stw	r3,4(sp)
   10c8c:	dd000315 	stw	r20,12(sp)
   10c90:	000c5d00 	call	c5d0 <__udivsi3>
   10c94:	1025883a 	mov	r18,r2
   10c98:	10003026 	beq	r2,zero,10d5c <quorem+0x13c>
   10c9c:	dc400117 	ldw	r17,4(sp)
   10ca0:	9829883a 	mov	r20,r19
   10ca4:	002d883a 	mov	r22,zero
   10ca8:	0021883a 	mov	r16,zero
   10cac:	8d400017 	ldw	r21,0(r17)
   10cb0:	900b883a 	mov	r5,r18
   10cb4:	8c400104 	addi	r17,r17,4
   10cb8:	a93fffcc 	andi	r4,r21,65535
   10cbc:	000c68c0 	call	c68c <__mulsi3>
   10cc0:	a808d43a 	srli	r4,r21,16
   10cc4:	900b883a 	mov	r5,r18
   10cc8:	15ad883a 	add	r22,r2,r22
   10ccc:	000c68c0 	call	c68c <__mulsi3>
   10cd0:	a1000017 	ldw	r4,0(r20)
   10cd4:	b00cd43a 	srli	r6,r22,16
   10cd8:	b0ffffcc 	andi	r3,r22,65535
   10cdc:	217fffcc 	andi	r5,r4,65535
   10ce0:	2c21883a 	add	r16,r5,r16
   10ce4:	80c7c83a 	sub	r3,r16,r3
   10ce8:	2008d43a 	srli	r4,r4,16
   10cec:	1185883a 	add	r2,r2,r6
   10cf0:	1821d43a 	srai	r16,r3,16
   10cf4:	117fffcc 	andi	r5,r2,65535
   10cf8:	2149c83a 	sub	r4,r4,r5
   10cfc:	2421883a 	add	r16,r4,r16
   10d00:	8008943a 	slli	r4,r16,16
   10d04:	18ffffcc 	andi	r3,r3,65535
   10d08:	102cd43a 	srli	r22,r2,16
   10d0c:	20c8b03a 	or	r4,r4,r3
   10d10:	a1000015 	stw	r4,0(r20)
   10d14:	8021d43a 	srai	r16,r16,16
   10d18:	a5000104 	addi	r20,r20,4
   10d1c:	e47fe32e 	bgeu	fp,r17,10cac <__alt_data_end+0xf8010cac>
   10d20:	d8c00317 	ldw	r3,12(sp)
   10d24:	18800017 	ldw	r2,0(r3)
   10d28:	10000c1e 	bne	r2,zero,10d5c <quorem+0x13c>
   10d2c:	18bfff04 	addi	r2,r3,-4
   10d30:	9880082e 	bgeu	r19,r2,10d54 <quorem+0x134>
   10d34:	18ffff17 	ldw	r3,-4(r3)
   10d38:	18000326 	beq	r3,zero,10d48 <quorem+0x128>
   10d3c:	00000506 	br	10d54 <quorem+0x134>
   10d40:	10c00017 	ldw	r3,0(r2)
   10d44:	1800031e 	bne	r3,zero,10d54 <quorem+0x134>
   10d48:	10bfff04 	addi	r2,r2,-4
   10d4c:	bdffffc4 	addi	r23,r23,-1
   10d50:	98bffb36 	bltu	r19,r2,10d40 <__alt_data_end+0xf8010d40>
   10d54:	d8c00017 	ldw	r3,0(sp)
   10d58:	1dc00415 	stw	r23,16(r3)
   10d5c:	d9400217 	ldw	r5,8(sp)
   10d60:	d9000017 	ldw	r4,0(sp)
   10d64:	00146780 	call	14678 <__mcmp>
   10d68:	10002816 	blt	r2,zero,10e0c <quorem+0x1ec>
   10d6c:	dc400117 	ldw	r17,4(sp)
   10d70:	94800044 	addi	r18,r18,1
   10d74:	980d883a 	mov	r6,r19
   10d78:	0007883a 	mov	r3,zero
   10d7c:	31000017 	ldw	r4,0(r6)
   10d80:	89400017 	ldw	r5,0(r17)
   10d84:	31800104 	addi	r6,r6,4
   10d88:	20bfffcc 	andi	r2,r4,65535
   10d8c:	10c7883a 	add	r3,r2,r3
   10d90:	28bfffcc 	andi	r2,r5,65535
   10d94:	1885c83a 	sub	r2,r3,r2
   10d98:	280ad43a 	srli	r5,r5,16
   10d9c:	2008d43a 	srli	r4,r4,16
   10da0:	1007d43a 	srai	r3,r2,16
   10da4:	10bfffcc 	andi	r2,r2,65535
   10da8:	2149c83a 	sub	r4,r4,r5
   10dac:	20c9883a 	add	r4,r4,r3
   10db0:	200a943a 	slli	r5,r4,16
   10db4:	8c400104 	addi	r17,r17,4
   10db8:	2007d43a 	srai	r3,r4,16
   10dbc:	2884b03a 	or	r2,r5,r2
   10dc0:	30bfff15 	stw	r2,-4(r6)
   10dc4:	e47fed2e 	bgeu	fp,r17,10d7c <__alt_data_end+0xf8010d7c>
   10dc8:	bdc5883a 	add	r2,r23,r23
   10dcc:	1085883a 	add	r2,r2,r2
   10dd0:	9887883a 	add	r3,r19,r2
   10dd4:	18800017 	ldw	r2,0(r3)
   10dd8:	10000c1e 	bne	r2,zero,10e0c <quorem+0x1ec>
   10ddc:	18bfff04 	addi	r2,r3,-4
   10de0:	9880082e 	bgeu	r19,r2,10e04 <quorem+0x1e4>
   10de4:	18ffff17 	ldw	r3,-4(r3)
   10de8:	18000326 	beq	r3,zero,10df8 <quorem+0x1d8>
   10dec:	00000506 	br	10e04 <quorem+0x1e4>
   10df0:	10c00017 	ldw	r3,0(r2)
   10df4:	1800031e 	bne	r3,zero,10e04 <quorem+0x1e4>
   10df8:	10bfff04 	addi	r2,r2,-4
   10dfc:	bdffffc4 	addi	r23,r23,-1
   10e00:	98bffb36 	bltu	r19,r2,10df0 <__alt_data_end+0xf8010df0>
   10e04:	d8c00017 	ldw	r3,0(sp)
   10e08:	1dc00415 	stw	r23,16(r3)
   10e0c:	9005883a 	mov	r2,r18
   10e10:	dfc00d17 	ldw	ra,52(sp)
   10e14:	df000c17 	ldw	fp,48(sp)
   10e18:	ddc00b17 	ldw	r23,44(sp)
   10e1c:	dd800a17 	ldw	r22,40(sp)
   10e20:	dd400917 	ldw	r21,36(sp)
   10e24:	dd000817 	ldw	r20,32(sp)
   10e28:	dcc00717 	ldw	r19,28(sp)
   10e2c:	dc800617 	ldw	r18,24(sp)
   10e30:	dc400517 	ldw	r17,20(sp)
   10e34:	dc000417 	ldw	r16,16(sp)
   10e38:	dec00e04 	addi	sp,sp,56
   10e3c:	f800283a 	ret
   10e40:	0005883a 	mov	r2,zero
   10e44:	003ff206 	br	10e10 <__alt_data_end+0xf8010e10>

00010e48 <_dtoa_r>:
   10e48:	20801017 	ldw	r2,64(r4)
   10e4c:	deffde04 	addi	sp,sp,-136
   10e50:	df002015 	stw	fp,128(sp)
   10e54:	dcc01b15 	stw	r19,108(sp)
   10e58:	dc801a15 	stw	r18,104(sp)
   10e5c:	dc401915 	stw	r17,100(sp)
   10e60:	dc001815 	stw	r16,96(sp)
   10e64:	dfc02115 	stw	ra,132(sp)
   10e68:	ddc01f15 	stw	r23,124(sp)
   10e6c:	dd801e15 	stw	r22,120(sp)
   10e70:	dd401d15 	stw	r21,116(sp)
   10e74:	dd001c15 	stw	r20,112(sp)
   10e78:	d9c00315 	stw	r7,12(sp)
   10e7c:	2039883a 	mov	fp,r4
   10e80:	3023883a 	mov	r17,r6
   10e84:	2825883a 	mov	r18,r5
   10e88:	dc002417 	ldw	r16,144(sp)
   10e8c:	3027883a 	mov	r19,r6
   10e90:	10000826 	beq	r2,zero,10eb4 <_dtoa_r+0x6c>
   10e94:	21801117 	ldw	r6,68(r4)
   10e98:	00c00044 	movi	r3,1
   10e9c:	100b883a 	mov	r5,r2
   10ea0:	1986983a 	sll	r3,r3,r6
   10ea4:	11800115 	stw	r6,4(r2)
   10ea8:	10c00215 	stw	r3,8(r2)
   10eac:	0013d9c0 	call	13d9c <_Bfree>
   10eb0:	e0001015 	stw	zero,64(fp)
   10eb4:	88002e16 	blt	r17,zero,10f70 <_dtoa_r+0x128>
   10eb8:	80000015 	stw	zero,0(r16)
   10ebc:	889ffc2c 	andhi	r2,r17,32752
   10ec0:	00dffc34 	movhi	r3,32752
   10ec4:	10c01c26 	beq	r2,r3,10f38 <_dtoa_r+0xf0>
   10ec8:	000d883a 	mov	r6,zero
   10ecc:	000f883a 	mov	r7,zero
   10ed0:	9009883a 	mov	r4,r18
   10ed4:	980b883a 	mov	r5,r19
   10ed8:	0018b580 	call	18b58 <__eqdf2>
   10edc:	10002b1e 	bne	r2,zero,10f8c <_dtoa_r+0x144>
   10ee0:	d9c02317 	ldw	r7,140(sp)
   10ee4:	00800044 	movi	r2,1
   10ee8:	38800015 	stw	r2,0(r7)
   10eec:	d8802517 	ldw	r2,148(sp)
   10ef0:	10019e26 	beq	r2,zero,1156c <_dtoa_r+0x724>
   10ef4:	d8c02517 	ldw	r3,148(sp)
   10ef8:	008000b4 	movhi	r2,2
   10efc:	10b29044 	addi	r2,r2,-13759
   10f00:	18800015 	stw	r2,0(r3)
   10f04:	10bfffc4 	addi	r2,r2,-1
   10f08:	dfc02117 	ldw	ra,132(sp)
   10f0c:	df002017 	ldw	fp,128(sp)
   10f10:	ddc01f17 	ldw	r23,124(sp)
   10f14:	dd801e17 	ldw	r22,120(sp)
   10f18:	dd401d17 	ldw	r21,116(sp)
   10f1c:	dd001c17 	ldw	r20,112(sp)
   10f20:	dcc01b17 	ldw	r19,108(sp)
   10f24:	dc801a17 	ldw	r18,104(sp)
   10f28:	dc401917 	ldw	r17,100(sp)
   10f2c:	dc001817 	ldw	r16,96(sp)
   10f30:	dec02204 	addi	sp,sp,136
   10f34:	f800283a 	ret
   10f38:	d8c02317 	ldw	r3,140(sp)
   10f3c:	0089c3c4 	movi	r2,9999
   10f40:	18800015 	stw	r2,0(r3)
   10f44:	90017726 	beq	r18,zero,11524 <_dtoa_r+0x6dc>
   10f48:	008000b4 	movhi	r2,2
   10f4c:	10b29c04 	addi	r2,r2,-13712
   10f50:	d9002517 	ldw	r4,148(sp)
   10f54:	203fec26 	beq	r4,zero,10f08 <__alt_data_end+0xf8010f08>
   10f58:	10c000c7 	ldb	r3,3(r2)
   10f5c:	1801781e 	bne	r3,zero,11540 <_dtoa_r+0x6f8>
   10f60:	10c000c4 	addi	r3,r2,3
   10f64:	d9802517 	ldw	r6,148(sp)
   10f68:	30c00015 	stw	r3,0(r6)
   10f6c:	003fe606 	br	10f08 <__alt_data_end+0xf8010f08>
   10f70:	04e00034 	movhi	r19,32768
   10f74:	9cffffc4 	addi	r19,r19,-1
   10f78:	00800044 	movi	r2,1
   10f7c:	8ce6703a 	and	r19,r17,r19
   10f80:	80800015 	stw	r2,0(r16)
   10f84:	9823883a 	mov	r17,r19
   10f88:	003fcc06 	br	10ebc <__alt_data_end+0xf8010ebc>
   10f8c:	d8800204 	addi	r2,sp,8
   10f90:	d8800015 	stw	r2,0(sp)
   10f94:	d9c00104 	addi	r7,sp,4
   10f98:	900b883a 	mov	r5,r18
   10f9c:	980d883a 	mov	r6,r19
   10fa0:	e009883a 	mov	r4,fp
   10fa4:	8820d53a 	srli	r16,r17,20
   10fa8:	0014a440 	call	14a44 <__d2b>
   10fac:	d8800915 	stw	r2,36(sp)
   10fb0:	8001651e 	bne	r16,zero,11548 <_dtoa_r+0x700>
   10fb4:	dd800217 	ldw	r22,8(sp)
   10fb8:	dc000117 	ldw	r16,4(sp)
   10fbc:	00800804 	movi	r2,32
   10fc0:	b421883a 	add	r16,r22,r16
   10fc4:	80c10c84 	addi	r3,r16,1074
   10fc8:	10c2d10e 	bge	r2,r3,11b10 <_dtoa_r+0xcc8>
   10fcc:	00801004 	movi	r2,64
   10fd0:	81010484 	addi	r4,r16,1042
   10fd4:	10c7c83a 	sub	r3,r2,r3
   10fd8:	9108d83a 	srl	r4,r18,r4
   10fdc:	88e2983a 	sll	r17,r17,r3
   10fe0:	2448b03a 	or	r4,r4,r17
   10fe4:	000dadc0 	call	dadc <__floatunsidf>
   10fe8:	017f8434 	movhi	r5,65040
   10fec:	01800044 	movi	r6,1
   10ff0:	1009883a 	mov	r4,r2
   10ff4:	194b883a 	add	r5,r3,r5
   10ff8:	843fffc4 	addi	r16,r16,-1
   10ffc:	d9801115 	stw	r6,68(sp)
   11000:	000d883a 	mov	r6,zero
   11004:	01cffe34 	movhi	r7,16376
   11008:	000d1600 	call	d160 <__subdf3>
   1100c:	0198dbf4 	movhi	r6,25455
   11010:	01cff4f4 	movhi	r7,16339
   11014:	3190d844 	addi	r6,r6,17249
   11018:	39e1e9c4 	addi	r7,r7,-30809
   1101c:	1009883a 	mov	r4,r2
   11020:	180b883a 	mov	r5,r3
   11024:	0018cd40 	call	18cd4 <__muldf3>
   11028:	01a2d874 	movhi	r6,35681
   1102c:	01cff1f4 	movhi	r7,16327
   11030:	31b22cc4 	addi	r6,r6,-14157
   11034:	39e28a04 	addi	r7,r7,-30168
   11038:	180b883a 	mov	r5,r3
   1103c:	1009883a 	mov	r4,r2
   11040:	00182ac0 	call	182ac <__adddf3>
   11044:	8009883a 	mov	r4,r16
   11048:	1029883a 	mov	r20,r2
   1104c:	1823883a 	mov	r17,r3
   11050:	00195400 	call	19540 <__floatsidf>
   11054:	019427f4 	movhi	r6,20639
   11058:	01cff4f4 	movhi	r7,16339
   1105c:	319e7ec4 	addi	r6,r6,31227
   11060:	39d104c4 	addi	r7,r7,17427
   11064:	1009883a 	mov	r4,r2
   11068:	180b883a 	mov	r5,r3
   1106c:	0018cd40 	call	18cd4 <__muldf3>
   11070:	100d883a 	mov	r6,r2
   11074:	180f883a 	mov	r7,r3
   11078:	a009883a 	mov	r4,r20
   1107c:	880b883a 	mov	r5,r17
   11080:	00182ac0 	call	182ac <__adddf3>
   11084:	1009883a 	mov	r4,r2
   11088:	180b883a 	mov	r5,r3
   1108c:	1029883a 	mov	r20,r2
   11090:	1823883a 	mov	r17,r3
   11094:	000da5c0 	call	da5c <__fixdfsi>
   11098:	000d883a 	mov	r6,zero
   1109c:	000f883a 	mov	r7,zero
   110a0:	a009883a 	mov	r4,r20
   110a4:	880b883a 	mov	r5,r17
   110a8:	d8800515 	stw	r2,20(sp)
   110ac:	0018be00 	call	18be0 <__ledf2>
   110b0:	10028716 	blt	r2,zero,11ad0 <_dtoa_r+0xc88>
   110b4:	d8c00517 	ldw	r3,20(sp)
   110b8:	00800584 	movi	r2,22
   110bc:	10c27536 	bltu	r2,r3,11a94 <_dtoa_r+0xc4c>
   110c0:	180490fa 	slli	r2,r3,3
   110c4:	00c000b4 	movhi	r3,2
   110c8:	18f2b704 	addi	r3,r3,-13604
   110cc:	1885883a 	add	r2,r3,r2
   110d0:	11000017 	ldw	r4,0(r2)
   110d4:	11400117 	ldw	r5,4(r2)
   110d8:	900d883a 	mov	r6,r18
   110dc:	980f883a 	mov	r7,r19
   110e0:	000d0840 	call	d084 <__gedf2>
   110e4:	00828d0e 	bge	zero,r2,11b1c <_dtoa_r+0xcd4>
   110e8:	d9000517 	ldw	r4,20(sp)
   110ec:	d8000e15 	stw	zero,56(sp)
   110f0:	213fffc4 	addi	r4,r4,-1
   110f4:	d9000515 	stw	r4,20(sp)
   110f8:	b42dc83a 	sub	r22,r22,r16
   110fc:	b5bfffc4 	addi	r22,r22,-1
   11100:	b0026f16 	blt	r22,zero,11ac0 <_dtoa_r+0xc78>
   11104:	d8000815 	stw	zero,32(sp)
   11108:	d9c00517 	ldw	r7,20(sp)
   1110c:	38026416 	blt	r7,zero,11aa0 <_dtoa_r+0xc58>
   11110:	b1ed883a 	add	r22,r22,r7
   11114:	d9c00d15 	stw	r7,52(sp)
   11118:	d8000a15 	stw	zero,40(sp)
   1111c:	d9800317 	ldw	r6,12(sp)
   11120:	00800244 	movi	r2,9
   11124:	11811436 	bltu	r2,r6,11578 <_dtoa_r+0x730>
   11128:	00800144 	movi	r2,5
   1112c:	1184e10e 	bge	r2,r6,124b4 <_dtoa_r+0x166c>
   11130:	31bfff04 	addi	r6,r6,-4
   11134:	d9800315 	stw	r6,12(sp)
   11138:	0023883a 	mov	r17,zero
   1113c:	d9800317 	ldw	r6,12(sp)
   11140:	008000c4 	movi	r2,3
   11144:	30836726 	beq	r6,r2,11ee4 <_dtoa_r+0x109c>
   11148:	1183410e 	bge	r2,r6,11e50 <_dtoa_r+0x1008>
   1114c:	d9c00317 	ldw	r7,12(sp)
   11150:	00800104 	movi	r2,4
   11154:	38827c26 	beq	r7,r2,11b48 <_dtoa_r+0xd00>
   11158:	00800144 	movi	r2,5
   1115c:	3884c41e 	bne	r7,r2,12470 <_dtoa_r+0x1628>
   11160:	00800044 	movi	r2,1
   11164:	d8800b15 	stw	r2,44(sp)
   11168:	d8c00517 	ldw	r3,20(sp)
   1116c:	d9002217 	ldw	r4,136(sp)
   11170:	1907883a 	add	r3,r3,r4
   11174:	19800044 	addi	r6,r3,1
   11178:	d8c00c15 	stw	r3,48(sp)
   1117c:	d9800615 	stw	r6,24(sp)
   11180:	0183a40e 	bge	zero,r6,12014 <_dtoa_r+0x11cc>
   11184:	d9800617 	ldw	r6,24(sp)
   11188:	3021883a 	mov	r16,r6
   1118c:	e0001115 	stw	zero,68(fp)
   11190:	008005c4 	movi	r2,23
   11194:	1184c92e 	bgeu	r2,r6,124bc <_dtoa_r+0x1674>
   11198:	00c00044 	movi	r3,1
   1119c:	00800104 	movi	r2,4
   111a0:	1085883a 	add	r2,r2,r2
   111a4:	11000504 	addi	r4,r2,20
   111a8:	180b883a 	mov	r5,r3
   111ac:	18c00044 	addi	r3,r3,1
   111b0:	313ffb2e 	bgeu	r6,r4,111a0 <__alt_data_end+0xf80111a0>
   111b4:	e1401115 	stw	r5,68(fp)
   111b8:	e009883a 	mov	r4,fp
   111bc:	0013cf40 	call	13cf4 <_Balloc>
   111c0:	d8800715 	stw	r2,28(sp)
   111c4:	e0801015 	stw	r2,64(fp)
   111c8:	00800384 	movi	r2,14
   111cc:	1400f736 	bltu	r2,r16,115ac <_dtoa_r+0x764>
   111d0:	8800f626 	beq	r17,zero,115ac <_dtoa_r+0x764>
   111d4:	d9c00517 	ldw	r7,20(sp)
   111d8:	01c39a0e 	bge	zero,r7,12044 <_dtoa_r+0x11fc>
   111dc:	388003cc 	andi	r2,r7,15
   111e0:	100490fa 	slli	r2,r2,3
   111e4:	382bd13a 	srai	r21,r7,4
   111e8:	00c000b4 	movhi	r3,2
   111ec:	18f2b704 	addi	r3,r3,-13604
   111f0:	1885883a 	add	r2,r3,r2
   111f4:	a8c0040c 	andi	r3,r21,16
   111f8:	12400017 	ldw	r9,0(r2)
   111fc:	12000117 	ldw	r8,4(r2)
   11200:	18037926 	beq	r3,zero,11fe8 <_dtoa_r+0x11a0>
   11204:	008000b4 	movhi	r2,2
   11208:	10b2ad04 	addi	r2,r2,-13644
   1120c:	11800817 	ldw	r6,32(r2)
   11210:	11c00917 	ldw	r7,36(r2)
   11214:	9009883a 	mov	r4,r18
   11218:	980b883a 	mov	r5,r19
   1121c:	da001715 	stw	r8,92(sp)
   11220:	da401615 	stw	r9,88(sp)
   11224:	000c6b40 	call	c6b4 <__divdf3>
   11228:	da001717 	ldw	r8,92(sp)
   1122c:	da401617 	ldw	r9,88(sp)
   11230:	ad4003cc 	andi	r21,r21,15
   11234:	040000c4 	movi	r16,3
   11238:	1023883a 	mov	r17,r2
   1123c:	1829883a 	mov	r20,r3
   11240:	a8001126 	beq	r21,zero,11288 <_dtoa_r+0x440>
   11244:	05c000b4 	movhi	r23,2
   11248:	bdf2ad04 	addi	r23,r23,-13644
   1124c:	4805883a 	mov	r2,r9
   11250:	4007883a 	mov	r3,r8
   11254:	a980004c 	andi	r6,r21,1
   11258:	1009883a 	mov	r4,r2
   1125c:	a82bd07a 	srai	r21,r21,1
   11260:	180b883a 	mov	r5,r3
   11264:	30000426 	beq	r6,zero,11278 <_dtoa_r+0x430>
   11268:	b9800017 	ldw	r6,0(r23)
   1126c:	b9c00117 	ldw	r7,4(r23)
   11270:	84000044 	addi	r16,r16,1
   11274:	0018cd40 	call	18cd4 <__muldf3>
   11278:	bdc00204 	addi	r23,r23,8
   1127c:	a83ff51e 	bne	r21,zero,11254 <__alt_data_end+0xf8011254>
   11280:	1013883a 	mov	r9,r2
   11284:	1811883a 	mov	r8,r3
   11288:	480d883a 	mov	r6,r9
   1128c:	400f883a 	mov	r7,r8
   11290:	8809883a 	mov	r4,r17
   11294:	a00b883a 	mov	r5,r20
   11298:	000c6b40 	call	c6b4 <__divdf3>
   1129c:	d8800f15 	stw	r2,60(sp)
   112a0:	d8c01015 	stw	r3,64(sp)
   112a4:	d8c00e17 	ldw	r3,56(sp)
   112a8:	18000626 	beq	r3,zero,112c4 <_dtoa_r+0x47c>
   112ac:	d9000f17 	ldw	r4,60(sp)
   112b0:	d9401017 	ldw	r5,64(sp)
   112b4:	000d883a 	mov	r6,zero
   112b8:	01cffc34 	movhi	r7,16368
   112bc:	0018be00 	call	18be0 <__ledf2>
   112c0:	10040b16 	blt	r2,zero,122f0 <_dtoa_r+0x14a8>
   112c4:	8009883a 	mov	r4,r16
   112c8:	00195400 	call	19540 <__floatsidf>
   112cc:	d9800f17 	ldw	r6,60(sp)
   112d0:	d9c01017 	ldw	r7,64(sp)
   112d4:	1009883a 	mov	r4,r2
   112d8:	180b883a 	mov	r5,r3
   112dc:	0018cd40 	call	18cd4 <__muldf3>
   112e0:	000d883a 	mov	r6,zero
   112e4:	01d00734 	movhi	r7,16412
   112e8:	1009883a 	mov	r4,r2
   112ec:	180b883a 	mov	r5,r3
   112f0:	00182ac0 	call	182ac <__adddf3>
   112f4:	1021883a 	mov	r16,r2
   112f8:	d8800617 	ldw	r2,24(sp)
   112fc:	047f3034 	movhi	r17,64704
   11300:	1c63883a 	add	r17,r3,r17
   11304:	10031826 	beq	r2,zero,11f68 <_dtoa_r+0x1120>
   11308:	d8c00517 	ldw	r3,20(sp)
   1130c:	db000617 	ldw	r12,24(sp)
   11310:	d8c01315 	stw	r3,76(sp)
   11314:	d9000b17 	ldw	r4,44(sp)
   11318:	20038f26 	beq	r4,zero,12158 <_dtoa_r+0x1310>
   1131c:	60bfffc4 	addi	r2,r12,-1
   11320:	100490fa 	slli	r2,r2,3
   11324:	00c000b4 	movhi	r3,2
   11328:	18f2b704 	addi	r3,r3,-13604
   1132c:	1885883a 	add	r2,r3,r2
   11330:	11800017 	ldw	r6,0(r2)
   11334:	11c00117 	ldw	r7,4(r2)
   11338:	d8800717 	ldw	r2,28(sp)
   1133c:	0009883a 	mov	r4,zero
   11340:	014ff834 	movhi	r5,16352
   11344:	db001615 	stw	r12,88(sp)
   11348:	15c00044 	addi	r23,r2,1
   1134c:	000c6b40 	call	c6b4 <__divdf3>
   11350:	800d883a 	mov	r6,r16
   11354:	880f883a 	mov	r7,r17
   11358:	1009883a 	mov	r4,r2
   1135c:	180b883a 	mov	r5,r3
   11360:	000d1600 	call	d160 <__subdf3>
   11364:	d9401017 	ldw	r5,64(sp)
   11368:	d9000f17 	ldw	r4,60(sp)
   1136c:	102b883a 	mov	r21,r2
   11370:	d8c01215 	stw	r3,72(sp)
   11374:	000da5c0 	call	da5c <__fixdfsi>
   11378:	1009883a 	mov	r4,r2
   1137c:	1029883a 	mov	r20,r2
   11380:	00195400 	call	19540 <__floatsidf>
   11384:	d9000f17 	ldw	r4,60(sp)
   11388:	d9401017 	ldw	r5,64(sp)
   1138c:	100d883a 	mov	r6,r2
   11390:	180f883a 	mov	r7,r3
   11394:	000d1600 	call	d160 <__subdf3>
   11398:	1823883a 	mov	r17,r3
   1139c:	d8c00717 	ldw	r3,28(sp)
   113a0:	d9401217 	ldw	r5,72(sp)
   113a4:	a2000c04 	addi	r8,r20,48
   113a8:	1021883a 	mov	r16,r2
   113ac:	1a000005 	stb	r8,0(r3)
   113b0:	800d883a 	mov	r6,r16
   113b4:	880f883a 	mov	r7,r17
   113b8:	a809883a 	mov	r4,r21
   113bc:	4029883a 	mov	r20,r8
   113c0:	000d0840 	call	d084 <__gedf2>
   113c4:	00841d16 	blt	zero,r2,1243c <_dtoa_r+0x15f4>
   113c8:	800d883a 	mov	r6,r16
   113cc:	880f883a 	mov	r7,r17
   113d0:	0009883a 	mov	r4,zero
   113d4:	014ffc34 	movhi	r5,16368
   113d8:	000d1600 	call	d160 <__subdf3>
   113dc:	d9401217 	ldw	r5,72(sp)
   113e0:	100d883a 	mov	r6,r2
   113e4:	180f883a 	mov	r7,r3
   113e8:	a809883a 	mov	r4,r21
   113ec:	000d0840 	call	d084 <__gedf2>
   113f0:	db001617 	ldw	r12,88(sp)
   113f4:	00840e16 	blt	zero,r2,12430 <_dtoa_r+0x15e8>
   113f8:	00800044 	movi	r2,1
   113fc:	13006b0e 	bge	r2,r12,115ac <_dtoa_r+0x764>
   11400:	d9000717 	ldw	r4,28(sp)
   11404:	dd800f15 	stw	r22,60(sp)
   11408:	dcc01015 	stw	r19,64(sp)
   1140c:	2319883a 	add	r12,r4,r12
   11410:	dcc01217 	ldw	r19,72(sp)
   11414:	602d883a 	mov	r22,r12
   11418:	dc801215 	stw	r18,72(sp)
   1141c:	b825883a 	mov	r18,r23
   11420:	00000906 	br	11448 <_dtoa_r+0x600>
   11424:	000d1600 	call	d160 <__subdf3>
   11428:	a80d883a 	mov	r6,r21
   1142c:	980f883a 	mov	r7,r19
   11430:	1009883a 	mov	r4,r2
   11434:	180b883a 	mov	r5,r3
   11438:	0018be00 	call	18be0 <__ledf2>
   1143c:	1003e816 	blt	r2,zero,123e0 <_dtoa_r+0x1598>
   11440:	b825883a 	mov	r18,r23
   11444:	bd83e926 	beq	r23,r22,123ec <_dtoa_r+0x15a4>
   11448:	a809883a 	mov	r4,r21
   1144c:	980b883a 	mov	r5,r19
   11450:	000d883a 	mov	r6,zero
   11454:	01d00934 	movhi	r7,16420
   11458:	0018cd40 	call	18cd4 <__muldf3>
   1145c:	000d883a 	mov	r6,zero
   11460:	01d00934 	movhi	r7,16420
   11464:	8009883a 	mov	r4,r16
   11468:	880b883a 	mov	r5,r17
   1146c:	102b883a 	mov	r21,r2
   11470:	1827883a 	mov	r19,r3
   11474:	0018cd40 	call	18cd4 <__muldf3>
   11478:	180b883a 	mov	r5,r3
   1147c:	1009883a 	mov	r4,r2
   11480:	1821883a 	mov	r16,r3
   11484:	1023883a 	mov	r17,r2
   11488:	000da5c0 	call	da5c <__fixdfsi>
   1148c:	1009883a 	mov	r4,r2
   11490:	1029883a 	mov	r20,r2
   11494:	00195400 	call	19540 <__floatsidf>
   11498:	8809883a 	mov	r4,r17
   1149c:	800b883a 	mov	r5,r16
   114a0:	100d883a 	mov	r6,r2
   114a4:	180f883a 	mov	r7,r3
   114a8:	000d1600 	call	d160 <__subdf3>
   114ac:	a5000c04 	addi	r20,r20,48
   114b0:	a80d883a 	mov	r6,r21
   114b4:	980f883a 	mov	r7,r19
   114b8:	1009883a 	mov	r4,r2
   114bc:	180b883a 	mov	r5,r3
   114c0:	95000005 	stb	r20,0(r18)
   114c4:	1021883a 	mov	r16,r2
   114c8:	1823883a 	mov	r17,r3
   114cc:	0018be00 	call	18be0 <__ledf2>
   114d0:	bdc00044 	addi	r23,r23,1
   114d4:	800d883a 	mov	r6,r16
   114d8:	880f883a 	mov	r7,r17
   114dc:	0009883a 	mov	r4,zero
   114e0:	014ffc34 	movhi	r5,16368
   114e4:	103fcf0e 	bge	r2,zero,11424 <__alt_data_end+0xf8011424>
   114e8:	d8c01317 	ldw	r3,76(sp)
   114ec:	d8c00515 	stw	r3,20(sp)
   114f0:	d9400917 	ldw	r5,36(sp)
   114f4:	e009883a 	mov	r4,fp
   114f8:	0013d9c0 	call	13d9c <_Bfree>
   114fc:	d9000517 	ldw	r4,20(sp)
   11500:	d9802317 	ldw	r6,140(sp)
   11504:	d9c02517 	ldw	r7,148(sp)
   11508:	b8000005 	stb	zero,0(r23)
   1150c:	20800044 	addi	r2,r4,1
   11510:	30800015 	stw	r2,0(r6)
   11514:	3802aa26 	beq	r7,zero,11fc0 <_dtoa_r+0x1178>
   11518:	3dc00015 	stw	r23,0(r7)
   1151c:	d8800717 	ldw	r2,28(sp)
   11520:	003e7906 	br	10f08 <__alt_data_end+0xf8010f08>
   11524:	00800434 	movhi	r2,16
   11528:	10bfffc4 	addi	r2,r2,-1
   1152c:	88a2703a 	and	r17,r17,r2
   11530:	883e851e 	bne	r17,zero,10f48 <__alt_data_end+0xf8010f48>
   11534:	008000b4 	movhi	r2,2
   11538:	10b29904 	addi	r2,r2,-13724
   1153c:	003e8406 	br	10f50 <__alt_data_end+0xf8010f50>
   11540:	10c00204 	addi	r3,r2,8
   11544:	003e8706 	br	10f64 <__alt_data_end+0xf8010f64>
   11548:	01400434 	movhi	r5,16
   1154c:	297fffc4 	addi	r5,r5,-1
   11550:	994a703a 	and	r5,r19,r5
   11554:	9009883a 	mov	r4,r18
   11558:	843f0044 	addi	r16,r16,-1023
   1155c:	294ffc34 	orhi	r5,r5,16368
   11560:	dd800217 	ldw	r22,8(sp)
   11564:	d8001115 	stw	zero,68(sp)
   11568:	003ea506 	br	11000 <__alt_data_end+0xf8011000>
   1156c:	008000b4 	movhi	r2,2
   11570:	10b29004 	addi	r2,r2,-13760
   11574:	003e6406 	br	10f08 <__alt_data_end+0xf8010f08>
   11578:	e0001115 	stw	zero,68(fp)
   1157c:	000b883a 	mov	r5,zero
   11580:	e009883a 	mov	r4,fp
   11584:	0013cf40 	call	13cf4 <_Balloc>
   11588:	01bfffc4 	movi	r6,-1
   1158c:	01c00044 	movi	r7,1
   11590:	d8800715 	stw	r2,28(sp)
   11594:	d9800c15 	stw	r6,48(sp)
   11598:	e0801015 	stw	r2,64(fp)
   1159c:	d8000315 	stw	zero,12(sp)
   115a0:	d9c00b15 	stw	r7,44(sp)
   115a4:	d9800615 	stw	r6,24(sp)
   115a8:	d8002215 	stw	zero,136(sp)
   115ac:	d8800117 	ldw	r2,4(sp)
   115b0:	10008916 	blt	r2,zero,117d8 <_dtoa_r+0x990>
   115b4:	d9000517 	ldw	r4,20(sp)
   115b8:	00c00384 	movi	r3,14
   115bc:	19008616 	blt	r3,r4,117d8 <_dtoa_r+0x990>
   115c0:	200490fa 	slli	r2,r4,3
   115c4:	00c000b4 	movhi	r3,2
   115c8:	d9802217 	ldw	r6,136(sp)
   115cc:	18f2b704 	addi	r3,r3,-13604
   115d0:	1885883a 	add	r2,r3,r2
   115d4:	14000017 	ldw	r16,0(r2)
   115d8:	14400117 	ldw	r17,4(r2)
   115dc:	30016316 	blt	r6,zero,11b6c <_dtoa_r+0xd24>
   115e0:	800d883a 	mov	r6,r16
   115e4:	880f883a 	mov	r7,r17
   115e8:	9009883a 	mov	r4,r18
   115ec:	980b883a 	mov	r5,r19
   115f0:	000c6b40 	call	c6b4 <__divdf3>
   115f4:	180b883a 	mov	r5,r3
   115f8:	1009883a 	mov	r4,r2
   115fc:	000da5c0 	call	da5c <__fixdfsi>
   11600:	1009883a 	mov	r4,r2
   11604:	102b883a 	mov	r21,r2
   11608:	00195400 	call	19540 <__floatsidf>
   1160c:	800d883a 	mov	r6,r16
   11610:	880f883a 	mov	r7,r17
   11614:	1009883a 	mov	r4,r2
   11618:	180b883a 	mov	r5,r3
   1161c:	0018cd40 	call	18cd4 <__muldf3>
   11620:	100d883a 	mov	r6,r2
   11624:	180f883a 	mov	r7,r3
   11628:	9009883a 	mov	r4,r18
   1162c:	980b883a 	mov	r5,r19
   11630:	000d1600 	call	d160 <__subdf3>
   11634:	d9c00717 	ldw	r7,28(sp)
   11638:	1009883a 	mov	r4,r2
   1163c:	a8800c04 	addi	r2,r21,48
   11640:	38800005 	stb	r2,0(r7)
   11644:	3dc00044 	addi	r23,r7,1
   11648:	d9c00617 	ldw	r7,24(sp)
   1164c:	01800044 	movi	r6,1
   11650:	180b883a 	mov	r5,r3
   11654:	2005883a 	mov	r2,r4
   11658:	39803826 	beq	r7,r6,1173c <_dtoa_r+0x8f4>
   1165c:	000d883a 	mov	r6,zero
   11660:	01d00934 	movhi	r7,16420
   11664:	0018cd40 	call	18cd4 <__muldf3>
   11668:	000d883a 	mov	r6,zero
   1166c:	000f883a 	mov	r7,zero
   11670:	1009883a 	mov	r4,r2
   11674:	180b883a 	mov	r5,r3
   11678:	1025883a 	mov	r18,r2
   1167c:	1827883a 	mov	r19,r3
   11680:	0018b580 	call	18b58 <__eqdf2>
   11684:	103f9a26 	beq	r2,zero,114f0 <__alt_data_end+0xf80114f0>
   11688:	d9c00617 	ldw	r7,24(sp)
   1168c:	d8c00717 	ldw	r3,28(sp)
   11690:	b829883a 	mov	r20,r23
   11694:	38bfffc4 	addi	r2,r7,-1
   11698:	18ad883a 	add	r22,r3,r2
   1169c:	00000a06 	br	116c8 <_dtoa_r+0x880>
   116a0:	0018cd40 	call	18cd4 <__muldf3>
   116a4:	000d883a 	mov	r6,zero
   116a8:	000f883a 	mov	r7,zero
   116ac:	1009883a 	mov	r4,r2
   116b0:	180b883a 	mov	r5,r3
   116b4:	1025883a 	mov	r18,r2
   116b8:	1827883a 	mov	r19,r3
   116bc:	b829883a 	mov	r20,r23
   116c0:	0018b580 	call	18b58 <__eqdf2>
   116c4:	103f8a26 	beq	r2,zero,114f0 <__alt_data_end+0xf80114f0>
   116c8:	800d883a 	mov	r6,r16
   116cc:	880f883a 	mov	r7,r17
   116d0:	9009883a 	mov	r4,r18
   116d4:	980b883a 	mov	r5,r19
   116d8:	000c6b40 	call	c6b4 <__divdf3>
   116dc:	180b883a 	mov	r5,r3
   116e0:	1009883a 	mov	r4,r2
   116e4:	000da5c0 	call	da5c <__fixdfsi>
   116e8:	1009883a 	mov	r4,r2
   116ec:	102b883a 	mov	r21,r2
   116f0:	00195400 	call	19540 <__floatsidf>
   116f4:	800d883a 	mov	r6,r16
   116f8:	880f883a 	mov	r7,r17
   116fc:	1009883a 	mov	r4,r2
   11700:	180b883a 	mov	r5,r3
   11704:	0018cd40 	call	18cd4 <__muldf3>
   11708:	100d883a 	mov	r6,r2
   1170c:	180f883a 	mov	r7,r3
   11710:	9009883a 	mov	r4,r18
   11714:	980b883a 	mov	r5,r19
   11718:	000d1600 	call	d160 <__subdf3>
   1171c:	aa000c04 	addi	r8,r21,48
   11720:	a2000005 	stb	r8,0(r20)
   11724:	000d883a 	mov	r6,zero
   11728:	01d00934 	movhi	r7,16420
   1172c:	1009883a 	mov	r4,r2
   11730:	180b883a 	mov	r5,r3
   11734:	a5c00044 	addi	r23,r20,1
   11738:	b53fd91e 	bne	r22,r20,116a0 <__alt_data_end+0xf80116a0>
   1173c:	100d883a 	mov	r6,r2
   11740:	180f883a 	mov	r7,r3
   11744:	1009883a 	mov	r4,r2
   11748:	180b883a 	mov	r5,r3
   1174c:	00182ac0 	call	182ac <__adddf3>
   11750:	100d883a 	mov	r6,r2
   11754:	180f883a 	mov	r7,r3
   11758:	8009883a 	mov	r4,r16
   1175c:	880b883a 	mov	r5,r17
   11760:	1027883a 	mov	r19,r2
   11764:	1825883a 	mov	r18,r3
   11768:	0018be00 	call	18be0 <__ledf2>
   1176c:	10000816 	blt	r2,zero,11790 <_dtoa_r+0x948>
   11770:	980d883a 	mov	r6,r19
   11774:	900f883a 	mov	r7,r18
   11778:	8009883a 	mov	r4,r16
   1177c:	880b883a 	mov	r5,r17
   11780:	0018b580 	call	18b58 <__eqdf2>
   11784:	103f5a1e 	bne	r2,zero,114f0 <__alt_data_end+0xf80114f0>
   11788:	ad40004c 	andi	r21,r21,1
   1178c:	a83f5826 	beq	r21,zero,114f0 <__alt_data_end+0xf80114f0>
   11790:	bd3fffc3 	ldbu	r20,-1(r23)
   11794:	b8bfffc4 	addi	r2,r23,-1
   11798:	1007883a 	mov	r3,r2
   1179c:	01400e44 	movi	r5,57
   117a0:	d9800717 	ldw	r6,28(sp)
   117a4:	00000506 	br	117bc <_dtoa_r+0x974>
   117a8:	18ffffc4 	addi	r3,r3,-1
   117ac:	11824726 	beq	r2,r6,120cc <_dtoa_r+0x1284>
   117b0:	1d000003 	ldbu	r20,0(r3)
   117b4:	102f883a 	mov	r23,r2
   117b8:	10bfffc4 	addi	r2,r2,-1
   117bc:	a1003fcc 	andi	r4,r20,255
   117c0:	2100201c 	xori	r4,r4,128
   117c4:	213fe004 	addi	r4,r4,-128
   117c8:	217ff726 	beq	r4,r5,117a8 <__alt_data_end+0xf80117a8>
   117cc:	a2000044 	addi	r8,r20,1
   117d0:	12000005 	stb	r8,0(r2)
   117d4:	003f4606 	br	114f0 <__alt_data_end+0xf80114f0>
   117d8:	d9000b17 	ldw	r4,44(sp)
   117dc:	2000c826 	beq	r4,zero,11b00 <_dtoa_r+0xcb8>
   117e0:	d9800317 	ldw	r6,12(sp)
   117e4:	00c00044 	movi	r3,1
   117e8:	1980f90e 	bge	r3,r6,11bd0 <_dtoa_r+0xd88>
   117ec:	d8800617 	ldw	r2,24(sp)
   117f0:	d8c00a17 	ldw	r3,40(sp)
   117f4:	157fffc4 	addi	r21,r2,-1
   117f8:	1d41f316 	blt	r3,r21,11fc8 <_dtoa_r+0x1180>
   117fc:	1d6bc83a 	sub	r21,r3,r21
   11800:	d9c00617 	ldw	r7,24(sp)
   11804:	3802aa16 	blt	r7,zero,122b0 <_dtoa_r+0x1468>
   11808:	dd000817 	ldw	r20,32(sp)
   1180c:	d8800617 	ldw	r2,24(sp)
   11810:	d8c00817 	ldw	r3,32(sp)
   11814:	01400044 	movi	r5,1
   11818:	e009883a 	mov	r4,fp
   1181c:	1887883a 	add	r3,r3,r2
   11820:	d8c00815 	stw	r3,32(sp)
   11824:	b0ad883a 	add	r22,r22,r2
   11828:	00141280 	call	14128 <__i2b>
   1182c:	1023883a 	mov	r17,r2
   11830:	a0000826 	beq	r20,zero,11854 <_dtoa_r+0xa0c>
   11834:	0580070e 	bge	zero,r22,11854 <_dtoa_r+0xa0c>
   11838:	a005883a 	mov	r2,r20
   1183c:	b500b916 	blt	r22,r20,11b24 <_dtoa_r+0xcdc>
   11840:	d9000817 	ldw	r4,32(sp)
   11844:	a0a9c83a 	sub	r20,r20,r2
   11848:	b0adc83a 	sub	r22,r22,r2
   1184c:	2089c83a 	sub	r4,r4,r2
   11850:	d9000815 	stw	r4,32(sp)
   11854:	d9800a17 	ldw	r6,40(sp)
   11858:	0181810e 	bge	zero,r6,11e60 <_dtoa_r+0x1018>
   1185c:	d9c00b17 	ldw	r7,44(sp)
   11860:	3800b326 	beq	r7,zero,11b30 <_dtoa_r+0xce8>
   11864:	a800b226 	beq	r21,zero,11b30 <_dtoa_r+0xce8>
   11868:	880b883a 	mov	r5,r17
   1186c:	a80d883a 	mov	r6,r21
   11870:	e009883a 	mov	r4,fp
   11874:	00143f00 	call	143f0 <__pow5mult>
   11878:	d9800917 	ldw	r6,36(sp)
   1187c:	100b883a 	mov	r5,r2
   11880:	e009883a 	mov	r4,fp
   11884:	1023883a 	mov	r17,r2
   11888:	00141640 	call	14164 <__multiply>
   1188c:	1021883a 	mov	r16,r2
   11890:	d8800a17 	ldw	r2,40(sp)
   11894:	d9400917 	ldw	r5,36(sp)
   11898:	e009883a 	mov	r4,fp
   1189c:	1545c83a 	sub	r2,r2,r21
   118a0:	d8800a15 	stw	r2,40(sp)
   118a4:	0013d9c0 	call	13d9c <_Bfree>
   118a8:	d8c00a17 	ldw	r3,40(sp)
   118ac:	18009f1e 	bne	r3,zero,11b2c <_dtoa_r+0xce4>
   118b0:	05c00044 	movi	r23,1
   118b4:	e009883a 	mov	r4,fp
   118b8:	b80b883a 	mov	r5,r23
   118bc:	00141280 	call	14128 <__i2b>
   118c0:	d9000d17 	ldw	r4,52(sp)
   118c4:	102b883a 	mov	r21,r2
   118c8:	2000ce26 	beq	r4,zero,11c04 <_dtoa_r+0xdbc>
   118cc:	200d883a 	mov	r6,r4
   118d0:	100b883a 	mov	r5,r2
   118d4:	e009883a 	mov	r4,fp
   118d8:	00143f00 	call	143f0 <__pow5mult>
   118dc:	d9800317 	ldw	r6,12(sp)
   118e0:	102b883a 	mov	r21,r2
   118e4:	b981810e 	bge	r23,r6,11eec <_dtoa_r+0x10a4>
   118e8:	0027883a 	mov	r19,zero
   118ec:	a8800417 	ldw	r2,16(r21)
   118f0:	05c00804 	movi	r23,32
   118f4:	10800104 	addi	r2,r2,4
   118f8:	1085883a 	add	r2,r2,r2
   118fc:	1085883a 	add	r2,r2,r2
   11900:	a885883a 	add	r2,r21,r2
   11904:	11000017 	ldw	r4,0(r2)
   11908:	00140100 	call	14010 <__hi0bits>
   1190c:	b885c83a 	sub	r2,r23,r2
   11910:	1585883a 	add	r2,r2,r22
   11914:	108007cc 	andi	r2,r2,31
   11918:	1000b326 	beq	r2,zero,11be8 <_dtoa_r+0xda0>
   1191c:	00c00804 	movi	r3,32
   11920:	1887c83a 	sub	r3,r3,r2
   11924:	01000104 	movi	r4,4
   11928:	20c2cd0e 	bge	r4,r3,12460 <_dtoa_r+0x1618>
   1192c:	00c00704 	movi	r3,28
   11930:	1885c83a 	sub	r2,r3,r2
   11934:	d8c00817 	ldw	r3,32(sp)
   11938:	a0a9883a 	add	r20,r20,r2
   1193c:	b0ad883a 	add	r22,r22,r2
   11940:	1887883a 	add	r3,r3,r2
   11944:	d8c00815 	stw	r3,32(sp)
   11948:	d9800817 	ldw	r6,32(sp)
   1194c:	0180040e 	bge	zero,r6,11960 <_dtoa_r+0xb18>
   11950:	800b883a 	mov	r5,r16
   11954:	e009883a 	mov	r4,fp
   11958:	00145300 	call	14530 <__lshift>
   1195c:	1021883a 	mov	r16,r2
   11960:	0580050e 	bge	zero,r22,11978 <_dtoa_r+0xb30>
   11964:	a80b883a 	mov	r5,r21
   11968:	b00d883a 	mov	r6,r22
   1196c:	e009883a 	mov	r4,fp
   11970:	00145300 	call	14530 <__lshift>
   11974:	102b883a 	mov	r21,r2
   11978:	d9c00e17 	ldw	r7,56(sp)
   1197c:	3801211e 	bne	r7,zero,11e04 <_dtoa_r+0xfbc>
   11980:	d9800617 	ldw	r6,24(sp)
   11984:	0181380e 	bge	zero,r6,11e68 <_dtoa_r+0x1020>
   11988:	d8c00b17 	ldw	r3,44(sp)
   1198c:	1800ab1e 	bne	r3,zero,11c3c <_dtoa_r+0xdf4>
   11990:	dc800717 	ldw	r18,28(sp)
   11994:	dcc00617 	ldw	r19,24(sp)
   11998:	9029883a 	mov	r20,r18
   1199c:	00000206 	br	119a8 <_dtoa_r+0xb60>
   119a0:	0013dc40 	call	13dc4 <__multadd>
   119a4:	1021883a 	mov	r16,r2
   119a8:	a80b883a 	mov	r5,r21
   119ac:	8009883a 	mov	r4,r16
   119b0:	0010c200 	call	10c20 <quorem>
   119b4:	10800c04 	addi	r2,r2,48
   119b8:	90800005 	stb	r2,0(r18)
   119bc:	94800044 	addi	r18,r18,1
   119c0:	9507c83a 	sub	r3,r18,r20
   119c4:	000f883a 	mov	r7,zero
   119c8:	01800284 	movi	r6,10
   119cc:	800b883a 	mov	r5,r16
   119d0:	e009883a 	mov	r4,fp
   119d4:	1cfff216 	blt	r3,r19,119a0 <__alt_data_end+0xf80119a0>
   119d8:	1011883a 	mov	r8,r2
   119dc:	d8800617 	ldw	r2,24(sp)
   119e0:	0082370e 	bge	zero,r2,122c0 <_dtoa_r+0x1478>
   119e4:	d9000717 	ldw	r4,28(sp)
   119e8:	0025883a 	mov	r18,zero
   119ec:	20af883a 	add	r23,r4,r2
   119f0:	01800044 	movi	r6,1
   119f4:	800b883a 	mov	r5,r16
   119f8:	e009883a 	mov	r4,fp
   119fc:	da001715 	stw	r8,92(sp)
   11a00:	00145300 	call	14530 <__lshift>
   11a04:	a80b883a 	mov	r5,r21
   11a08:	1009883a 	mov	r4,r2
   11a0c:	d8800915 	stw	r2,36(sp)
   11a10:	00146780 	call	14678 <__mcmp>
   11a14:	da001717 	ldw	r8,92(sp)
   11a18:	0081800e 	bge	zero,r2,1201c <_dtoa_r+0x11d4>
   11a1c:	b93fffc3 	ldbu	r4,-1(r23)
   11a20:	b8bfffc4 	addi	r2,r23,-1
   11a24:	1007883a 	mov	r3,r2
   11a28:	01800e44 	movi	r6,57
   11a2c:	d9c00717 	ldw	r7,28(sp)
   11a30:	00000506 	br	11a48 <_dtoa_r+0xc00>
   11a34:	18ffffc4 	addi	r3,r3,-1
   11a38:	11c12326 	beq	r2,r7,11ec8 <_dtoa_r+0x1080>
   11a3c:	19000003 	ldbu	r4,0(r3)
   11a40:	102f883a 	mov	r23,r2
   11a44:	10bfffc4 	addi	r2,r2,-1
   11a48:	21403fcc 	andi	r5,r4,255
   11a4c:	2940201c 	xori	r5,r5,128
   11a50:	297fe004 	addi	r5,r5,-128
   11a54:	29bff726 	beq	r5,r6,11a34 <__alt_data_end+0xf8011a34>
   11a58:	21000044 	addi	r4,r4,1
   11a5c:	11000005 	stb	r4,0(r2)
   11a60:	a80b883a 	mov	r5,r21
   11a64:	e009883a 	mov	r4,fp
   11a68:	0013d9c0 	call	13d9c <_Bfree>
   11a6c:	883ea026 	beq	r17,zero,114f0 <__alt_data_end+0xf80114f0>
   11a70:	90000426 	beq	r18,zero,11a84 <_dtoa_r+0xc3c>
   11a74:	94400326 	beq	r18,r17,11a84 <_dtoa_r+0xc3c>
   11a78:	900b883a 	mov	r5,r18
   11a7c:	e009883a 	mov	r4,fp
   11a80:	0013d9c0 	call	13d9c <_Bfree>
   11a84:	880b883a 	mov	r5,r17
   11a88:	e009883a 	mov	r4,fp
   11a8c:	0013d9c0 	call	13d9c <_Bfree>
   11a90:	003e9706 	br	114f0 <__alt_data_end+0xf80114f0>
   11a94:	01800044 	movi	r6,1
   11a98:	d9800e15 	stw	r6,56(sp)
   11a9c:	003d9606 	br	110f8 <__alt_data_end+0xf80110f8>
   11aa0:	d8800817 	ldw	r2,32(sp)
   11aa4:	d8c00517 	ldw	r3,20(sp)
   11aa8:	d8000d15 	stw	zero,52(sp)
   11aac:	10c5c83a 	sub	r2,r2,r3
   11ab0:	00c9c83a 	sub	r4,zero,r3
   11ab4:	d8800815 	stw	r2,32(sp)
   11ab8:	d9000a15 	stw	r4,40(sp)
   11abc:	003d9706 	br	1111c <__alt_data_end+0xf801111c>
   11ac0:	05adc83a 	sub	r22,zero,r22
   11ac4:	dd800815 	stw	r22,32(sp)
   11ac8:	002d883a 	mov	r22,zero
   11acc:	003d8e06 	br	11108 <__alt_data_end+0xf8011108>
   11ad0:	d9000517 	ldw	r4,20(sp)
   11ad4:	00195400 	call	19540 <__floatsidf>
   11ad8:	100d883a 	mov	r6,r2
   11adc:	180f883a 	mov	r7,r3
   11ae0:	a009883a 	mov	r4,r20
   11ae4:	880b883a 	mov	r5,r17
   11ae8:	0018b580 	call	18b58 <__eqdf2>
   11aec:	103d7126 	beq	r2,zero,110b4 <__alt_data_end+0xf80110b4>
   11af0:	d9c00517 	ldw	r7,20(sp)
   11af4:	39ffffc4 	addi	r7,r7,-1
   11af8:	d9c00515 	stw	r7,20(sp)
   11afc:	003d6d06 	br	110b4 <__alt_data_end+0xf80110b4>
   11b00:	dd400a17 	ldw	r21,40(sp)
   11b04:	dd000817 	ldw	r20,32(sp)
   11b08:	0023883a 	mov	r17,zero
   11b0c:	003f4806 	br	11830 <__alt_data_end+0xf8011830>
   11b10:	10e3c83a 	sub	r17,r2,r3
   11b14:	9448983a 	sll	r4,r18,r17
   11b18:	003d3206 	br	10fe4 <__alt_data_end+0xf8010fe4>
   11b1c:	d8000e15 	stw	zero,56(sp)
   11b20:	003d7506 	br	110f8 <__alt_data_end+0xf80110f8>
   11b24:	b005883a 	mov	r2,r22
   11b28:	003f4506 	br	11840 <__alt_data_end+0xf8011840>
   11b2c:	dc000915 	stw	r16,36(sp)
   11b30:	d9800a17 	ldw	r6,40(sp)
   11b34:	d9400917 	ldw	r5,36(sp)
   11b38:	e009883a 	mov	r4,fp
   11b3c:	00143f00 	call	143f0 <__pow5mult>
   11b40:	1021883a 	mov	r16,r2
   11b44:	003f5a06 	br	118b0 <__alt_data_end+0xf80118b0>
   11b48:	01c00044 	movi	r7,1
   11b4c:	d9c00b15 	stw	r7,44(sp)
   11b50:	d8802217 	ldw	r2,136(sp)
   11b54:	0081280e 	bge	zero,r2,11ff8 <_dtoa_r+0x11b0>
   11b58:	100d883a 	mov	r6,r2
   11b5c:	1021883a 	mov	r16,r2
   11b60:	d8800c15 	stw	r2,48(sp)
   11b64:	d8800615 	stw	r2,24(sp)
   11b68:	003d8806 	br	1118c <__alt_data_end+0xf801118c>
   11b6c:	d8800617 	ldw	r2,24(sp)
   11b70:	00be9b16 	blt	zero,r2,115e0 <__alt_data_end+0xf80115e0>
   11b74:	10010f1e 	bne	r2,zero,11fb4 <_dtoa_r+0x116c>
   11b78:	880b883a 	mov	r5,r17
   11b7c:	000d883a 	mov	r6,zero
   11b80:	01d00534 	movhi	r7,16404
   11b84:	8009883a 	mov	r4,r16
   11b88:	0018cd40 	call	18cd4 <__muldf3>
   11b8c:	900d883a 	mov	r6,r18
   11b90:	980f883a 	mov	r7,r19
   11b94:	1009883a 	mov	r4,r2
   11b98:	180b883a 	mov	r5,r3
   11b9c:	000d0840 	call	d084 <__gedf2>
   11ba0:	002b883a 	mov	r21,zero
   11ba4:	0023883a 	mov	r17,zero
   11ba8:	1000bf16 	blt	r2,zero,11ea8 <_dtoa_r+0x1060>
   11bac:	d9802217 	ldw	r6,136(sp)
   11bb0:	ddc00717 	ldw	r23,28(sp)
   11bb4:	018c303a 	nor	r6,zero,r6
   11bb8:	d9800515 	stw	r6,20(sp)
   11bbc:	a80b883a 	mov	r5,r21
   11bc0:	e009883a 	mov	r4,fp
   11bc4:	0013d9c0 	call	13d9c <_Bfree>
   11bc8:	883e4926 	beq	r17,zero,114f0 <__alt_data_end+0xf80114f0>
   11bcc:	003fad06 	br	11a84 <__alt_data_end+0xf8011a84>
   11bd0:	d9c01117 	ldw	r7,68(sp)
   11bd4:	3801bc26 	beq	r7,zero,122c8 <_dtoa_r+0x1480>
   11bd8:	10810cc4 	addi	r2,r2,1075
   11bdc:	dd400a17 	ldw	r21,40(sp)
   11be0:	dd000817 	ldw	r20,32(sp)
   11be4:	003f0a06 	br	11810 <__alt_data_end+0xf8011810>
   11be8:	00800704 	movi	r2,28
   11bec:	d9000817 	ldw	r4,32(sp)
   11bf0:	a0a9883a 	add	r20,r20,r2
   11bf4:	b0ad883a 	add	r22,r22,r2
   11bf8:	2089883a 	add	r4,r4,r2
   11bfc:	d9000815 	stw	r4,32(sp)
   11c00:	003f5106 	br	11948 <__alt_data_end+0xf8011948>
   11c04:	d8c00317 	ldw	r3,12(sp)
   11c08:	b8c1fc0e 	bge	r23,r3,123fc <_dtoa_r+0x15b4>
   11c0c:	0027883a 	mov	r19,zero
   11c10:	b805883a 	mov	r2,r23
   11c14:	003f3e06 	br	11910 <__alt_data_end+0xf8011910>
   11c18:	880b883a 	mov	r5,r17
   11c1c:	e009883a 	mov	r4,fp
   11c20:	000f883a 	mov	r7,zero
   11c24:	01800284 	movi	r6,10
   11c28:	0013dc40 	call	13dc4 <__multadd>
   11c2c:	d9000c17 	ldw	r4,48(sp)
   11c30:	1023883a 	mov	r17,r2
   11c34:	0102040e 	bge	zero,r4,12448 <_dtoa_r+0x1600>
   11c38:	d9000615 	stw	r4,24(sp)
   11c3c:	0500050e 	bge	zero,r20,11c54 <_dtoa_r+0xe0c>
   11c40:	880b883a 	mov	r5,r17
   11c44:	a00d883a 	mov	r6,r20
   11c48:	e009883a 	mov	r4,fp
   11c4c:	00145300 	call	14530 <__lshift>
   11c50:	1023883a 	mov	r17,r2
   11c54:	9801241e 	bne	r19,zero,120e8 <_dtoa_r+0x12a0>
   11c58:	8829883a 	mov	r20,r17
   11c5c:	d9000617 	ldw	r4,24(sp)
   11c60:	dcc00717 	ldw	r19,28(sp)
   11c64:	9480004c 	andi	r18,r18,1
   11c68:	20bfffc4 	addi	r2,r4,-1
   11c6c:	9885883a 	add	r2,r19,r2
   11c70:	d8800415 	stw	r2,16(sp)
   11c74:	dc800615 	stw	r18,24(sp)
   11c78:	a80b883a 	mov	r5,r21
   11c7c:	8009883a 	mov	r4,r16
   11c80:	0010c200 	call	10c20 <quorem>
   11c84:	880b883a 	mov	r5,r17
   11c88:	8009883a 	mov	r4,r16
   11c8c:	102f883a 	mov	r23,r2
   11c90:	00146780 	call	14678 <__mcmp>
   11c94:	a80b883a 	mov	r5,r21
   11c98:	a00d883a 	mov	r6,r20
   11c9c:	e009883a 	mov	r4,fp
   11ca0:	102d883a 	mov	r22,r2
   11ca4:	00146d80 	call	146d8 <__mdiff>
   11ca8:	1007883a 	mov	r3,r2
   11cac:	10800317 	ldw	r2,12(r2)
   11cb0:	bc800c04 	addi	r18,r23,48
   11cb4:	180b883a 	mov	r5,r3
   11cb8:	10004e1e 	bne	r2,zero,11df4 <_dtoa_r+0xfac>
   11cbc:	8009883a 	mov	r4,r16
   11cc0:	d8c01615 	stw	r3,88(sp)
   11cc4:	00146780 	call	14678 <__mcmp>
   11cc8:	d8c01617 	ldw	r3,88(sp)
   11ccc:	e009883a 	mov	r4,fp
   11cd0:	d8801615 	stw	r2,88(sp)
   11cd4:	180b883a 	mov	r5,r3
   11cd8:	0013d9c0 	call	13d9c <_Bfree>
   11cdc:	d8801617 	ldw	r2,88(sp)
   11ce0:	1000041e 	bne	r2,zero,11cf4 <_dtoa_r+0xeac>
   11ce4:	d9800317 	ldw	r6,12(sp)
   11ce8:	3000021e 	bne	r6,zero,11cf4 <_dtoa_r+0xeac>
   11cec:	d8c00617 	ldw	r3,24(sp)
   11cf0:	18003726 	beq	r3,zero,11dd0 <_dtoa_r+0xf88>
   11cf4:	b0002016 	blt	r22,zero,11d78 <_dtoa_r+0xf30>
   11cf8:	b000041e 	bne	r22,zero,11d0c <_dtoa_r+0xec4>
   11cfc:	d9000317 	ldw	r4,12(sp)
   11d00:	2000021e 	bne	r4,zero,11d0c <_dtoa_r+0xec4>
   11d04:	d8c00617 	ldw	r3,24(sp)
   11d08:	18001b26 	beq	r3,zero,11d78 <_dtoa_r+0xf30>
   11d0c:	00810716 	blt	zero,r2,1212c <_dtoa_r+0x12e4>
   11d10:	d8c00417 	ldw	r3,16(sp)
   11d14:	9d800044 	addi	r22,r19,1
   11d18:	9c800005 	stb	r18,0(r19)
   11d1c:	b02f883a 	mov	r23,r22
   11d20:	98c10626 	beq	r19,r3,1213c <_dtoa_r+0x12f4>
   11d24:	800b883a 	mov	r5,r16
   11d28:	000f883a 	mov	r7,zero
   11d2c:	01800284 	movi	r6,10
   11d30:	e009883a 	mov	r4,fp
   11d34:	0013dc40 	call	13dc4 <__multadd>
   11d38:	1021883a 	mov	r16,r2
   11d3c:	000f883a 	mov	r7,zero
   11d40:	01800284 	movi	r6,10
   11d44:	880b883a 	mov	r5,r17
   11d48:	e009883a 	mov	r4,fp
   11d4c:	8d002526 	beq	r17,r20,11de4 <_dtoa_r+0xf9c>
   11d50:	0013dc40 	call	13dc4 <__multadd>
   11d54:	a00b883a 	mov	r5,r20
   11d58:	000f883a 	mov	r7,zero
   11d5c:	01800284 	movi	r6,10
   11d60:	e009883a 	mov	r4,fp
   11d64:	1023883a 	mov	r17,r2
   11d68:	0013dc40 	call	13dc4 <__multadd>
   11d6c:	1029883a 	mov	r20,r2
   11d70:	b027883a 	mov	r19,r22
   11d74:	003fc006 	br	11c78 <__alt_data_end+0xf8011c78>
   11d78:	9011883a 	mov	r8,r18
   11d7c:	00800e0e 	bge	zero,r2,11db8 <_dtoa_r+0xf70>
   11d80:	800b883a 	mov	r5,r16
   11d84:	01800044 	movi	r6,1
   11d88:	e009883a 	mov	r4,fp
   11d8c:	da001715 	stw	r8,92(sp)
   11d90:	00145300 	call	14530 <__lshift>
   11d94:	a80b883a 	mov	r5,r21
   11d98:	1009883a 	mov	r4,r2
   11d9c:	1021883a 	mov	r16,r2
   11da0:	00146780 	call	14678 <__mcmp>
   11da4:	da001717 	ldw	r8,92(sp)
   11da8:	0081960e 	bge	zero,r2,12404 <_dtoa_r+0x15bc>
   11dac:	00800e44 	movi	r2,57
   11db0:	40817026 	beq	r8,r2,12374 <_dtoa_r+0x152c>
   11db4:	ba000c44 	addi	r8,r23,49
   11db8:	8825883a 	mov	r18,r17
   11dbc:	9dc00044 	addi	r23,r19,1
   11dc0:	9a000005 	stb	r8,0(r19)
   11dc4:	a023883a 	mov	r17,r20
   11dc8:	dc000915 	stw	r16,36(sp)
   11dcc:	003f2406 	br	11a60 <__alt_data_end+0xf8011a60>
   11dd0:	00800e44 	movi	r2,57
   11dd4:	9011883a 	mov	r8,r18
   11dd8:	90816626 	beq	r18,r2,12374 <_dtoa_r+0x152c>
   11ddc:	05bff516 	blt	zero,r22,11db4 <__alt_data_end+0xf8011db4>
   11de0:	003ff506 	br	11db8 <__alt_data_end+0xf8011db8>
   11de4:	0013dc40 	call	13dc4 <__multadd>
   11de8:	1023883a 	mov	r17,r2
   11dec:	1029883a 	mov	r20,r2
   11df0:	003fdf06 	br	11d70 <__alt_data_end+0xf8011d70>
   11df4:	e009883a 	mov	r4,fp
   11df8:	0013d9c0 	call	13d9c <_Bfree>
   11dfc:	00800044 	movi	r2,1
   11e00:	003fbc06 	br	11cf4 <__alt_data_end+0xf8011cf4>
   11e04:	a80b883a 	mov	r5,r21
   11e08:	8009883a 	mov	r4,r16
   11e0c:	00146780 	call	14678 <__mcmp>
   11e10:	103edb0e 	bge	r2,zero,11980 <__alt_data_end+0xf8011980>
   11e14:	800b883a 	mov	r5,r16
   11e18:	000f883a 	mov	r7,zero
   11e1c:	01800284 	movi	r6,10
   11e20:	e009883a 	mov	r4,fp
   11e24:	0013dc40 	call	13dc4 <__multadd>
   11e28:	1021883a 	mov	r16,r2
   11e2c:	d8800517 	ldw	r2,20(sp)
   11e30:	d8c00b17 	ldw	r3,44(sp)
   11e34:	10bfffc4 	addi	r2,r2,-1
   11e38:	d8800515 	stw	r2,20(sp)
   11e3c:	183f761e 	bne	r3,zero,11c18 <__alt_data_end+0xf8011c18>
   11e40:	d9000c17 	ldw	r4,48(sp)
   11e44:	0101730e 	bge	zero,r4,12414 <_dtoa_r+0x15cc>
   11e48:	d9000615 	stw	r4,24(sp)
   11e4c:	003ed006 	br	11990 <__alt_data_end+0xf8011990>
   11e50:	00800084 	movi	r2,2
   11e54:	3081861e 	bne	r6,r2,12470 <_dtoa_r+0x1628>
   11e58:	d8000b15 	stw	zero,44(sp)
   11e5c:	003f3c06 	br	11b50 <__alt_data_end+0xf8011b50>
   11e60:	dc000917 	ldw	r16,36(sp)
   11e64:	003e9206 	br	118b0 <__alt_data_end+0xf80118b0>
   11e68:	d9c00317 	ldw	r7,12(sp)
   11e6c:	00800084 	movi	r2,2
   11e70:	11fec50e 	bge	r2,r7,11988 <__alt_data_end+0xf8011988>
   11e74:	d9000617 	ldw	r4,24(sp)
   11e78:	20013c1e 	bne	r4,zero,1236c <_dtoa_r+0x1524>
   11e7c:	a80b883a 	mov	r5,r21
   11e80:	000f883a 	mov	r7,zero
   11e84:	01800144 	movi	r6,5
   11e88:	e009883a 	mov	r4,fp
   11e8c:	0013dc40 	call	13dc4 <__multadd>
   11e90:	100b883a 	mov	r5,r2
   11e94:	8009883a 	mov	r4,r16
   11e98:	102b883a 	mov	r21,r2
   11e9c:	00146780 	call	14678 <__mcmp>
   11ea0:	dc000915 	stw	r16,36(sp)
   11ea4:	00bf410e 	bge	zero,r2,11bac <__alt_data_end+0xf8011bac>
   11ea8:	d9c00717 	ldw	r7,28(sp)
   11eac:	00800c44 	movi	r2,49
   11eb0:	38800005 	stb	r2,0(r7)
   11eb4:	d8800517 	ldw	r2,20(sp)
   11eb8:	3dc00044 	addi	r23,r7,1
   11ebc:	10800044 	addi	r2,r2,1
   11ec0:	d8800515 	stw	r2,20(sp)
   11ec4:	003f3d06 	br	11bbc <__alt_data_end+0xf8011bbc>
   11ec8:	d9800517 	ldw	r6,20(sp)
   11ecc:	d9c00717 	ldw	r7,28(sp)
   11ed0:	00800c44 	movi	r2,49
   11ed4:	31800044 	addi	r6,r6,1
   11ed8:	d9800515 	stw	r6,20(sp)
   11edc:	38800005 	stb	r2,0(r7)
   11ee0:	003edf06 	br	11a60 <__alt_data_end+0xf8011a60>
   11ee4:	d8000b15 	stw	zero,44(sp)
   11ee8:	003c9f06 	br	11168 <__alt_data_end+0xf8011168>
   11eec:	903e7e1e 	bne	r18,zero,118e8 <__alt_data_end+0xf80118e8>
   11ef0:	00800434 	movhi	r2,16
   11ef4:	10bfffc4 	addi	r2,r2,-1
   11ef8:	9884703a 	and	r2,r19,r2
   11efc:	1000ea1e 	bne	r2,zero,122a8 <_dtoa_r+0x1460>
   11f00:	9cdffc2c 	andhi	r19,r19,32752
   11f04:	9800e826 	beq	r19,zero,122a8 <_dtoa_r+0x1460>
   11f08:	d9c00817 	ldw	r7,32(sp)
   11f0c:	b5800044 	addi	r22,r22,1
   11f10:	04c00044 	movi	r19,1
   11f14:	39c00044 	addi	r7,r7,1
   11f18:	d9c00815 	stw	r7,32(sp)
   11f1c:	d8800d17 	ldw	r2,52(sp)
   11f20:	103e721e 	bne	r2,zero,118ec <__alt_data_end+0xf80118ec>
   11f24:	00800044 	movi	r2,1
   11f28:	003e7906 	br	11910 <__alt_data_end+0xf8011910>
   11f2c:	8009883a 	mov	r4,r16
   11f30:	00195400 	call	19540 <__floatsidf>
   11f34:	d9800f17 	ldw	r6,60(sp)
   11f38:	d9c01017 	ldw	r7,64(sp)
   11f3c:	1009883a 	mov	r4,r2
   11f40:	180b883a 	mov	r5,r3
   11f44:	0018cd40 	call	18cd4 <__muldf3>
   11f48:	000d883a 	mov	r6,zero
   11f4c:	01d00734 	movhi	r7,16412
   11f50:	1009883a 	mov	r4,r2
   11f54:	180b883a 	mov	r5,r3
   11f58:	00182ac0 	call	182ac <__adddf3>
   11f5c:	047f3034 	movhi	r17,64704
   11f60:	1021883a 	mov	r16,r2
   11f64:	1c63883a 	add	r17,r3,r17
   11f68:	d9000f17 	ldw	r4,60(sp)
   11f6c:	d9401017 	ldw	r5,64(sp)
   11f70:	000d883a 	mov	r6,zero
   11f74:	01d00534 	movhi	r7,16404
   11f78:	000d1600 	call	d160 <__subdf3>
   11f7c:	800d883a 	mov	r6,r16
   11f80:	880f883a 	mov	r7,r17
   11f84:	1009883a 	mov	r4,r2
   11f88:	180b883a 	mov	r5,r3
   11f8c:	102b883a 	mov	r21,r2
   11f90:	1829883a 	mov	r20,r3
   11f94:	000d0840 	call	d084 <__gedf2>
   11f98:	00806c16 	blt	zero,r2,1214c <_dtoa_r+0x1304>
   11f9c:	89e0003c 	xorhi	r7,r17,32768
   11fa0:	800d883a 	mov	r6,r16
   11fa4:	a809883a 	mov	r4,r21
   11fa8:	a00b883a 	mov	r5,r20
   11fac:	0018be00 	call	18be0 <__ledf2>
   11fb0:	103d7e0e 	bge	r2,zero,115ac <__alt_data_end+0xf80115ac>
   11fb4:	002b883a 	mov	r21,zero
   11fb8:	0023883a 	mov	r17,zero
   11fbc:	003efb06 	br	11bac <__alt_data_end+0xf8011bac>
   11fc0:	d8800717 	ldw	r2,28(sp)
   11fc4:	003bd006 	br	10f08 <__alt_data_end+0xf8010f08>
   11fc8:	d9000a17 	ldw	r4,40(sp)
   11fcc:	d9800d17 	ldw	r6,52(sp)
   11fd0:	dd400a15 	stw	r21,40(sp)
   11fd4:	a905c83a 	sub	r2,r21,r4
   11fd8:	308d883a 	add	r6,r6,r2
   11fdc:	d9800d15 	stw	r6,52(sp)
   11fe0:	002b883a 	mov	r21,zero
   11fe4:	003e0606 	br	11800 <__alt_data_end+0xf8011800>
   11fe8:	9023883a 	mov	r17,r18
   11fec:	9829883a 	mov	r20,r19
   11ff0:	04000084 	movi	r16,2
   11ff4:	003c9206 	br	11240 <__alt_data_end+0xf8011240>
   11ff8:	04000044 	movi	r16,1
   11ffc:	dc000c15 	stw	r16,48(sp)
   12000:	dc000615 	stw	r16,24(sp)
   12004:	dc002215 	stw	r16,136(sp)
   12008:	e0001115 	stw	zero,68(fp)
   1200c:	000b883a 	mov	r5,zero
   12010:	003c6906 	br	111b8 <__alt_data_end+0xf80111b8>
   12014:	3021883a 	mov	r16,r6
   12018:	003ffb06 	br	12008 <__alt_data_end+0xf8012008>
   1201c:	1000021e 	bne	r2,zero,12028 <_dtoa_r+0x11e0>
   12020:	4200004c 	andi	r8,r8,1
   12024:	403e7d1e 	bne	r8,zero,11a1c <__alt_data_end+0xf8011a1c>
   12028:	01000c04 	movi	r4,48
   1202c:	00000106 	br	12034 <_dtoa_r+0x11ec>
   12030:	102f883a 	mov	r23,r2
   12034:	b8bfffc4 	addi	r2,r23,-1
   12038:	10c00007 	ldb	r3,0(r2)
   1203c:	193ffc26 	beq	r3,r4,12030 <__alt_data_end+0xf8012030>
   12040:	003e8706 	br	11a60 <__alt_data_end+0xf8011a60>
   12044:	d8800517 	ldw	r2,20(sp)
   12048:	00a3c83a 	sub	r17,zero,r2
   1204c:	8800a426 	beq	r17,zero,122e0 <_dtoa_r+0x1498>
   12050:	888003cc 	andi	r2,r17,15
   12054:	100490fa 	slli	r2,r2,3
   12058:	00c000b4 	movhi	r3,2
   1205c:	18f2b704 	addi	r3,r3,-13604
   12060:	1885883a 	add	r2,r3,r2
   12064:	11800017 	ldw	r6,0(r2)
   12068:	11c00117 	ldw	r7,4(r2)
   1206c:	9009883a 	mov	r4,r18
   12070:	980b883a 	mov	r5,r19
   12074:	8823d13a 	srai	r17,r17,4
   12078:	0018cd40 	call	18cd4 <__muldf3>
   1207c:	d8800f15 	stw	r2,60(sp)
   12080:	d8c01015 	stw	r3,64(sp)
   12084:	8800e826 	beq	r17,zero,12428 <_dtoa_r+0x15e0>
   12088:	050000b4 	movhi	r20,2
   1208c:	a532ad04 	addi	r20,r20,-13644
   12090:	04000084 	movi	r16,2
   12094:	8980004c 	andi	r6,r17,1
   12098:	1009883a 	mov	r4,r2
   1209c:	8823d07a 	srai	r17,r17,1
   120a0:	180b883a 	mov	r5,r3
   120a4:	30000426 	beq	r6,zero,120b8 <_dtoa_r+0x1270>
   120a8:	a1800017 	ldw	r6,0(r20)
   120ac:	a1c00117 	ldw	r7,4(r20)
   120b0:	84000044 	addi	r16,r16,1
   120b4:	0018cd40 	call	18cd4 <__muldf3>
   120b8:	a5000204 	addi	r20,r20,8
   120bc:	883ff51e 	bne	r17,zero,12094 <__alt_data_end+0xf8012094>
   120c0:	d8800f15 	stw	r2,60(sp)
   120c4:	d8c01015 	stw	r3,64(sp)
   120c8:	003c7606 	br	112a4 <__alt_data_end+0xf80112a4>
   120cc:	00c00c04 	movi	r3,48
   120d0:	10c00005 	stb	r3,0(r2)
   120d4:	d8c00517 	ldw	r3,20(sp)
   120d8:	bd3fffc3 	ldbu	r20,-1(r23)
   120dc:	18c00044 	addi	r3,r3,1
   120e0:	d8c00515 	stw	r3,20(sp)
   120e4:	003db906 	br	117cc <__alt_data_end+0xf80117cc>
   120e8:	89400117 	ldw	r5,4(r17)
   120ec:	e009883a 	mov	r4,fp
   120f0:	0013cf40 	call	13cf4 <_Balloc>
   120f4:	89800417 	ldw	r6,16(r17)
   120f8:	89400304 	addi	r5,r17,12
   120fc:	11000304 	addi	r4,r2,12
   12100:	31800084 	addi	r6,r6,2
   12104:	318d883a 	add	r6,r6,r6
   12108:	318d883a 	add	r6,r6,r6
   1210c:	1027883a 	mov	r19,r2
   12110:	00139280 	call	13928 <memcpy>
   12114:	01800044 	movi	r6,1
   12118:	980b883a 	mov	r5,r19
   1211c:	e009883a 	mov	r4,fp
   12120:	00145300 	call	14530 <__lshift>
   12124:	1029883a 	mov	r20,r2
   12128:	003ecc06 	br	11c5c <__alt_data_end+0xf8011c5c>
   1212c:	00800e44 	movi	r2,57
   12130:	90809026 	beq	r18,r2,12374 <_dtoa_r+0x152c>
   12134:	92000044 	addi	r8,r18,1
   12138:	003f1f06 	br	11db8 <__alt_data_end+0xf8011db8>
   1213c:	9011883a 	mov	r8,r18
   12140:	8825883a 	mov	r18,r17
   12144:	a023883a 	mov	r17,r20
   12148:	003e2906 	br	119f0 <__alt_data_end+0xf80119f0>
   1214c:	002b883a 	mov	r21,zero
   12150:	0023883a 	mov	r17,zero
   12154:	003f5406 	br	11ea8 <__alt_data_end+0xf8011ea8>
   12158:	61bfffc4 	addi	r6,r12,-1
   1215c:	300490fa 	slli	r2,r6,3
   12160:	00c000b4 	movhi	r3,2
   12164:	18f2b704 	addi	r3,r3,-13604
   12168:	1885883a 	add	r2,r3,r2
   1216c:	11000017 	ldw	r4,0(r2)
   12170:	11400117 	ldw	r5,4(r2)
   12174:	d8800717 	ldw	r2,28(sp)
   12178:	880f883a 	mov	r7,r17
   1217c:	d9801215 	stw	r6,72(sp)
   12180:	800d883a 	mov	r6,r16
   12184:	db001615 	stw	r12,88(sp)
   12188:	15c00044 	addi	r23,r2,1
   1218c:	0018cd40 	call	18cd4 <__muldf3>
   12190:	d9401017 	ldw	r5,64(sp)
   12194:	d9000f17 	ldw	r4,60(sp)
   12198:	d8c01515 	stw	r3,84(sp)
   1219c:	d8801415 	stw	r2,80(sp)
   121a0:	000da5c0 	call	da5c <__fixdfsi>
   121a4:	1009883a 	mov	r4,r2
   121a8:	1021883a 	mov	r16,r2
   121ac:	00195400 	call	19540 <__floatsidf>
   121b0:	d9000f17 	ldw	r4,60(sp)
   121b4:	d9401017 	ldw	r5,64(sp)
   121b8:	100d883a 	mov	r6,r2
   121bc:	180f883a 	mov	r7,r3
   121c0:	000d1600 	call	d160 <__subdf3>
   121c4:	1829883a 	mov	r20,r3
   121c8:	d8c00717 	ldw	r3,28(sp)
   121cc:	84000c04 	addi	r16,r16,48
   121d0:	1023883a 	mov	r17,r2
   121d4:	1c000005 	stb	r16,0(r3)
   121d8:	db001617 	ldw	r12,88(sp)
   121dc:	00800044 	movi	r2,1
   121e0:	60802226 	beq	r12,r2,1226c <_dtoa_r+0x1424>
   121e4:	d9c00717 	ldw	r7,28(sp)
   121e8:	8805883a 	mov	r2,r17
   121ec:	b82b883a 	mov	r21,r23
   121f0:	3b19883a 	add	r12,r7,r12
   121f4:	6023883a 	mov	r17,r12
   121f8:	a007883a 	mov	r3,r20
   121fc:	dc800f15 	stw	r18,60(sp)
   12200:	000d883a 	mov	r6,zero
   12204:	01d00934 	movhi	r7,16420
   12208:	1009883a 	mov	r4,r2
   1220c:	180b883a 	mov	r5,r3
   12210:	0018cd40 	call	18cd4 <__muldf3>
   12214:	180b883a 	mov	r5,r3
   12218:	1009883a 	mov	r4,r2
   1221c:	1829883a 	mov	r20,r3
   12220:	1025883a 	mov	r18,r2
   12224:	000da5c0 	call	da5c <__fixdfsi>
   12228:	1009883a 	mov	r4,r2
   1222c:	1021883a 	mov	r16,r2
   12230:	00195400 	call	19540 <__floatsidf>
   12234:	100d883a 	mov	r6,r2
   12238:	180f883a 	mov	r7,r3
   1223c:	9009883a 	mov	r4,r18
   12240:	a00b883a 	mov	r5,r20
   12244:	84000c04 	addi	r16,r16,48
   12248:	000d1600 	call	d160 <__subdf3>
   1224c:	ad400044 	addi	r21,r21,1
   12250:	ac3fffc5 	stb	r16,-1(r21)
   12254:	ac7fea1e 	bne	r21,r17,12200 <__alt_data_end+0xf8012200>
   12258:	1023883a 	mov	r17,r2
   1225c:	d8801217 	ldw	r2,72(sp)
   12260:	dc800f17 	ldw	r18,60(sp)
   12264:	1829883a 	mov	r20,r3
   12268:	b8af883a 	add	r23,r23,r2
   1226c:	d9001417 	ldw	r4,80(sp)
   12270:	d9401517 	ldw	r5,84(sp)
   12274:	000d883a 	mov	r6,zero
   12278:	01cff834 	movhi	r7,16352
   1227c:	00182ac0 	call	182ac <__adddf3>
   12280:	880d883a 	mov	r6,r17
   12284:	a00f883a 	mov	r7,r20
   12288:	1009883a 	mov	r4,r2
   1228c:	180b883a 	mov	r5,r3
   12290:	0018be00 	call	18be0 <__ledf2>
   12294:	10003e0e 	bge	r2,zero,12390 <_dtoa_r+0x1548>
   12298:	d9001317 	ldw	r4,76(sp)
   1229c:	bd3fffc3 	ldbu	r20,-1(r23)
   122a0:	d9000515 	stw	r4,20(sp)
   122a4:	003d3b06 	br	11794 <__alt_data_end+0xf8011794>
   122a8:	0027883a 	mov	r19,zero
   122ac:	003f1b06 	br	11f1c <__alt_data_end+0xf8011f1c>
   122b0:	d8800817 	ldw	r2,32(sp)
   122b4:	11e9c83a 	sub	r20,r2,r7
   122b8:	0005883a 	mov	r2,zero
   122bc:	003d5406 	br	11810 <__alt_data_end+0xf8011810>
   122c0:	00800044 	movi	r2,1
   122c4:	003dc706 	br	119e4 <__alt_data_end+0xf80119e4>
   122c8:	d8c00217 	ldw	r3,8(sp)
   122cc:	00800d84 	movi	r2,54
   122d0:	dd400a17 	ldw	r21,40(sp)
   122d4:	10c5c83a 	sub	r2,r2,r3
   122d8:	dd000817 	ldw	r20,32(sp)
   122dc:	003d4c06 	br	11810 <__alt_data_end+0xf8011810>
   122e0:	dc800f15 	stw	r18,60(sp)
   122e4:	dcc01015 	stw	r19,64(sp)
   122e8:	04000084 	movi	r16,2
   122ec:	003bed06 	br	112a4 <__alt_data_end+0xf80112a4>
   122f0:	d9000617 	ldw	r4,24(sp)
   122f4:	203f0d26 	beq	r4,zero,11f2c <__alt_data_end+0xf8011f2c>
   122f8:	d9800c17 	ldw	r6,48(sp)
   122fc:	01bcab0e 	bge	zero,r6,115ac <__alt_data_end+0xf80115ac>
   12300:	d9401017 	ldw	r5,64(sp)
   12304:	d9000f17 	ldw	r4,60(sp)
   12308:	000d883a 	mov	r6,zero
   1230c:	01d00934 	movhi	r7,16420
   12310:	0018cd40 	call	18cd4 <__muldf3>
   12314:	81000044 	addi	r4,r16,1
   12318:	d8800f15 	stw	r2,60(sp)
   1231c:	d8c01015 	stw	r3,64(sp)
   12320:	00195400 	call	19540 <__floatsidf>
   12324:	d9800f17 	ldw	r6,60(sp)
   12328:	d9c01017 	ldw	r7,64(sp)
   1232c:	1009883a 	mov	r4,r2
   12330:	180b883a 	mov	r5,r3
   12334:	0018cd40 	call	18cd4 <__muldf3>
   12338:	01d00734 	movhi	r7,16412
   1233c:	000d883a 	mov	r6,zero
   12340:	1009883a 	mov	r4,r2
   12344:	180b883a 	mov	r5,r3
   12348:	00182ac0 	call	182ac <__adddf3>
   1234c:	d9c00517 	ldw	r7,20(sp)
   12350:	047f3034 	movhi	r17,64704
   12354:	1021883a 	mov	r16,r2
   12358:	39ffffc4 	addi	r7,r7,-1
   1235c:	d9c01315 	stw	r7,76(sp)
   12360:	1c63883a 	add	r17,r3,r17
   12364:	db000c17 	ldw	r12,48(sp)
   12368:	003bea06 	br	11314 <__alt_data_end+0xf8011314>
   1236c:	dc000915 	stw	r16,36(sp)
   12370:	003e0e06 	br	11bac <__alt_data_end+0xf8011bac>
   12374:	01000e44 	movi	r4,57
   12378:	8825883a 	mov	r18,r17
   1237c:	9dc00044 	addi	r23,r19,1
   12380:	99000005 	stb	r4,0(r19)
   12384:	a023883a 	mov	r17,r20
   12388:	dc000915 	stw	r16,36(sp)
   1238c:	003da406 	br	11a20 <__alt_data_end+0xf8011a20>
   12390:	d9801417 	ldw	r6,80(sp)
   12394:	d9c01517 	ldw	r7,84(sp)
   12398:	0009883a 	mov	r4,zero
   1239c:	014ff834 	movhi	r5,16352
   123a0:	000d1600 	call	d160 <__subdf3>
   123a4:	880d883a 	mov	r6,r17
   123a8:	a00f883a 	mov	r7,r20
   123ac:	1009883a 	mov	r4,r2
   123b0:	180b883a 	mov	r5,r3
   123b4:	000d0840 	call	d084 <__gedf2>
   123b8:	00bc7c0e 	bge	zero,r2,115ac <__alt_data_end+0xf80115ac>
   123bc:	01000c04 	movi	r4,48
   123c0:	00000106 	br	123c8 <_dtoa_r+0x1580>
   123c4:	102f883a 	mov	r23,r2
   123c8:	b8bfffc4 	addi	r2,r23,-1
   123cc:	10c00007 	ldb	r3,0(r2)
   123d0:	193ffc26 	beq	r3,r4,123c4 <__alt_data_end+0xf80123c4>
   123d4:	d9801317 	ldw	r6,76(sp)
   123d8:	d9800515 	stw	r6,20(sp)
   123dc:	003c4406 	br	114f0 <__alt_data_end+0xf80114f0>
   123e0:	d9801317 	ldw	r6,76(sp)
   123e4:	d9800515 	stw	r6,20(sp)
   123e8:	003cea06 	br	11794 <__alt_data_end+0xf8011794>
   123ec:	dd800f17 	ldw	r22,60(sp)
   123f0:	dcc01017 	ldw	r19,64(sp)
   123f4:	dc801217 	ldw	r18,72(sp)
   123f8:	003c6c06 	br	115ac <__alt_data_end+0xf80115ac>
   123fc:	903e031e 	bne	r18,zero,11c0c <__alt_data_end+0xf8011c0c>
   12400:	003ebb06 	br	11ef0 <__alt_data_end+0xf8011ef0>
   12404:	103e6c1e 	bne	r2,zero,11db8 <__alt_data_end+0xf8011db8>
   12408:	4080004c 	andi	r2,r8,1
   1240c:	103e6a26 	beq	r2,zero,11db8 <__alt_data_end+0xf8011db8>
   12410:	003e6606 	br	11dac <__alt_data_end+0xf8011dac>
   12414:	d8c00317 	ldw	r3,12(sp)
   12418:	00800084 	movi	r2,2
   1241c:	10c02916 	blt	r2,r3,124c4 <_dtoa_r+0x167c>
   12420:	d9000c17 	ldw	r4,48(sp)
   12424:	003e8806 	br	11e48 <__alt_data_end+0xf8011e48>
   12428:	04000084 	movi	r16,2
   1242c:	003b9d06 	br	112a4 <__alt_data_end+0xf80112a4>
   12430:	d9001317 	ldw	r4,76(sp)
   12434:	d9000515 	stw	r4,20(sp)
   12438:	003cd606 	br	11794 <__alt_data_end+0xf8011794>
   1243c:	d8801317 	ldw	r2,76(sp)
   12440:	d8800515 	stw	r2,20(sp)
   12444:	003c2a06 	br	114f0 <__alt_data_end+0xf80114f0>
   12448:	d9800317 	ldw	r6,12(sp)
   1244c:	00800084 	movi	r2,2
   12450:	11801516 	blt	r2,r6,124a8 <_dtoa_r+0x1660>
   12454:	d9c00c17 	ldw	r7,48(sp)
   12458:	d9c00615 	stw	r7,24(sp)
   1245c:	003df706 	br	11c3c <__alt_data_end+0xf8011c3c>
   12460:	193d3926 	beq	r3,r4,11948 <__alt_data_end+0xf8011948>
   12464:	00c00f04 	movi	r3,60
   12468:	1885c83a 	sub	r2,r3,r2
   1246c:	003ddf06 	br	11bec <__alt_data_end+0xf8011bec>
   12470:	e009883a 	mov	r4,fp
   12474:	e0001115 	stw	zero,68(fp)
   12478:	000b883a 	mov	r5,zero
   1247c:	0013cf40 	call	13cf4 <_Balloc>
   12480:	d8800715 	stw	r2,28(sp)
   12484:	d8c00717 	ldw	r3,28(sp)
   12488:	00bfffc4 	movi	r2,-1
   1248c:	01000044 	movi	r4,1
   12490:	d8800c15 	stw	r2,48(sp)
   12494:	e0c01015 	stw	r3,64(fp)
   12498:	d9000b15 	stw	r4,44(sp)
   1249c:	d8800615 	stw	r2,24(sp)
   124a0:	d8002215 	stw	zero,136(sp)
   124a4:	003c4106 	br	115ac <__alt_data_end+0xf80115ac>
   124a8:	d8c00c17 	ldw	r3,48(sp)
   124ac:	d8c00615 	stw	r3,24(sp)
   124b0:	003e7006 	br	11e74 <__alt_data_end+0xf8011e74>
   124b4:	04400044 	movi	r17,1
   124b8:	003b2006 	br	1113c <__alt_data_end+0xf801113c>
   124bc:	000b883a 	mov	r5,zero
   124c0:	003b3d06 	br	111b8 <__alt_data_end+0xf80111b8>
   124c4:	d8800c17 	ldw	r2,48(sp)
   124c8:	d8800615 	stw	r2,24(sp)
   124cc:	003e6906 	br	11e74 <__alt_data_end+0xf8011e74>

000124d0 <__sflush_r>:
   124d0:	2880030b 	ldhu	r2,12(r5)
   124d4:	defffb04 	addi	sp,sp,-20
   124d8:	dcc00315 	stw	r19,12(sp)
   124dc:	dc400115 	stw	r17,4(sp)
   124e0:	dfc00415 	stw	ra,16(sp)
   124e4:	dc800215 	stw	r18,8(sp)
   124e8:	dc000015 	stw	r16,0(sp)
   124ec:	10c0020c 	andi	r3,r2,8
   124f0:	2823883a 	mov	r17,r5
   124f4:	2027883a 	mov	r19,r4
   124f8:	1800311e 	bne	r3,zero,125c0 <__sflush_r+0xf0>
   124fc:	28c00117 	ldw	r3,4(r5)
   12500:	10820014 	ori	r2,r2,2048
   12504:	2880030d 	sth	r2,12(r5)
   12508:	00c04b0e 	bge	zero,r3,12638 <__sflush_r+0x168>
   1250c:	8a000a17 	ldw	r8,40(r17)
   12510:	40002326 	beq	r8,zero,125a0 <__sflush_r+0xd0>
   12514:	9c000017 	ldw	r16,0(r19)
   12518:	10c4000c 	andi	r3,r2,4096
   1251c:	98000015 	stw	zero,0(r19)
   12520:	18004826 	beq	r3,zero,12644 <__sflush_r+0x174>
   12524:	89801417 	ldw	r6,80(r17)
   12528:	10c0010c 	andi	r3,r2,4
   1252c:	18000626 	beq	r3,zero,12548 <__sflush_r+0x78>
   12530:	88c00117 	ldw	r3,4(r17)
   12534:	88800c17 	ldw	r2,48(r17)
   12538:	30cdc83a 	sub	r6,r6,r3
   1253c:	10000226 	beq	r2,zero,12548 <__sflush_r+0x78>
   12540:	88800f17 	ldw	r2,60(r17)
   12544:	308dc83a 	sub	r6,r6,r2
   12548:	89400717 	ldw	r5,28(r17)
   1254c:	000f883a 	mov	r7,zero
   12550:	9809883a 	mov	r4,r19
   12554:	403ee83a 	callr	r8
   12558:	00ffffc4 	movi	r3,-1
   1255c:	10c04426 	beq	r2,r3,12670 <__sflush_r+0x1a0>
   12560:	88c0030b 	ldhu	r3,12(r17)
   12564:	89000417 	ldw	r4,16(r17)
   12568:	88000115 	stw	zero,4(r17)
   1256c:	197dffcc 	andi	r5,r3,63487
   12570:	8940030d 	sth	r5,12(r17)
   12574:	89000015 	stw	r4,0(r17)
   12578:	18c4000c 	andi	r3,r3,4096
   1257c:	18002c1e 	bne	r3,zero,12630 <__sflush_r+0x160>
   12580:	89400c17 	ldw	r5,48(r17)
   12584:	9c000015 	stw	r16,0(r19)
   12588:	28000526 	beq	r5,zero,125a0 <__sflush_r+0xd0>
   1258c:	88801004 	addi	r2,r17,64
   12590:	28800226 	beq	r5,r2,1259c <__sflush_r+0xcc>
   12594:	9809883a 	mov	r4,r19
   12598:	0012c4c0 	call	12c4c <_free_r>
   1259c:	88000c15 	stw	zero,48(r17)
   125a0:	0005883a 	mov	r2,zero
   125a4:	dfc00417 	ldw	ra,16(sp)
   125a8:	dcc00317 	ldw	r19,12(sp)
   125ac:	dc800217 	ldw	r18,8(sp)
   125b0:	dc400117 	ldw	r17,4(sp)
   125b4:	dc000017 	ldw	r16,0(sp)
   125b8:	dec00504 	addi	sp,sp,20
   125bc:	f800283a 	ret
   125c0:	2c800417 	ldw	r18,16(r5)
   125c4:	903ff626 	beq	r18,zero,125a0 <__alt_data_end+0xf80125a0>
   125c8:	2c000017 	ldw	r16,0(r5)
   125cc:	108000cc 	andi	r2,r2,3
   125d0:	2c800015 	stw	r18,0(r5)
   125d4:	84a1c83a 	sub	r16,r16,r18
   125d8:	1000131e 	bne	r2,zero,12628 <__sflush_r+0x158>
   125dc:	28800517 	ldw	r2,20(r5)
   125e0:	88800215 	stw	r2,8(r17)
   125e4:	04000316 	blt	zero,r16,125f4 <__sflush_r+0x124>
   125e8:	003fed06 	br	125a0 <__alt_data_end+0xf80125a0>
   125ec:	90a5883a 	add	r18,r18,r2
   125f0:	043feb0e 	bge	zero,r16,125a0 <__alt_data_end+0xf80125a0>
   125f4:	88800917 	ldw	r2,36(r17)
   125f8:	89400717 	ldw	r5,28(r17)
   125fc:	800f883a 	mov	r7,r16
   12600:	900d883a 	mov	r6,r18
   12604:	9809883a 	mov	r4,r19
   12608:	103ee83a 	callr	r2
   1260c:	80a1c83a 	sub	r16,r16,r2
   12610:	00bff616 	blt	zero,r2,125ec <__alt_data_end+0xf80125ec>
   12614:	88c0030b 	ldhu	r3,12(r17)
   12618:	00bfffc4 	movi	r2,-1
   1261c:	18c01014 	ori	r3,r3,64
   12620:	88c0030d 	sth	r3,12(r17)
   12624:	003fdf06 	br	125a4 <__alt_data_end+0xf80125a4>
   12628:	0005883a 	mov	r2,zero
   1262c:	003fec06 	br	125e0 <__alt_data_end+0xf80125e0>
   12630:	88801415 	stw	r2,80(r17)
   12634:	003fd206 	br	12580 <__alt_data_end+0xf8012580>
   12638:	28c00f17 	ldw	r3,60(r5)
   1263c:	00ffb316 	blt	zero,r3,1250c <__alt_data_end+0xf801250c>
   12640:	003fd706 	br	125a0 <__alt_data_end+0xf80125a0>
   12644:	89400717 	ldw	r5,28(r17)
   12648:	000d883a 	mov	r6,zero
   1264c:	01c00044 	movi	r7,1
   12650:	9809883a 	mov	r4,r19
   12654:	403ee83a 	callr	r8
   12658:	100d883a 	mov	r6,r2
   1265c:	00bfffc4 	movi	r2,-1
   12660:	30801426 	beq	r6,r2,126b4 <__sflush_r+0x1e4>
   12664:	8880030b 	ldhu	r2,12(r17)
   12668:	8a000a17 	ldw	r8,40(r17)
   1266c:	003fae06 	br	12528 <__alt_data_end+0xf8012528>
   12670:	98c00017 	ldw	r3,0(r19)
   12674:	183fba26 	beq	r3,zero,12560 <__alt_data_end+0xf8012560>
   12678:	01000744 	movi	r4,29
   1267c:	19000626 	beq	r3,r4,12698 <__sflush_r+0x1c8>
   12680:	01000584 	movi	r4,22
   12684:	19000426 	beq	r3,r4,12698 <__sflush_r+0x1c8>
   12688:	88c0030b 	ldhu	r3,12(r17)
   1268c:	18c01014 	ori	r3,r3,64
   12690:	88c0030d 	sth	r3,12(r17)
   12694:	003fc306 	br	125a4 <__alt_data_end+0xf80125a4>
   12698:	8880030b 	ldhu	r2,12(r17)
   1269c:	88c00417 	ldw	r3,16(r17)
   126a0:	88000115 	stw	zero,4(r17)
   126a4:	10bdffcc 	andi	r2,r2,63487
   126a8:	8880030d 	sth	r2,12(r17)
   126ac:	88c00015 	stw	r3,0(r17)
   126b0:	003fb306 	br	12580 <__alt_data_end+0xf8012580>
   126b4:	98800017 	ldw	r2,0(r19)
   126b8:	103fea26 	beq	r2,zero,12664 <__alt_data_end+0xf8012664>
   126bc:	00c00744 	movi	r3,29
   126c0:	10c00226 	beq	r2,r3,126cc <__sflush_r+0x1fc>
   126c4:	00c00584 	movi	r3,22
   126c8:	10c0031e 	bne	r2,r3,126d8 <__sflush_r+0x208>
   126cc:	9c000015 	stw	r16,0(r19)
   126d0:	0005883a 	mov	r2,zero
   126d4:	003fb306 	br	125a4 <__alt_data_end+0xf80125a4>
   126d8:	88c0030b 	ldhu	r3,12(r17)
   126dc:	3005883a 	mov	r2,r6
   126e0:	18c01014 	ori	r3,r3,64
   126e4:	88c0030d 	sth	r3,12(r17)
   126e8:	003fae06 	br	125a4 <__alt_data_end+0xf80125a4>

000126ec <_fflush_r>:
   126ec:	defffd04 	addi	sp,sp,-12
   126f0:	dc000115 	stw	r16,4(sp)
   126f4:	dfc00215 	stw	ra,8(sp)
   126f8:	2021883a 	mov	r16,r4
   126fc:	20000226 	beq	r4,zero,12708 <_fflush_r+0x1c>
   12700:	20800e17 	ldw	r2,56(r4)
   12704:	10000c26 	beq	r2,zero,12738 <_fflush_r+0x4c>
   12708:	2880030f 	ldh	r2,12(r5)
   1270c:	1000051e 	bne	r2,zero,12724 <_fflush_r+0x38>
   12710:	0005883a 	mov	r2,zero
   12714:	dfc00217 	ldw	ra,8(sp)
   12718:	dc000117 	ldw	r16,4(sp)
   1271c:	dec00304 	addi	sp,sp,12
   12720:	f800283a 	ret
   12724:	8009883a 	mov	r4,r16
   12728:	dfc00217 	ldw	ra,8(sp)
   1272c:	dc000117 	ldw	r16,4(sp)
   12730:	dec00304 	addi	sp,sp,12
   12734:	00124d01 	jmpi	124d0 <__sflush_r>
   12738:	d9400015 	stw	r5,0(sp)
   1273c:	0012ad80 	call	12ad8 <__sinit>
   12740:	d9400017 	ldw	r5,0(sp)
   12744:	003ff006 	br	12708 <__alt_data_end+0xf8012708>

00012748 <fflush>:
   12748:	20000526 	beq	r4,zero,12760 <fflush+0x18>
   1274c:	008000b4 	movhi	r2,2
   12750:	10b9c804 	addi	r2,r2,-6368
   12754:	200b883a 	mov	r5,r4
   12758:	11000017 	ldw	r4,0(r2)
   1275c:	00126ec1 	jmpi	126ec <_fflush_r>
   12760:	008000b4 	movhi	r2,2
   12764:	10b9c704 	addi	r2,r2,-6372
   12768:	11000017 	ldw	r4,0(r2)
   1276c:	01400074 	movhi	r5,1
   12770:	2949bb04 	addi	r5,r5,9964
   12774:	00134e81 	jmpi	134e8 <_fwalk_reent>

00012778 <__fp_unlock>:
   12778:	0005883a 	mov	r2,zero
   1277c:	f800283a 	ret

00012780 <_cleanup_r>:
   12780:	01400074 	movhi	r5,1
   12784:	295b8904 	addi	r5,r5,28196
   12788:	00134e81 	jmpi	134e8 <_fwalk_reent>

0001278c <__sinit.part.1>:
   1278c:	defff704 	addi	sp,sp,-36
   12790:	00c00074 	movhi	r3,1
   12794:	dfc00815 	stw	ra,32(sp)
   12798:	ddc00715 	stw	r23,28(sp)
   1279c:	dd800615 	stw	r22,24(sp)
   127a0:	dd400515 	stw	r21,20(sp)
   127a4:	dd000415 	stw	r20,16(sp)
   127a8:	dcc00315 	stw	r19,12(sp)
   127ac:	dc800215 	stw	r18,8(sp)
   127b0:	dc400115 	stw	r17,4(sp)
   127b4:	dc000015 	stw	r16,0(sp)
   127b8:	18c9e004 	addi	r3,r3,10112
   127bc:	24000117 	ldw	r16,4(r4)
   127c0:	20c00f15 	stw	r3,60(r4)
   127c4:	2080bb04 	addi	r2,r4,748
   127c8:	00c000c4 	movi	r3,3
   127cc:	20c0b915 	stw	r3,740(r4)
   127d0:	2080ba15 	stw	r2,744(r4)
   127d4:	2000b815 	stw	zero,736(r4)
   127d8:	05c00204 	movi	r23,8
   127dc:	00800104 	movi	r2,4
   127e0:	2025883a 	mov	r18,r4
   127e4:	b80d883a 	mov	r6,r23
   127e8:	81001704 	addi	r4,r16,92
   127ec:	000b883a 	mov	r5,zero
   127f0:	80000015 	stw	zero,0(r16)
   127f4:	80000115 	stw	zero,4(r16)
   127f8:	80000215 	stw	zero,8(r16)
   127fc:	8080030d 	sth	r2,12(r16)
   12800:	80001915 	stw	zero,100(r16)
   12804:	8000038d 	sth	zero,14(r16)
   12808:	80000415 	stw	zero,16(r16)
   1280c:	80000515 	stw	zero,20(r16)
   12810:	80000615 	stw	zero,24(r16)
   12814:	0013bcc0 	call	13bcc <memset>
   12818:	05800074 	movhi	r22,1
   1281c:	94400217 	ldw	r17,8(r18)
   12820:	05400074 	movhi	r21,1
   12824:	05000074 	movhi	r20,1
   12828:	04c00074 	movhi	r19,1
   1282c:	b594e104 	addi	r22,r22,21380
   12830:	ad54f804 	addi	r21,r21,21472
   12834:	a5151704 	addi	r20,r20,21596
   12838:	9cd52e04 	addi	r19,r19,21688
   1283c:	85800815 	stw	r22,32(r16)
   12840:	85400915 	stw	r21,36(r16)
   12844:	85000a15 	stw	r20,40(r16)
   12848:	84c00b15 	stw	r19,44(r16)
   1284c:	84000715 	stw	r16,28(r16)
   12850:	00800284 	movi	r2,10
   12854:	8880030d 	sth	r2,12(r17)
   12858:	00800044 	movi	r2,1
   1285c:	b80d883a 	mov	r6,r23
   12860:	89001704 	addi	r4,r17,92
   12864:	000b883a 	mov	r5,zero
   12868:	88000015 	stw	zero,0(r17)
   1286c:	88000115 	stw	zero,4(r17)
   12870:	88000215 	stw	zero,8(r17)
   12874:	88001915 	stw	zero,100(r17)
   12878:	8880038d 	sth	r2,14(r17)
   1287c:	88000415 	stw	zero,16(r17)
   12880:	88000515 	stw	zero,20(r17)
   12884:	88000615 	stw	zero,24(r17)
   12888:	0013bcc0 	call	13bcc <memset>
   1288c:	94000317 	ldw	r16,12(r18)
   12890:	00800484 	movi	r2,18
   12894:	8c400715 	stw	r17,28(r17)
   12898:	8d800815 	stw	r22,32(r17)
   1289c:	8d400915 	stw	r21,36(r17)
   128a0:	8d000a15 	stw	r20,40(r17)
   128a4:	8cc00b15 	stw	r19,44(r17)
   128a8:	8080030d 	sth	r2,12(r16)
   128ac:	00800084 	movi	r2,2
   128b0:	80000015 	stw	zero,0(r16)
   128b4:	80000115 	stw	zero,4(r16)
   128b8:	80000215 	stw	zero,8(r16)
   128bc:	80001915 	stw	zero,100(r16)
   128c0:	8080038d 	sth	r2,14(r16)
   128c4:	80000415 	stw	zero,16(r16)
   128c8:	80000515 	stw	zero,20(r16)
   128cc:	80000615 	stw	zero,24(r16)
   128d0:	b80d883a 	mov	r6,r23
   128d4:	000b883a 	mov	r5,zero
   128d8:	81001704 	addi	r4,r16,92
   128dc:	0013bcc0 	call	13bcc <memset>
   128e0:	00800044 	movi	r2,1
   128e4:	84000715 	stw	r16,28(r16)
   128e8:	85800815 	stw	r22,32(r16)
   128ec:	85400915 	stw	r21,36(r16)
   128f0:	85000a15 	stw	r20,40(r16)
   128f4:	84c00b15 	stw	r19,44(r16)
   128f8:	90800e15 	stw	r2,56(r18)
   128fc:	dfc00817 	ldw	ra,32(sp)
   12900:	ddc00717 	ldw	r23,28(sp)
   12904:	dd800617 	ldw	r22,24(sp)
   12908:	dd400517 	ldw	r21,20(sp)
   1290c:	dd000417 	ldw	r20,16(sp)
   12910:	dcc00317 	ldw	r19,12(sp)
   12914:	dc800217 	ldw	r18,8(sp)
   12918:	dc400117 	ldw	r17,4(sp)
   1291c:	dc000017 	ldw	r16,0(sp)
   12920:	dec00904 	addi	sp,sp,36
   12924:	f800283a 	ret

00012928 <__fp_lock>:
   12928:	0005883a 	mov	r2,zero
   1292c:	f800283a 	ret

00012930 <__sfmoreglue>:
   12930:	defffc04 	addi	sp,sp,-16
   12934:	dc800215 	stw	r18,8(sp)
   12938:	2825883a 	mov	r18,r5
   1293c:	dc000015 	stw	r16,0(sp)
   12940:	01401a04 	movi	r5,104
   12944:	2021883a 	mov	r16,r4
   12948:	913fffc4 	addi	r4,r18,-1
   1294c:	dfc00315 	stw	ra,12(sp)
   12950:	dc400115 	stw	r17,4(sp)
   12954:	000c68c0 	call	c68c <__mulsi3>
   12958:	8009883a 	mov	r4,r16
   1295c:	11401d04 	addi	r5,r2,116
   12960:	1023883a 	mov	r17,r2
   12964:	000dc5c0 	call	dc5c <_malloc_r>
   12968:	1021883a 	mov	r16,r2
   1296c:	10000726 	beq	r2,zero,1298c <__sfmoreglue+0x5c>
   12970:	11000304 	addi	r4,r2,12
   12974:	10000015 	stw	zero,0(r2)
   12978:	14800115 	stw	r18,4(r2)
   1297c:	11000215 	stw	r4,8(r2)
   12980:	89801a04 	addi	r6,r17,104
   12984:	000b883a 	mov	r5,zero
   12988:	0013bcc0 	call	13bcc <memset>
   1298c:	8005883a 	mov	r2,r16
   12990:	dfc00317 	ldw	ra,12(sp)
   12994:	dc800217 	ldw	r18,8(sp)
   12998:	dc400117 	ldw	r17,4(sp)
   1299c:	dc000017 	ldw	r16,0(sp)
   129a0:	dec00404 	addi	sp,sp,16
   129a4:	f800283a 	ret

000129a8 <__sfp>:
   129a8:	defffb04 	addi	sp,sp,-20
   129ac:	dc000015 	stw	r16,0(sp)
   129b0:	040000b4 	movhi	r16,2
   129b4:	8439c704 	addi	r16,r16,-6372
   129b8:	dcc00315 	stw	r19,12(sp)
   129bc:	2027883a 	mov	r19,r4
   129c0:	81000017 	ldw	r4,0(r16)
   129c4:	dfc00415 	stw	ra,16(sp)
   129c8:	dc800215 	stw	r18,8(sp)
   129cc:	20800e17 	ldw	r2,56(r4)
   129d0:	dc400115 	stw	r17,4(sp)
   129d4:	1000021e 	bne	r2,zero,129e0 <__sfp+0x38>
   129d8:	001278c0 	call	1278c <__sinit.part.1>
   129dc:	81000017 	ldw	r4,0(r16)
   129e0:	2480b804 	addi	r18,r4,736
   129e4:	047fffc4 	movi	r17,-1
   129e8:	91000117 	ldw	r4,4(r18)
   129ec:	94000217 	ldw	r16,8(r18)
   129f0:	213fffc4 	addi	r4,r4,-1
   129f4:	20000a16 	blt	r4,zero,12a20 <__sfp+0x78>
   129f8:	8080030f 	ldh	r2,12(r16)
   129fc:	10000c26 	beq	r2,zero,12a30 <__sfp+0x88>
   12a00:	80c01d04 	addi	r3,r16,116
   12a04:	00000206 	br	12a10 <__sfp+0x68>
   12a08:	18bfe60f 	ldh	r2,-104(r3)
   12a0c:	10000826 	beq	r2,zero,12a30 <__sfp+0x88>
   12a10:	213fffc4 	addi	r4,r4,-1
   12a14:	1c3ffd04 	addi	r16,r3,-12
   12a18:	18c01a04 	addi	r3,r3,104
   12a1c:	247ffa1e 	bne	r4,r17,12a08 <__alt_data_end+0xf8012a08>
   12a20:	90800017 	ldw	r2,0(r18)
   12a24:	10001d26 	beq	r2,zero,12a9c <__sfp+0xf4>
   12a28:	1025883a 	mov	r18,r2
   12a2c:	003fee06 	br	129e8 <__alt_data_end+0xf80129e8>
   12a30:	00bfffc4 	movi	r2,-1
   12a34:	8080038d 	sth	r2,14(r16)
   12a38:	00800044 	movi	r2,1
   12a3c:	8080030d 	sth	r2,12(r16)
   12a40:	80001915 	stw	zero,100(r16)
   12a44:	80000015 	stw	zero,0(r16)
   12a48:	80000215 	stw	zero,8(r16)
   12a4c:	80000115 	stw	zero,4(r16)
   12a50:	80000415 	stw	zero,16(r16)
   12a54:	80000515 	stw	zero,20(r16)
   12a58:	80000615 	stw	zero,24(r16)
   12a5c:	01800204 	movi	r6,8
   12a60:	000b883a 	mov	r5,zero
   12a64:	81001704 	addi	r4,r16,92
   12a68:	0013bcc0 	call	13bcc <memset>
   12a6c:	8005883a 	mov	r2,r16
   12a70:	80000c15 	stw	zero,48(r16)
   12a74:	80000d15 	stw	zero,52(r16)
   12a78:	80001115 	stw	zero,68(r16)
   12a7c:	80001215 	stw	zero,72(r16)
   12a80:	dfc00417 	ldw	ra,16(sp)
   12a84:	dcc00317 	ldw	r19,12(sp)
   12a88:	dc800217 	ldw	r18,8(sp)
   12a8c:	dc400117 	ldw	r17,4(sp)
   12a90:	dc000017 	ldw	r16,0(sp)
   12a94:	dec00504 	addi	sp,sp,20
   12a98:	f800283a 	ret
   12a9c:	01400104 	movi	r5,4
   12aa0:	9809883a 	mov	r4,r19
   12aa4:	00129300 	call	12930 <__sfmoreglue>
   12aa8:	90800015 	stw	r2,0(r18)
   12aac:	103fde1e 	bne	r2,zero,12a28 <__alt_data_end+0xf8012a28>
   12ab0:	00800304 	movi	r2,12
   12ab4:	98800015 	stw	r2,0(r19)
   12ab8:	0005883a 	mov	r2,zero
   12abc:	003ff006 	br	12a80 <__alt_data_end+0xf8012a80>

00012ac0 <_cleanup>:
   12ac0:	008000b4 	movhi	r2,2
   12ac4:	10b9c704 	addi	r2,r2,-6372
   12ac8:	11000017 	ldw	r4,0(r2)
   12acc:	01400074 	movhi	r5,1
   12ad0:	295b8904 	addi	r5,r5,28196
   12ad4:	00134e81 	jmpi	134e8 <_fwalk_reent>

00012ad8 <__sinit>:
   12ad8:	20800e17 	ldw	r2,56(r4)
   12adc:	10000126 	beq	r2,zero,12ae4 <__sinit+0xc>
   12ae0:	f800283a 	ret
   12ae4:	001278c1 	jmpi	1278c <__sinit.part.1>

00012ae8 <__sfp_lock_acquire>:
   12ae8:	f800283a 	ret

00012aec <__sfp_lock_release>:
   12aec:	f800283a 	ret

00012af0 <__sinit_lock_acquire>:
   12af0:	f800283a 	ret

00012af4 <__sinit_lock_release>:
   12af4:	f800283a 	ret

00012af8 <__fp_lock_all>:
   12af8:	008000b4 	movhi	r2,2
   12afc:	10b9c804 	addi	r2,r2,-6368
   12b00:	11000017 	ldw	r4,0(r2)
   12b04:	01400074 	movhi	r5,1
   12b08:	294a4a04 	addi	r5,r5,10536
   12b0c:	00134241 	jmpi	13424 <_fwalk>

00012b10 <__fp_unlock_all>:
   12b10:	008000b4 	movhi	r2,2
   12b14:	10b9c804 	addi	r2,r2,-6368
   12b18:	11000017 	ldw	r4,0(r2)
   12b1c:	01400074 	movhi	r5,1
   12b20:	2949de04 	addi	r5,r5,10104
   12b24:	00134241 	jmpi	13424 <_fwalk>

00012b28 <_malloc_trim_r>:
   12b28:	defffb04 	addi	sp,sp,-20
   12b2c:	dcc00315 	stw	r19,12(sp)
   12b30:	04c000b4 	movhi	r19,2
   12b34:	dc800215 	stw	r18,8(sp)
   12b38:	dc400115 	stw	r17,4(sp)
   12b3c:	dc000015 	stw	r16,0(sp)
   12b40:	dfc00415 	stw	ra,16(sp)
   12b44:	2821883a 	mov	r16,r5
   12b48:	9cf41904 	addi	r19,r19,-12188
   12b4c:	2025883a 	mov	r18,r4
   12b50:	0019bb80 	call	19bb8 <__malloc_lock>
   12b54:	98800217 	ldw	r2,8(r19)
   12b58:	14400117 	ldw	r17,4(r2)
   12b5c:	00bfff04 	movi	r2,-4
   12b60:	88a2703a 	and	r17,r17,r2
   12b64:	8c21c83a 	sub	r16,r17,r16
   12b68:	8403fbc4 	addi	r16,r16,4079
   12b6c:	8020d33a 	srli	r16,r16,12
   12b70:	0083ffc4 	movi	r2,4095
   12b74:	843fffc4 	addi	r16,r16,-1
   12b78:	8020933a 	slli	r16,r16,12
   12b7c:	1400060e 	bge	r2,r16,12b98 <_malloc_trim_r+0x70>
   12b80:	000b883a 	mov	r5,zero
   12b84:	9009883a 	mov	r4,r18
   12b88:	000e6240 	call	e624 <_sbrk_r>
   12b8c:	98c00217 	ldw	r3,8(r19)
   12b90:	1c47883a 	add	r3,r3,r17
   12b94:	10c00a26 	beq	r2,r3,12bc0 <_malloc_trim_r+0x98>
   12b98:	9009883a 	mov	r4,r18
   12b9c:	0019bdc0 	call	19bdc <__malloc_unlock>
   12ba0:	0005883a 	mov	r2,zero
   12ba4:	dfc00417 	ldw	ra,16(sp)
   12ba8:	dcc00317 	ldw	r19,12(sp)
   12bac:	dc800217 	ldw	r18,8(sp)
   12bb0:	dc400117 	ldw	r17,4(sp)
   12bb4:	dc000017 	ldw	r16,0(sp)
   12bb8:	dec00504 	addi	sp,sp,20
   12bbc:	f800283a 	ret
   12bc0:	040bc83a 	sub	r5,zero,r16
   12bc4:	9009883a 	mov	r4,r18
   12bc8:	000e6240 	call	e624 <_sbrk_r>
   12bcc:	00ffffc4 	movi	r3,-1
   12bd0:	10c00d26 	beq	r2,r3,12c08 <_malloc_trim_r+0xe0>
   12bd4:	00c000b4 	movhi	r3,2
   12bd8:	18c0ca04 	addi	r3,r3,808
   12bdc:	18800017 	ldw	r2,0(r3)
   12be0:	99000217 	ldw	r4,8(r19)
   12be4:	8c23c83a 	sub	r17,r17,r16
   12be8:	8c400054 	ori	r17,r17,1
   12bec:	1421c83a 	sub	r16,r2,r16
   12bf0:	24400115 	stw	r17,4(r4)
   12bf4:	9009883a 	mov	r4,r18
   12bf8:	1c000015 	stw	r16,0(r3)
   12bfc:	0019bdc0 	call	19bdc <__malloc_unlock>
   12c00:	00800044 	movi	r2,1
   12c04:	003fe706 	br	12ba4 <__alt_data_end+0xf8012ba4>
   12c08:	000b883a 	mov	r5,zero
   12c0c:	9009883a 	mov	r4,r18
   12c10:	000e6240 	call	e624 <_sbrk_r>
   12c14:	99000217 	ldw	r4,8(r19)
   12c18:	014003c4 	movi	r5,15
   12c1c:	1107c83a 	sub	r3,r2,r4
   12c20:	28ffdd0e 	bge	r5,r3,12b98 <__alt_data_end+0xf8012b98>
   12c24:	014000b4 	movhi	r5,2
   12c28:	2979c904 	addi	r5,r5,-6364
   12c2c:	29400017 	ldw	r5,0(r5)
   12c30:	18c00054 	ori	r3,r3,1
   12c34:	20c00115 	stw	r3,4(r4)
   12c38:	00c000b4 	movhi	r3,2
   12c3c:	1145c83a 	sub	r2,r2,r5
   12c40:	18c0ca04 	addi	r3,r3,808
   12c44:	18800015 	stw	r2,0(r3)
   12c48:	003fd306 	br	12b98 <__alt_data_end+0xf8012b98>

00012c4c <_free_r>:
   12c4c:	28004126 	beq	r5,zero,12d54 <_free_r+0x108>
   12c50:	defffd04 	addi	sp,sp,-12
   12c54:	dc400115 	stw	r17,4(sp)
   12c58:	dc000015 	stw	r16,0(sp)
   12c5c:	2023883a 	mov	r17,r4
   12c60:	2821883a 	mov	r16,r5
   12c64:	dfc00215 	stw	ra,8(sp)
   12c68:	0019bb80 	call	19bb8 <__malloc_lock>
   12c6c:	81ffff17 	ldw	r7,-4(r16)
   12c70:	00bfff84 	movi	r2,-2
   12c74:	010000b4 	movhi	r4,2
   12c78:	81bffe04 	addi	r6,r16,-8
   12c7c:	3884703a 	and	r2,r7,r2
   12c80:	21341904 	addi	r4,r4,-12188
   12c84:	308b883a 	add	r5,r6,r2
   12c88:	2a400117 	ldw	r9,4(r5)
   12c8c:	22000217 	ldw	r8,8(r4)
   12c90:	00ffff04 	movi	r3,-4
   12c94:	48c6703a 	and	r3,r9,r3
   12c98:	2a005726 	beq	r5,r8,12df8 <_free_r+0x1ac>
   12c9c:	28c00115 	stw	r3,4(r5)
   12ca0:	39c0004c 	andi	r7,r7,1
   12ca4:	3800091e 	bne	r7,zero,12ccc <_free_r+0x80>
   12ca8:	823ffe17 	ldw	r8,-8(r16)
   12cac:	22400204 	addi	r9,r4,8
   12cb0:	320dc83a 	sub	r6,r6,r8
   12cb4:	31c00217 	ldw	r7,8(r6)
   12cb8:	1205883a 	add	r2,r2,r8
   12cbc:	3a406526 	beq	r7,r9,12e54 <_free_r+0x208>
   12cc0:	32000317 	ldw	r8,12(r6)
   12cc4:	3a000315 	stw	r8,12(r7)
   12cc8:	41c00215 	stw	r7,8(r8)
   12ccc:	28cf883a 	add	r7,r5,r3
   12cd0:	39c00117 	ldw	r7,4(r7)
   12cd4:	39c0004c 	andi	r7,r7,1
   12cd8:	38003a26 	beq	r7,zero,12dc4 <_free_r+0x178>
   12cdc:	10c00054 	ori	r3,r2,1
   12ce0:	30c00115 	stw	r3,4(r6)
   12ce4:	3087883a 	add	r3,r6,r2
   12ce8:	18800015 	stw	r2,0(r3)
   12cec:	00c07fc4 	movi	r3,511
   12cf0:	18801936 	bltu	r3,r2,12d58 <_free_r+0x10c>
   12cf4:	1004d0fa 	srli	r2,r2,3
   12cf8:	01c00044 	movi	r7,1
   12cfc:	21400117 	ldw	r5,4(r4)
   12d00:	10c00044 	addi	r3,r2,1
   12d04:	18c7883a 	add	r3,r3,r3
   12d08:	1005d0ba 	srai	r2,r2,2
   12d0c:	18c7883a 	add	r3,r3,r3
   12d10:	18c7883a 	add	r3,r3,r3
   12d14:	1907883a 	add	r3,r3,r4
   12d18:	3884983a 	sll	r2,r7,r2
   12d1c:	19c00017 	ldw	r7,0(r3)
   12d20:	1a3ffe04 	addi	r8,r3,-8
   12d24:	1144b03a 	or	r2,r2,r5
   12d28:	32000315 	stw	r8,12(r6)
   12d2c:	31c00215 	stw	r7,8(r6)
   12d30:	20800115 	stw	r2,4(r4)
   12d34:	19800015 	stw	r6,0(r3)
   12d38:	39800315 	stw	r6,12(r7)
   12d3c:	8809883a 	mov	r4,r17
   12d40:	dfc00217 	ldw	ra,8(sp)
   12d44:	dc400117 	ldw	r17,4(sp)
   12d48:	dc000017 	ldw	r16,0(sp)
   12d4c:	dec00304 	addi	sp,sp,12
   12d50:	0019bdc1 	jmpi	19bdc <__malloc_unlock>
   12d54:	f800283a 	ret
   12d58:	100ad27a 	srli	r5,r2,9
   12d5c:	00c00104 	movi	r3,4
   12d60:	19404a36 	bltu	r3,r5,12e8c <_free_r+0x240>
   12d64:	100ad1ba 	srli	r5,r2,6
   12d68:	28c00e44 	addi	r3,r5,57
   12d6c:	18c7883a 	add	r3,r3,r3
   12d70:	29400e04 	addi	r5,r5,56
   12d74:	18c7883a 	add	r3,r3,r3
   12d78:	18c7883a 	add	r3,r3,r3
   12d7c:	1909883a 	add	r4,r3,r4
   12d80:	20c00017 	ldw	r3,0(r4)
   12d84:	01c000b4 	movhi	r7,2
   12d88:	213ffe04 	addi	r4,r4,-8
   12d8c:	39f41904 	addi	r7,r7,-12188
   12d90:	20c04426 	beq	r4,r3,12ea4 <_free_r+0x258>
   12d94:	01ffff04 	movi	r7,-4
   12d98:	19400117 	ldw	r5,4(r3)
   12d9c:	29ca703a 	and	r5,r5,r7
   12da0:	1140022e 	bgeu	r2,r5,12dac <_free_r+0x160>
   12da4:	18c00217 	ldw	r3,8(r3)
   12da8:	20fffb1e 	bne	r4,r3,12d98 <__alt_data_end+0xf8012d98>
   12dac:	19000317 	ldw	r4,12(r3)
   12db0:	31000315 	stw	r4,12(r6)
   12db4:	30c00215 	stw	r3,8(r6)
   12db8:	21800215 	stw	r6,8(r4)
   12dbc:	19800315 	stw	r6,12(r3)
   12dc0:	003fde06 	br	12d3c <__alt_data_end+0xf8012d3c>
   12dc4:	29c00217 	ldw	r7,8(r5)
   12dc8:	10c5883a 	add	r2,r2,r3
   12dcc:	00c000b4 	movhi	r3,2
   12dd0:	18f41b04 	addi	r3,r3,-12180
   12dd4:	38c03b26 	beq	r7,r3,12ec4 <_free_r+0x278>
   12dd8:	2a000317 	ldw	r8,12(r5)
   12ddc:	11400054 	ori	r5,r2,1
   12de0:	3087883a 	add	r3,r6,r2
   12de4:	3a000315 	stw	r8,12(r7)
   12de8:	41c00215 	stw	r7,8(r8)
   12dec:	31400115 	stw	r5,4(r6)
   12df0:	18800015 	stw	r2,0(r3)
   12df4:	003fbd06 	br	12cec <__alt_data_end+0xf8012cec>
   12df8:	39c0004c 	andi	r7,r7,1
   12dfc:	10c5883a 	add	r2,r2,r3
   12e00:	3800071e 	bne	r7,zero,12e20 <_free_r+0x1d4>
   12e04:	81fffe17 	ldw	r7,-8(r16)
   12e08:	31cdc83a 	sub	r6,r6,r7
   12e0c:	30c00317 	ldw	r3,12(r6)
   12e10:	31400217 	ldw	r5,8(r6)
   12e14:	11c5883a 	add	r2,r2,r7
   12e18:	28c00315 	stw	r3,12(r5)
   12e1c:	19400215 	stw	r5,8(r3)
   12e20:	10c00054 	ori	r3,r2,1
   12e24:	30c00115 	stw	r3,4(r6)
   12e28:	00c000b4 	movhi	r3,2
   12e2c:	18f9ca04 	addi	r3,r3,-6360
   12e30:	18c00017 	ldw	r3,0(r3)
   12e34:	21800215 	stw	r6,8(r4)
   12e38:	10ffc036 	bltu	r2,r3,12d3c <__alt_data_end+0xf8012d3c>
   12e3c:	008000b4 	movhi	r2,2
   12e40:	1080be04 	addi	r2,r2,760
   12e44:	11400017 	ldw	r5,0(r2)
   12e48:	8809883a 	mov	r4,r17
   12e4c:	0012b280 	call	12b28 <_malloc_trim_r>
   12e50:	003fba06 	br	12d3c <__alt_data_end+0xf8012d3c>
   12e54:	28c9883a 	add	r4,r5,r3
   12e58:	21000117 	ldw	r4,4(r4)
   12e5c:	2100004c 	andi	r4,r4,1
   12e60:	2000391e 	bne	r4,zero,12f48 <_free_r+0x2fc>
   12e64:	29c00217 	ldw	r7,8(r5)
   12e68:	29000317 	ldw	r4,12(r5)
   12e6c:	1885883a 	add	r2,r3,r2
   12e70:	10c00054 	ori	r3,r2,1
   12e74:	39000315 	stw	r4,12(r7)
   12e78:	21c00215 	stw	r7,8(r4)
   12e7c:	30c00115 	stw	r3,4(r6)
   12e80:	308d883a 	add	r6,r6,r2
   12e84:	30800015 	stw	r2,0(r6)
   12e88:	003fac06 	br	12d3c <__alt_data_end+0xf8012d3c>
   12e8c:	00c00504 	movi	r3,20
   12e90:	19401536 	bltu	r3,r5,12ee8 <_free_r+0x29c>
   12e94:	28c01704 	addi	r3,r5,92
   12e98:	18c7883a 	add	r3,r3,r3
   12e9c:	294016c4 	addi	r5,r5,91
   12ea0:	003fb406 	br	12d74 <__alt_data_end+0xf8012d74>
   12ea4:	280bd0ba 	srai	r5,r5,2
   12ea8:	00c00044 	movi	r3,1
   12eac:	38800117 	ldw	r2,4(r7)
   12eb0:	194a983a 	sll	r5,r3,r5
   12eb4:	2007883a 	mov	r3,r4
   12eb8:	2884b03a 	or	r2,r5,r2
   12ebc:	38800115 	stw	r2,4(r7)
   12ec0:	003fbb06 	br	12db0 <__alt_data_end+0xf8012db0>
   12ec4:	21800515 	stw	r6,20(r4)
   12ec8:	21800415 	stw	r6,16(r4)
   12ecc:	10c00054 	ori	r3,r2,1
   12ed0:	31c00315 	stw	r7,12(r6)
   12ed4:	31c00215 	stw	r7,8(r6)
   12ed8:	30c00115 	stw	r3,4(r6)
   12edc:	308d883a 	add	r6,r6,r2
   12ee0:	30800015 	stw	r2,0(r6)
   12ee4:	003f9506 	br	12d3c <__alt_data_end+0xf8012d3c>
   12ee8:	00c01504 	movi	r3,84
   12eec:	19400536 	bltu	r3,r5,12f04 <_free_r+0x2b8>
   12ef0:	100ad33a 	srli	r5,r2,12
   12ef4:	28c01bc4 	addi	r3,r5,111
   12ef8:	18c7883a 	add	r3,r3,r3
   12efc:	29401b84 	addi	r5,r5,110
   12f00:	003f9c06 	br	12d74 <__alt_data_end+0xf8012d74>
   12f04:	00c05504 	movi	r3,340
   12f08:	19400536 	bltu	r3,r5,12f20 <_free_r+0x2d4>
   12f0c:	100ad3fa 	srli	r5,r2,15
   12f10:	28c01e04 	addi	r3,r5,120
   12f14:	18c7883a 	add	r3,r3,r3
   12f18:	29401dc4 	addi	r5,r5,119
   12f1c:	003f9506 	br	12d74 <__alt_data_end+0xf8012d74>
   12f20:	00c15504 	movi	r3,1364
   12f24:	19400536 	bltu	r3,r5,12f3c <_free_r+0x2f0>
   12f28:	100ad4ba 	srli	r5,r2,18
   12f2c:	28c01f44 	addi	r3,r5,125
   12f30:	18c7883a 	add	r3,r3,r3
   12f34:	29401f04 	addi	r5,r5,124
   12f38:	003f8e06 	br	12d74 <__alt_data_end+0xf8012d74>
   12f3c:	00c03f84 	movi	r3,254
   12f40:	01401f84 	movi	r5,126
   12f44:	003f8b06 	br	12d74 <__alt_data_end+0xf8012d74>
   12f48:	10c00054 	ori	r3,r2,1
   12f4c:	30c00115 	stw	r3,4(r6)
   12f50:	308d883a 	add	r6,r6,r2
   12f54:	30800015 	stw	r2,0(r6)
   12f58:	003f7806 	br	12d3c <__alt_data_end+0xf8012d3c>

00012f5c <__sfvwrite_r>:
   12f5c:	30800217 	ldw	r2,8(r6)
   12f60:	10006726 	beq	r2,zero,13100 <__sfvwrite_r+0x1a4>
   12f64:	28c0030b 	ldhu	r3,12(r5)
   12f68:	defff404 	addi	sp,sp,-48
   12f6c:	dd400715 	stw	r21,28(sp)
   12f70:	dd000615 	stw	r20,24(sp)
   12f74:	dc000215 	stw	r16,8(sp)
   12f78:	dfc00b15 	stw	ra,44(sp)
   12f7c:	df000a15 	stw	fp,40(sp)
   12f80:	ddc00915 	stw	r23,36(sp)
   12f84:	dd800815 	stw	r22,32(sp)
   12f88:	dcc00515 	stw	r19,20(sp)
   12f8c:	dc800415 	stw	r18,16(sp)
   12f90:	dc400315 	stw	r17,12(sp)
   12f94:	1880020c 	andi	r2,r3,8
   12f98:	2821883a 	mov	r16,r5
   12f9c:	202b883a 	mov	r21,r4
   12fa0:	3029883a 	mov	r20,r6
   12fa4:	10002726 	beq	r2,zero,13044 <__sfvwrite_r+0xe8>
   12fa8:	28800417 	ldw	r2,16(r5)
   12fac:	10002526 	beq	r2,zero,13044 <__sfvwrite_r+0xe8>
   12fb0:	1880008c 	andi	r2,r3,2
   12fb4:	a4400017 	ldw	r17,0(r20)
   12fb8:	10002a26 	beq	r2,zero,13064 <__sfvwrite_r+0x108>
   12fbc:	05a00034 	movhi	r22,32768
   12fc0:	0027883a 	mov	r19,zero
   12fc4:	0025883a 	mov	r18,zero
   12fc8:	b5bf0004 	addi	r22,r22,-1024
   12fcc:	980d883a 	mov	r6,r19
   12fd0:	a809883a 	mov	r4,r21
   12fd4:	90004626 	beq	r18,zero,130f0 <__sfvwrite_r+0x194>
   12fd8:	900f883a 	mov	r7,r18
   12fdc:	b480022e 	bgeu	r22,r18,12fe8 <__sfvwrite_r+0x8c>
   12fe0:	01e00034 	movhi	r7,32768
   12fe4:	39ff0004 	addi	r7,r7,-1024
   12fe8:	80800917 	ldw	r2,36(r16)
   12fec:	81400717 	ldw	r5,28(r16)
   12ff0:	103ee83a 	callr	r2
   12ff4:	00805a0e 	bge	zero,r2,13160 <__sfvwrite_r+0x204>
   12ff8:	a0c00217 	ldw	r3,8(r20)
   12ffc:	98a7883a 	add	r19,r19,r2
   13000:	90a5c83a 	sub	r18,r18,r2
   13004:	1885c83a 	sub	r2,r3,r2
   13008:	a0800215 	stw	r2,8(r20)
   1300c:	103fef1e 	bne	r2,zero,12fcc <__alt_data_end+0xf8012fcc>
   13010:	0005883a 	mov	r2,zero
   13014:	dfc00b17 	ldw	ra,44(sp)
   13018:	df000a17 	ldw	fp,40(sp)
   1301c:	ddc00917 	ldw	r23,36(sp)
   13020:	dd800817 	ldw	r22,32(sp)
   13024:	dd400717 	ldw	r21,28(sp)
   13028:	dd000617 	ldw	r20,24(sp)
   1302c:	dcc00517 	ldw	r19,20(sp)
   13030:	dc800417 	ldw	r18,16(sp)
   13034:	dc400317 	ldw	r17,12(sp)
   13038:	dc000217 	ldw	r16,8(sp)
   1303c:	dec00c04 	addi	sp,sp,48
   13040:	f800283a 	ret
   13044:	800b883a 	mov	r5,r16
   13048:	a809883a 	mov	r4,r21
   1304c:	0010acc0 	call	10acc <__swsetup_r>
   13050:	1000ee1e 	bne	r2,zero,1340c <__sfvwrite_r+0x4b0>
   13054:	80c0030b 	ldhu	r3,12(r16)
   13058:	a4400017 	ldw	r17,0(r20)
   1305c:	1880008c 	andi	r2,r3,2
   13060:	103fd61e 	bne	r2,zero,12fbc <__alt_data_end+0xf8012fbc>
   13064:	1880004c 	andi	r2,r3,1
   13068:	1000421e 	bne	r2,zero,13174 <__sfvwrite_r+0x218>
   1306c:	0039883a 	mov	fp,zero
   13070:	0025883a 	mov	r18,zero
   13074:	90001a26 	beq	r18,zero,130e0 <__sfvwrite_r+0x184>
   13078:	1880800c 	andi	r2,r3,512
   1307c:	84c00217 	ldw	r19,8(r16)
   13080:	10002126 	beq	r2,zero,13108 <__sfvwrite_r+0x1ac>
   13084:	982f883a 	mov	r23,r19
   13088:	94c09636 	bltu	r18,r19,132e4 <__sfvwrite_r+0x388>
   1308c:	1881200c 	andi	r2,r3,1152
   13090:	1000a11e 	bne	r2,zero,13318 <__sfvwrite_r+0x3bc>
   13094:	81000017 	ldw	r4,0(r16)
   13098:	b80d883a 	mov	r6,r23
   1309c:	e00b883a 	mov	r5,fp
   130a0:	0013a700 	call	13a70 <memmove>
   130a4:	80c00217 	ldw	r3,8(r16)
   130a8:	81000017 	ldw	r4,0(r16)
   130ac:	9005883a 	mov	r2,r18
   130b0:	1ce7c83a 	sub	r19,r3,r19
   130b4:	25cf883a 	add	r7,r4,r23
   130b8:	84c00215 	stw	r19,8(r16)
   130bc:	81c00015 	stw	r7,0(r16)
   130c0:	a0c00217 	ldw	r3,8(r20)
   130c4:	e0b9883a 	add	fp,fp,r2
   130c8:	90a5c83a 	sub	r18,r18,r2
   130cc:	18a7c83a 	sub	r19,r3,r2
   130d0:	a4c00215 	stw	r19,8(r20)
   130d4:	983fce26 	beq	r19,zero,13010 <__alt_data_end+0xf8013010>
   130d8:	80c0030b 	ldhu	r3,12(r16)
   130dc:	903fe61e 	bne	r18,zero,13078 <__alt_data_end+0xf8013078>
   130e0:	8f000017 	ldw	fp,0(r17)
   130e4:	8c800117 	ldw	r18,4(r17)
   130e8:	8c400204 	addi	r17,r17,8
   130ec:	003fe106 	br	13074 <__alt_data_end+0xf8013074>
   130f0:	8cc00017 	ldw	r19,0(r17)
   130f4:	8c800117 	ldw	r18,4(r17)
   130f8:	8c400204 	addi	r17,r17,8
   130fc:	003fb306 	br	12fcc <__alt_data_end+0xf8012fcc>
   13100:	0005883a 	mov	r2,zero
   13104:	f800283a 	ret
   13108:	81000017 	ldw	r4,0(r16)
   1310c:	80800417 	ldw	r2,16(r16)
   13110:	11005a36 	bltu	r2,r4,1327c <__sfvwrite_r+0x320>
   13114:	85c00517 	ldw	r23,20(r16)
   13118:	95c05836 	bltu	r18,r23,1327c <__sfvwrite_r+0x320>
   1311c:	00a00034 	movhi	r2,32768
   13120:	10bfffc4 	addi	r2,r2,-1
   13124:	9009883a 	mov	r4,r18
   13128:	1480012e 	bgeu	r2,r18,13130 <__sfvwrite_r+0x1d4>
   1312c:	1009883a 	mov	r4,r2
   13130:	b80b883a 	mov	r5,r23
   13134:	000c4d80 	call	c4d8 <__divsi3>
   13138:	b80b883a 	mov	r5,r23
   1313c:	1009883a 	mov	r4,r2
   13140:	000c68c0 	call	c68c <__mulsi3>
   13144:	81400717 	ldw	r5,28(r16)
   13148:	80c00917 	ldw	r3,36(r16)
   1314c:	100f883a 	mov	r7,r2
   13150:	e00d883a 	mov	r6,fp
   13154:	a809883a 	mov	r4,r21
   13158:	183ee83a 	callr	r3
   1315c:	00bfd816 	blt	zero,r2,130c0 <__alt_data_end+0xf80130c0>
   13160:	8080030b 	ldhu	r2,12(r16)
   13164:	10801014 	ori	r2,r2,64
   13168:	8080030d 	sth	r2,12(r16)
   1316c:	00bfffc4 	movi	r2,-1
   13170:	003fa806 	br	13014 <__alt_data_end+0xf8013014>
   13174:	0027883a 	mov	r19,zero
   13178:	0011883a 	mov	r8,zero
   1317c:	0039883a 	mov	fp,zero
   13180:	0025883a 	mov	r18,zero
   13184:	90001f26 	beq	r18,zero,13204 <__sfvwrite_r+0x2a8>
   13188:	40005a26 	beq	r8,zero,132f4 <__sfvwrite_r+0x398>
   1318c:	982d883a 	mov	r22,r19
   13190:	94c0012e 	bgeu	r18,r19,13198 <__sfvwrite_r+0x23c>
   13194:	902d883a 	mov	r22,r18
   13198:	81000017 	ldw	r4,0(r16)
   1319c:	80800417 	ldw	r2,16(r16)
   131a0:	b02f883a 	mov	r23,r22
   131a4:	81c00517 	ldw	r7,20(r16)
   131a8:	1100032e 	bgeu	r2,r4,131b8 <__sfvwrite_r+0x25c>
   131ac:	80c00217 	ldw	r3,8(r16)
   131b0:	38c7883a 	add	r3,r7,r3
   131b4:	1d801816 	blt	r3,r22,13218 <__sfvwrite_r+0x2bc>
   131b8:	b1c03e16 	blt	r22,r7,132b4 <__sfvwrite_r+0x358>
   131bc:	80800917 	ldw	r2,36(r16)
   131c0:	81400717 	ldw	r5,28(r16)
   131c4:	e00d883a 	mov	r6,fp
   131c8:	da000115 	stw	r8,4(sp)
   131cc:	a809883a 	mov	r4,r21
   131d0:	103ee83a 	callr	r2
   131d4:	102f883a 	mov	r23,r2
   131d8:	da000117 	ldw	r8,4(sp)
   131dc:	00bfe00e 	bge	zero,r2,13160 <__alt_data_end+0xf8013160>
   131e0:	9de7c83a 	sub	r19,r19,r23
   131e4:	98001f26 	beq	r19,zero,13264 <__sfvwrite_r+0x308>
   131e8:	a0800217 	ldw	r2,8(r20)
   131ec:	e5f9883a 	add	fp,fp,r23
   131f0:	95e5c83a 	sub	r18,r18,r23
   131f4:	15efc83a 	sub	r23,r2,r23
   131f8:	a5c00215 	stw	r23,8(r20)
   131fc:	b83f8426 	beq	r23,zero,13010 <__alt_data_end+0xf8013010>
   13200:	903fe11e 	bne	r18,zero,13188 <__alt_data_end+0xf8013188>
   13204:	8f000017 	ldw	fp,0(r17)
   13208:	8c800117 	ldw	r18,4(r17)
   1320c:	0011883a 	mov	r8,zero
   13210:	8c400204 	addi	r17,r17,8
   13214:	003fdb06 	br	13184 <__alt_data_end+0xf8013184>
   13218:	180d883a 	mov	r6,r3
   1321c:	e00b883a 	mov	r5,fp
   13220:	da000115 	stw	r8,4(sp)
   13224:	d8c00015 	stw	r3,0(sp)
   13228:	0013a700 	call	13a70 <memmove>
   1322c:	d8c00017 	ldw	r3,0(sp)
   13230:	80800017 	ldw	r2,0(r16)
   13234:	800b883a 	mov	r5,r16
   13238:	a809883a 	mov	r4,r21
   1323c:	10c5883a 	add	r2,r2,r3
   13240:	80800015 	stw	r2,0(r16)
   13244:	d8c00015 	stw	r3,0(sp)
   13248:	00126ec0 	call	126ec <_fflush_r>
   1324c:	d8c00017 	ldw	r3,0(sp)
   13250:	da000117 	ldw	r8,4(sp)
   13254:	103fc21e 	bne	r2,zero,13160 <__alt_data_end+0xf8013160>
   13258:	182f883a 	mov	r23,r3
   1325c:	9de7c83a 	sub	r19,r19,r23
   13260:	983fe11e 	bne	r19,zero,131e8 <__alt_data_end+0xf80131e8>
   13264:	800b883a 	mov	r5,r16
   13268:	a809883a 	mov	r4,r21
   1326c:	00126ec0 	call	126ec <_fflush_r>
   13270:	103fbb1e 	bne	r2,zero,13160 <__alt_data_end+0xf8013160>
   13274:	0011883a 	mov	r8,zero
   13278:	003fdb06 	br	131e8 <__alt_data_end+0xf80131e8>
   1327c:	94c0012e 	bgeu	r18,r19,13284 <__sfvwrite_r+0x328>
   13280:	9027883a 	mov	r19,r18
   13284:	980d883a 	mov	r6,r19
   13288:	e00b883a 	mov	r5,fp
   1328c:	0013a700 	call	13a70 <memmove>
   13290:	80800217 	ldw	r2,8(r16)
   13294:	80c00017 	ldw	r3,0(r16)
   13298:	14c5c83a 	sub	r2,r2,r19
   1329c:	1cc7883a 	add	r3,r3,r19
   132a0:	80800215 	stw	r2,8(r16)
   132a4:	80c00015 	stw	r3,0(r16)
   132a8:	10004326 	beq	r2,zero,133b8 <__sfvwrite_r+0x45c>
   132ac:	9805883a 	mov	r2,r19
   132b0:	003f8306 	br	130c0 <__alt_data_end+0xf80130c0>
   132b4:	b00d883a 	mov	r6,r22
   132b8:	e00b883a 	mov	r5,fp
   132bc:	da000115 	stw	r8,4(sp)
   132c0:	0013a700 	call	13a70 <memmove>
   132c4:	80800217 	ldw	r2,8(r16)
   132c8:	80c00017 	ldw	r3,0(r16)
   132cc:	da000117 	ldw	r8,4(sp)
   132d0:	1585c83a 	sub	r2,r2,r22
   132d4:	1dad883a 	add	r22,r3,r22
   132d8:	80800215 	stw	r2,8(r16)
   132dc:	85800015 	stw	r22,0(r16)
   132e0:	003fbf06 	br	131e0 <__alt_data_end+0xf80131e0>
   132e4:	81000017 	ldw	r4,0(r16)
   132e8:	9027883a 	mov	r19,r18
   132ec:	902f883a 	mov	r23,r18
   132f0:	003f6906 	br	13098 <__alt_data_end+0xf8013098>
   132f4:	900d883a 	mov	r6,r18
   132f8:	01400284 	movi	r5,10
   132fc:	e009883a 	mov	r4,fp
   13300:	00138440 	call	13844 <memchr>
   13304:	10003e26 	beq	r2,zero,13400 <__sfvwrite_r+0x4a4>
   13308:	10800044 	addi	r2,r2,1
   1330c:	1727c83a 	sub	r19,r2,fp
   13310:	02000044 	movi	r8,1
   13314:	003f9d06 	br	1318c <__alt_data_end+0xf801318c>
   13318:	80800517 	ldw	r2,20(r16)
   1331c:	81400417 	ldw	r5,16(r16)
   13320:	81c00017 	ldw	r7,0(r16)
   13324:	10a7883a 	add	r19,r2,r2
   13328:	9885883a 	add	r2,r19,r2
   1332c:	1026d7fa 	srli	r19,r2,31
   13330:	396dc83a 	sub	r22,r7,r5
   13334:	b1000044 	addi	r4,r22,1
   13338:	9885883a 	add	r2,r19,r2
   1333c:	1027d07a 	srai	r19,r2,1
   13340:	2485883a 	add	r2,r4,r18
   13344:	980d883a 	mov	r6,r19
   13348:	9880022e 	bgeu	r19,r2,13354 <__sfvwrite_r+0x3f8>
   1334c:	1027883a 	mov	r19,r2
   13350:	100d883a 	mov	r6,r2
   13354:	18c1000c 	andi	r3,r3,1024
   13358:	18001c26 	beq	r3,zero,133cc <__sfvwrite_r+0x470>
   1335c:	300b883a 	mov	r5,r6
   13360:	a809883a 	mov	r4,r21
   13364:	000dc5c0 	call	dc5c <_malloc_r>
   13368:	102f883a 	mov	r23,r2
   1336c:	10002926 	beq	r2,zero,13414 <__sfvwrite_r+0x4b8>
   13370:	81400417 	ldw	r5,16(r16)
   13374:	b00d883a 	mov	r6,r22
   13378:	1009883a 	mov	r4,r2
   1337c:	00139280 	call	13928 <memcpy>
   13380:	8080030b 	ldhu	r2,12(r16)
   13384:	00fedfc4 	movi	r3,-1153
   13388:	10c4703a 	and	r2,r2,r3
   1338c:	10802014 	ori	r2,r2,128
   13390:	8080030d 	sth	r2,12(r16)
   13394:	bd89883a 	add	r4,r23,r22
   13398:	9d8fc83a 	sub	r7,r19,r22
   1339c:	85c00415 	stw	r23,16(r16)
   133a0:	84c00515 	stw	r19,20(r16)
   133a4:	81000015 	stw	r4,0(r16)
   133a8:	9027883a 	mov	r19,r18
   133ac:	81c00215 	stw	r7,8(r16)
   133b0:	902f883a 	mov	r23,r18
   133b4:	003f3806 	br	13098 <__alt_data_end+0xf8013098>
   133b8:	800b883a 	mov	r5,r16
   133bc:	a809883a 	mov	r4,r21
   133c0:	00126ec0 	call	126ec <_fflush_r>
   133c4:	103fb926 	beq	r2,zero,132ac <__alt_data_end+0xf80132ac>
   133c8:	003f6506 	br	13160 <__alt_data_end+0xf8013160>
   133cc:	a809883a 	mov	r4,r21
   133d0:	0014dac0 	call	14dac <_realloc_r>
   133d4:	102f883a 	mov	r23,r2
   133d8:	103fee1e 	bne	r2,zero,13394 <__alt_data_end+0xf8013394>
   133dc:	81400417 	ldw	r5,16(r16)
   133e0:	a809883a 	mov	r4,r21
   133e4:	0012c4c0 	call	12c4c <_free_r>
   133e8:	8080030b 	ldhu	r2,12(r16)
   133ec:	00ffdfc4 	movi	r3,-129
   133f0:	1884703a 	and	r2,r3,r2
   133f4:	00c00304 	movi	r3,12
   133f8:	a8c00015 	stw	r3,0(r21)
   133fc:	003f5906 	br	13164 <__alt_data_end+0xf8013164>
   13400:	94c00044 	addi	r19,r18,1
   13404:	02000044 	movi	r8,1
   13408:	003f6006 	br	1318c <__alt_data_end+0xf801318c>
   1340c:	00bfffc4 	movi	r2,-1
   13410:	003f0006 	br	13014 <__alt_data_end+0xf8013014>
   13414:	00800304 	movi	r2,12
   13418:	a8800015 	stw	r2,0(r21)
   1341c:	8080030b 	ldhu	r2,12(r16)
   13420:	003f5006 	br	13164 <__alt_data_end+0xf8013164>

00013424 <_fwalk>:
   13424:	defff704 	addi	sp,sp,-36
   13428:	dd000415 	stw	r20,16(sp)
   1342c:	dfc00815 	stw	ra,32(sp)
   13430:	ddc00715 	stw	r23,28(sp)
   13434:	dd800615 	stw	r22,24(sp)
   13438:	dd400515 	stw	r21,20(sp)
   1343c:	dcc00315 	stw	r19,12(sp)
   13440:	dc800215 	stw	r18,8(sp)
   13444:	dc400115 	stw	r17,4(sp)
   13448:	dc000015 	stw	r16,0(sp)
   1344c:	2500b804 	addi	r20,r4,736
   13450:	a0002326 	beq	r20,zero,134e0 <_fwalk+0xbc>
   13454:	282b883a 	mov	r21,r5
   13458:	002f883a 	mov	r23,zero
   1345c:	05800044 	movi	r22,1
   13460:	04ffffc4 	movi	r19,-1
   13464:	a4400117 	ldw	r17,4(r20)
   13468:	a4800217 	ldw	r18,8(r20)
   1346c:	8c7fffc4 	addi	r17,r17,-1
   13470:	88000d16 	blt	r17,zero,134a8 <_fwalk+0x84>
   13474:	94000304 	addi	r16,r18,12
   13478:	94800384 	addi	r18,r18,14
   1347c:	8080000b 	ldhu	r2,0(r16)
   13480:	8c7fffc4 	addi	r17,r17,-1
   13484:	813ffd04 	addi	r4,r16,-12
   13488:	b080042e 	bgeu	r22,r2,1349c <_fwalk+0x78>
   1348c:	9080000f 	ldh	r2,0(r18)
   13490:	14c00226 	beq	r2,r19,1349c <_fwalk+0x78>
   13494:	a83ee83a 	callr	r21
   13498:	b8aeb03a 	or	r23,r23,r2
   1349c:	84001a04 	addi	r16,r16,104
   134a0:	94801a04 	addi	r18,r18,104
   134a4:	8cfff51e 	bne	r17,r19,1347c <__alt_data_end+0xf801347c>
   134a8:	a5000017 	ldw	r20,0(r20)
   134ac:	a03fed1e 	bne	r20,zero,13464 <__alt_data_end+0xf8013464>
   134b0:	b805883a 	mov	r2,r23
   134b4:	dfc00817 	ldw	ra,32(sp)
   134b8:	ddc00717 	ldw	r23,28(sp)
   134bc:	dd800617 	ldw	r22,24(sp)
   134c0:	dd400517 	ldw	r21,20(sp)
   134c4:	dd000417 	ldw	r20,16(sp)
   134c8:	dcc00317 	ldw	r19,12(sp)
   134cc:	dc800217 	ldw	r18,8(sp)
   134d0:	dc400117 	ldw	r17,4(sp)
   134d4:	dc000017 	ldw	r16,0(sp)
   134d8:	dec00904 	addi	sp,sp,36
   134dc:	f800283a 	ret
   134e0:	002f883a 	mov	r23,zero
   134e4:	003ff206 	br	134b0 <__alt_data_end+0xf80134b0>

000134e8 <_fwalk_reent>:
   134e8:	defff704 	addi	sp,sp,-36
   134ec:	dd000415 	stw	r20,16(sp)
   134f0:	dfc00815 	stw	ra,32(sp)
   134f4:	ddc00715 	stw	r23,28(sp)
   134f8:	dd800615 	stw	r22,24(sp)
   134fc:	dd400515 	stw	r21,20(sp)
   13500:	dcc00315 	stw	r19,12(sp)
   13504:	dc800215 	stw	r18,8(sp)
   13508:	dc400115 	stw	r17,4(sp)
   1350c:	dc000015 	stw	r16,0(sp)
   13510:	2500b804 	addi	r20,r4,736
   13514:	a0002326 	beq	r20,zero,135a4 <_fwalk_reent+0xbc>
   13518:	282b883a 	mov	r21,r5
   1351c:	2027883a 	mov	r19,r4
   13520:	002f883a 	mov	r23,zero
   13524:	05800044 	movi	r22,1
   13528:	04bfffc4 	movi	r18,-1
   1352c:	a4400117 	ldw	r17,4(r20)
   13530:	a4000217 	ldw	r16,8(r20)
   13534:	8c7fffc4 	addi	r17,r17,-1
   13538:	88000c16 	blt	r17,zero,1356c <_fwalk_reent+0x84>
   1353c:	84000304 	addi	r16,r16,12
   13540:	8080000b 	ldhu	r2,0(r16)
   13544:	8c7fffc4 	addi	r17,r17,-1
   13548:	817ffd04 	addi	r5,r16,-12
   1354c:	b080052e 	bgeu	r22,r2,13564 <_fwalk_reent+0x7c>
   13550:	8080008f 	ldh	r2,2(r16)
   13554:	9809883a 	mov	r4,r19
   13558:	14800226 	beq	r2,r18,13564 <_fwalk_reent+0x7c>
   1355c:	a83ee83a 	callr	r21
   13560:	b8aeb03a 	or	r23,r23,r2
   13564:	84001a04 	addi	r16,r16,104
   13568:	8cbff51e 	bne	r17,r18,13540 <__alt_data_end+0xf8013540>
   1356c:	a5000017 	ldw	r20,0(r20)
   13570:	a03fee1e 	bne	r20,zero,1352c <__alt_data_end+0xf801352c>
   13574:	b805883a 	mov	r2,r23
   13578:	dfc00817 	ldw	ra,32(sp)
   1357c:	ddc00717 	ldw	r23,28(sp)
   13580:	dd800617 	ldw	r22,24(sp)
   13584:	dd400517 	ldw	r21,20(sp)
   13588:	dd000417 	ldw	r20,16(sp)
   1358c:	dcc00317 	ldw	r19,12(sp)
   13590:	dc800217 	ldw	r18,8(sp)
   13594:	dc400117 	ldw	r17,4(sp)
   13598:	dc000017 	ldw	r16,0(sp)
   1359c:	dec00904 	addi	sp,sp,36
   135a0:	f800283a 	ret
   135a4:	002f883a 	mov	r23,zero
   135a8:	003ff206 	br	13574 <__alt_data_end+0xf8013574>

000135ac <_setlocale_r>:
   135ac:	30001b26 	beq	r6,zero,1361c <_setlocale_r+0x70>
   135b0:	014000b4 	movhi	r5,2
   135b4:	defffe04 	addi	sp,sp,-8
   135b8:	29729d04 	addi	r5,r5,-13708
   135bc:	3009883a 	mov	r4,r6
   135c0:	dc000015 	stw	r16,0(sp)
   135c4:	dfc00115 	stw	ra,4(sp)
   135c8:	3021883a 	mov	r16,r6
   135cc:	00154c00 	call	154c0 <strcmp>
   135d0:	1000061e 	bne	r2,zero,135ec <_setlocale_r+0x40>
   135d4:	008000b4 	movhi	r2,2
   135d8:	10b27e04 	addi	r2,r2,-13832
   135dc:	dfc00117 	ldw	ra,4(sp)
   135e0:	dc000017 	ldw	r16,0(sp)
   135e4:	dec00204 	addi	sp,sp,8
   135e8:	f800283a 	ret
   135ec:	014000b4 	movhi	r5,2
   135f0:	29727e04 	addi	r5,r5,-13832
   135f4:	8009883a 	mov	r4,r16
   135f8:	00154c00 	call	154c0 <strcmp>
   135fc:	103ff526 	beq	r2,zero,135d4 <__alt_data_end+0xf80135d4>
   13600:	014000b4 	movhi	r5,2
   13604:	29728804 	addi	r5,r5,-13792
   13608:	8009883a 	mov	r4,r16
   1360c:	00154c00 	call	154c0 <strcmp>
   13610:	103ff026 	beq	r2,zero,135d4 <__alt_data_end+0xf80135d4>
   13614:	0005883a 	mov	r2,zero
   13618:	003ff006 	br	135dc <__alt_data_end+0xf80135dc>
   1361c:	008000b4 	movhi	r2,2
   13620:	10b27e04 	addi	r2,r2,-13832
   13624:	f800283a 	ret

00013628 <__locale_charset>:
   13628:	008000b4 	movhi	r2,2
   1362c:	10b52304 	addi	r2,r2,-11124
   13630:	f800283a 	ret

00013634 <__locale_mb_cur_max>:
   13634:	008000b4 	movhi	r2,2
   13638:	10b9cb04 	addi	r2,r2,-6356
   1363c:	10800017 	ldw	r2,0(r2)
   13640:	f800283a 	ret

00013644 <__locale_msgcharset>:
   13644:	008000b4 	movhi	r2,2
   13648:	10b51b04 	addi	r2,r2,-11156
   1364c:	f800283a 	ret

00013650 <__locale_cjk_lang>:
   13650:	0005883a 	mov	r2,zero
   13654:	f800283a 	ret

00013658 <_localeconv_r>:
   13658:	008000b4 	movhi	r2,2
   1365c:	10b52b04 	addi	r2,r2,-11092
   13660:	f800283a 	ret

00013664 <setlocale>:
   13664:	008000b4 	movhi	r2,2
   13668:	10b9c804 	addi	r2,r2,-6368
   1366c:	280d883a 	mov	r6,r5
   13670:	200b883a 	mov	r5,r4
   13674:	11000017 	ldw	r4,0(r2)
   13678:	00135ac1 	jmpi	135ac <_setlocale_r>

0001367c <localeconv>:
   1367c:	008000b4 	movhi	r2,2
   13680:	10b52b04 	addi	r2,r2,-11092
   13684:	f800283a 	ret

00013688 <__smakebuf_r>:
   13688:	2880030b 	ldhu	r2,12(r5)
   1368c:	10c0008c 	andi	r3,r2,2
   13690:	1800411e 	bne	r3,zero,13798 <__smakebuf_r+0x110>
   13694:	deffec04 	addi	sp,sp,-80
   13698:	dc000f15 	stw	r16,60(sp)
   1369c:	2821883a 	mov	r16,r5
   136a0:	2940038f 	ldh	r5,14(r5)
   136a4:	dc401015 	stw	r17,64(sp)
   136a8:	dfc01315 	stw	ra,76(sp)
   136ac:	dcc01215 	stw	r19,72(sp)
   136b0:	dc801115 	stw	r18,68(sp)
   136b4:	2023883a 	mov	r17,r4
   136b8:	28001c16 	blt	r5,zero,1372c <__smakebuf_r+0xa4>
   136bc:	d80d883a 	mov	r6,sp
   136c0:	00171300 	call	17130 <_fstat_r>
   136c4:	10001816 	blt	r2,zero,13728 <__smakebuf_r+0xa0>
   136c8:	d8800117 	ldw	r2,4(sp)
   136cc:	00e00014 	movui	r3,32768
   136d0:	10bc000c 	andi	r2,r2,61440
   136d4:	14c80020 	cmpeqi	r19,r2,8192
   136d8:	10c03726 	beq	r2,r3,137b8 <__smakebuf_r+0x130>
   136dc:	80c0030b 	ldhu	r3,12(r16)
   136e0:	18c20014 	ori	r3,r3,2048
   136e4:	80c0030d 	sth	r3,12(r16)
   136e8:	00c80004 	movi	r3,8192
   136ec:	10c0521e 	bne	r2,r3,13838 <__smakebuf_r+0x1b0>
   136f0:	8140038f 	ldh	r5,14(r16)
   136f4:	8809883a 	mov	r4,r17
   136f8:	001718c0 	call	1718c <_isatty_r>
   136fc:	10004c26 	beq	r2,zero,13830 <__smakebuf_r+0x1a8>
   13700:	8080030b 	ldhu	r2,12(r16)
   13704:	80c010c4 	addi	r3,r16,67
   13708:	80c00015 	stw	r3,0(r16)
   1370c:	10800054 	ori	r2,r2,1
   13710:	8080030d 	sth	r2,12(r16)
   13714:	00800044 	movi	r2,1
   13718:	80c00415 	stw	r3,16(r16)
   1371c:	80800515 	stw	r2,20(r16)
   13720:	04810004 	movi	r18,1024
   13724:	00000706 	br	13744 <__smakebuf_r+0xbc>
   13728:	8080030b 	ldhu	r2,12(r16)
   1372c:	10c0200c 	andi	r3,r2,128
   13730:	18001f1e 	bne	r3,zero,137b0 <__smakebuf_r+0x128>
   13734:	04810004 	movi	r18,1024
   13738:	10820014 	ori	r2,r2,2048
   1373c:	8080030d 	sth	r2,12(r16)
   13740:	0027883a 	mov	r19,zero
   13744:	900b883a 	mov	r5,r18
   13748:	8809883a 	mov	r4,r17
   1374c:	000dc5c0 	call	dc5c <_malloc_r>
   13750:	10002c26 	beq	r2,zero,13804 <__smakebuf_r+0x17c>
   13754:	80c0030b 	ldhu	r3,12(r16)
   13758:	01000074 	movhi	r4,1
   1375c:	2109e004 	addi	r4,r4,10112
   13760:	89000f15 	stw	r4,60(r17)
   13764:	18c02014 	ori	r3,r3,128
   13768:	80c0030d 	sth	r3,12(r16)
   1376c:	80800015 	stw	r2,0(r16)
   13770:	80800415 	stw	r2,16(r16)
   13774:	84800515 	stw	r18,20(r16)
   13778:	98001a1e 	bne	r19,zero,137e4 <__smakebuf_r+0x15c>
   1377c:	dfc01317 	ldw	ra,76(sp)
   13780:	dcc01217 	ldw	r19,72(sp)
   13784:	dc801117 	ldw	r18,68(sp)
   13788:	dc401017 	ldw	r17,64(sp)
   1378c:	dc000f17 	ldw	r16,60(sp)
   13790:	dec01404 	addi	sp,sp,80
   13794:	f800283a 	ret
   13798:	288010c4 	addi	r2,r5,67
   1379c:	28800015 	stw	r2,0(r5)
   137a0:	28800415 	stw	r2,16(r5)
   137a4:	00800044 	movi	r2,1
   137a8:	28800515 	stw	r2,20(r5)
   137ac:	f800283a 	ret
   137b0:	04801004 	movi	r18,64
   137b4:	003fe006 	br	13738 <__alt_data_end+0xf8013738>
   137b8:	81000a17 	ldw	r4,40(r16)
   137bc:	00c00074 	movhi	r3,1
   137c0:	18d51704 	addi	r3,r3,21596
   137c4:	20ffc51e 	bne	r4,r3,136dc <__alt_data_end+0xf80136dc>
   137c8:	8080030b 	ldhu	r2,12(r16)
   137cc:	04810004 	movi	r18,1024
   137d0:	84801315 	stw	r18,76(r16)
   137d4:	1484b03a 	or	r2,r2,r18
   137d8:	8080030d 	sth	r2,12(r16)
   137dc:	0027883a 	mov	r19,zero
   137e0:	003fd806 	br	13744 <__alt_data_end+0xf8013744>
   137e4:	8140038f 	ldh	r5,14(r16)
   137e8:	8809883a 	mov	r4,r17
   137ec:	001718c0 	call	1718c <_isatty_r>
   137f0:	103fe226 	beq	r2,zero,1377c <__alt_data_end+0xf801377c>
   137f4:	8080030b 	ldhu	r2,12(r16)
   137f8:	10800054 	ori	r2,r2,1
   137fc:	8080030d 	sth	r2,12(r16)
   13800:	003fde06 	br	1377c <__alt_data_end+0xf801377c>
   13804:	8080030b 	ldhu	r2,12(r16)
   13808:	10c0800c 	andi	r3,r2,512
   1380c:	183fdb1e 	bne	r3,zero,1377c <__alt_data_end+0xf801377c>
   13810:	10800094 	ori	r2,r2,2
   13814:	80c010c4 	addi	r3,r16,67
   13818:	8080030d 	sth	r2,12(r16)
   1381c:	00800044 	movi	r2,1
   13820:	80c00015 	stw	r3,0(r16)
   13824:	80c00415 	stw	r3,16(r16)
   13828:	80800515 	stw	r2,20(r16)
   1382c:	003fd306 	br	1377c <__alt_data_end+0xf801377c>
   13830:	04810004 	movi	r18,1024
   13834:	003fc306 	br	13744 <__alt_data_end+0xf8013744>
   13838:	0027883a 	mov	r19,zero
   1383c:	04810004 	movi	r18,1024
   13840:	003fc006 	br	13744 <__alt_data_end+0xf8013744>

00013844 <memchr>:
   13844:	208000cc 	andi	r2,r4,3
   13848:	280f883a 	mov	r7,r5
   1384c:	10003426 	beq	r2,zero,13920 <memchr+0xdc>
   13850:	30bfffc4 	addi	r2,r6,-1
   13854:	30001a26 	beq	r6,zero,138c0 <memchr+0x7c>
   13858:	20c00003 	ldbu	r3,0(r4)
   1385c:	29803fcc 	andi	r6,r5,255
   13860:	30c0051e 	bne	r6,r3,13878 <memchr+0x34>
   13864:	00001806 	br	138c8 <memchr+0x84>
   13868:	10001526 	beq	r2,zero,138c0 <memchr+0x7c>
   1386c:	20c00003 	ldbu	r3,0(r4)
   13870:	10bfffc4 	addi	r2,r2,-1
   13874:	30c01426 	beq	r6,r3,138c8 <memchr+0x84>
   13878:	21000044 	addi	r4,r4,1
   1387c:	20c000cc 	andi	r3,r4,3
   13880:	183ff91e 	bne	r3,zero,13868 <__alt_data_end+0xf8013868>
   13884:	020000c4 	movi	r8,3
   13888:	40801136 	bltu	r8,r2,138d0 <memchr+0x8c>
   1388c:	10000c26 	beq	r2,zero,138c0 <memchr+0x7c>
   13890:	20c00003 	ldbu	r3,0(r4)
   13894:	29403fcc 	andi	r5,r5,255
   13898:	28c00b26 	beq	r5,r3,138c8 <memchr+0x84>
   1389c:	20c00044 	addi	r3,r4,1
   138a0:	39803fcc 	andi	r6,r7,255
   138a4:	2089883a 	add	r4,r4,r2
   138a8:	00000306 	br	138b8 <memchr+0x74>
   138ac:	18c00044 	addi	r3,r3,1
   138b0:	197fffc3 	ldbu	r5,-1(r3)
   138b4:	31400526 	beq	r6,r5,138cc <memchr+0x88>
   138b8:	1805883a 	mov	r2,r3
   138bc:	20fffb1e 	bne	r4,r3,138ac <__alt_data_end+0xf80138ac>
   138c0:	0005883a 	mov	r2,zero
   138c4:	f800283a 	ret
   138c8:	2005883a 	mov	r2,r4
   138cc:	f800283a 	ret
   138d0:	28c03fcc 	andi	r3,r5,255
   138d4:	1812923a 	slli	r9,r3,8
   138d8:	02ffbff4 	movhi	r11,65279
   138dc:	02a02074 	movhi	r10,32897
   138e0:	48d2b03a 	or	r9,r9,r3
   138e4:	4806943a 	slli	r3,r9,16
   138e8:	5affbfc4 	addi	r11,r11,-257
   138ec:	52a02004 	addi	r10,r10,-32640
   138f0:	48d2b03a 	or	r9,r9,r3
   138f4:	20c00017 	ldw	r3,0(r4)
   138f8:	48c6f03a 	xor	r3,r9,r3
   138fc:	1acd883a 	add	r6,r3,r11
   13900:	00c6303a 	nor	r3,zero,r3
   13904:	30c6703a 	and	r3,r6,r3
   13908:	1a86703a 	and	r3,r3,r10
   1390c:	183fe01e 	bne	r3,zero,13890 <__alt_data_end+0xf8013890>
   13910:	10bfff04 	addi	r2,r2,-4
   13914:	21000104 	addi	r4,r4,4
   13918:	40bff636 	bltu	r8,r2,138f4 <__alt_data_end+0xf80138f4>
   1391c:	003fdb06 	br	1388c <__alt_data_end+0xf801388c>
   13920:	3005883a 	mov	r2,r6
   13924:	003fd706 	br	13884 <__alt_data_end+0xf8013884>

00013928 <memcpy>:
   13928:	defffd04 	addi	sp,sp,-12
   1392c:	dfc00215 	stw	ra,8(sp)
   13930:	dc400115 	stw	r17,4(sp)
   13934:	dc000015 	stw	r16,0(sp)
   13938:	00c003c4 	movi	r3,15
   1393c:	2005883a 	mov	r2,r4
   13940:	1980452e 	bgeu	r3,r6,13a58 <memcpy+0x130>
   13944:	2906b03a 	or	r3,r5,r4
   13948:	18c000cc 	andi	r3,r3,3
   1394c:	1800441e 	bne	r3,zero,13a60 <memcpy+0x138>
   13950:	347ffc04 	addi	r17,r6,-16
   13954:	8822d13a 	srli	r17,r17,4
   13958:	28c00104 	addi	r3,r5,4
   1395c:	23400104 	addi	r13,r4,4
   13960:	8820913a 	slli	r16,r17,4
   13964:	2b000204 	addi	r12,r5,8
   13968:	22c00204 	addi	r11,r4,8
   1396c:	84000504 	addi	r16,r16,20
   13970:	2a800304 	addi	r10,r5,12
   13974:	22400304 	addi	r9,r4,12
   13978:	2c21883a 	add	r16,r5,r16
   1397c:	2811883a 	mov	r8,r5
   13980:	200f883a 	mov	r7,r4
   13984:	41000017 	ldw	r4,0(r8)
   13988:	1fc00017 	ldw	ra,0(r3)
   1398c:	63c00017 	ldw	r15,0(r12)
   13990:	39000015 	stw	r4,0(r7)
   13994:	53800017 	ldw	r14,0(r10)
   13998:	6fc00015 	stw	ra,0(r13)
   1399c:	5bc00015 	stw	r15,0(r11)
   139a0:	4b800015 	stw	r14,0(r9)
   139a4:	18c00404 	addi	r3,r3,16
   139a8:	39c00404 	addi	r7,r7,16
   139ac:	42000404 	addi	r8,r8,16
   139b0:	6b400404 	addi	r13,r13,16
   139b4:	63000404 	addi	r12,r12,16
   139b8:	5ac00404 	addi	r11,r11,16
   139bc:	52800404 	addi	r10,r10,16
   139c0:	4a400404 	addi	r9,r9,16
   139c4:	1c3fef1e 	bne	r3,r16,13984 <__alt_data_end+0xf8013984>
   139c8:	89c00044 	addi	r7,r17,1
   139cc:	380e913a 	slli	r7,r7,4
   139d0:	310003cc 	andi	r4,r6,15
   139d4:	02c000c4 	movi	r11,3
   139d8:	11c7883a 	add	r3,r2,r7
   139dc:	29cb883a 	add	r5,r5,r7
   139e0:	5900212e 	bgeu	r11,r4,13a68 <memcpy+0x140>
   139e4:	1813883a 	mov	r9,r3
   139e8:	2811883a 	mov	r8,r5
   139ec:	200f883a 	mov	r7,r4
   139f0:	42800017 	ldw	r10,0(r8)
   139f4:	4a400104 	addi	r9,r9,4
   139f8:	39ffff04 	addi	r7,r7,-4
   139fc:	4abfff15 	stw	r10,-4(r9)
   13a00:	42000104 	addi	r8,r8,4
   13a04:	59fffa36 	bltu	r11,r7,139f0 <__alt_data_end+0xf80139f0>
   13a08:	213fff04 	addi	r4,r4,-4
   13a0c:	2008d0ba 	srli	r4,r4,2
   13a10:	318000cc 	andi	r6,r6,3
   13a14:	21000044 	addi	r4,r4,1
   13a18:	2109883a 	add	r4,r4,r4
   13a1c:	2109883a 	add	r4,r4,r4
   13a20:	1907883a 	add	r3,r3,r4
   13a24:	290b883a 	add	r5,r5,r4
   13a28:	30000626 	beq	r6,zero,13a44 <memcpy+0x11c>
   13a2c:	198d883a 	add	r6,r3,r6
   13a30:	29c00003 	ldbu	r7,0(r5)
   13a34:	18c00044 	addi	r3,r3,1
   13a38:	29400044 	addi	r5,r5,1
   13a3c:	19ffffc5 	stb	r7,-1(r3)
   13a40:	19bffb1e 	bne	r3,r6,13a30 <__alt_data_end+0xf8013a30>
   13a44:	dfc00217 	ldw	ra,8(sp)
   13a48:	dc400117 	ldw	r17,4(sp)
   13a4c:	dc000017 	ldw	r16,0(sp)
   13a50:	dec00304 	addi	sp,sp,12
   13a54:	f800283a 	ret
   13a58:	2007883a 	mov	r3,r4
   13a5c:	003ff206 	br	13a28 <__alt_data_end+0xf8013a28>
   13a60:	2007883a 	mov	r3,r4
   13a64:	003ff106 	br	13a2c <__alt_data_end+0xf8013a2c>
   13a68:	200d883a 	mov	r6,r4
   13a6c:	003fee06 	br	13a28 <__alt_data_end+0xf8013a28>

00013a70 <memmove>:
   13a70:	2005883a 	mov	r2,r4
   13a74:	29000b2e 	bgeu	r5,r4,13aa4 <memmove+0x34>
   13a78:	298f883a 	add	r7,r5,r6
   13a7c:	21c0092e 	bgeu	r4,r7,13aa4 <memmove+0x34>
   13a80:	2187883a 	add	r3,r4,r6
   13a84:	198bc83a 	sub	r5,r3,r6
   13a88:	30004826 	beq	r6,zero,13bac <memmove+0x13c>
   13a8c:	39ffffc4 	addi	r7,r7,-1
   13a90:	39000003 	ldbu	r4,0(r7)
   13a94:	18ffffc4 	addi	r3,r3,-1
   13a98:	19000005 	stb	r4,0(r3)
   13a9c:	28fffb1e 	bne	r5,r3,13a8c <__alt_data_end+0xf8013a8c>
   13aa0:	f800283a 	ret
   13aa4:	00c003c4 	movi	r3,15
   13aa8:	1980412e 	bgeu	r3,r6,13bb0 <memmove+0x140>
   13aac:	2886b03a 	or	r3,r5,r2
   13ab0:	18c000cc 	andi	r3,r3,3
   13ab4:	1800401e 	bne	r3,zero,13bb8 <memmove+0x148>
   13ab8:	33fffc04 	addi	r15,r6,-16
   13abc:	781ed13a 	srli	r15,r15,4
   13ac0:	28c00104 	addi	r3,r5,4
   13ac4:	13400104 	addi	r13,r2,4
   13ac8:	781c913a 	slli	r14,r15,4
   13acc:	2b000204 	addi	r12,r5,8
   13ad0:	12c00204 	addi	r11,r2,8
   13ad4:	73800504 	addi	r14,r14,20
   13ad8:	2a800304 	addi	r10,r5,12
   13adc:	12400304 	addi	r9,r2,12
   13ae0:	2b9d883a 	add	r14,r5,r14
   13ae4:	2811883a 	mov	r8,r5
   13ae8:	100f883a 	mov	r7,r2
   13aec:	41000017 	ldw	r4,0(r8)
   13af0:	39c00404 	addi	r7,r7,16
   13af4:	18c00404 	addi	r3,r3,16
   13af8:	393ffc15 	stw	r4,-16(r7)
   13afc:	193ffc17 	ldw	r4,-16(r3)
   13b00:	6b400404 	addi	r13,r13,16
   13b04:	5ac00404 	addi	r11,r11,16
   13b08:	693ffc15 	stw	r4,-16(r13)
   13b0c:	61000017 	ldw	r4,0(r12)
   13b10:	4a400404 	addi	r9,r9,16
   13b14:	42000404 	addi	r8,r8,16
   13b18:	593ffc15 	stw	r4,-16(r11)
   13b1c:	51000017 	ldw	r4,0(r10)
   13b20:	63000404 	addi	r12,r12,16
   13b24:	52800404 	addi	r10,r10,16
   13b28:	493ffc15 	stw	r4,-16(r9)
   13b2c:	1bbfef1e 	bne	r3,r14,13aec <__alt_data_end+0xf8013aec>
   13b30:	79000044 	addi	r4,r15,1
   13b34:	2008913a 	slli	r4,r4,4
   13b38:	328003cc 	andi	r10,r6,15
   13b3c:	02c000c4 	movi	r11,3
   13b40:	1107883a 	add	r3,r2,r4
   13b44:	290b883a 	add	r5,r5,r4
   13b48:	5a801e2e 	bgeu	r11,r10,13bc4 <memmove+0x154>
   13b4c:	1813883a 	mov	r9,r3
   13b50:	2811883a 	mov	r8,r5
   13b54:	500f883a 	mov	r7,r10
   13b58:	41000017 	ldw	r4,0(r8)
   13b5c:	4a400104 	addi	r9,r9,4
   13b60:	39ffff04 	addi	r7,r7,-4
   13b64:	493fff15 	stw	r4,-4(r9)
   13b68:	42000104 	addi	r8,r8,4
   13b6c:	59fffa36 	bltu	r11,r7,13b58 <__alt_data_end+0xf8013b58>
   13b70:	513fff04 	addi	r4,r10,-4
   13b74:	2008d0ba 	srli	r4,r4,2
   13b78:	318000cc 	andi	r6,r6,3
   13b7c:	21000044 	addi	r4,r4,1
   13b80:	2109883a 	add	r4,r4,r4
   13b84:	2109883a 	add	r4,r4,r4
   13b88:	1907883a 	add	r3,r3,r4
   13b8c:	290b883a 	add	r5,r5,r4
   13b90:	30000b26 	beq	r6,zero,13bc0 <memmove+0x150>
   13b94:	198d883a 	add	r6,r3,r6
   13b98:	29c00003 	ldbu	r7,0(r5)
   13b9c:	18c00044 	addi	r3,r3,1
   13ba0:	29400044 	addi	r5,r5,1
   13ba4:	19ffffc5 	stb	r7,-1(r3)
   13ba8:	19bffb1e 	bne	r3,r6,13b98 <__alt_data_end+0xf8013b98>
   13bac:	f800283a 	ret
   13bb0:	1007883a 	mov	r3,r2
   13bb4:	003ff606 	br	13b90 <__alt_data_end+0xf8013b90>
   13bb8:	1007883a 	mov	r3,r2
   13bbc:	003ff506 	br	13b94 <__alt_data_end+0xf8013b94>
   13bc0:	f800283a 	ret
   13bc4:	500d883a 	mov	r6,r10
   13bc8:	003ff106 	br	13b90 <__alt_data_end+0xf8013b90>

00013bcc <memset>:
   13bcc:	20c000cc 	andi	r3,r4,3
   13bd0:	2005883a 	mov	r2,r4
   13bd4:	18004426 	beq	r3,zero,13ce8 <memset+0x11c>
   13bd8:	31ffffc4 	addi	r7,r6,-1
   13bdc:	30004026 	beq	r6,zero,13ce0 <memset+0x114>
   13be0:	2813883a 	mov	r9,r5
   13be4:	200d883a 	mov	r6,r4
   13be8:	2007883a 	mov	r3,r4
   13bec:	00000406 	br	13c00 <memset+0x34>
   13bf0:	3a3fffc4 	addi	r8,r7,-1
   13bf4:	31800044 	addi	r6,r6,1
   13bf8:	38003926 	beq	r7,zero,13ce0 <memset+0x114>
   13bfc:	400f883a 	mov	r7,r8
   13c00:	18c00044 	addi	r3,r3,1
   13c04:	32400005 	stb	r9,0(r6)
   13c08:	1a0000cc 	andi	r8,r3,3
   13c0c:	403ff81e 	bne	r8,zero,13bf0 <__alt_data_end+0xf8013bf0>
   13c10:	010000c4 	movi	r4,3
   13c14:	21c02d2e 	bgeu	r4,r7,13ccc <memset+0x100>
   13c18:	29003fcc 	andi	r4,r5,255
   13c1c:	200c923a 	slli	r6,r4,8
   13c20:	3108b03a 	or	r4,r6,r4
   13c24:	200c943a 	slli	r6,r4,16
   13c28:	218cb03a 	or	r6,r4,r6
   13c2c:	010003c4 	movi	r4,15
   13c30:	21c0182e 	bgeu	r4,r7,13c94 <memset+0xc8>
   13c34:	3b3ffc04 	addi	r12,r7,-16
   13c38:	6018d13a 	srli	r12,r12,4
   13c3c:	1a000104 	addi	r8,r3,4
   13c40:	1ac00204 	addi	r11,r3,8
   13c44:	6008913a 	slli	r4,r12,4
   13c48:	1a800304 	addi	r10,r3,12
   13c4c:	1813883a 	mov	r9,r3
   13c50:	21000504 	addi	r4,r4,20
   13c54:	1909883a 	add	r4,r3,r4
   13c58:	49800015 	stw	r6,0(r9)
   13c5c:	41800015 	stw	r6,0(r8)
   13c60:	59800015 	stw	r6,0(r11)
   13c64:	51800015 	stw	r6,0(r10)
   13c68:	42000404 	addi	r8,r8,16
   13c6c:	4a400404 	addi	r9,r9,16
   13c70:	5ac00404 	addi	r11,r11,16
   13c74:	52800404 	addi	r10,r10,16
   13c78:	413ff71e 	bne	r8,r4,13c58 <__alt_data_end+0xf8013c58>
   13c7c:	63000044 	addi	r12,r12,1
   13c80:	6018913a 	slli	r12,r12,4
   13c84:	39c003cc 	andi	r7,r7,15
   13c88:	010000c4 	movi	r4,3
   13c8c:	1b07883a 	add	r3,r3,r12
   13c90:	21c00e2e 	bgeu	r4,r7,13ccc <memset+0x100>
   13c94:	1813883a 	mov	r9,r3
   13c98:	3811883a 	mov	r8,r7
   13c9c:	010000c4 	movi	r4,3
   13ca0:	49800015 	stw	r6,0(r9)
   13ca4:	423fff04 	addi	r8,r8,-4
   13ca8:	4a400104 	addi	r9,r9,4
   13cac:	223ffc36 	bltu	r4,r8,13ca0 <__alt_data_end+0xf8013ca0>
   13cb0:	393fff04 	addi	r4,r7,-4
   13cb4:	2008d0ba 	srli	r4,r4,2
   13cb8:	39c000cc 	andi	r7,r7,3
   13cbc:	21000044 	addi	r4,r4,1
   13cc0:	2109883a 	add	r4,r4,r4
   13cc4:	2109883a 	add	r4,r4,r4
   13cc8:	1907883a 	add	r3,r3,r4
   13ccc:	38000526 	beq	r7,zero,13ce4 <memset+0x118>
   13cd0:	19cf883a 	add	r7,r3,r7
   13cd4:	19400005 	stb	r5,0(r3)
   13cd8:	18c00044 	addi	r3,r3,1
   13cdc:	38fffd1e 	bne	r7,r3,13cd4 <__alt_data_end+0xf8013cd4>
   13ce0:	f800283a 	ret
   13ce4:	f800283a 	ret
   13ce8:	2007883a 	mov	r3,r4
   13cec:	300f883a 	mov	r7,r6
   13cf0:	003fc706 	br	13c10 <__alt_data_end+0xf8013c10>

00013cf4 <_Balloc>:
   13cf4:	20801317 	ldw	r2,76(r4)
   13cf8:	defffc04 	addi	sp,sp,-16
   13cfc:	dc400115 	stw	r17,4(sp)
   13d00:	dc000015 	stw	r16,0(sp)
   13d04:	dfc00315 	stw	ra,12(sp)
   13d08:	dc800215 	stw	r18,8(sp)
   13d0c:	2023883a 	mov	r17,r4
   13d10:	2821883a 	mov	r16,r5
   13d14:	10000f26 	beq	r2,zero,13d54 <_Balloc+0x60>
   13d18:	8407883a 	add	r3,r16,r16
   13d1c:	18c7883a 	add	r3,r3,r3
   13d20:	10c7883a 	add	r3,r2,r3
   13d24:	18800017 	ldw	r2,0(r3)
   13d28:	10001126 	beq	r2,zero,13d70 <_Balloc+0x7c>
   13d2c:	11000017 	ldw	r4,0(r2)
   13d30:	19000015 	stw	r4,0(r3)
   13d34:	10000415 	stw	zero,16(r2)
   13d38:	10000315 	stw	zero,12(r2)
   13d3c:	dfc00317 	ldw	ra,12(sp)
   13d40:	dc800217 	ldw	r18,8(sp)
   13d44:	dc400117 	ldw	r17,4(sp)
   13d48:	dc000017 	ldw	r16,0(sp)
   13d4c:	dec00404 	addi	sp,sp,16
   13d50:	f800283a 	ret
   13d54:	01800844 	movi	r6,33
   13d58:	01400104 	movi	r5,4
   13d5c:	0016d480 	call	16d48 <_calloc_r>
   13d60:	88801315 	stw	r2,76(r17)
   13d64:	103fec1e 	bne	r2,zero,13d18 <__alt_data_end+0xf8013d18>
   13d68:	0005883a 	mov	r2,zero
   13d6c:	003ff306 	br	13d3c <__alt_data_end+0xf8013d3c>
   13d70:	01400044 	movi	r5,1
   13d74:	2c24983a 	sll	r18,r5,r16
   13d78:	8809883a 	mov	r4,r17
   13d7c:	91800144 	addi	r6,r18,5
   13d80:	318d883a 	add	r6,r6,r6
   13d84:	318d883a 	add	r6,r6,r6
   13d88:	0016d480 	call	16d48 <_calloc_r>
   13d8c:	103ff626 	beq	r2,zero,13d68 <__alt_data_end+0xf8013d68>
   13d90:	14000115 	stw	r16,4(r2)
   13d94:	14800215 	stw	r18,8(r2)
   13d98:	003fe606 	br	13d34 <__alt_data_end+0xf8013d34>

00013d9c <_Bfree>:
   13d9c:	28000826 	beq	r5,zero,13dc0 <_Bfree+0x24>
   13da0:	28c00117 	ldw	r3,4(r5)
   13da4:	20801317 	ldw	r2,76(r4)
   13da8:	18c7883a 	add	r3,r3,r3
   13dac:	18c7883a 	add	r3,r3,r3
   13db0:	10c5883a 	add	r2,r2,r3
   13db4:	10c00017 	ldw	r3,0(r2)
   13db8:	28c00015 	stw	r3,0(r5)
   13dbc:	11400015 	stw	r5,0(r2)
   13dc0:	f800283a 	ret

00013dc4 <__multadd>:
   13dc4:	defff704 	addi	sp,sp,-36
   13dc8:	dc800215 	stw	r18,8(sp)
   13dcc:	2c800417 	ldw	r18,16(r5)
   13dd0:	dd800615 	stw	r22,24(sp)
   13dd4:	dd400515 	stw	r21,20(sp)
   13dd8:	dd000415 	stw	r20,16(sp)
   13ddc:	dcc00315 	stw	r19,12(sp)
   13de0:	dc400115 	stw	r17,4(sp)
   13de4:	dc000015 	stw	r16,0(sp)
   13de8:	dfc00815 	stw	ra,32(sp)
   13dec:	ddc00715 	stw	r23,28(sp)
   13df0:	2827883a 	mov	r19,r5
   13df4:	2029883a 	mov	r20,r4
   13df8:	3023883a 	mov	r17,r6
   13dfc:	3821883a 	mov	r16,r7
   13e00:	2d400504 	addi	r21,r5,20
   13e04:	002d883a 	mov	r22,zero
   13e08:	adc00017 	ldw	r23,0(r21)
   13e0c:	880b883a 	mov	r5,r17
   13e10:	ad400104 	addi	r21,r21,4
   13e14:	b93fffcc 	andi	r4,r23,65535
   13e18:	000c68c0 	call	c68c <__mulsi3>
   13e1c:	b808d43a 	srli	r4,r23,16
   13e20:	880b883a 	mov	r5,r17
   13e24:	1421883a 	add	r16,r2,r16
   13e28:	000c68c0 	call	c68c <__mulsi3>
   13e2c:	800ed43a 	srli	r7,r16,16
   13e30:	80ffffcc 	andi	r3,r16,65535
   13e34:	b5800044 	addi	r22,r22,1
   13e38:	11c5883a 	add	r2,r2,r7
   13e3c:	100e943a 	slli	r7,r2,16
   13e40:	1020d43a 	srli	r16,r2,16
   13e44:	38c7883a 	add	r3,r7,r3
   13e48:	a8ffff15 	stw	r3,-4(r21)
   13e4c:	b4bfee16 	blt	r22,r18,13e08 <__alt_data_end+0xf8013e08>
   13e50:	80000926 	beq	r16,zero,13e78 <__multadd+0xb4>
   13e54:	98800217 	ldw	r2,8(r19)
   13e58:	9080130e 	bge	r18,r2,13ea8 <__multadd+0xe4>
   13e5c:	90800144 	addi	r2,r18,5
   13e60:	1085883a 	add	r2,r2,r2
   13e64:	1085883a 	add	r2,r2,r2
   13e68:	9885883a 	add	r2,r19,r2
   13e6c:	14000015 	stw	r16,0(r2)
   13e70:	94800044 	addi	r18,r18,1
   13e74:	9c800415 	stw	r18,16(r19)
   13e78:	9805883a 	mov	r2,r19
   13e7c:	dfc00817 	ldw	ra,32(sp)
   13e80:	ddc00717 	ldw	r23,28(sp)
   13e84:	dd800617 	ldw	r22,24(sp)
   13e88:	dd400517 	ldw	r21,20(sp)
   13e8c:	dd000417 	ldw	r20,16(sp)
   13e90:	dcc00317 	ldw	r19,12(sp)
   13e94:	dc800217 	ldw	r18,8(sp)
   13e98:	dc400117 	ldw	r17,4(sp)
   13e9c:	dc000017 	ldw	r16,0(sp)
   13ea0:	dec00904 	addi	sp,sp,36
   13ea4:	f800283a 	ret
   13ea8:	99400117 	ldw	r5,4(r19)
   13eac:	a009883a 	mov	r4,r20
   13eb0:	29400044 	addi	r5,r5,1
   13eb4:	0013cf40 	call	13cf4 <_Balloc>
   13eb8:	99800417 	ldw	r6,16(r19)
   13ebc:	99400304 	addi	r5,r19,12
   13ec0:	11000304 	addi	r4,r2,12
   13ec4:	31800084 	addi	r6,r6,2
   13ec8:	318d883a 	add	r6,r6,r6
   13ecc:	318d883a 	add	r6,r6,r6
   13ed0:	1023883a 	mov	r17,r2
   13ed4:	00139280 	call	13928 <memcpy>
   13ed8:	98000a26 	beq	r19,zero,13f04 <__multadd+0x140>
   13edc:	98c00117 	ldw	r3,4(r19)
   13ee0:	a0801317 	ldw	r2,76(r20)
   13ee4:	18c7883a 	add	r3,r3,r3
   13ee8:	18c7883a 	add	r3,r3,r3
   13eec:	10c5883a 	add	r2,r2,r3
   13ef0:	10c00017 	ldw	r3,0(r2)
   13ef4:	98c00015 	stw	r3,0(r19)
   13ef8:	14c00015 	stw	r19,0(r2)
   13efc:	8827883a 	mov	r19,r17
   13f00:	003fd606 	br	13e5c <__alt_data_end+0xf8013e5c>
   13f04:	8827883a 	mov	r19,r17
   13f08:	003fd406 	br	13e5c <__alt_data_end+0xf8013e5c>

00013f0c <__s2b>:
   13f0c:	defff904 	addi	sp,sp,-28
   13f10:	dc400115 	stw	r17,4(sp)
   13f14:	dc000015 	stw	r16,0(sp)
   13f18:	2023883a 	mov	r17,r4
   13f1c:	2821883a 	mov	r16,r5
   13f20:	39000204 	addi	r4,r7,8
   13f24:	01400244 	movi	r5,9
   13f28:	dcc00315 	stw	r19,12(sp)
   13f2c:	dc800215 	stw	r18,8(sp)
   13f30:	dfc00615 	stw	ra,24(sp)
   13f34:	dd400515 	stw	r21,20(sp)
   13f38:	dd000415 	stw	r20,16(sp)
   13f3c:	3825883a 	mov	r18,r7
   13f40:	3027883a 	mov	r19,r6
   13f44:	000c4d80 	call	c4d8 <__divsi3>
   13f48:	00c00044 	movi	r3,1
   13f4c:	000b883a 	mov	r5,zero
   13f50:	1880030e 	bge	r3,r2,13f60 <__s2b+0x54>
   13f54:	18c7883a 	add	r3,r3,r3
   13f58:	29400044 	addi	r5,r5,1
   13f5c:	18bffd16 	blt	r3,r2,13f54 <__alt_data_end+0xf8013f54>
   13f60:	8809883a 	mov	r4,r17
   13f64:	0013cf40 	call	13cf4 <_Balloc>
   13f68:	d8c00717 	ldw	r3,28(sp)
   13f6c:	10c00515 	stw	r3,20(r2)
   13f70:	00c00044 	movi	r3,1
   13f74:	10c00415 	stw	r3,16(r2)
   13f78:	00c00244 	movi	r3,9
   13f7c:	1cc0210e 	bge	r3,r19,14004 <__s2b+0xf8>
   13f80:	80eb883a 	add	r21,r16,r3
   13f84:	a829883a 	mov	r20,r21
   13f88:	84e1883a 	add	r16,r16,r19
   13f8c:	a1c00007 	ldb	r7,0(r20)
   13f90:	01800284 	movi	r6,10
   13f94:	a5000044 	addi	r20,r20,1
   13f98:	100b883a 	mov	r5,r2
   13f9c:	39fff404 	addi	r7,r7,-48
   13fa0:	8809883a 	mov	r4,r17
   13fa4:	0013dc40 	call	13dc4 <__multadd>
   13fa8:	a43ff81e 	bne	r20,r16,13f8c <__alt_data_end+0xf8013f8c>
   13fac:	ace1883a 	add	r16,r21,r19
   13fb0:	843ffe04 	addi	r16,r16,-8
   13fb4:	9c800a0e 	bge	r19,r18,13fe0 <__s2b+0xd4>
   13fb8:	94e5c83a 	sub	r18,r18,r19
   13fbc:	84a5883a 	add	r18,r16,r18
   13fc0:	81c00007 	ldb	r7,0(r16)
   13fc4:	01800284 	movi	r6,10
   13fc8:	84000044 	addi	r16,r16,1
   13fcc:	100b883a 	mov	r5,r2
   13fd0:	39fff404 	addi	r7,r7,-48
   13fd4:	8809883a 	mov	r4,r17
   13fd8:	0013dc40 	call	13dc4 <__multadd>
   13fdc:	84bff81e 	bne	r16,r18,13fc0 <__alt_data_end+0xf8013fc0>
   13fe0:	dfc00617 	ldw	ra,24(sp)
   13fe4:	dd400517 	ldw	r21,20(sp)
   13fe8:	dd000417 	ldw	r20,16(sp)
   13fec:	dcc00317 	ldw	r19,12(sp)
   13ff0:	dc800217 	ldw	r18,8(sp)
   13ff4:	dc400117 	ldw	r17,4(sp)
   13ff8:	dc000017 	ldw	r16,0(sp)
   13ffc:	dec00704 	addi	sp,sp,28
   14000:	f800283a 	ret
   14004:	84000284 	addi	r16,r16,10
   14008:	1827883a 	mov	r19,r3
   1400c:	003fe906 	br	13fb4 <__alt_data_end+0xf8013fb4>

00014010 <__hi0bits>:
   14010:	20bfffec 	andhi	r2,r4,65535
   14014:	1000141e 	bne	r2,zero,14068 <__hi0bits+0x58>
   14018:	2008943a 	slli	r4,r4,16
   1401c:	00800404 	movi	r2,16
   14020:	20ffc02c 	andhi	r3,r4,65280
   14024:	1800021e 	bne	r3,zero,14030 <__hi0bits+0x20>
   14028:	2008923a 	slli	r4,r4,8
   1402c:	10800204 	addi	r2,r2,8
   14030:	20fc002c 	andhi	r3,r4,61440
   14034:	1800021e 	bne	r3,zero,14040 <__hi0bits+0x30>
   14038:	2008913a 	slli	r4,r4,4
   1403c:	10800104 	addi	r2,r2,4
   14040:	20f0002c 	andhi	r3,r4,49152
   14044:	1800031e 	bne	r3,zero,14054 <__hi0bits+0x44>
   14048:	2109883a 	add	r4,r4,r4
   1404c:	10800084 	addi	r2,r2,2
   14050:	2109883a 	add	r4,r4,r4
   14054:	20000316 	blt	r4,zero,14064 <__hi0bits+0x54>
   14058:	2110002c 	andhi	r4,r4,16384
   1405c:	2000041e 	bne	r4,zero,14070 <__hi0bits+0x60>
   14060:	00800804 	movi	r2,32
   14064:	f800283a 	ret
   14068:	0005883a 	mov	r2,zero
   1406c:	003fec06 	br	14020 <__alt_data_end+0xf8014020>
   14070:	10800044 	addi	r2,r2,1
   14074:	f800283a 	ret

00014078 <__lo0bits>:
   14078:	20c00017 	ldw	r3,0(r4)
   1407c:	188001cc 	andi	r2,r3,7
   14080:	10000826 	beq	r2,zero,140a4 <__lo0bits+0x2c>
   14084:	1880004c 	andi	r2,r3,1
   14088:	1000211e 	bne	r2,zero,14110 <__lo0bits+0x98>
   1408c:	1880008c 	andi	r2,r3,2
   14090:	1000211e 	bne	r2,zero,14118 <__lo0bits+0xa0>
   14094:	1806d0ba 	srli	r3,r3,2
   14098:	00800084 	movi	r2,2
   1409c:	20c00015 	stw	r3,0(r4)
   140a0:	f800283a 	ret
   140a4:	18bfffcc 	andi	r2,r3,65535
   140a8:	10001326 	beq	r2,zero,140f8 <__lo0bits+0x80>
   140ac:	0005883a 	mov	r2,zero
   140b0:	19403fcc 	andi	r5,r3,255
   140b4:	2800021e 	bne	r5,zero,140c0 <__lo0bits+0x48>
   140b8:	1806d23a 	srli	r3,r3,8
   140bc:	10800204 	addi	r2,r2,8
   140c0:	194003cc 	andi	r5,r3,15
   140c4:	2800021e 	bne	r5,zero,140d0 <__lo0bits+0x58>
   140c8:	1806d13a 	srli	r3,r3,4
   140cc:	10800104 	addi	r2,r2,4
   140d0:	194000cc 	andi	r5,r3,3
   140d4:	2800021e 	bne	r5,zero,140e0 <__lo0bits+0x68>
   140d8:	1806d0ba 	srli	r3,r3,2
   140dc:	10800084 	addi	r2,r2,2
   140e0:	1940004c 	andi	r5,r3,1
   140e4:	2800081e 	bne	r5,zero,14108 <__lo0bits+0x90>
   140e8:	1806d07a 	srli	r3,r3,1
   140ec:	1800051e 	bne	r3,zero,14104 <__lo0bits+0x8c>
   140f0:	00800804 	movi	r2,32
   140f4:	f800283a 	ret
   140f8:	1806d43a 	srli	r3,r3,16
   140fc:	00800404 	movi	r2,16
   14100:	003feb06 	br	140b0 <__alt_data_end+0xf80140b0>
   14104:	10800044 	addi	r2,r2,1
   14108:	20c00015 	stw	r3,0(r4)
   1410c:	f800283a 	ret
   14110:	0005883a 	mov	r2,zero
   14114:	f800283a 	ret
   14118:	1806d07a 	srli	r3,r3,1
   1411c:	00800044 	movi	r2,1
   14120:	20c00015 	stw	r3,0(r4)
   14124:	f800283a 	ret

00014128 <__i2b>:
   14128:	defffd04 	addi	sp,sp,-12
   1412c:	dc000015 	stw	r16,0(sp)
   14130:	04000044 	movi	r16,1
   14134:	dc400115 	stw	r17,4(sp)
   14138:	2823883a 	mov	r17,r5
   1413c:	800b883a 	mov	r5,r16
   14140:	dfc00215 	stw	ra,8(sp)
   14144:	0013cf40 	call	13cf4 <_Balloc>
   14148:	14400515 	stw	r17,20(r2)
   1414c:	14000415 	stw	r16,16(r2)
   14150:	dfc00217 	ldw	ra,8(sp)
   14154:	dc400117 	ldw	r17,4(sp)
   14158:	dc000017 	ldw	r16,0(sp)
   1415c:	dec00304 	addi	sp,sp,12
   14160:	f800283a 	ret

00014164 <__multiply>:
   14164:	deffef04 	addi	sp,sp,-68
   14168:	dc400815 	stw	r17,32(sp)
   1416c:	dc000715 	stw	r16,28(sp)
   14170:	34400417 	ldw	r17,16(r6)
   14174:	2c000417 	ldw	r16,16(r5)
   14178:	dd800d15 	stw	r22,52(sp)
   1417c:	dc800915 	stw	r18,36(sp)
   14180:	dfc01015 	stw	ra,64(sp)
   14184:	df000f15 	stw	fp,60(sp)
   14188:	ddc00e15 	stw	r23,56(sp)
   1418c:	dd400c15 	stw	r21,48(sp)
   14190:	dd000b15 	stw	r20,44(sp)
   14194:	dcc00a15 	stw	r19,40(sp)
   14198:	2825883a 	mov	r18,r5
   1419c:	302d883a 	mov	r22,r6
   141a0:	8440050e 	bge	r16,r17,141b8 <__multiply+0x54>
   141a4:	8007883a 	mov	r3,r16
   141a8:	3025883a 	mov	r18,r6
   141ac:	8821883a 	mov	r16,r17
   141b0:	282d883a 	mov	r22,r5
   141b4:	1823883a 	mov	r17,r3
   141b8:	90800217 	ldw	r2,8(r18)
   141bc:	8447883a 	add	r3,r16,r17
   141c0:	d8c00215 	stw	r3,8(sp)
   141c4:	91400117 	ldw	r5,4(r18)
   141c8:	10c0010e 	bge	r2,r3,141d0 <__multiply+0x6c>
   141cc:	29400044 	addi	r5,r5,1
   141d0:	0013cf40 	call	13cf4 <_Balloc>
   141d4:	d8c00217 	ldw	r3,8(sp)
   141d8:	d8800615 	stw	r2,24(sp)
   141dc:	18eb883a 	add	r21,r3,r3
   141e0:	ad6b883a 	add	r21,r21,r21
   141e4:	10c00504 	addi	r3,r2,20
   141e8:	1d6b883a 	add	r21,r3,r21
   141ec:	d8c00115 	stw	r3,4(sp)
   141f0:	dd400315 	stw	r21,12(sp)
   141f4:	1805883a 	mov	r2,r3
   141f8:	1d40042e 	bgeu	r3,r21,1420c <__multiply+0xa8>
   141fc:	d8c00317 	ldw	r3,12(sp)
   14200:	10000015 	stw	zero,0(r2)
   14204:	10800104 	addi	r2,r2,4
   14208:	10fffc36 	bltu	r2,r3,141fc <__alt_data_end+0xf80141fc>
   1420c:	8c63883a 	add	r17,r17,r17
   14210:	b5800504 	addi	r22,r22,20
   14214:	8c63883a 	add	r17,r17,r17
   14218:	94800504 	addi	r18,r18,20
   1421c:	8421883a 	add	r16,r16,r16
   14220:	b463883a 	add	r17,r22,r17
   14224:	8421883a 	add	r16,r16,r16
   14228:	dd800015 	stw	r22,0(sp)
   1422c:	dc800415 	stw	r18,16(sp)
   14230:	dc400515 	stw	r17,20(sp)
   14234:	9429883a 	add	r20,r18,r16
   14238:	b4404f2e 	bgeu	r22,r17,14378 <__multiply+0x214>
   1423c:	d8c00017 	ldw	r3,0(sp)
   14240:	1c800017 	ldw	r18,0(r3)
   14244:	947fffcc 	andi	r17,r18,65535
   14248:	88001e26 	beq	r17,zero,142c4 <__multiply+0x160>
   1424c:	dd800117 	ldw	r22,4(sp)
   14250:	dd400417 	ldw	r21,16(sp)
   14254:	0027883a 	mov	r19,zero
   14258:	ac800017 	ldw	r18,0(r21)
   1425c:	b4000017 	ldw	r16,0(r22)
   14260:	880b883a 	mov	r5,r17
   14264:	913fffcc 	andi	r4,r18,65535
   14268:	000c68c0 	call	c68c <__mulsi3>
   1426c:	9008d43a 	srli	r4,r18,16
   14270:	84bfffcc 	andi	r18,r16,65535
   14274:	1485883a 	add	r2,r2,r18
   14278:	14e5883a 	add	r18,r2,r19
   1427c:	8020d43a 	srli	r16,r16,16
   14280:	9026d43a 	srli	r19,r18,16
   14284:	880b883a 	mov	r5,r17
   14288:	000c68c0 	call	c68c <__mulsi3>
   1428c:	1405883a 	add	r2,r2,r16
   14290:	14e1883a 	add	r16,r2,r19
   14294:	90ffffcc 	andi	r3,r18,65535
   14298:	8024943a 	slli	r18,r16,16
   1429c:	ad400104 	addi	r21,r21,4
   142a0:	b005883a 	mov	r2,r22
   142a4:	90c6b03a 	or	r3,r18,r3
   142a8:	b0c00015 	stw	r3,0(r22)
   142ac:	8026d43a 	srli	r19,r16,16
   142b0:	b5800104 	addi	r22,r22,4
   142b4:	ad3fe836 	bltu	r21,r20,14258 <__alt_data_end+0xf8014258>
   142b8:	d8c00017 	ldw	r3,0(sp)
   142bc:	14c00115 	stw	r19,4(r2)
   142c0:	1c800017 	ldw	r18,0(r3)
   142c4:	9024d43a 	srli	r18,r18,16
   142c8:	90002226 	beq	r18,zero,14354 <__multiply+0x1f0>
   142cc:	d8c00117 	ldw	r3,4(sp)
   142d0:	dd800417 	ldw	r22,16(sp)
   142d4:	002f883a 	mov	r23,zero
   142d8:	1f000017 	ldw	fp,0(r3)
   142dc:	1823883a 	mov	r17,r3
   142e0:	182b883a 	mov	r21,r3
   142e4:	e021883a 	mov	r16,fp
   142e8:	00000106 	br	142f0 <__multiply+0x18c>
   142ec:	982b883a 	mov	r21,r19
   142f0:	b100000b 	ldhu	r4,0(r22)
   142f4:	8020d43a 	srli	r16,r16,16
   142f8:	900b883a 	mov	r5,r18
   142fc:	000c68c0 	call	c68c <__mulsi3>
   14300:	1405883a 	add	r2,r2,r16
   14304:	15ef883a 	add	r23,r2,r23
   14308:	b804943a 	slli	r2,r23,16
   1430c:	e0ffffcc 	andi	r3,fp,65535
   14310:	8c400104 	addi	r17,r17,4
   14314:	10c6b03a 	or	r3,r2,r3
   14318:	88ffff15 	stw	r3,-4(r17)
   1431c:	b5800104 	addi	r22,r22,4
   14320:	b13fff17 	ldw	r4,-4(r22)
   14324:	acc00104 	addi	r19,r21,4
   14328:	900b883a 	mov	r5,r18
   1432c:	2008d43a 	srli	r4,r4,16
   14330:	9c000017 	ldw	r16,0(r19)
   14334:	000c68c0 	call	c68c <__mulsi3>
   14338:	b806d43a 	srli	r3,r23,16
   1433c:	813fffcc 	andi	r4,r16,65535
   14340:	1105883a 	add	r2,r2,r4
   14344:	10f9883a 	add	fp,r2,r3
   14348:	e02ed43a 	srli	r23,fp,16
   1434c:	b53fe736 	bltu	r22,r20,142ec <__alt_data_end+0xf80142ec>
   14350:	af000115 	stw	fp,4(r21)
   14354:	d8c00017 	ldw	r3,0(sp)
   14358:	d9000517 	ldw	r4,20(sp)
   1435c:	18c00104 	addi	r3,r3,4
   14360:	d8c00015 	stw	r3,0(sp)
   14364:	d8c00117 	ldw	r3,4(sp)
   14368:	18c00104 	addi	r3,r3,4
   1436c:	d8c00115 	stw	r3,4(sp)
   14370:	d8c00017 	ldw	r3,0(sp)
   14374:	193fb136 	bltu	r3,r4,1423c <__alt_data_end+0xf801423c>
   14378:	d8c00217 	ldw	r3,8(sp)
   1437c:	00c00c0e 	bge	zero,r3,143b0 <__multiply+0x24c>
   14380:	d8c00317 	ldw	r3,12(sp)
   14384:	18bfff17 	ldw	r2,-4(r3)
   14388:	1d7fff04 	addi	r21,r3,-4
   1438c:	10000326 	beq	r2,zero,1439c <__multiply+0x238>
   14390:	00000706 	br	143b0 <__multiply+0x24c>
   14394:	a8800017 	ldw	r2,0(r21)
   14398:	1000051e 	bne	r2,zero,143b0 <__multiply+0x24c>
   1439c:	d8c00217 	ldw	r3,8(sp)
   143a0:	ad7fff04 	addi	r21,r21,-4
   143a4:	18ffffc4 	addi	r3,r3,-1
   143a8:	d8c00215 	stw	r3,8(sp)
   143ac:	183ff91e 	bne	r3,zero,14394 <__alt_data_end+0xf8014394>
   143b0:	d8c00617 	ldw	r3,24(sp)
   143b4:	d9000217 	ldw	r4,8(sp)
   143b8:	1805883a 	mov	r2,r3
   143bc:	19000415 	stw	r4,16(r3)
   143c0:	dfc01017 	ldw	ra,64(sp)
   143c4:	df000f17 	ldw	fp,60(sp)
   143c8:	ddc00e17 	ldw	r23,56(sp)
   143cc:	dd800d17 	ldw	r22,52(sp)
   143d0:	dd400c17 	ldw	r21,48(sp)
   143d4:	dd000b17 	ldw	r20,44(sp)
   143d8:	dcc00a17 	ldw	r19,40(sp)
   143dc:	dc800917 	ldw	r18,36(sp)
   143e0:	dc400817 	ldw	r17,32(sp)
   143e4:	dc000717 	ldw	r16,28(sp)
   143e8:	dec01104 	addi	sp,sp,68
   143ec:	f800283a 	ret

000143f0 <__pow5mult>:
   143f0:	defffa04 	addi	sp,sp,-24
   143f4:	dcc00315 	stw	r19,12(sp)
   143f8:	dc000015 	stw	r16,0(sp)
   143fc:	dfc00515 	stw	ra,20(sp)
   14400:	dd000415 	stw	r20,16(sp)
   14404:	dc800215 	stw	r18,8(sp)
   14408:	dc400115 	stw	r17,4(sp)
   1440c:	308000cc 	andi	r2,r6,3
   14410:	3021883a 	mov	r16,r6
   14414:	2027883a 	mov	r19,r4
   14418:	10002f1e 	bne	r2,zero,144d8 <__pow5mult+0xe8>
   1441c:	2825883a 	mov	r18,r5
   14420:	8021d0ba 	srai	r16,r16,2
   14424:	80001a26 	beq	r16,zero,14490 <__pow5mult+0xa0>
   14428:	9c401217 	ldw	r17,72(r19)
   1442c:	8800061e 	bne	r17,zero,14448 <__pow5mult+0x58>
   14430:	00003406 	br	14504 <__pow5mult+0x114>
   14434:	8021d07a 	srai	r16,r16,1
   14438:	80001526 	beq	r16,zero,14490 <__pow5mult+0xa0>
   1443c:	88800017 	ldw	r2,0(r17)
   14440:	10001c26 	beq	r2,zero,144b4 <__pow5mult+0xc4>
   14444:	1023883a 	mov	r17,r2
   14448:	8080004c 	andi	r2,r16,1
   1444c:	103ff926 	beq	r2,zero,14434 <__alt_data_end+0xf8014434>
   14450:	880d883a 	mov	r6,r17
   14454:	900b883a 	mov	r5,r18
   14458:	9809883a 	mov	r4,r19
   1445c:	00141640 	call	14164 <__multiply>
   14460:	90001b26 	beq	r18,zero,144d0 <__pow5mult+0xe0>
   14464:	91000117 	ldw	r4,4(r18)
   14468:	98c01317 	ldw	r3,76(r19)
   1446c:	8021d07a 	srai	r16,r16,1
   14470:	2109883a 	add	r4,r4,r4
   14474:	2109883a 	add	r4,r4,r4
   14478:	1907883a 	add	r3,r3,r4
   1447c:	19000017 	ldw	r4,0(r3)
   14480:	91000015 	stw	r4,0(r18)
   14484:	1c800015 	stw	r18,0(r3)
   14488:	1025883a 	mov	r18,r2
   1448c:	803feb1e 	bne	r16,zero,1443c <__alt_data_end+0xf801443c>
   14490:	9005883a 	mov	r2,r18
   14494:	dfc00517 	ldw	ra,20(sp)
   14498:	dd000417 	ldw	r20,16(sp)
   1449c:	dcc00317 	ldw	r19,12(sp)
   144a0:	dc800217 	ldw	r18,8(sp)
   144a4:	dc400117 	ldw	r17,4(sp)
   144a8:	dc000017 	ldw	r16,0(sp)
   144ac:	dec00604 	addi	sp,sp,24
   144b0:	f800283a 	ret
   144b4:	880d883a 	mov	r6,r17
   144b8:	880b883a 	mov	r5,r17
   144bc:	9809883a 	mov	r4,r19
   144c0:	00141640 	call	14164 <__multiply>
   144c4:	88800015 	stw	r2,0(r17)
   144c8:	10000015 	stw	zero,0(r2)
   144cc:	003fdd06 	br	14444 <__alt_data_end+0xf8014444>
   144d0:	1025883a 	mov	r18,r2
   144d4:	003fd706 	br	14434 <__alt_data_end+0xf8014434>
   144d8:	10bfffc4 	addi	r2,r2,-1
   144dc:	1085883a 	add	r2,r2,r2
   144e0:	00c000b4 	movhi	r3,2
   144e4:	18f2a004 	addi	r3,r3,-13696
   144e8:	1085883a 	add	r2,r2,r2
   144ec:	1885883a 	add	r2,r3,r2
   144f0:	11800017 	ldw	r6,0(r2)
   144f4:	000f883a 	mov	r7,zero
   144f8:	0013dc40 	call	13dc4 <__multadd>
   144fc:	1025883a 	mov	r18,r2
   14500:	003fc706 	br	14420 <__alt_data_end+0xf8014420>
   14504:	05000044 	movi	r20,1
   14508:	a00b883a 	mov	r5,r20
   1450c:	9809883a 	mov	r4,r19
   14510:	0013cf40 	call	13cf4 <_Balloc>
   14514:	1023883a 	mov	r17,r2
   14518:	00809c44 	movi	r2,625
   1451c:	88800515 	stw	r2,20(r17)
   14520:	8d000415 	stw	r20,16(r17)
   14524:	9c401215 	stw	r17,72(r19)
   14528:	88000015 	stw	zero,0(r17)
   1452c:	003fc606 	br	14448 <__alt_data_end+0xf8014448>

00014530 <__lshift>:
   14530:	defff904 	addi	sp,sp,-28
   14534:	dd400515 	stw	r21,20(sp)
   14538:	dcc00315 	stw	r19,12(sp)
   1453c:	302bd17a 	srai	r21,r6,5
   14540:	2cc00417 	ldw	r19,16(r5)
   14544:	28800217 	ldw	r2,8(r5)
   14548:	dd000415 	stw	r20,16(sp)
   1454c:	ace7883a 	add	r19,r21,r19
   14550:	dc800215 	stw	r18,8(sp)
   14554:	dc400115 	stw	r17,4(sp)
   14558:	dc000015 	stw	r16,0(sp)
   1455c:	dfc00615 	stw	ra,24(sp)
   14560:	9c000044 	addi	r16,r19,1
   14564:	2823883a 	mov	r17,r5
   14568:	3029883a 	mov	r20,r6
   1456c:	2025883a 	mov	r18,r4
   14570:	29400117 	ldw	r5,4(r5)
   14574:	1400030e 	bge	r2,r16,14584 <__lshift+0x54>
   14578:	1085883a 	add	r2,r2,r2
   1457c:	29400044 	addi	r5,r5,1
   14580:	143ffd16 	blt	r2,r16,14578 <__alt_data_end+0xf8014578>
   14584:	9009883a 	mov	r4,r18
   14588:	0013cf40 	call	13cf4 <_Balloc>
   1458c:	10c00504 	addi	r3,r2,20
   14590:	0540070e 	bge	zero,r21,145b0 <__lshift+0x80>
   14594:	ad6b883a 	add	r21,r21,r21
   14598:	ad6b883a 	add	r21,r21,r21
   1459c:	1809883a 	mov	r4,r3
   145a0:	1d47883a 	add	r3,r3,r21
   145a4:	20000015 	stw	zero,0(r4)
   145a8:	21000104 	addi	r4,r4,4
   145ac:	193ffd1e 	bne	r3,r4,145a4 <__alt_data_end+0xf80145a4>
   145b0:	8a000417 	ldw	r8,16(r17)
   145b4:	89000504 	addi	r4,r17,20
   145b8:	a18007cc 	andi	r6,r20,31
   145bc:	4211883a 	add	r8,r8,r8
   145c0:	4211883a 	add	r8,r8,r8
   145c4:	2211883a 	add	r8,r4,r8
   145c8:	30002326 	beq	r6,zero,14658 <__lshift+0x128>
   145cc:	02400804 	movi	r9,32
   145d0:	4993c83a 	sub	r9,r9,r6
   145d4:	000b883a 	mov	r5,zero
   145d8:	21c00017 	ldw	r7,0(r4)
   145dc:	1815883a 	mov	r10,r3
   145e0:	18c00104 	addi	r3,r3,4
   145e4:	398e983a 	sll	r7,r7,r6
   145e8:	21000104 	addi	r4,r4,4
   145ec:	394ab03a 	or	r5,r7,r5
   145f0:	197fff15 	stw	r5,-4(r3)
   145f4:	217fff17 	ldw	r5,-4(r4)
   145f8:	2a4ad83a 	srl	r5,r5,r9
   145fc:	223ff636 	bltu	r4,r8,145d8 <__alt_data_end+0xf80145d8>
   14600:	51400115 	stw	r5,4(r10)
   14604:	28001a1e 	bne	r5,zero,14670 <__lshift+0x140>
   14608:	843fffc4 	addi	r16,r16,-1
   1460c:	14000415 	stw	r16,16(r2)
   14610:	88000826 	beq	r17,zero,14634 <__lshift+0x104>
   14614:	89000117 	ldw	r4,4(r17)
   14618:	90c01317 	ldw	r3,76(r18)
   1461c:	2109883a 	add	r4,r4,r4
   14620:	2109883a 	add	r4,r4,r4
   14624:	1907883a 	add	r3,r3,r4
   14628:	19000017 	ldw	r4,0(r3)
   1462c:	89000015 	stw	r4,0(r17)
   14630:	1c400015 	stw	r17,0(r3)
   14634:	dfc00617 	ldw	ra,24(sp)
   14638:	dd400517 	ldw	r21,20(sp)
   1463c:	dd000417 	ldw	r20,16(sp)
   14640:	dcc00317 	ldw	r19,12(sp)
   14644:	dc800217 	ldw	r18,8(sp)
   14648:	dc400117 	ldw	r17,4(sp)
   1464c:	dc000017 	ldw	r16,0(sp)
   14650:	dec00704 	addi	sp,sp,28
   14654:	f800283a 	ret
   14658:	21400017 	ldw	r5,0(r4)
   1465c:	18c00104 	addi	r3,r3,4
   14660:	21000104 	addi	r4,r4,4
   14664:	197fff15 	stw	r5,-4(r3)
   14668:	223ffb36 	bltu	r4,r8,14658 <__alt_data_end+0xf8014658>
   1466c:	003fe606 	br	14608 <__alt_data_end+0xf8014608>
   14670:	9c000084 	addi	r16,r19,2
   14674:	003fe406 	br	14608 <__alt_data_end+0xf8014608>

00014678 <__mcmp>:
   14678:	20800417 	ldw	r2,16(r4)
   1467c:	28c00417 	ldw	r3,16(r5)
   14680:	10c5c83a 	sub	r2,r2,r3
   14684:	1000111e 	bne	r2,zero,146cc <__mcmp+0x54>
   14688:	18c7883a 	add	r3,r3,r3
   1468c:	18c7883a 	add	r3,r3,r3
   14690:	21000504 	addi	r4,r4,20
   14694:	29400504 	addi	r5,r5,20
   14698:	20c5883a 	add	r2,r4,r3
   1469c:	28cb883a 	add	r5,r5,r3
   146a0:	00000106 	br	146a8 <__mcmp+0x30>
   146a4:	20800a2e 	bgeu	r4,r2,146d0 <__mcmp+0x58>
   146a8:	10bfff04 	addi	r2,r2,-4
   146ac:	297fff04 	addi	r5,r5,-4
   146b0:	11800017 	ldw	r6,0(r2)
   146b4:	28c00017 	ldw	r3,0(r5)
   146b8:	30fffa26 	beq	r6,r3,146a4 <__alt_data_end+0xf80146a4>
   146bc:	30c00236 	bltu	r6,r3,146c8 <__mcmp+0x50>
   146c0:	00800044 	movi	r2,1
   146c4:	f800283a 	ret
   146c8:	00bfffc4 	movi	r2,-1
   146cc:	f800283a 	ret
   146d0:	0005883a 	mov	r2,zero
   146d4:	f800283a 	ret

000146d8 <__mdiff>:
   146d8:	28c00417 	ldw	r3,16(r5)
   146dc:	30800417 	ldw	r2,16(r6)
   146e0:	defffa04 	addi	sp,sp,-24
   146e4:	dcc00315 	stw	r19,12(sp)
   146e8:	dc800215 	stw	r18,8(sp)
   146ec:	dfc00515 	stw	ra,20(sp)
   146f0:	dd000415 	stw	r20,16(sp)
   146f4:	dc400115 	stw	r17,4(sp)
   146f8:	dc000015 	stw	r16,0(sp)
   146fc:	1887c83a 	sub	r3,r3,r2
   14700:	2825883a 	mov	r18,r5
   14704:	3027883a 	mov	r19,r6
   14708:	1800141e 	bne	r3,zero,1475c <__mdiff+0x84>
   1470c:	1085883a 	add	r2,r2,r2
   14710:	1085883a 	add	r2,r2,r2
   14714:	2a000504 	addi	r8,r5,20
   14718:	34000504 	addi	r16,r6,20
   1471c:	4087883a 	add	r3,r8,r2
   14720:	8085883a 	add	r2,r16,r2
   14724:	00000106 	br	1472c <__mdiff+0x54>
   14728:	40c0592e 	bgeu	r8,r3,14890 <__mdiff+0x1b8>
   1472c:	18ffff04 	addi	r3,r3,-4
   14730:	10bfff04 	addi	r2,r2,-4
   14734:	19c00017 	ldw	r7,0(r3)
   14738:	11400017 	ldw	r5,0(r2)
   1473c:	397ffa26 	beq	r7,r5,14728 <__alt_data_end+0xf8014728>
   14740:	3940592e 	bgeu	r7,r5,148a8 <__mdiff+0x1d0>
   14744:	9005883a 	mov	r2,r18
   14748:	4023883a 	mov	r17,r8
   1474c:	9825883a 	mov	r18,r19
   14750:	05000044 	movi	r20,1
   14754:	1027883a 	mov	r19,r2
   14758:	00000406 	br	1476c <__mdiff+0x94>
   1475c:	18005616 	blt	r3,zero,148b8 <__mdiff+0x1e0>
   14760:	34400504 	addi	r17,r6,20
   14764:	2c000504 	addi	r16,r5,20
   14768:	0029883a 	mov	r20,zero
   1476c:	91400117 	ldw	r5,4(r18)
   14770:	0013cf40 	call	13cf4 <_Balloc>
   14774:	92400417 	ldw	r9,16(r18)
   14778:	9b000417 	ldw	r12,16(r19)
   1477c:	12c00504 	addi	r11,r2,20
   14780:	4a51883a 	add	r8,r9,r9
   14784:	6319883a 	add	r12,r12,r12
   14788:	4211883a 	add	r8,r8,r8
   1478c:	6319883a 	add	r12,r12,r12
   14790:	15000315 	stw	r20,12(r2)
   14794:	8211883a 	add	r8,r16,r8
   14798:	8b19883a 	add	r12,r17,r12
   1479c:	0007883a 	mov	r3,zero
   147a0:	81400017 	ldw	r5,0(r16)
   147a4:	89c00017 	ldw	r7,0(r17)
   147a8:	59800104 	addi	r6,r11,4
   147ac:	293fffcc 	andi	r4,r5,65535
   147b0:	20c7883a 	add	r3,r4,r3
   147b4:	393fffcc 	andi	r4,r7,65535
   147b8:	1909c83a 	sub	r4,r3,r4
   147bc:	280ad43a 	srli	r5,r5,16
   147c0:	380ed43a 	srli	r7,r7,16
   147c4:	2007d43a 	srai	r3,r4,16
   147c8:	213fffcc 	andi	r4,r4,65535
   147cc:	29cbc83a 	sub	r5,r5,r7
   147d0:	28c7883a 	add	r3,r5,r3
   147d4:	180a943a 	slli	r5,r3,16
   147d8:	8c400104 	addi	r17,r17,4
   147dc:	84000104 	addi	r16,r16,4
   147e0:	2908b03a 	or	r4,r5,r4
   147e4:	59000015 	stw	r4,0(r11)
   147e8:	1807d43a 	srai	r3,r3,16
   147ec:	3015883a 	mov	r10,r6
   147f0:	3017883a 	mov	r11,r6
   147f4:	8b3fea36 	bltu	r17,r12,147a0 <__alt_data_end+0xf80147a0>
   147f8:	8200162e 	bgeu	r16,r8,14854 <__mdiff+0x17c>
   147fc:	8017883a 	mov	r11,r16
   14800:	59400017 	ldw	r5,0(r11)
   14804:	31800104 	addi	r6,r6,4
   14808:	5ac00104 	addi	r11,r11,4
   1480c:	293fffcc 	andi	r4,r5,65535
   14810:	20c7883a 	add	r3,r4,r3
   14814:	280ed43a 	srli	r7,r5,16
   14818:	180bd43a 	srai	r5,r3,16
   1481c:	193fffcc 	andi	r4,r3,65535
   14820:	3947883a 	add	r3,r7,r5
   14824:	180a943a 	slli	r5,r3,16
   14828:	1807d43a 	srai	r3,r3,16
   1482c:	2908b03a 	or	r4,r5,r4
   14830:	313fff15 	stw	r4,-4(r6)
   14834:	5a3ff236 	bltu	r11,r8,14800 <__alt_data_end+0xf8014800>
   14838:	0406303a 	nor	r3,zero,r16
   1483c:	1a07883a 	add	r3,r3,r8
   14840:	1806d0ba 	srli	r3,r3,2
   14844:	18c00044 	addi	r3,r3,1
   14848:	18c7883a 	add	r3,r3,r3
   1484c:	18c7883a 	add	r3,r3,r3
   14850:	50d5883a 	add	r10,r10,r3
   14854:	50ffff04 	addi	r3,r10,-4
   14858:	2000041e 	bne	r4,zero,1486c <__mdiff+0x194>
   1485c:	18ffff04 	addi	r3,r3,-4
   14860:	19000017 	ldw	r4,0(r3)
   14864:	4a7fffc4 	addi	r9,r9,-1
   14868:	203ffc26 	beq	r4,zero,1485c <__alt_data_end+0xf801485c>
   1486c:	12400415 	stw	r9,16(r2)
   14870:	dfc00517 	ldw	ra,20(sp)
   14874:	dd000417 	ldw	r20,16(sp)
   14878:	dcc00317 	ldw	r19,12(sp)
   1487c:	dc800217 	ldw	r18,8(sp)
   14880:	dc400117 	ldw	r17,4(sp)
   14884:	dc000017 	ldw	r16,0(sp)
   14888:	dec00604 	addi	sp,sp,24
   1488c:	f800283a 	ret
   14890:	000b883a 	mov	r5,zero
   14894:	0013cf40 	call	13cf4 <_Balloc>
   14898:	00c00044 	movi	r3,1
   1489c:	10c00415 	stw	r3,16(r2)
   148a0:	10000515 	stw	zero,20(r2)
   148a4:	003ff206 	br	14870 <__alt_data_end+0xf8014870>
   148a8:	8023883a 	mov	r17,r16
   148ac:	0029883a 	mov	r20,zero
   148b0:	4021883a 	mov	r16,r8
   148b4:	003fad06 	br	1476c <__alt_data_end+0xf801476c>
   148b8:	9005883a 	mov	r2,r18
   148bc:	94400504 	addi	r17,r18,20
   148c0:	9c000504 	addi	r16,r19,20
   148c4:	9825883a 	mov	r18,r19
   148c8:	05000044 	movi	r20,1
   148cc:	1027883a 	mov	r19,r2
   148d0:	003fa606 	br	1476c <__alt_data_end+0xf801476c>

000148d4 <__ulp>:
   148d4:	295ffc2c 	andhi	r5,r5,32752
   148d8:	00bf3034 	movhi	r2,64704
   148dc:	2887883a 	add	r3,r5,r2
   148e0:	00c0020e 	bge	zero,r3,148ec <__ulp+0x18>
   148e4:	0005883a 	mov	r2,zero
   148e8:	f800283a 	ret
   148ec:	00c7c83a 	sub	r3,zero,r3
   148f0:	1807d53a 	srai	r3,r3,20
   148f4:	008004c4 	movi	r2,19
   148f8:	10c00b0e 	bge	r2,r3,14928 <__ulp+0x54>
   148fc:	18bffb04 	addi	r2,r3,-20
   14900:	01000784 	movi	r4,30
   14904:	0007883a 	mov	r3,zero
   14908:	20800516 	blt	r4,r2,14920 <__ulp+0x4c>
   1490c:	010007c4 	movi	r4,31
   14910:	2089c83a 	sub	r4,r4,r2
   14914:	00800044 	movi	r2,1
   14918:	1104983a 	sll	r2,r2,r4
   1491c:	f800283a 	ret
   14920:	00800044 	movi	r2,1
   14924:	f800283a 	ret
   14928:	01400234 	movhi	r5,8
   1492c:	28c7d83a 	sra	r3,r5,r3
   14930:	0005883a 	mov	r2,zero
   14934:	f800283a 	ret

00014938 <__b2d>:
   14938:	defffa04 	addi	sp,sp,-24
   1493c:	dc000015 	stw	r16,0(sp)
   14940:	24000417 	ldw	r16,16(r4)
   14944:	dc400115 	stw	r17,4(sp)
   14948:	24400504 	addi	r17,r4,20
   1494c:	8421883a 	add	r16,r16,r16
   14950:	8421883a 	add	r16,r16,r16
   14954:	8c21883a 	add	r16,r17,r16
   14958:	dc800215 	stw	r18,8(sp)
   1495c:	84bfff17 	ldw	r18,-4(r16)
   14960:	dd000415 	stw	r20,16(sp)
   14964:	dcc00315 	stw	r19,12(sp)
   14968:	9009883a 	mov	r4,r18
   1496c:	2829883a 	mov	r20,r5
   14970:	dfc00515 	stw	ra,20(sp)
   14974:	00140100 	call	14010 <__hi0bits>
   14978:	00c00804 	movi	r3,32
   1497c:	1889c83a 	sub	r4,r3,r2
   14980:	a1000015 	stw	r4,0(r20)
   14984:	01000284 	movi	r4,10
   14988:	84ffff04 	addi	r19,r16,-4
   1498c:	20801216 	blt	r4,r2,149d8 <__b2d+0xa0>
   14990:	018002c4 	movi	r6,11
   14994:	308dc83a 	sub	r6,r6,r2
   14998:	9186d83a 	srl	r3,r18,r6
   1499c:	18cffc34 	orhi	r3,r3,16368
   149a0:	8cc0212e 	bgeu	r17,r19,14a28 <__b2d+0xf0>
   149a4:	813ffe17 	ldw	r4,-8(r16)
   149a8:	218cd83a 	srl	r6,r4,r6
   149ac:	10800544 	addi	r2,r2,21
   149b0:	9084983a 	sll	r2,r18,r2
   149b4:	1184b03a 	or	r2,r2,r6
   149b8:	dfc00517 	ldw	ra,20(sp)
   149bc:	dd000417 	ldw	r20,16(sp)
   149c0:	dcc00317 	ldw	r19,12(sp)
   149c4:	dc800217 	ldw	r18,8(sp)
   149c8:	dc400117 	ldw	r17,4(sp)
   149cc:	dc000017 	ldw	r16,0(sp)
   149d0:	dec00604 	addi	sp,sp,24
   149d4:	f800283a 	ret
   149d8:	8cc00f2e 	bgeu	r17,r19,14a18 <__b2d+0xe0>
   149dc:	117ffd44 	addi	r5,r2,-11
   149e0:	80bffe17 	ldw	r2,-8(r16)
   149e4:	28000e26 	beq	r5,zero,14a20 <__b2d+0xe8>
   149e8:	1949c83a 	sub	r4,r3,r5
   149ec:	9164983a 	sll	r18,r18,r5
   149f0:	1106d83a 	srl	r3,r2,r4
   149f4:	81bffe04 	addi	r6,r16,-8
   149f8:	948ffc34 	orhi	r18,r18,16368
   149fc:	90c6b03a 	or	r3,r18,r3
   14a00:	89800e2e 	bgeu	r17,r6,14a3c <__b2d+0x104>
   14a04:	81bffd17 	ldw	r6,-12(r16)
   14a08:	1144983a 	sll	r2,r2,r5
   14a0c:	310ad83a 	srl	r5,r6,r4
   14a10:	2884b03a 	or	r2,r5,r2
   14a14:	003fe806 	br	149b8 <__alt_data_end+0xf80149b8>
   14a18:	10bffd44 	addi	r2,r2,-11
   14a1c:	1000041e 	bne	r2,zero,14a30 <__b2d+0xf8>
   14a20:	90cffc34 	orhi	r3,r18,16368
   14a24:	003fe406 	br	149b8 <__alt_data_end+0xf80149b8>
   14a28:	000d883a 	mov	r6,zero
   14a2c:	003fdf06 	br	149ac <__alt_data_end+0xf80149ac>
   14a30:	90a4983a 	sll	r18,r18,r2
   14a34:	0005883a 	mov	r2,zero
   14a38:	003ff906 	br	14a20 <__alt_data_end+0xf8014a20>
   14a3c:	1144983a 	sll	r2,r2,r5
   14a40:	003fdd06 	br	149b8 <__alt_data_end+0xf80149b8>

00014a44 <__d2b>:
   14a44:	defff804 	addi	sp,sp,-32
   14a48:	dc000215 	stw	r16,8(sp)
   14a4c:	3021883a 	mov	r16,r6
   14a50:	dc400315 	stw	r17,12(sp)
   14a54:	8022907a 	slli	r17,r16,1
   14a58:	dd000615 	stw	r20,24(sp)
   14a5c:	2829883a 	mov	r20,r5
   14a60:	01400044 	movi	r5,1
   14a64:	dcc00515 	stw	r19,20(sp)
   14a68:	dc800415 	stw	r18,16(sp)
   14a6c:	dfc00715 	stw	ra,28(sp)
   14a70:	3825883a 	mov	r18,r7
   14a74:	8822d57a 	srli	r17,r17,21
   14a78:	0013cf40 	call	13cf4 <_Balloc>
   14a7c:	1027883a 	mov	r19,r2
   14a80:	00800434 	movhi	r2,16
   14a84:	10bfffc4 	addi	r2,r2,-1
   14a88:	808c703a 	and	r6,r16,r2
   14a8c:	88000126 	beq	r17,zero,14a94 <__d2b+0x50>
   14a90:	31800434 	orhi	r6,r6,16
   14a94:	d9800015 	stw	r6,0(sp)
   14a98:	a0002426 	beq	r20,zero,14b2c <__d2b+0xe8>
   14a9c:	d9000104 	addi	r4,sp,4
   14aa0:	dd000115 	stw	r20,4(sp)
   14aa4:	00140780 	call	14078 <__lo0bits>
   14aa8:	d8c00017 	ldw	r3,0(sp)
   14aac:	10002f1e 	bne	r2,zero,14b6c <__d2b+0x128>
   14ab0:	d9000117 	ldw	r4,4(sp)
   14ab4:	99000515 	stw	r4,20(r19)
   14ab8:	1821003a 	cmpeq	r16,r3,zero
   14abc:	01000084 	movi	r4,2
   14ac0:	2421c83a 	sub	r16,r4,r16
   14ac4:	98c00615 	stw	r3,24(r19)
   14ac8:	9c000415 	stw	r16,16(r19)
   14acc:	88001f1e 	bne	r17,zero,14b4c <__d2b+0x108>
   14ad0:	10bef384 	addi	r2,r2,-1074
   14ad4:	90800015 	stw	r2,0(r18)
   14ad8:	00900034 	movhi	r2,16384
   14adc:	10bfffc4 	addi	r2,r2,-1
   14ae0:	8085883a 	add	r2,r16,r2
   14ae4:	1085883a 	add	r2,r2,r2
   14ae8:	1085883a 	add	r2,r2,r2
   14aec:	9885883a 	add	r2,r19,r2
   14af0:	11000517 	ldw	r4,20(r2)
   14af4:	8020917a 	slli	r16,r16,5
   14af8:	00140100 	call	14010 <__hi0bits>
   14afc:	d8c00817 	ldw	r3,32(sp)
   14b00:	8085c83a 	sub	r2,r16,r2
   14b04:	18800015 	stw	r2,0(r3)
   14b08:	9805883a 	mov	r2,r19
   14b0c:	dfc00717 	ldw	ra,28(sp)
   14b10:	dd000617 	ldw	r20,24(sp)
   14b14:	dcc00517 	ldw	r19,20(sp)
   14b18:	dc800417 	ldw	r18,16(sp)
   14b1c:	dc400317 	ldw	r17,12(sp)
   14b20:	dc000217 	ldw	r16,8(sp)
   14b24:	dec00804 	addi	sp,sp,32
   14b28:	f800283a 	ret
   14b2c:	d809883a 	mov	r4,sp
   14b30:	00140780 	call	14078 <__lo0bits>
   14b34:	d8c00017 	ldw	r3,0(sp)
   14b38:	04000044 	movi	r16,1
   14b3c:	9c000415 	stw	r16,16(r19)
   14b40:	98c00515 	stw	r3,20(r19)
   14b44:	10800804 	addi	r2,r2,32
   14b48:	883fe126 	beq	r17,zero,14ad0 <__alt_data_end+0xf8014ad0>
   14b4c:	00c00d44 	movi	r3,53
   14b50:	8c7ef344 	addi	r17,r17,-1075
   14b54:	88a3883a 	add	r17,r17,r2
   14b58:	1885c83a 	sub	r2,r3,r2
   14b5c:	d8c00817 	ldw	r3,32(sp)
   14b60:	94400015 	stw	r17,0(r18)
   14b64:	18800015 	stw	r2,0(r3)
   14b68:	003fe706 	br	14b08 <__alt_data_end+0xf8014b08>
   14b6c:	01000804 	movi	r4,32
   14b70:	2089c83a 	sub	r4,r4,r2
   14b74:	1908983a 	sll	r4,r3,r4
   14b78:	d9400117 	ldw	r5,4(sp)
   14b7c:	1886d83a 	srl	r3,r3,r2
   14b80:	2148b03a 	or	r4,r4,r5
   14b84:	99000515 	stw	r4,20(r19)
   14b88:	d8c00015 	stw	r3,0(sp)
   14b8c:	003fca06 	br	14ab8 <__alt_data_end+0xf8014ab8>

00014b90 <__ratio>:
   14b90:	defff904 	addi	sp,sp,-28
   14b94:	dc400315 	stw	r17,12(sp)
   14b98:	2823883a 	mov	r17,r5
   14b9c:	d9400104 	addi	r5,sp,4
   14ba0:	dfc00615 	stw	ra,24(sp)
   14ba4:	dcc00515 	stw	r19,20(sp)
   14ba8:	dc800415 	stw	r18,16(sp)
   14bac:	2027883a 	mov	r19,r4
   14bb0:	dc000215 	stw	r16,8(sp)
   14bb4:	00149380 	call	14938 <__b2d>
   14bb8:	d80b883a 	mov	r5,sp
   14bbc:	8809883a 	mov	r4,r17
   14bc0:	1025883a 	mov	r18,r2
   14bc4:	1821883a 	mov	r16,r3
   14bc8:	00149380 	call	14938 <__b2d>
   14bcc:	8a000417 	ldw	r8,16(r17)
   14bd0:	99000417 	ldw	r4,16(r19)
   14bd4:	d9400117 	ldw	r5,4(sp)
   14bd8:	2209c83a 	sub	r4,r4,r8
   14bdc:	2010917a 	slli	r8,r4,5
   14be0:	d9000017 	ldw	r4,0(sp)
   14be4:	2909c83a 	sub	r4,r5,r4
   14be8:	4109883a 	add	r4,r8,r4
   14bec:	01000e0e 	bge	zero,r4,14c28 <__ratio+0x98>
   14bf0:	2008953a 	slli	r4,r4,20
   14bf4:	2421883a 	add	r16,r4,r16
   14bf8:	100d883a 	mov	r6,r2
   14bfc:	180f883a 	mov	r7,r3
   14c00:	9009883a 	mov	r4,r18
   14c04:	800b883a 	mov	r5,r16
   14c08:	000c6b40 	call	c6b4 <__divdf3>
   14c0c:	dfc00617 	ldw	ra,24(sp)
   14c10:	dcc00517 	ldw	r19,20(sp)
   14c14:	dc800417 	ldw	r18,16(sp)
   14c18:	dc400317 	ldw	r17,12(sp)
   14c1c:	dc000217 	ldw	r16,8(sp)
   14c20:	dec00704 	addi	sp,sp,28
   14c24:	f800283a 	ret
   14c28:	2008953a 	slli	r4,r4,20
   14c2c:	1907c83a 	sub	r3,r3,r4
   14c30:	003ff106 	br	14bf8 <__alt_data_end+0xf8014bf8>

00014c34 <_mprec_log10>:
   14c34:	defffe04 	addi	sp,sp,-8
   14c38:	dc000015 	stw	r16,0(sp)
   14c3c:	dfc00115 	stw	ra,4(sp)
   14c40:	008005c4 	movi	r2,23
   14c44:	2021883a 	mov	r16,r4
   14c48:	11000d0e 	bge	r2,r4,14c80 <_mprec_log10+0x4c>
   14c4c:	0005883a 	mov	r2,zero
   14c50:	00cffc34 	movhi	r3,16368
   14c54:	843fffc4 	addi	r16,r16,-1
   14c58:	000d883a 	mov	r6,zero
   14c5c:	01d00934 	movhi	r7,16420
   14c60:	1009883a 	mov	r4,r2
   14c64:	180b883a 	mov	r5,r3
   14c68:	0018cd40 	call	18cd4 <__muldf3>
   14c6c:	803ff91e 	bne	r16,zero,14c54 <__alt_data_end+0xf8014c54>
   14c70:	dfc00117 	ldw	ra,4(sp)
   14c74:	dc000017 	ldw	r16,0(sp)
   14c78:	dec00204 	addi	sp,sp,8
   14c7c:	f800283a 	ret
   14c80:	202090fa 	slli	r16,r4,3
   14c84:	008000b4 	movhi	r2,2
   14c88:	10b2b704 	addi	r2,r2,-13604
   14c8c:	1421883a 	add	r16,r2,r16
   14c90:	80800017 	ldw	r2,0(r16)
   14c94:	80c00117 	ldw	r3,4(r16)
   14c98:	dfc00117 	ldw	ra,4(sp)
   14c9c:	dc000017 	ldw	r16,0(sp)
   14ca0:	dec00204 	addi	sp,sp,8
   14ca4:	f800283a 	ret

00014ca8 <__copybits>:
   14ca8:	297fffc4 	addi	r5,r5,-1
   14cac:	280fd17a 	srai	r7,r5,5
   14cb0:	30c00417 	ldw	r3,16(r6)
   14cb4:	30800504 	addi	r2,r6,20
   14cb8:	39c00044 	addi	r7,r7,1
   14cbc:	18c7883a 	add	r3,r3,r3
   14cc0:	39cf883a 	add	r7,r7,r7
   14cc4:	18c7883a 	add	r3,r3,r3
   14cc8:	39cf883a 	add	r7,r7,r7
   14ccc:	10c7883a 	add	r3,r2,r3
   14cd0:	21cf883a 	add	r7,r4,r7
   14cd4:	10c00d2e 	bgeu	r2,r3,14d0c <__copybits+0x64>
   14cd8:	200b883a 	mov	r5,r4
   14cdc:	12000017 	ldw	r8,0(r2)
   14ce0:	29400104 	addi	r5,r5,4
   14ce4:	10800104 	addi	r2,r2,4
   14ce8:	2a3fff15 	stw	r8,-4(r5)
   14cec:	10fffb36 	bltu	r2,r3,14cdc <__alt_data_end+0xf8014cdc>
   14cf0:	1985c83a 	sub	r2,r3,r6
   14cf4:	10bffac4 	addi	r2,r2,-21
   14cf8:	1004d0ba 	srli	r2,r2,2
   14cfc:	10800044 	addi	r2,r2,1
   14d00:	1085883a 	add	r2,r2,r2
   14d04:	1085883a 	add	r2,r2,r2
   14d08:	2089883a 	add	r4,r4,r2
   14d0c:	21c0032e 	bgeu	r4,r7,14d1c <__copybits+0x74>
   14d10:	20000015 	stw	zero,0(r4)
   14d14:	21000104 	addi	r4,r4,4
   14d18:	21fffd36 	bltu	r4,r7,14d10 <__alt_data_end+0xf8014d10>
   14d1c:	f800283a 	ret

00014d20 <__any_on>:
   14d20:	20c00417 	ldw	r3,16(r4)
   14d24:	2805d17a 	srai	r2,r5,5
   14d28:	21000504 	addi	r4,r4,20
   14d2c:	18800d0e 	bge	r3,r2,14d64 <__any_on+0x44>
   14d30:	18c7883a 	add	r3,r3,r3
   14d34:	18c7883a 	add	r3,r3,r3
   14d38:	20c7883a 	add	r3,r4,r3
   14d3c:	20c0192e 	bgeu	r4,r3,14da4 <__any_on+0x84>
   14d40:	18bfff17 	ldw	r2,-4(r3)
   14d44:	18ffff04 	addi	r3,r3,-4
   14d48:	1000041e 	bne	r2,zero,14d5c <__any_on+0x3c>
   14d4c:	20c0142e 	bgeu	r4,r3,14da0 <__any_on+0x80>
   14d50:	18ffff04 	addi	r3,r3,-4
   14d54:	19400017 	ldw	r5,0(r3)
   14d58:	283ffc26 	beq	r5,zero,14d4c <__alt_data_end+0xf8014d4c>
   14d5c:	00800044 	movi	r2,1
   14d60:	f800283a 	ret
   14d64:	10c00a0e 	bge	r2,r3,14d90 <__any_on+0x70>
   14d68:	1085883a 	add	r2,r2,r2
   14d6c:	1085883a 	add	r2,r2,r2
   14d70:	294007cc 	andi	r5,r5,31
   14d74:	2087883a 	add	r3,r4,r2
   14d78:	283ff026 	beq	r5,zero,14d3c <__alt_data_end+0xf8014d3c>
   14d7c:	19800017 	ldw	r6,0(r3)
   14d80:	3144d83a 	srl	r2,r6,r5
   14d84:	114a983a 	sll	r5,r2,r5
   14d88:	317ff41e 	bne	r6,r5,14d5c <__alt_data_end+0xf8014d5c>
   14d8c:	003feb06 	br	14d3c <__alt_data_end+0xf8014d3c>
   14d90:	1085883a 	add	r2,r2,r2
   14d94:	1085883a 	add	r2,r2,r2
   14d98:	2087883a 	add	r3,r4,r2
   14d9c:	003fe706 	br	14d3c <__alt_data_end+0xf8014d3c>
   14da0:	f800283a 	ret
   14da4:	0005883a 	mov	r2,zero
   14da8:	f800283a 	ret

00014dac <_realloc_r>:
   14dac:	defff604 	addi	sp,sp,-40
   14db0:	dc800215 	stw	r18,8(sp)
   14db4:	dfc00915 	stw	ra,36(sp)
   14db8:	df000815 	stw	fp,32(sp)
   14dbc:	ddc00715 	stw	r23,28(sp)
   14dc0:	dd800615 	stw	r22,24(sp)
   14dc4:	dd400515 	stw	r21,20(sp)
   14dc8:	dd000415 	stw	r20,16(sp)
   14dcc:	dcc00315 	stw	r19,12(sp)
   14dd0:	dc400115 	stw	r17,4(sp)
   14dd4:	dc000015 	stw	r16,0(sp)
   14dd8:	3025883a 	mov	r18,r6
   14ddc:	2800b726 	beq	r5,zero,150bc <_realloc_r+0x310>
   14de0:	282b883a 	mov	r21,r5
   14de4:	2029883a 	mov	r20,r4
   14de8:	0019bb80 	call	19bb8 <__malloc_lock>
   14dec:	a8bfff17 	ldw	r2,-4(r21)
   14df0:	043fff04 	movi	r16,-4
   14df4:	90c002c4 	addi	r3,r18,11
   14df8:	01000584 	movi	r4,22
   14dfc:	acfffe04 	addi	r19,r21,-8
   14e00:	1420703a 	and	r16,r2,r16
   14e04:	20c0332e 	bgeu	r4,r3,14ed4 <_realloc_r+0x128>
   14e08:	047ffe04 	movi	r17,-8
   14e0c:	1c62703a 	and	r17,r3,r17
   14e10:	8807883a 	mov	r3,r17
   14e14:	88005816 	blt	r17,zero,14f78 <_realloc_r+0x1cc>
   14e18:	8c805736 	bltu	r17,r18,14f78 <_realloc_r+0x1cc>
   14e1c:	80c0300e 	bge	r16,r3,14ee0 <_realloc_r+0x134>
   14e20:	070000b4 	movhi	fp,2
   14e24:	e7341904 	addi	fp,fp,-12188
   14e28:	e1c00217 	ldw	r7,8(fp)
   14e2c:	9c09883a 	add	r4,r19,r16
   14e30:	22000117 	ldw	r8,4(r4)
   14e34:	21c06326 	beq	r4,r7,14fc4 <_realloc_r+0x218>
   14e38:	017fff84 	movi	r5,-2
   14e3c:	414a703a 	and	r5,r8,r5
   14e40:	214b883a 	add	r5,r4,r5
   14e44:	29800117 	ldw	r6,4(r5)
   14e48:	3180004c 	andi	r6,r6,1
   14e4c:	30003f26 	beq	r6,zero,14f4c <_realloc_r+0x1a0>
   14e50:	1080004c 	andi	r2,r2,1
   14e54:	10008326 	beq	r2,zero,15064 <_realloc_r+0x2b8>
   14e58:	900b883a 	mov	r5,r18
   14e5c:	a009883a 	mov	r4,r20
   14e60:	000dc5c0 	call	dc5c <_malloc_r>
   14e64:	1025883a 	mov	r18,r2
   14e68:	10011e26 	beq	r2,zero,152e4 <_realloc_r+0x538>
   14e6c:	a93fff17 	ldw	r4,-4(r21)
   14e70:	10fffe04 	addi	r3,r2,-8
   14e74:	00bfff84 	movi	r2,-2
   14e78:	2084703a 	and	r2,r4,r2
   14e7c:	9885883a 	add	r2,r19,r2
   14e80:	1880ee26 	beq	r3,r2,1523c <_realloc_r+0x490>
   14e84:	81bfff04 	addi	r6,r16,-4
   14e88:	00800904 	movi	r2,36
   14e8c:	1180b836 	bltu	r2,r6,15170 <_realloc_r+0x3c4>
   14e90:	00c004c4 	movi	r3,19
   14e94:	19809636 	bltu	r3,r6,150f0 <_realloc_r+0x344>
   14e98:	9005883a 	mov	r2,r18
   14e9c:	a807883a 	mov	r3,r21
   14ea0:	19000017 	ldw	r4,0(r3)
   14ea4:	11000015 	stw	r4,0(r2)
   14ea8:	19000117 	ldw	r4,4(r3)
   14eac:	11000115 	stw	r4,4(r2)
   14eb0:	18c00217 	ldw	r3,8(r3)
   14eb4:	10c00215 	stw	r3,8(r2)
   14eb8:	a80b883a 	mov	r5,r21
   14ebc:	a009883a 	mov	r4,r20
   14ec0:	0012c4c0 	call	12c4c <_free_r>
   14ec4:	a009883a 	mov	r4,r20
   14ec8:	0019bdc0 	call	19bdc <__malloc_unlock>
   14ecc:	9005883a 	mov	r2,r18
   14ed0:	00001206 	br	14f1c <_realloc_r+0x170>
   14ed4:	00c00404 	movi	r3,16
   14ed8:	1823883a 	mov	r17,r3
   14edc:	003fce06 	br	14e18 <__alt_data_end+0xf8014e18>
   14ee0:	a825883a 	mov	r18,r21
   14ee4:	8445c83a 	sub	r2,r16,r17
   14ee8:	00c003c4 	movi	r3,15
   14eec:	18802636 	bltu	r3,r2,14f88 <_realloc_r+0x1dc>
   14ef0:	99800117 	ldw	r6,4(r19)
   14ef4:	9c07883a 	add	r3,r19,r16
   14ef8:	3180004c 	andi	r6,r6,1
   14efc:	3420b03a 	or	r16,r6,r16
   14f00:	9c000115 	stw	r16,4(r19)
   14f04:	18800117 	ldw	r2,4(r3)
   14f08:	10800054 	ori	r2,r2,1
   14f0c:	18800115 	stw	r2,4(r3)
   14f10:	a009883a 	mov	r4,r20
   14f14:	0019bdc0 	call	19bdc <__malloc_unlock>
   14f18:	9005883a 	mov	r2,r18
   14f1c:	dfc00917 	ldw	ra,36(sp)
   14f20:	df000817 	ldw	fp,32(sp)
   14f24:	ddc00717 	ldw	r23,28(sp)
   14f28:	dd800617 	ldw	r22,24(sp)
   14f2c:	dd400517 	ldw	r21,20(sp)
   14f30:	dd000417 	ldw	r20,16(sp)
   14f34:	dcc00317 	ldw	r19,12(sp)
   14f38:	dc800217 	ldw	r18,8(sp)
   14f3c:	dc400117 	ldw	r17,4(sp)
   14f40:	dc000017 	ldw	r16,0(sp)
   14f44:	dec00a04 	addi	sp,sp,40
   14f48:	f800283a 	ret
   14f4c:	017fff04 	movi	r5,-4
   14f50:	414a703a 	and	r5,r8,r5
   14f54:	814d883a 	add	r6,r16,r5
   14f58:	30c01f16 	blt	r6,r3,14fd8 <_realloc_r+0x22c>
   14f5c:	20800317 	ldw	r2,12(r4)
   14f60:	20c00217 	ldw	r3,8(r4)
   14f64:	a825883a 	mov	r18,r21
   14f68:	3021883a 	mov	r16,r6
   14f6c:	18800315 	stw	r2,12(r3)
   14f70:	10c00215 	stw	r3,8(r2)
   14f74:	003fdb06 	br	14ee4 <__alt_data_end+0xf8014ee4>
   14f78:	00800304 	movi	r2,12
   14f7c:	a0800015 	stw	r2,0(r20)
   14f80:	0005883a 	mov	r2,zero
   14f84:	003fe506 	br	14f1c <__alt_data_end+0xf8014f1c>
   14f88:	98c00117 	ldw	r3,4(r19)
   14f8c:	9c4b883a 	add	r5,r19,r17
   14f90:	11000054 	ori	r4,r2,1
   14f94:	18c0004c 	andi	r3,r3,1
   14f98:	1c62b03a 	or	r17,r3,r17
   14f9c:	9c400115 	stw	r17,4(r19)
   14fa0:	29000115 	stw	r4,4(r5)
   14fa4:	2885883a 	add	r2,r5,r2
   14fa8:	10c00117 	ldw	r3,4(r2)
   14fac:	29400204 	addi	r5,r5,8
   14fb0:	a009883a 	mov	r4,r20
   14fb4:	18c00054 	ori	r3,r3,1
   14fb8:	10c00115 	stw	r3,4(r2)
   14fbc:	0012c4c0 	call	12c4c <_free_r>
   14fc0:	003fd306 	br	14f10 <__alt_data_end+0xf8014f10>
   14fc4:	017fff04 	movi	r5,-4
   14fc8:	414a703a 	and	r5,r8,r5
   14fcc:	89800404 	addi	r6,r17,16
   14fd0:	8151883a 	add	r8,r16,r5
   14fd4:	4180590e 	bge	r8,r6,1513c <_realloc_r+0x390>
   14fd8:	1080004c 	andi	r2,r2,1
   14fdc:	103f9e1e 	bne	r2,zero,14e58 <__alt_data_end+0xf8014e58>
   14fe0:	adbffe17 	ldw	r22,-8(r21)
   14fe4:	00bfff04 	movi	r2,-4
   14fe8:	9dadc83a 	sub	r22,r19,r22
   14fec:	b1800117 	ldw	r6,4(r22)
   14ff0:	3084703a 	and	r2,r6,r2
   14ff4:	20002026 	beq	r4,zero,15078 <_realloc_r+0x2cc>
   14ff8:	80af883a 	add	r23,r16,r2
   14ffc:	b96f883a 	add	r23,r23,r5
   15000:	21c05f26 	beq	r4,r7,15180 <_realloc_r+0x3d4>
   15004:	b8c01c16 	blt	r23,r3,15078 <_realloc_r+0x2cc>
   15008:	20800317 	ldw	r2,12(r4)
   1500c:	20c00217 	ldw	r3,8(r4)
   15010:	81bfff04 	addi	r6,r16,-4
   15014:	01000904 	movi	r4,36
   15018:	18800315 	stw	r2,12(r3)
   1501c:	10c00215 	stw	r3,8(r2)
   15020:	b0c00217 	ldw	r3,8(r22)
   15024:	b0800317 	ldw	r2,12(r22)
   15028:	b4800204 	addi	r18,r22,8
   1502c:	18800315 	stw	r2,12(r3)
   15030:	10c00215 	stw	r3,8(r2)
   15034:	21801b36 	bltu	r4,r6,150a4 <_realloc_r+0x2f8>
   15038:	008004c4 	movi	r2,19
   1503c:	1180352e 	bgeu	r2,r6,15114 <_realloc_r+0x368>
   15040:	a8800017 	ldw	r2,0(r21)
   15044:	b0800215 	stw	r2,8(r22)
   15048:	a8800117 	ldw	r2,4(r21)
   1504c:	b0800315 	stw	r2,12(r22)
   15050:	008006c4 	movi	r2,27
   15054:	11807f36 	bltu	r2,r6,15254 <_realloc_r+0x4a8>
   15058:	b0800404 	addi	r2,r22,16
   1505c:	ad400204 	addi	r21,r21,8
   15060:	00002d06 	br	15118 <_realloc_r+0x36c>
   15064:	adbffe17 	ldw	r22,-8(r21)
   15068:	00bfff04 	movi	r2,-4
   1506c:	9dadc83a 	sub	r22,r19,r22
   15070:	b1000117 	ldw	r4,4(r22)
   15074:	2084703a 	and	r2,r4,r2
   15078:	b03f7726 	beq	r22,zero,14e58 <__alt_data_end+0xf8014e58>
   1507c:	80af883a 	add	r23,r16,r2
   15080:	b8ff7516 	blt	r23,r3,14e58 <__alt_data_end+0xf8014e58>
   15084:	b0800317 	ldw	r2,12(r22)
   15088:	b0c00217 	ldw	r3,8(r22)
   1508c:	81bfff04 	addi	r6,r16,-4
   15090:	01000904 	movi	r4,36
   15094:	18800315 	stw	r2,12(r3)
   15098:	10c00215 	stw	r3,8(r2)
   1509c:	b4800204 	addi	r18,r22,8
   150a0:	21bfe52e 	bgeu	r4,r6,15038 <__alt_data_end+0xf8015038>
   150a4:	a80b883a 	mov	r5,r21
   150a8:	9009883a 	mov	r4,r18
   150ac:	0013a700 	call	13a70 <memmove>
   150b0:	b821883a 	mov	r16,r23
   150b4:	b027883a 	mov	r19,r22
   150b8:	003f8a06 	br	14ee4 <__alt_data_end+0xf8014ee4>
   150bc:	300b883a 	mov	r5,r6
   150c0:	dfc00917 	ldw	ra,36(sp)
   150c4:	df000817 	ldw	fp,32(sp)
   150c8:	ddc00717 	ldw	r23,28(sp)
   150cc:	dd800617 	ldw	r22,24(sp)
   150d0:	dd400517 	ldw	r21,20(sp)
   150d4:	dd000417 	ldw	r20,16(sp)
   150d8:	dcc00317 	ldw	r19,12(sp)
   150dc:	dc800217 	ldw	r18,8(sp)
   150e0:	dc400117 	ldw	r17,4(sp)
   150e4:	dc000017 	ldw	r16,0(sp)
   150e8:	dec00a04 	addi	sp,sp,40
   150ec:	000dc5c1 	jmpi	dc5c <_malloc_r>
   150f0:	a8c00017 	ldw	r3,0(r21)
   150f4:	90c00015 	stw	r3,0(r18)
   150f8:	a8c00117 	ldw	r3,4(r21)
   150fc:	90c00115 	stw	r3,4(r18)
   15100:	00c006c4 	movi	r3,27
   15104:	19804536 	bltu	r3,r6,1521c <_realloc_r+0x470>
   15108:	90800204 	addi	r2,r18,8
   1510c:	a8c00204 	addi	r3,r21,8
   15110:	003f6306 	br	14ea0 <__alt_data_end+0xf8014ea0>
   15114:	9005883a 	mov	r2,r18
   15118:	a8c00017 	ldw	r3,0(r21)
   1511c:	b821883a 	mov	r16,r23
   15120:	b027883a 	mov	r19,r22
   15124:	10c00015 	stw	r3,0(r2)
   15128:	a8c00117 	ldw	r3,4(r21)
   1512c:	10c00115 	stw	r3,4(r2)
   15130:	a8c00217 	ldw	r3,8(r21)
   15134:	10c00215 	stw	r3,8(r2)
   15138:	003f6a06 	br	14ee4 <__alt_data_end+0xf8014ee4>
   1513c:	9c67883a 	add	r19,r19,r17
   15140:	4445c83a 	sub	r2,r8,r17
   15144:	e4c00215 	stw	r19,8(fp)
   15148:	10800054 	ori	r2,r2,1
   1514c:	98800115 	stw	r2,4(r19)
   15150:	a8bfff17 	ldw	r2,-4(r21)
   15154:	a009883a 	mov	r4,r20
   15158:	1080004c 	andi	r2,r2,1
   1515c:	1462b03a 	or	r17,r2,r17
   15160:	ac7fff15 	stw	r17,-4(r21)
   15164:	0019bdc0 	call	19bdc <__malloc_unlock>
   15168:	a805883a 	mov	r2,r21
   1516c:	003f6b06 	br	14f1c <__alt_data_end+0xf8014f1c>
   15170:	a80b883a 	mov	r5,r21
   15174:	9009883a 	mov	r4,r18
   15178:	0013a700 	call	13a70 <memmove>
   1517c:	003f4e06 	br	14eb8 <__alt_data_end+0xf8014eb8>
   15180:	89000404 	addi	r4,r17,16
   15184:	b93fbc16 	blt	r23,r4,15078 <__alt_data_end+0xf8015078>
   15188:	b0800317 	ldw	r2,12(r22)
   1518c:	b0c00217 	ldw	r3,8(r22)
   15190:	81bfff04 	addi	r6,r16,-4
   15194:	01000904 	movi	r4,36
   15198:	18800315 	stw	r2,12(r3)
   1519c:	10c00215 	stw	r3,8(r2)
   151a0:	b4800204 	addi	r18,r22,8
   151a4:	21804336 	bltu	r4,r6,152b4 <_realloc_r+0x508>
   151a8:	008004c4 	movi	r2,19
   151ac:	11803f2e 	bgeu	r2,r6,152ac <_realloc_r+0x500>
   151b0:	a8800017 	ldw	r2,0(r21)
   151b4:	b0800215 	stw	r2,8(r22)
   151b8:	a8800117 	ldw	r2,4(r21)
   151bc:	b0800315 	stw	r2,12(r22)
   151c0:	008006c4 	movi	r2,27
   151c4:	11803f36 	bltu	r2,r6,152c4 <_realloc_r+0x518>
   151c8:	b0800404 	addi	r2,r22,16
   151cc:	ad400204 	addi	r21,r21,8
   151d0:	a8c00017 	ldw	r3,0(r21)
   151d4:	10c00015 	stw	r3,0(r2)
   151d8:	a8c00117 	ldw	r3,4(r21)
   151dc:	10c00115 	stw	r3,4(r2)
   151e0:	a8c00217 	ldw	r3,8(r21)
   151e4:	10c00215 	stw	r3,8(r2)
   151e8:	b447883a 	add	r3,r22,r17
   151ec:	bc45c83a 	sub	r2,r23,r17
   151f0:	e0c00215 	stw	r3,8(fp)
   151f4:	10800054 	ori	r2,r2,1
   151f8:	18800115 	stw	r2,4(r3)
   151fc:	b0800117 	ldw	r2,4(r22)
   15200:	a009883a 	mov	r4,r20
   15204:	1080004c 	andi	r2,r2,1
   15208:	1462b03a 	or	r17,r2,r17
   1520c:	b4400115 	stw	r17,4(r22)
   15210:	0019bdc0 	call	19bdc <__malloc_unlock>
   15214:	9005883a 	mov	r2,r18
   15218:	003f4006 	br	14f1c <__alt_data_end+0xf8014f1c>
   1521c:	a8c00217 	ldw	r3,8(r21)
   15220:	90c00215 	stw	r3,8(r18)
   15224:	a8c00317 	ldw	r3,12(r21)
   15228:	90c00315 	stw	r3,12(r18)
   1522c:	30801126 	beq	r6,r2,15274 <_realloc_r+0x4c8>
   15230:	90800404 	addi	r2,r18,16
   15234:	a8c00404 	addi	r3,r21,16
   15238:	003f1906 	br	14ea0 <__alt_data_end+0xf8014ea0>
   1523c:	90ffff17 	ldw	r3,-4(r18)
   15240:	00bfff04 	movi	r2,-4
   15244:	a825883a 	mov	r18,r21
   15248:	1884703a 	and	r2,r3,r2
   1524c:	80a1883a 	add	r16,r16,r2
   15250:	003f2406 	br	14ee4 <__alt_data_end+0xf8014ee4>
   15254:	a8800217 	ldw	r2,8(r21)
   15258:	b0800415 	stw	r2,16(r22)
   1525c:	a8800317 	ldw	r2,12(r21)
   15260:	b0800515 	stw	r2,20(r22)
   15264:	31000a26 	beq	r6,r4,15290 <_realloc_r+0x4e4>
   15268:	b0800604 	addi	r2,r22,24
   1526c:	ad400404 	addi	r21,r21,16
   15270:	003fa906 	br	15118 <__alt_data_end+0xf8015118>
   15274:	a9000417 	ldw	r4,16(r21)
   15278:	90800604 	addi	r2,r18,24
   1527c:	a8c00604 	addi	r3,r21,24
   15280:	91000415 	stw	r4,16(r18)
   15284:	a9000517 	ldw	r4,20(r21)
   15288:	91000515 	stw	r4,20(r18)
   1528c:	003f0406 	br	14ea0 <__alt_data_end+0xf8014ea0>
   15290:	a8c00417 	ldw	r3,16(r21)
   15294:	ad400604 	addi	r21,r21,24
   15298:	b0800804 	addi	r2,r22,32
   1529c:	b0c00615 	stw	r3,24(r22)
   152a0:	a8ffff17 	ldw	r3,-4(r21)
   152a4:	b0c00715 	stw	r3,28(r22)
   152a8:	003f9b06 	br	15118 <__alt_data_end+0xf8015118>
   152ac:	9005883a 	mov	r2,r18
   152b0:	003fc706 	br	151d0 <__alt_data_end+0xf80151d0>
   152b4:	a80b883a 	mov	r5,r21
   152b8:	9009883a 	mov	r4,r18
   152bc:	0013a700 	call	13a70 <memmove>
   152c0:	003fc906 	br	151e8 <__alt_data_end+0xf80151e8>
   152c4:	a8800217 	ldw	r2,8(r21)
   152c8:	b0800415 	stw	r2,16(r22)
   152cc:	a8800317 	ldw	r2,12(r21)
   152d0:	b0800515 	stw	r2,20(r22)
   152d4:	31000726 	beq	r6,r4,152f4 <_realloc_r+0x548>
   152d8:	b0800604 	addi	r2,r22,24
   152dc:	ad400404 	addi	r21,r21,16
   152e0:	003fbb06 	br	151d0 <__alt_data_end+0xf80151d0>
   152e4:	a009883a 	mov	r4,r20
   152e8:	0019bdc0 	call	19bdc <__malloc_unlock>
   152ec:	0005883a 	mov	r2,zero
   152f0:	003f0a06 	br	14f1c <__alt_data_end+0xf8014f1c>
   152f4:	a8c00417 	ldw	r3,16(r21)
   152f8:	ad400604 	addi	r21,r21,24
   152fc:	b0800804 	addi	r2,r22,32
   15300:	b0c00615 	stw	r3,24(r22)
   15304:	a8ffff17 	ldw	r3,-4(r21)
   15308:	b0c00715 	stw	r3,28(r22)
   1530c:	003fb006 	br	151d0 <__alt_data_end+0xf80151d0>

00015310 <__fpclassifyd>:
   15310:	00a00034 	movhi	r2,32768
   15314:	10bfffc4 	addi	r2,r2,-1
   15318:	2884703a 	and	r2,r5,r2
   1531c:	10000726 	beq	r2,zero,1533c <__fpclassifyd+0x2c>
   15320:	00fffc34 	movhi	r3,65520
   15324:	019ff834 	movhi	r6,32736
   15328:	28c7883a 	add	r3,r5,r3
   1532c:	31bfffc4 	addi	r6,r6,-1
   15330:	30c00536 	bltu	r6,r3,15348 <__fpclassifyd+0x38>
   15334:	00800104 	movi	r2,4
   15338:	f800283a 	ret
   1533c:	2000021e 	bne	r4,zero,15348 <__fpclassifyd+0x38>
   15340:	00800084 	movi	r2,2
   15344:	f800283a 	ret
   15348:	00dffc34 	movhi	r3,32752
   1534c:	019ff834 	movhi	r6,32736
   15350:	28cb883a 	add	r5,r5,r3
   15354:	31bfffc4 	addi	r6,r6,-1
   15358:	317ff62e 	bgeu	r6,r5,15334 <__alt_data_end+0xf8015334>
   1535c:	01400434 	movhi	r5,16
   15360:	297fffc4 	addi	r5,r5,-1
   15364:	28800236 	bltu	r5,r2,15370 <__fpclassifyd+0x60>
   15368:	008000c4 	movi	r2,3
   1536c:	f800283a 	ret
   15370:	10c00226 	beq	r2,r3,1537c <__fpclassifyd+0x6c>
   15374:	0005883a 	mov	r2,zero
   15378:	f800283a 	ret
   1537c:	2005003a 	cmpeq	r2,r4,zero
   15380:	f800283a 	ret

00015384 <__sread>:
   15384:	defffe04 	addi	sp,sp,-8
   15388:	dc000015 	stw	r16,0(sp)
   1538c:	2821883a 	mov	r16,r5
   15390:	2940038f 	ldh	r5,14(r5)
   15394:	dfc00115 	stw	ra,4(sp)
   15398:	00172400 	call	17240 <_read_r>
   1539c:	10000716 	blt	r2,zero,153bc <__sread+0x38>
   153a0:	80c01417 	ldw	r3,80(r16)
   153a4:	1887883a 	add	r3,r3,r2
   153a8:	80c01415 	stw	r3,80(r16)
   153ac:	dfc00117 	ldw	ra,4(sp)
   153b0:	dc000017 	ldw	r16,0(sp)
   153b4:	dec00204 	addi	sp,sp,8
   153b8:	f800283a 	ret
   153bc:	80c0030b 	ldhu	r3,12(r16)
   153c0:	18fbffcc 	andi	r3,r3,61439
   153c4:	80c0030d 	sth	r3,12(r16)
   153c8:	dfc00117 	ldw	ra,4(sp)
   153cc:	dc000017 	ldw	r16,0(sp)
   153d0:	dec00204 	addi	sp,sp,8
   153d4:	f800283a 	ret

000153d8 <__seofread>:
   153d8:	0005883a 	mov	r2,zero
   153dc:	f800283a 	ret

000153e0 <__swrite>:
   153e0:	2880030b 	ldhu	r2,12(r5)
   153e4:	defffb04 	addi	sp,sp,-20
   153e8:	dcc00315 	stw	r19,12(sp)
   153ec:	dc800215 	stw	r18,8(sp)
   153f0:	dc400115 	stw	r17,4(sp)
   153f4:	dc000015 	stw	r16,0(sp)
   153f8:	dfc00415 	stw	ra,16(sp)
   153fc:	10c0400c 	andi	r3,r2,256
   15400:	2821883a 	mov	r16,r5
   15404:	2023883a 	mov	r17,r4
   15408:	3025883a 	mov	r18,r6
   1540c:	3827883a 	mov	r19,r7
   15410:	18000526 	beq	r3,zero,15428 <__swrite+0x48>
   15414:	2940038f 	ldh	r5,14(r5)
   15418:	01c00084 	movi	r7,2
   1541c:	000d883a 	mov	r6,zero
   15420:	00171e00 	call	171e0 <_lseek_r>
   15424:	8080030b 	ldhu	r2,12(r16)
   15428:	8140038f 	ldh	r5,14(r16)
   1542c:	10bbffcc 	andi	r2,r2,61439
   15430:	980f883a 	mov	r7,r19
   15434:	900d883a 	mov	r6,r18
   15438:	8809883a 	mov	r4,r17
   1543c:	8080030d 	sth	r2,12(r16)
   15440:	dfc00417 	ldw	ra,16(sp)
   15444:	dcc00317 	ldw	r19,12(sp)
   15448:	dc800217 	ldw	r18,8(sp)
   1544c:	dc400117 	ldw	r17,4(sp)
   15450:	dc000017 	ldw	r16,0(sp)
   15454:	dec00504 	addi	sp,sp,20
   15458:	0016c941 	jmpi	16c94 <_write_r>

0001545c <__sseek>:
   1545c:	defffe04 	addi	sp,sp,-8
   15460:	dc000015 	stw	r16,0(sp)
   15464:	2821883a 	mov	r16,r5
   15468:	2940038f 	ldh	r5,14(r5)
   1546c:	dfc00115 	stw	ra,4(sp)
   15470:	00171e00 	call	171e0 <_lseek_r>
   15474:	00ffffc4 	movi	r3,-1
   15478:	10c00826 	beq	r2,r3,1549c <__sseek+0x40>
   1547c:	80c0030b 	ldhu	r3,12(r16)
   15480:	80801415 	stw	r2,80(r16)
   15484:	18c40014 	ori	r3,r3,4096
   15488:	80c0030d 	sth	r3,12(r16)
   1548c:	dfc00117 	ldw	ra,4(sp)
   15490:	dc000017 	ldw	r16,0(sp)
   15494:	dec00204 	addi	sp,sp,8
   15498:	f800283a 	ret
   1549c:	80c0030b 	ldhu	r3,12(r16)
   154a0:	18fbffcc 	andi	r3,r3,61439
   154a4:	80c0030d 	sth	r3,12(r16)
   154a8:	dfc00117 	ldw	ra,4(sp)
   154ac:	dc000017 	ldw	r16,0(sp)
   154b0:	dec00204 	addi	sp,sp,8
   154b4:	f800283a 	ret

000154b8 <__sclose>:
   154b8:	2940038f 	ldh	r5,14(r5)
   154bc:	0016cf41 	jmpi	16cf4 <_close_r>

000154c0 <strcmp>:
   154c0:	2144b03a 	or	r2,r4,r5
   154c4:	108000cc 	andi	r2,r2,3
   154c8:	1000171e 	bne	r2,zero,15528 <strcmp+0x68>
   154cc:	20800017 	ldw	r2,0(r4)
   154d0:	28c00017 	ldw	r3,0(r5)
   154d4:	10c0141e 	bne	r2,r3,15528 <strcmp+0x68>
   154d8:	027fbff4 	movhi	r9,65279
   154dc:	4a7fbfc4 	addi	r9,r9,-257
   154e0:	0086303a 	nor	r3,zero,r2
   154e4:	02202074 	movhi	r8,32897
   154e8:	1245883a 	add	r2,r2,r9
   154ec:	42202004 	addi	r8,r8,-32640
   154f0:	10c4703a 	and	r2,r2,r3
   154f4:	1204703a 	and	r2,r2,r8
   154f8:	10000226 	beq	r2,zero,15504 <strcmp+0x44>
   154fc:	00002306 	br	1558c <strcmp+0xcc>
   15500:	1000221e 	bne	r2,zero,1558c <strcmp+0xcc>
   15504:	21000104 	addi	r4,r4,4
   15508:	20c00017 	ldw	r3,0(r4)
   1550c:	29400104 	addi	r5,r5,4
   15510:	29800017 	ldw	r6,0(r5)
   15514:	1a4f883a 	add	r7,r3,r9
   15518:	00c4303a 	nor	r2,zero,r3
   1551c:	3884703a 	and	r2,r7,r2
   15520:	1204703a 	and	r2,r2,r8
   15524:	19bff626 	beq	r3,r6,15500 <__alt_data_end+0xf8015500>
   15528:	20800003 	ldbu	r2,0(r4)
   1552c:	10c03fcc 	andi	r3,r2,255
   15530:	18c0201c 	xori	r3,r3,128
   15534:	18ffe004 	addi	r3,r3,-128
   15538:	18000c26 	beq	r3,zero,1556c <strcmp+0xac>
   1553c:	29800007 	ldb	r6,0(r5)
   15540:	19800326 	beq	r3,r6,15550 <strcmp+0x90>
   15544:	00001306 	br	15594 <strcmp+0xd4>
   15548:	29800007 	ldb	r6,0(r5)
   1554c:	11800b1e 	bne	r2,r6,1557c <strcmp+0xbc>
   15550:	21000044 	addi	r4,r4,1
   15554:	20c00003 	ldbu	r3,0(r4)
   15558:	29400044 	addi	r5,r5,1
   1555c:	18803fcc 	andi	r2,r3,255
   15560:	1080201c 	xori	r2,r2,128
   15564:	10bfe004 	addi	r2,r2,-128
   15568:	103ff71e 	bne	r2,zero,15548 <__alt_data_end+0xf8015548>
   1556c:	0007883a 	mov	r3,zero
   15570:	28800003 	ldbu	r2,0(r5)
   15574:	1885c83a 	sub	r2,r3,r2
   15578:	f800283a 	ret
   1557c:	28800003 	ldbu	r2,0(r5)
   15580:	18c03fcc 	andi	r3,r3,255
   15584:	1885c83a 	sub	r2,r3,r2
   15588:	f800283a 	ret
   1558c:	0005883a 	mov	r2,zero
   15590:	f800283a 	ret
   15594:	10c03fcc 	andi	r3,r2,255
   15598:	003ff506 	br	15570 <__alt_data_end+0xf8015570>

0001559c <__sprint_r.part.0>:
   1559c:	28801917 	ldw	r2,100(r5)
   155a0:	defff604 	addi	sp,sp,-40
   155a4:	dd400515 	stw	r21,20(sp)
   155a8:	dfc00915 	stw	ra,36(sp)
   155ac:	df000815 	stw	fp,32(sp)
   155b0:	ddc00715 	stw	r23,28(sp)
   155b4:	dd800615 	stw	r22,24(sp)
   155b8:	dd000415 	stw	r20,16(sp)
   155bc:	dcc00315 	stw	r19,12(sp)
   155c0:	dc800215 	stw	r18,8(sp)
   155c4:	dc400115 	stw	r17,4(sp)
   155c8:	dc000015 	stw	r16,0(sp)
   155cc:	1088000c 	andi	r2,r2,8192
   155d0:	302b883a 	mov	r21,r6
   155d4:	10002e26 	beq	r2,zero,15690 <__sprint_r.part.0+0xf4>
   155d8:	30800217 	ldw	r2,8(r6)
   155dc:	35800017 	ldw	r22,0(r6)
   155e0:	10002926 	beq	r2,zero,15688 <__sprint_r.part.0+0xec>
   155e4:	2827883a 	mov	r19,r5
   155e8:	2029883a 	mov	r20,r4
   155ec:	b5c00104 	addi	r23,r22,4
   155f0:	04bfffc4 	movi	r18,-1
   155f4:	bc400017 	ldw	r17,0(r23)
   155f8:	b4000017 	ldw	r16,0(r22)
   155fc:	0039883a 	mov	fp,zero
   15600:	8822d0ba 	srli	r17,r17,2
   15604:	8800031e 	bne	r17,zero,15614 <__sprint_r.part.0+0x78>
   15608:	00001806 	br	1566c <__sprint_r.part.0+0xd0>
   1560c:	84000104 	addi	r16,r16,4
   15610:	8f001526 	beq	r17,fp,15668 <__sprint_r.part.0+0xcc>
   15614:	81400017 	ldw	r5,0(r16)
   15618:	980d883a 	mov	r6,r19
   1561c:	a009883a 	mov	r4,r20
   15620:	001708c0 	call	1708c <_fputwc_r>
   15624:	e7000044 	addi	fp,fp,1
   15628:	14bff81e 	bne	r2,r18,1560c <__alt_data_end+0xf801560c>
   1562c:	9005883a 	mov	r2,r18
   15630:	a8000215 	stw	zero,8(r21)
   15634:	a8000115 	stw	zero,4(r21)
   15638:	dfc00917 	ldw	ra,36(sp)
   1563c:	df000817 	ldw	fp,32(sp)
   15640:	ddc00717 	ldw	r23,28(sp)
   15644:	dd800617 	ldw	r22,24(sp)
   15648:	dd400517 	ldw	r21,20(sp)
   1564c:	dd000417 	ldw	r20,16(sp)
   15650:	dcc00317 	ldw	r19,12(sp)
   15654:	dc800217 	ldw	r18,8(sp)
   15658:	dc400117 	ldw	r17,4(sp)
   1565c:	dc000017 	ldw	r16,0(sp)
   15660:	dec00a04 	addi	sp,sp,40
   15664:	f800283a 	ret
   15668:	a8800217 	ldw	r2,8(r21)
   1566c:	8c63883a 	add	r17,r17,r17
   15670:	8c63883a 	add	r17,r17,r17
   15674:	1445c83a 	sub	r2,r2,r17
   15678:	a8800215 	stw	r2,8(r21)
   1567c:	b5800204 	addi	r22,r22,8
   15680:	bdc00204 	addi	r23,r23,8
   15684:	103fdb1e 	bne	r2,zero,155f4 <__alt_data_end+0xf80155f4>
   15688:	0005883a 	mov	r2,zero
   1568c:	003fe806 	br	15630 <__alt_data_end+0xf8015630>
   15690:	0012f5c0 	call	12f5c <__sfvwrite_r>
   15694:	003fe606 	br	15630 <__alt_data_end+0xf8015630>

00015698 <__sprint_r>:
   15698:	30c00217 	ldw	r3,8(r6)
   1569c:	18000126 	beq	r3,zero,156a4 <__sprint_r+0xc>
   156a0:	001559c1 	jmpi	1559c <__sprint_r.part.0>
   156a4:	30000115 	stw	zero,4(r6)
   156a8:	0005883a 	mov	r2,zero
   156ac:	f800283a 	ret

000156b0 <___vfiprintf_internal_r>:
   156b0:	deffca04 	addi	sp,sp,-216
   156b4:	dd403115 	stw	r21,196(sp)
   156b8:	dfc03515 	stw	ra,212(sp)
   156bc:	df003415 	stw	fp,208(sp)
   156c0:	ddc03315 	stw	r23,204(sp)
   156c4:	dd803215 	stw	r22,200(sp)
   156c8:	dd003015 	stw	r20,192(sp)
   156cc:	dcc02f15 	stw	r19,188(sp)
   156d0:	dc802e15 	stw	r18,184(sp)
   156d4:	dc402d15 	stw	r17,180(sp)
   156d8:	dc002c15 	stw	r16,176(sp)
   156dc:	d9002115 	stw	r4,132(sp)
   156e0:	d9402015 	stw	r5,128(sp)
   156e4:	d9c02215 	stw	r7,136(sp)
   156e8:	302b883a 	mov	r21,r6
   156ec:	20000226 	beq	r4,zero,156f8 <___vfiprintf_internal_r+0x48>
   156f0:	20800e17 	ldw	r2,56(r4)
   156f4:	1000cf26 	beq	r2,zero,15a34 <___vfiprintf_internal_r+0x384>
   156f8:	d8c02017 	ldw	r3,128(sp)
   156fc:	1880030b 	ldhu	r2,12(r3)
   15700:	10c8000c 	andi	r3,r2,8192
   15704:	1800071e 	bne	r3,zero,15724 <___vfiprintf_internal_r+0x74>
   15708:	d9402017 	ldw	r5,128(sp)
   1570c:	00f7ffc4 	movi	r3,-8193
   15710:	10880014 	ori	r2,r2,8192
   15714:	29001917 	ldw	r4,100(r5)
   15718:	2880030d 	sth	r2,12(r5)
   1571c:	20c6703a 	and	r3,r4,r3
   15720:	28c01915 	stw	r3,100(r5)
   15724:	10c0020c 	andi	r3,r2,8
   15728:	1800a526 	beq	r3,zero,159c0 <___vfiprintf_internal_r+0x310>
   1572c:	d9002017 	ldw	r4,128(sp)
   15730:	20c00417 	ldw	r3,16(r4)
   15734:	1800a226 	beq	r3,zero,159c0 <___vfiprintf_internal_r+0x310>
   15738:	1080068c 	andi	r2,r2,26
   1573c:	00c00284 	movi	r3,10
   15740:	10c0a826 	beq	r2,r3,159e4 <___vfiprintf_internal_r+0x334>
   15744:	d9001a04 	addi	r4,sp,104
   15748:	d94019c4 	addi	r5,sp,103
   1574c:	048000b4 	movhi	r18,2
   15750:	2145c83a 	sub	r2,r4,r5
   15754:	94b2e904 	addi	r18,r18,-13404
   15758:	d9001e15 	stw	r4,120(sp)
   1575c:	d9401f15 	stw	r5,124(sp)
   15760:	dec01a15 	stw	sp,104(sp)
   15764:	d8001c15 	stw	zero,112(sp)
   15768:	d8001b15 	stw	zero,108(sp)
   1576c:	d811883a 	mov	r8,sp
   15770:	d8002615 	stw	zero,152(sp)
   15774:	d8002415 	stw	zero,144(sp)
   15778:	d8802815 	stw	r2,160(sp)
   1577c:	a82d883a 	mov	r22,r21
   15780:	b0800007 	ldb	r2,0(r22)
   15784:	10040d26 	beq	r2,zero,167bc <___vfiprintf_internal_r+0x110c>
   15788:	00c00944 	movi	r3,37
   1578c:	b029883a 	mov	r20,r22
   15790:	10c0021e 	bne	r2,r3,1579c <___vfiprintf_internal_r+0xec>
   15794:	00001606 	br	157f0 <___vfiprintf_internal_r+0x140>
   15798:	10c00326 	beq	r2,r3,157a8 <___vfiprintf_internal_r+0xf8>
   1579c:	a5000044 	addi	r20,r20,1
   157a0:	a0800007 	ldb	r2,0(r20)
   157a4:	103ffc1e 	bne	r2,zero,15798 <__alt_data_end+0xf8015798>
   157a8:	a5a1c83a 	sub	r16,r20,r22
   157ac:	80001026 	beq	r16,zero,157f0 <___vfiprintf_internal_r+0x140>
   157b0:	d8c01c17 	ldw	r3,112(sp)
   157b4:	d8801b17 	ldw	r2,108(sp)
   157b8:	45800015 	stw	r22,0(r8)
   157bc:	80c7883a 	add	r3,r16,r3
   157c0:	10800044 	addi	r2,r2,1
   157c4:	44000115 	stw	r16,4(r8)
   157c8:	d8c01c15 	stw	r3,112(sp)
   157cc:	d8801b15 	stw	r2,108(sp)
   157d0:	010001c4 	movi	r4,7
   157d4:	2080750e 	bge	r4,r2,159ac <___vfiprintf_internal_r+0x2fc>
   157d8:	1803951e 	bne	r3,zero,16630 <___vfiprintf_internal_r+0xf80>
   157dc:	d8c02417 	ldw	r3,144(sp)
   157e0:	d8001b15 	stw	zero,108(sp)
   157e4:	d811883a 	mov	r8,sp
   157e8:	1c07883a 	add	r3,r3,r16
   157ec:	d8c02415 	stw	r3,144(sp)
   157f0:	a0800007 	ldb	r2,0(r20)
   157f4:	1002e026 	beq	r2,zero,16378 <___vfiprintf_internal_r+0xcc8>
   157f8:	a5800044 	addi	r22,r20,1
   157fc:	a0c00047 	ldb	r3,1(r20)
   15800:	d8001d85 	stb	zero,118(sp)
   15804:	0027883a 	mov	r19,zero
   15808:	d8002305 	stb	zero,140(sp)
   1580c:	043fffc4 	movi	r16,-1
   15810:	d8002515 	stw	zero,148(sp)
   15814:	0023883a 	mov	r17,zero
   15818:	05001604 	movi	r20,88
   1581c:	05400244 	movi	r21,9
   15820:	402f883a 	mov	r23,r8
   15824:	b5800044 	addi	r22,r22,1
   15828:	18bff804 	addi	r2,r3,-32
   1582c:	a0827736 	bltu	r20,r2,1620c <___vfiprintf_internal_r+0xb5c>
   15830:	100490ba 	slli	r2,r2,2
   15834:	01000074 	movhi	r4,1
   15838:	21161204 	addi	r4,r4,22600
   1583c:	1105883a 	add	r2,r2,r4
   15840:	10800017 	ldw	r2,0(r2)
   15844:	1000683a 	jmp	r2
   15848:	00015f0c 	andi	zero,zero,1404
   1584c:	0001620c 	andi	zero,zero,1416
   15850:	0001620c 	andi	zero,zero,1416
   15854:	00015f28 	cmpgeui	zero,zero,1404
   15858:	0001620c 	andi	zero,zero,1416
   1585c:	0001620c 	andi	zero,zero,1416
   15860:	0001620c 	andi	zero,zero,1416
   15864:	0001620c 	andi	zero,zero,1416
   15868:	0001620c 	andi	zero,zero,1416
   1586c:	0001620c 	andi	zero,zero,1416
   15870:	00016130 	cmpltui	zero,zero,1412
   15874:	00016154 	movui	zero,1413
   15878:	0001620c 	andi	zero,zero,1416
   1587c:	00015a4c 	andi	zero,zero,1385
   15880:	00016168 	cmpgeui	zero,zero,1413
   15884:	0001620c 	andi	zero,zero,1416
   15888:	00015f34 	movhi	zero,1404
   1588c:	00015f40 	call	15f4 <Keyboard_INIT+0xfc0>
   15890:	00015f40 	call	15f4 <Keyboard_INIT+0xfc0>
   15894:	00015f40 	call	15f4 <Keyboard_INIT+0xfc0>
   15898:	00015f40 	call	15f4 <Keyboard_INIT+0xfc0>
   1589c:	00015f40 	call	15f4 <Keyboard_INIT+0xfc0>
   158a0:	00015f40 	call	15f4 <Keyboard_INIT+0xfc0>
   158a4:	00015f40 	call	15f4 <Keyboard_INIT+0xfc0>
   158a8:	00015f40 	call	15f4 <Keyboard_INIT+0xfc0>
   158ac:	00015f40 	call	15f4 <Keyboard_INIT+0xfc0>
   158b0:	0001620c 	andi	zero,zero,1416
   158b4:	0001620c 	andi	zero,zero,1416
   158b8:	0001620c 	andi	zero,zero,1416
   158bc:	0001620c 	andi	zero,zero,1416
   158c0:	0001620c 	andi	zero,zero,1416
   158c4:	0001620c 	andi	zero,zero,1416
   158c8:	0001620c 	andi	zero,zero,1416
   158cc:	0001620c 	andi	zero,zero,1416
   158d0:	0001620c 	andi	zero,zero,1416
   158d4:	0001620c 	andi	zero,zero,1416
   158d8:	00015f80 	call	15f8 <Keyboard_INIT+0xfc4>
   158dc:	0001620c 	andi	zero,zero,1416
   158e0:	0001620c 	andi	zero,zero,1416
   158e4:	0001620c 	andi	zero,zero,1416
   158e8:	0001620c 	andi	zero,zero,1416
   158ec:	0001620c 	andi	zero,zero,1416
   158f0:	0001620c 	andi	zero,zero,1416
   158f4:	0001620c 	andi	zero,zero,1416
   158f8:	0001620c 	andi	zero,zero,1416
   158fc:	0001620c 	andi	zero,zero,1416
   15900:	0001620c 	andi	zero,zero,1416
   15904:	00015fbc 	xorhi	zero,zero,1406
   15908:	0001620c 	andi	zero,zero,1416
   1590c:	0001620c 	andi	zero,zero,1416
   15910:	0001620c 	andi	zero,zero,1416
   15914:	0001620c 	andi	zero,zero,1416
   15918:	0001620c 	andi	zero,zero,1416
   1591c:	00016018 	cmpnei	zero,zero,1408
   15920:	0001620c 	andi	zero,zero,1416
   15924:	0001620c 	andi	zero,zero,1416
   15928:	0001608c 	andi	zero,zero,1410
   1592c:	0001620c 	andi	zero,zero,1416
   15930:	0001620c 	andi	zero,zero,1416
   15934:	0001620c 	andi	zero,zero,1416
   15938:	0001620c 	andi	zero,zero,1416
   1593c:	0001620c 	andi	zero,zero,1416
   15940:	0001620c 	andi	zero,zero,1416
   15944:	0001620c 	andi	zero,zero,1416
   15948:	0001620c 	andi	zero,zero,1416
   1594c:	0001620c 	andi	zero,zero,1416
   15950:	0001620c 	andi	zero,zero,1416
   15954:	00015e34 	movhi	zero,1400
   15958:	00015e64 	muli	zero,zero,1401
   1595c:	0001620c 	andi	zero,zero,1416
   15960:	0001620c 	andi	zero,zero,1416
   15964:	0001620c 	andi	zero,zero,1416
   15968:	000161b4 	movhi	zero,1414
   1596c:	00015e64 	muli	zero,zero,1401
   15970:	0001620c 	andi	zero,zero,1416
   15974:	0001620c 	andi	zero,zero,1416
   15978:	00015d0c 	andi	zero,zero,1396
   1597c:	0001620c 	andi	zero,zero,1416
   15980:	00015d20 	cmpeqi	zero,zero,1396
   15984:	00015d58 	cmpnei	zero,zero,1397
   15988:	00015a58 	cmpnei	zero,zero,1385
   1598c:	00015d00 	call	15d0 <Keyboard_INIT+0xf9c>
   15990:	0001620c 	andi	zero,zero,1416
   15994:	000160cc 	andi	zero,zero,1411
   15998:	0001620c 	andi	zero,zero,1416
   1599c:	00016118 	cmpnei	zero,zero,1412
   159a0:	0001620c 	andi	zero,zero,1416
   159a4:	0001620c 	andi	zero,zero,1416
   159a8:	00015ddc 	xori	zero,zero,1399
   159ac:	42000204 	addi	r8,r8,8
   159b0:	d8c02417 	ldw	r3,144(sp)
   159b4:	1c07883a 	add	r3,r3,r16
   159b8:	d8c02415 	stw	r3,144(sp)
   159bc:	003f8c06 	br	157f0 <__alt_data_end+0xf80157f0>
   159c0:	d9402017 	ldw	r5,128(sp)
   159c4:	d9002117 	ldw	r4,132(sp)
   159c8:	0010acc0 	call	10acc <__swsetup_r>
   159cc:	1003c11e 	bne	r2,zero,168d4 <___vfiprintf_internal_r+0x1224>
   159d0:	d9402017 	ldw	r5,128(sp)
   159d4:	00c00284 	movi	r3,10
   159d8:	2880030b 	ldhu	r2,12(r5)
   159dc:	1080068c 	andi	r2,r2,26
   159e0:	10ff581e 	bne	r2,r3,15744 <__alt_data_end+0xf8015744>
   159e4:	d8c02017 	ldw	r3,128(sp)
   159e8:	1880038f 	ldh	r2,14(r3)
   159ec:	103f5516 	blt	r2,zero,15744 <__alt_data_end+0xf8015744>
   159f0:	d9c02217 	ldw	r7,136(sp)
   159f4:	d9002117 	ldw	r4,132(sp)
   159f8:	a80d883a 	mov	r6,r21
   159fc:	180b883a 	mov	r5,r3
   15a00:	0016bd80 	call	16bd8 <__sbprintf>
   15a04:	dfc03517 	ldw	ra,212(sp)
   15a08:	df003417 	ldw	fp,208(sp)
   15a0c:	ddc03317 	ldw	r23,204(sp)
   15a10:	dd803217 	ldw	r22,200(sp)
   15a14:	dd403117 	ldw	r21,196(sp)
   15a18:	dd003017 	ldw	r20,192(sp)
   15a1c:	dcc02f17 	ldw	r19,188(sp)
   15a20:	dc802e17 	ldw	r18,184(sp)
   15a24:	dc402d17 	ldw	r17,180(sp)
   15a28:	dc002c17 	ldw	r16,176(sp)
   15a2c:	dec03604 	addi	sp,sp,216
   15a30:	f800283a 	ret
   15a34:	0012ad80 	call	12ad8 <__sinit>
   15a38:	003f2f06 	br	156f8 <__alt_data_end+0xf80156f8>
   15a3c:	d8c02517 	ldw	r3,148(sp)
   15a40:	d8802215 	stw	r2,136(sp)
   15a44:	00c7c83a 	sub	r3,zero,r3
   15a48:	d8c02515 	stw	r3,148(sp)
   15a4c:	8c400114 	ori	r17,r17,4
   15a50:	b0c00007 	ldb	r3,0(r22)
   15a54:	003f7306 	br	15824 <__alt_data_end+0xf8015824>
   15a58:	00800c04 	movi	r2,48
   15a5c:	d9402217 	ldw	r5,136(sp)
   15a60:	d8801d05 	stb	r2,116(sp)
   15a64:	00801e04 	movi	r2,120
   15a68:	d8801d45 	stb	r2,117(sp)
   15a6c:	d8001d85 	stb	zero,118(sp)
   15a70:	b811883a 	mov	r8,r23
   15a74:	28c00104 	addi	r3,r5,4
   15a78:	2cc00017 	ldw	r19,0(r5)
   15a7c:	0029883a 	mov	r20,zero
   15a80:	88800094 	ori	r2,r17,2
   15a84:	80032516 	blt	r16,zero,1671c <___vfiprintf_internal_r+0x106c>
   15a88:	00bfdfc4 	movi	r2,-129
   15a8c:	88a2703a 	and	r17,r17,r2
   15a90:	d8c02215 	stw	r3,136(sp)
   15a94:	8c400094 	ori	r17,r17,2
   15a98:	98032a1e 	bne	r19,zero,16744 <___vfiprintf_internal_r+0x1094>
   15a9c:	008000b4 	movhi	r2,2
   15aa0:	10b28904 	addi	r2,r2,-13788
   15aa4:	d8802615 	stw	r2,152(sp)
   15aa8:	002b883a 	mov	r21,zero
   15aac:	8001741e 	bne	r16,zero,16080 <___vfiprintf_internal_r+0x9d0>
   15ab0:	0021883a 	mov	r16,zero
   15ab4:	0029883a 	mov	r20,zero
   15ab8:	ddc01a04 	addi	r23,sp,104
   15abc:	8027883a 	mov	r19,r16
   15ac0:	8500010e 	bge	r16,r20,15ac8 <___vfiprintf_internal_r+0x418>
   15ac4:	a027883a 	mov	r19,r20
   15ac8:	ad403fcc 	andi	r21,r21,255
   15acc:	ad40201c 	xori	r21,r21,128
   15ad0:	ad7fe004 	addi	r21,r21,-128
   15ad4:	a8000126 	beq	r21,zero,15adc <___vfiprintf_internal_r+0x42c>
   15ad8:	9cc00044 	addi	r19,r19,1
   15adc:	89c0008c 	andi	r7,r17,2
   15ae0:	38000126 	beq	r7,zero,15ae8 <___vfiprintf_internal_r+0x438>
   15ae4:	9cc00084 	addi	r19,r19,2
   15ae8:	88c0210c 	andi	r3,r17,132
   15aec:	1801dd1e 	bne	r3,zero,16264 <___vfiprintf_internal_r+0xbb4>
   15af0:	d9402517 	ldw	r5,148(sp)
   15af4:	2cebc83a 	sub	r21,r5,r19
   15af8:	0541da0e 	bge	zero,r21,16264 <___vfiprintf_internal_r+0xbb4>
   15afc:	07000404 	movi	fp,16
   15b00:	d8801c17 	ldw	r2,112(sp)
   15b04:	e543be0e 	bge	fp,r21,16a00 <___vfiprintf_internal_r+0x1350>
   15b08:	014000b4 	movhi	r5,2
   15b0c:	2972ed04 	addi	r5,r5,-13388
   15b10:	dc002715 	stw	r16,156(sp)
   15b14:	d9801b17 	ldw	r6,108(sp)
   15b18:	a821883a 	mov	r16,r21
   15b1c:	d9402315 	stw	r5,140(sp)
   15b20:	028001c4 	movi	r10,7
   15b24:	d9c02915 	stw	r7,164(sp)
   15b28:	182b883a 	mov	r21,r3
   15b2c:	00000506 	br	15b44 <___vfiprintf_internal_r+0x494>
   15b30:	31000084 	addi	r4,r6,2
   15b34:	42000204 	addi	r8,r8,8
   15b38:	180d883a 	mov	r6,r3
   15b3c:	843ffc04 	addi	r16,r16,-16
   15b40:	e4000f0e 	bge	fp,r16,15b80 <___vfiprintf_internal_r+0x4d0>
   15b44:	010000b4 	movhi	r4,2
   15b48:	10800404 	addi	r2,r2,16
   15b4c:	30c00044 	addi	r3,r6,1
   15b50:	2132ed04 	addi	r4,r4,-13388
   15b54:	41000015 	stw	r4,0(r8)
   15b58:	47000115 	stw	fp,4(r8)
   15b5c:	d8801c15 	stw	r2,112(sp)
   15b60:	d8c01b15 	stw	r3,108(sp)
   15b64:	50fff20e 	bge	r10,r3,15b30 <__alt_data_end+0xf8015b30>
   15b68:	1001b21e 	bne	r2,zero,16234 <___vfiprintf_internal_r+0xb84>
   15b6c:	843ffc04 	addi	r16,r16,-16
   15b70:	000d883a 	mov	r6,zero
   15b74:	01000044 	movi	r4,1
   15b78:	d811883a 	mov	r8,sp
   15b7c:	e43ff116 	blt	fp,r16,15b44 <__alt_data_end+0xf8015b44>
   15b80:	a807883a 	mov	r3,r21
   15b84:	d9c02917 	ldw	r7,164(sp)
   15b88:	802b883a 	mov	r21,r16
   15b8c:	dc002717 	ldw	r16,156(sp)
   15b90:	d9402317 	ldw	r5,140(sp)
   15b94:	a885883a 	add	r2,r21,r2
   15b98:	45400115 	stw	r21,4(r8)
   15b9c:	41400015 	stw	r5,0(r8)
   15ba0:	d8801c15 	stw	r2,112(sp)
   15ba4:	d9001b15 	stw	r4,108(sp)
   15ba8:	014001c4 	movi	r5,7
   15bac:	29026216 	blt	r5,r4,16538 <___vfiprintf_internal_r+0xe88>
   15bb0:	d9801d87 	ldb	r6,118(sp)
   15bb4:	42000204 	addi	r8,r8,8
   15bb8:	21400044 	addi	r5,r4,1
   15bbc:	3001ae1e 	bne	r6,zero,16278 <___vfiprintf_internal_r+0xbc8>
   15bc0:	3801bb26 	beq	r7,zero,162b0 <___vfiprintf_internal_r+0xc00>
   15bc4:	d9001d04 	addi	r4,sp,116
   15bc8:	10800084 	addi	r2,r2,2
   15bcc:	41000015 	stw	r4,0(r8)
   15bd0:	01000084 	movi	r4,2
   15bd4:	41000115 	stw	r4,4(r8)
   15bd8:	d8801c15 	stw	r2,112(sp)
   15bdc:	d9401b15 	stw	r5,108(sp)
   15be0:	010001c4 	movi	r4,7
   15be4:	2142680e 	bge	r4,r5,16588 <___vfiprintf_internal_r+0xed8>
   15be8:	1002b11e 	bne	r2,zero,166b0 <___vfiprintf_internal_r+0x1000>
   15bec:	01802004 	movi	r6,128
   15bf0:	01400044 	movi	r5,1
   15bf4:	0009883a 	mov	r4,zero
   15bf8:	d811883a 	mov	r8,sp
   15bfc:	1981ae1e 	bne	r3,r6,162b8 <___vfiprintf_internal_r+0xc08>
   15c00:	d8c02517 	ldw	r3,148(sp)
   15c04:	1cf9c83a 	sub	fp,r3,r19
   15c08:	0701ab0e 	bge	zero,fp,162b8 <___vfiprintf_internal_r+0xc08>
   15c0c:	05400404 	movi	r21,16
   15c10:	af03a90e 	bge	r21,fp,16ab8 <___vfiprintf_internal_r+0x1408>
   15c14:	014000b4 	movhi	r5,2
   15c18:	2972e904 	addi	r5,r5,-13404
   15c1c:	d9402315 	stw	r5,140(sp)
   15c20:	01c001c4 	movi	r7,7
   15c24:	00000506 	br	15c3c <___vfiprintf_internal_r+0x58c>
   15c28:	21800084 	addi	r6,r4,2
   15c2c:	42000204 	addi	r8,r8,8
   15c30:	1809883a 	mov	r4,r3
   15c34:	e73ffc04 	addi	fp,fp,-16
   15c38:	af000d0e 	bge	r21,fp,15c70 <___vfiprintf_internal_r+0x5c0>
   15c3c:	10800404 	addi	r2,r2,16
   15c40:	20c00044 	addi	r3,r4,1
   15c44:	44800015 	stw	r18,0(r8)
   15c48:	45400115 	stw	r21,4(r8)
   15c4c:	d8801c15 	stw	r2,112(sp)
   15c50:	d8c01b15 	stw	r3,108(sp)
   15c54:	38fff40e 	bge	r7,r3,15c28 <__alt_data_end+0xf8015c28>
   15c58:	10022b1e 	bne	r2,zero,16508 <___vfiprintf_internal_r+0xe58>
   15c5c:	e73ffc04 	addi	fp,fp,-16
   15c60:	01800044 	movi	r6,1
   15c64:	0009883a 	mov	r4,zero
   15c68:	d811883a 	mov	r8,sp
   15c6c:	af3ff316 	blt	r21,fp,15c3c <__alt_data_end+0xf8015c3c>
   15c70:	d8c02317 	ldw	r3,140(sp)
   15c74:	1705883a 	add	r2,r2,fp
   15c78:	47000115 	stw	fp,4(r8)
   15c7c:	40c00015 	stw	r3,0(r8)
   15c80:	d8801c15 	stw	r2,112(sp)
   15c84:	d9801b15 	stw	r6,108(sp)
   15c88:	00c001c4 	movi	r3,7
   15c8c:	19829416 	blt	r3,r6,166e0 <___vfiprintf_internal_r+0x1030>
   15c90:	8521c83a 	sub	r16,r16,r20
   15c94:	42000204 	addi	r8,r8,8
   15c98:	31400044 	addi	r5,r6,1
   15c9c:	3009883a 	mov	r4,r6
   15ca0:	04018716 	blt	zero,r16,162c0 <___vfiprintf_internal_r+0xc10>
   15ca4:	a085883a 	add	r2,r20,r2
   15ca8:	45c00015 	stw	r23,0(r8)
   15cac:	45000115 	stw	r20,4(r8)
   15cb0:	d8801c15 	stw	r2,112(sp)
   15cb4:	d9401b15 	stw	r5,108(sp)
   15cb8:	00c001c4 	movi	r3,7
   15cbc:	1941c20e 	bge	r3,r5,163c8 <___vfiprintf_internal_r+0xd18>
   15cc0:	1002531e 	bne	r2,zero,16610 <___vfiprintf_internal_r+0xf60>
   15cc4:	d8001b15 	stw	zero,108(sp)
   15cc8:	8c40010c 	andi	r17,r17,4
   15ccc:	88023226 	beq	r17,zero,16598 <___vfiprintf_internal_r+0xee8>
   15cd0:	d9002517 	ldw	r4,148(sp)
   15cd4:	24e3c83a 	sub	r17,r4,r19
   15cd8:	04432916 	blt	zero,r17,16980 <___vfiprintf_internal_r+0x12d0>
   15cdc:	d8802517 	ldw	r2,148(sp)
   15ce0:	14c0010e 	bge	r2,r19,15ce8 <___vfiprintf_internal_r+0x638>
   15ce4:	9805883a 	mov	r2,r19
   15ce8:	d8c02417 	ldw	r3,144(sp)
   15cec:	1887883a 	add	r3,r3,r2
   15cf0:	d8c02415 	stw	r3,144(sp)
   15cf4:	d8001b15 	stw	zero,108(sp)
   15cf8:	d811883a 	mov	r8,sp
   15cfc:	003ea006 	br	15780 <__alt_data_end+0xf8015780>
   15d00:	8c400814 	ori	r17,r17,32
   15d04:	b0c00007 	ldb	r3,0(r22)
   15d08:	003ec606 	br	15824 <__alt_data_end+0xf8015824>
   15d0c:	b0c00007 	ldb	r3,0(r22)
   15d10:	00801b04 	movi	r2,108
   15d14:	18832026 	beq	r3,r2,16998 <___vfiprintf_internal_r+0x12e8>
   15d18:	8c400414 	ori	r17,r17,16
   15d1c:	003ec106 	br	15824 <__alt_data_end+0xf8015824>
   15d20:	9cc03fcc 	andi	r19,r19,255
   15d24:	b811883a 	mov	r8,r23
   15d28:	9803981e 	bne	r19,zero,16b8c <___vfiprintf_internal_r+0x14dc>
   15d2c:	8880080c 	andi	r2,r17,32
   15d30:	1002be26 	beq	r2,zero,1682c <___vfiprintf_internal_r+0x117c>
   15d34:	d9002217 	ldw	r4,136(sp)
   15d38:	d9402417 	ldw	r5,144(sp)
   15d3c:	20800017 	ldw	r2,0(r4)
   15d40:	2807d7fa 	srai	r3,r5,31
   15d44:	21000104 	addi	r4,r4,4
   15d48:	d9002215 	stw	r4,136(sp)
   15d4c:	11400015 	stw	r5,0(r2)
   15d50:	10c00115 	stw	r3,4(r2)
   15d54:	003e8a06 	br	15780 <__alt_data_end+0xf8015780>
   15d58:	9cc03fcc 	andi	r19,r19,255
   15d5c:	b811883a 	mov	r8,r23
   15d60:	9803871e 	bne	r19,zero,16b80 <___vfiprintf_internal_r+0x14d0>
   15d64:	8880080c 	andi	r2,r17,32
   15d68:	10009a26 	beq	r2,zero,15fd4 <___vfiprintf_internal_r+0x924>
   15d6c:	d9002217 	ldw	r4,136(sp)
   15d70:	d8001d85 	stb	zero,118(sp)
   15d74:	20800204 	addi	r2,r4,8
   15d78:	24c00017 	ldw	r19,0(r4)
   15d7c:	25000117 	ldw	r20,4(r4)
   15d80:	8002a416 	blt	r16,zero,16814 <___vfiprintf_internal_r+0x1164>
   15d84:	013fdfc4 	movi	r4,-129
   15d88:	9d06b03a 	or	r3,r19,r20
   15d8c:	d8802215 	stw	r2,136(sp)
   15d90:	8922703a 	and	r17,r17,r4
   15d94:	18009b26 	beq	r3,zero,16004 <___vfiprintf_internal_r+0x954>
   15d98:	002b883a 	mov	r21,zero
   15d9c:	ddc01a04 	addi	r23,sp,104
   15da0:	9806d0fa 	srli	r3,r19,3
   15da4:	a008977a 	slli	r4,r20,29
   15da8:	a028d0fa 	srli	r20,r20,3
   15dac:	9cc001cc 	andi	r19,r19,7
   15db0:	98800c04 	addi	r2,r19,48
   15db4:	bdffffc4 	addi	r23,r23,-1
   15db8:	20e6b03a 	or	r19,r4,r3
   15dbc:	b8800005 	stb	r2,0(r23)
   15dc0:	9d06b03a 	or	r3,r19,r20
   15dc4:	183ff61e 	bne	r3,zero,15da0 <__alt_data_end+0xf8015da0>
   15dc8:	88c0004c 	andi	r3,r17,1
   15dcc:	18021f1e 	bne	r3,zero,1664c <___vfiprintf_internal_r+0xf9c>
   15dd0:	d9401e17 	ldw	r5,120(sp)
   15dd4:	2de9c83a 	sub	r20,r5,r23
   15dd8:	003f3806 	br	15abc <__alt_data_end+0xf8015abc>
   15ddc:	9cc03fcc 	andi	r19,r19,255
   15de0:	b811883a 	mov	r8,r23
   15de4:	98034f1e 	bne	r19,zero,16b24 <___vfiprintf_internal_r+0x1474>
   15de8:	008000b4 	movhi	r2,2
   15dec:	10b28904 	addi	r2,r2,-13788
   15df0:	d8802615 	stw	r2,152(sp)
   15df4:	8880080c 	andi	r2,r17,32
   15df8:	1000ac26 	beq	r2,zero,160ac <___vfiprintf_internal_r+0x9fc>
   15dfc:	d9002217 	ldw	r4,136(sp)
   15e00:	24c00017 	ldw	r19,0(r4)
   15e04:	25000117 	ldw	r20,4(r4)
   15e08:	21000204 	addi	r4,r4,8
   15e0c:	d9002215 	stw	r4,136(sp)
   15e10:	8880004c 	andi	r2,r17,1
   15e14:	1001e726 	beq	r2,zero,165b4 <___vfiprintf_internal_r+0xf04>
   15e18:	9d04b03a 	or	r2,r19,r20
   15e1c:	10025c1e 	bne	r2,zero,16790 <___vfiprintf_internal_r+0x10e0>
   15e20:	d8001d85 	stb	zero,118(sp)
   15e24:	80024416 	blt	r16,zero,16738 <___vfiprintf_internal_r+0x1088>
   15e28:	00bfdfc4 	movi	r2,-129
   15e2c:	88a2703a 	and	r17,r17,r2
   15e30:	003f1d06 	br	15aa8 <__alt_data_end+0xf8015aa8>
   15e34:	d8c02217 	ldw	r3,136(sp)
   15e38:	04c00044 	movi	r19,1
   15e3c:	b811883a 	mov	r8,r23
   15e40:	18800017 	ldw	r2,0(r3)
   15e44:	18c00104 	addi	r3,r3,4
   15e48:	d8001d85 	stb	zero,118(sp)
   15e4c:	d8801005 	stb	r2,64(sp)
   15e50:	d8c02215 	stw	r3,136(sp)
   15e54:	9829883a 	mov	r20,r19
   15e58:	ddc01004 	addi	r23,sp,64
   15e5c:	0021883a 	mov	r16,zero
   15e60:	003f1e06 	br	15adc <__alt_data_end+0xf8015adc>
   15e64:	9cc03fcc 	andi	r19,r19,255
   15e68:	b811883a 	mov	r8,r23
   15e6c:	9803331e 	bne	r19,zero,16b3c <___vfiprintf_internal_r+0x148c>
   15e70:	8880080c 	andi	r2,r17,32
   15e74:	10004826 	beq	r2,zero,15f98 <___vfiprintf_internal_r+0x8e8>
   15e78:	d9002217 	ldw	r4,136(sp)
   15e7c:	20800117 	ldw	r2,4(r4)
   15e80:	24c00017 	ldw	r19,0(r4)
   15e84:	21000204 	addi	r4,r4,8
   15e88:	d9002215 	stw	r4,136(sp)
   15e8c:	1029883a 	mov	r20,r2
   15e90:	10024c16 	blt	r2,zero,167c4 <___vfiprintf_internal_r+0x1114>
   15e94:	dd401d83 	ldbu	r21,118(sp)
   15e98:	80007116 	blt	r16,zero,16060 <___vfiprintf_internal_r+0x9b0>
   15e9c:	00ffdfc4 	movi	r3,-129
   15ea0:	9d04b03a 	or	r2,r19,r20
   15ea4:	88e2703a 	and	r17,r17,r3
   15ea8:	1000d126 	beq	r2,zero,161f0 <___vfiprintf_internal_r+0xb40>
   15eac:	a0023526 	beq	r20,zero,16784 <___vfiprintf_internal_r+0x10d4>
   15eb0:	ddc01a04 	addi	r23,sp,104
   15eb4:	4039883a 	mov	fp,r8
   15eb8:	9809883a 	mov	r4,r19
   15ebc:	a00b883a 	mov	r5,r20
   15ec0:	01800284 	movi	r6,10
   15ec4:	000f883a 	mov	r7,zero
   15ec8:	0017ce80 	call	17ce8 <__umoddi3>
   15ecc:	10800c04 	addi	r2,r2,48
   15ed0:	bdffffc4 	addi	r23,r23,-1
   15ed4:	9809883a 	mov	r4,r19
   15ed8:	a00b883a 	mov	r5,r20
   15edc:	b8800005 	stb	r2,0(r23)
   15ee0:	01800284 	movi	r6,10
   15ee4:	000f883a 	mov	r7,zero
   15ee8:	00176ec0 	call	176ec <__udivdi3>
   15eec:	1027883a 	mov	r19,r2
   15ef0:	10c4b03a 	or	r2,r2,r3
   15ef4:	1829883a 	mov	r20,r3
   15ef8:	103fef1e 	bne	r2,zero,15eb8 <__alt_data_end+0xf8015eb8>
   15efc:	d9001e17 	ldw	r4,120(sp)
   15f00:	e011883a 	mov	r8,fp
   15f04:	25e9c83a 	sub	r20,r4,r23
   15f08:	003eec06 	br	15abc <__alt_data_end+0xf8015abc>
   15f0c:	d8802307 	ldb	r2,140(sp)
   15f10:	1002361e 	bne	r2,zero,167ec <___vfiprintf_internal_r+0x113c>
   15f14:	00c00804 	movi	r3,32
   15f18:	d8c02305 	stb	r3,140(sp)
   15f1c:	04c00044 	movi	r19,1
   15f20:	b0c00007 	ldb	r3,0(r22)
   15f24:	003e3f06 	br	15824 <__alt_data_end+0xf8015824>
   15f28:	8c400054 	ori	r17,r17,1
   15f2c:	b0c00007 	ldb	r3,0(r22)
   15f30:	003e3c06 	br	15824 <__alt_data_end+0xf8015824>
   15f34:	8c402014 	ori	r17,r17,128
   15f38:	b0c00007 	ldb	r3,0(r22)
   15f3c:	003e3906 	br	15824 <__alt_data_end+0xf8015824>
   15f40:	dc002715 	stw	r16,156(sp)
   15f44:	d8002515 	stw	zero,148(sp)
   15f48:	1f3ff404 	addi	fp,r3,-48
   15f4c:	0009883a 	mov	r4,zero
   15f50:	b021883a 	mov	r16,r22
   15f54:	01400284 	movi	r5,10
   15f58:	000c68c0 	call	c68c <__mulsi3>
   15f5c:	80c00007 	ldb	r3,0(r16)
   15f60:	e089883a 	add	r4,fp,r2
   15f64:	b5800044 	addi	r22,r22,1
   15f68:	1f3ff404 	addi	fp,r3,-48
   15f6c:	b021883a 	mov	r16,r22
   15f70:	af3ff82e 	bgeu	r21,fp,15f54 <__alt_data_end+0xf8015f54>
   15f74:	d9002515 	stw	r4,148(sp)
   15f78:	dc002717 	ldw	r16,156(sp)
   15f7c:	003e2a06 	br	15828 <__alt_data_end+0xf8015828>
   15f80:	9cc03fcc 	andi	r19,r19,255
   15f84:	b811883a 	mov	r8,r23
   15f88:	9802e91e 	bne	r19,zero,16b30 <___vfiprintf_internal_r+0x1480>
   15f8c:	8c400414 	ori	r17,r17,16
   15f90:	8880080c 	andi	r2,r17,32
   15f94:	103fb81e 	bne	r2,zero,15e78 <__alt_data_end+0xf8015e78>
   15f98:	8880040c 	andi	r2,r17,16
   15f9c:	10022e26 	beq	r2,zero,16858 <___vfiprintf_internal_r+0x11a8>
   15fa0:	d9402217 	ldw	r5,136(sp)
   15fa4:	2cc00017 	ldw	r19,0(r5)
   15fa8:	29400104 	addi	r5,r5,4
   15fac:	d9402215 	stw	r5,136(sp)
   15fb0:	9829d7fa 	srai	r20,r19,31
   15fb4:	a005883a 	mov	r2,r20
   15fb8:	003fb506 	br	15e90 <__alt_data_end+0xf8015e90>
   15fbc:	9cc03fcc 	andi	r19,r19,255
   15fc0:	b811883a 	mov	r8,r23
   15fc4:	9802fa1e 	bne	r19,zero,16bb0 <___vfiprintf_internal_r+0x1500>
   15fc8:	8c400414 	ori	r17,r17,16
   15fcc:	8880080c 	andi	r2,r17,32
   15fd0:	103f661e 	bne	r2,zero,15d6c <__alt_data_end+0xf8015d6c>
   15fd4:	8880040c 	andi	r2,r17,16
   15fd8:	10020626 	beq	r2,zero,167f4 <___vfiprintf_internal_r+0x1144>
   15fdc:	d9402217 	ldw	r5,136(sp)
   15fe0:	d8001d85 	stb	zero,118(sp)
   15fe4:	0029883a 	mov	r20,zero
   15fe8:	28800104 	addi	r2,r5,4
   15fec:	2cc00017 	ldw	r19,0(r5)
   15ff0:	80020816 	blt	r16,zero,16814 <___vfiprintf_internal_r+0x1164>
   15ff4:	00ffdfc4 	movi	r3,-129
   15ff8:	d8802215 	stw	r2,136(sp)
   15ffc:	88e2703a 	and	r17,r17,r3
   16000:	983f651e 	bne	r19,zero,15d98 <__alt_data_end+0xf8015d98>
   16004:	002b883a 	mov	r21,zero
   16008:	8002cf26 	beq	r16,zero,16b48 <___vfiprintf_internal_r+0x1498>
   1600c:	0027883a 	mov	r19,zero
   16010:	0029883a 	mov	r20,zero
   16014:	003f6106 	br	15d9c <__alt_data_end+0xf8015d9c>
   16018:	9cc03fcc 	andi	r19,r19,255
   1601c:	b811883a 	mov	r8,r23
   16020:	9802e01e 	bne	r19,zero,16ba4 <___vfiprintf_internal_r+0x14f4>
   16024:	8c400414 	ori	r17,r17,16
   16028:	8880080c 	andi	r2,r17,32
   1602c:	1000641e 	bne	r2,zero,161c0 <___vfiprintf_internal_r+0xb10>
   16030:	8880040c 	andi	r2,r17,16
   16034:	1001c81e 	bne	r2,zero,16758 <___vfiprintf_internal_r+0x10a8>
   16038:	8880100c 	andi	r2,r17,64
   1603c:	d8001d85 	stb	zero,118(sp)
   16040:	1002281e 	bne	r2,zero,168e4 <___vfiprintf_internal_r+0x1234>
   16044:	d9002217 	ldw	r4,136(sp)
   16048:	0029883a 	mov	r20,zero
   1604c:	20800104 	addi	r2,r4,4
   16050:	24c00017 	ldw	r19,0(r4)
   16054:	8001c60e 	bge	r16,zero,16770 <___vfiprintf_internal_r+0x10c0>
   16058:	d8802215 	stw	r2,136(sp)
   1605c:	002b883a 	mov	r21,zero
   16060:	9d04b03a 	or	r2,r19,r20
   16064:	103f911e 	bne	r2,zero,15eac <__alt_data_end+0xf8015eac>
   16068:	00800044 	movi	r2,1
   1606c:	10803fcc 	andi	r2,r2,255
   16070:	00c00044 	movi	r3,1
   16074:	10c05f26 	beq	r2,r3,161f4 <___vfiprintf_internal_r+0xb44>
   16078:	00c00084 	movi	r3,2
   1607c:	10ffe31e 	bne	r2,r3,1600c <__alt_data_end+0xf801600c>
   16080:	0027883a 	mov	r19,zero
   16084:	0029883a 	mov	r20,zero
   16088:	00015106 	br	165d0 <___vfiprintf_internal_r+0xf20>
   1608c:	9cc03fcc 	andi	r19,r19,255
   16090:	b811883a 	mov	r8,r23
   16094:	9802c01e 	bne	r19,zero,16b98 <___vfiprintf_internal_r+0x14e8>
   16098:	014000b4 	movhi	r5,2
   1609c:	29728404 	addi	r5,r5,-13808
   160a0:	d9402615 	stw	r5,152(sp)
   160a4:	8880080c 	andi	r2,r17,32
   160a8:	103f541e 	bne	r2,zero,15dfc <__alt_data_end+0xf8015dfc>
   160ac:	8880040c 	andi	r2,r17,16
   160b0:	1001f226 	beq	r2,zero,1687c <___vfiprintf_internal_r+0x11cc>
   160b4:	d9402217 	ldw	r5,136(sp)
   160b8:	0029883a 	mov	r20,zero
   160bc:	2cc00017 	ldw	r19,0(r5)
   160c0:	29400104 	addi	r5,r5,4
   160c4:	d9402215 	stw	r5,136(sp)
   160c8:	003f5106 	br	15e10 <__alt_data_end+0xf8015e10>
   160cc:	d8c02217 	ldw	r3,136(sp)
   160d0:	b811883a 	mov	r8,r23
   160d4:	d8001d85 	stb	zero,118(sp)
   160d8:	1dc00017 	ldw	r23,0(r3)
   160dc:	1f000104 	addi	fp,r3,4
   160e0:	b8025926 	beq	r23,zero,16a48 <___vfiprintf_internal_r+0x1398>
   160e4:	80023316 	blt	r16,zero,169b4 <___vfiprintf_internal_r+0x1304>
   160e8:	800d883a 	mov	r6,r16
   160ec:	000b883a 	mov	r5,zero
   160f0:	b809883a 	mov	r4,r23
   160f4:	da002a15 	stw	r8,168(sp)
   160f8:	00138440 	call	13844 <memchr>
   160fc:	da002a17 	ldw	r8,168(sp)
   16100:	10026826 	beq	r2,zero,16aa4 <___vfiprintf_internal_r+0x13f4>
   16104:	15e9c83a 	sub	r20,r2,r23
   16108:	dd401d83 	ldbu	r21,118(sp)
   1610c:	df002215 	stw	fp,136(sp)
   16110:	0021883a 	mov	r16,zero
   16114:	003e6906 	br	15abc <__alt_data_end+0xf8015abc>
   16118:	9cc03fcc 	andi	r19,r19,255
   1611c:	b811883a 	mov	r8,r23
   16120:	983fc126 	beq	r19,zero,16028 <__alt_data_end+0xf8016028>
   16124:	d8c02303 	ldbu	r3,140(sp)
   16128:	d8c01d85 	stb	r3,118(sp)
   1612c:	003fbe06 	br	16028 <__alt_data_end+0xf8016028>
   16130:	d9002217 	ldw	r4,136(sp)
   16134:	d9402217 	ldw	r5,136(sp)
   16138:	21000017 	ldw	r4,0(r4)
   1613c:	28800104 	addi	r2,r5,4
   16140:	d9002515 	stw	r4,148(sp)
   16144:	203e3d16 	blt	r4,zero,15a3c <__alt_data_end+0xf8015a3c>
   16148:	d8802215 	stw	r2,136(sp)
   1614c:	b0c00007 	ldb	r3,0(r22)
   16150:	003db406 	br	15824 <__alt_data_end+0xf8015824>
   16154:	00c00ac4 	movi	r3,43
   16158:	d8c02305 	stb	r3,140(sp)
   1615c:	04c00044 	movi	r19,1
   16160:	b0c00007 	ldb	r3,0(r22)
   16164:	003daf06 	br	15824 <__alt_data_end+0xf8015824>
   16168:	b0c00007 	ldb	r3,0(r22)
   1616c:	01000a84 	movi	r4,42
   16170:	b4000044 	addi	r16,r22,1
   16174:	19025e26 	beq	r3,r4,16af0 <___vfiprintf_internal_r+0x1440>
   16178:	1f3ff404 	addi	fp,r3,-48
   1617c:	0009883a 	mov	r4,zero
   16180:	af025236 	bltu	r21,fp,16acc <___vfiprintf_internal_r+0x141c>
   16184:	01400284 	movi	r5,10
   16188:	000c68c0 	call	c68c <__mulsi3>
   1618c:	80c00007 	ldb	r3,0(r16)
   16190:	1709883a 	add	r4,r2,fp
   16194:	85800044 	addi	r22,r16,1
   16198:	1f3ff404 	addi	fp,r3,-48
   1619c:	b021883a 	mov	r16,r22
   161a0:	af3ff82e 	bgeu	r21,fp,16184 <__alt_data_end+0xf8016184>
   161a4:	2021883a 	mov	r16,r4
   161a8:	203d9f0e 	bge	r4,zero,15828 <__alt_data_end+0xf8015828>
   161ac:	043fffc4 	movi	r16,-1
   161b0:	003d9d06 	br	15828 <__alt_data_end+0xf8015828>
   161b4:	8c401014 	ori	r17,r17,64
   161b8:	b0c00007 	ldb	r3,0(r22)
   161bc:	003d9906 	br	15824 <__alt_data_end+0xf8015824>
   161c0:	d9002217 	ldw	r4,136(sp)
   161c4:	d8001d85 	stb	zero,118(sp)
   161c8:	20c00204 	addi	r3,r4,8
   161cc:	24c00017 	ldw	r19,0(r4)
   161d0:	25000117 	ldw	r20,4(r4)
   161d4:	8001e716 	blt	r16,zero,16974 <___vfiprintf_internal_r+0x12c4>
   161d8:	013fdfc4 	movi	r4,-129
   161dc:	9d04b03a 	or	r2,r19,r20
   161e0:	d8c02215 	stw	r3,136(sp)
   161e4:	8922703a 	and	r17,r17,r4
   161e8:	002b883a 	mov	r21,zero
   161ec:	103f2f1e 	bne	r2,zero,15eac <__alt_data_end+0xf8015eac>
   161f0:	803e2f26 	beq	r16,zero,15ab0 <__alt_data_end+0xf8015ab0>
   161f4:	0027883a 	mov	r19,zero
   161f8:	9cc00c04 	addi	r19,r19,48
   161fc:	dcc019c5 	stb	r19,103(sp)
   16200:	dd002817 	ldw	r20,160(sp)
   16204:	ddc019c4 	addi	r23,sp,103
   16208:	003e2c06 	br	15abc <__alt_data_end+0xf8015abc>
   1620c:	9cc03fcc 	andi	r19,r19,255
   16210:	b811883a 	mov	r8,r23
   16214:	9802571e 	bne	r19,zero,16b74 <___vfiprintf_internal_r+0x14c4>
   16218:	18005726 	beq	r3,zero,16378 <___vfiprintf_internal_r+0xcc8>
   1621c:	04c00044 	movi	r19,1
   16220:	d8c01005 	stb	r3,64(sp)
   16224:	d8001d85 	stb	zero,118(sp)
   16228:	9829883a 	mov	r20,r19
   1622c:	ddc01004 	addi	r23,sp,64
   16230:	003f0a06 	br	15e5c <__alt_data_end+0xf8015e5c>
   16234:	d9402017 	ldw	r5,128(sp)
   16238:	d9002117 	ldw	r4,132(sp)
   1623c:	d9801a04 	addi	r6,sp,104
   16240:	da802a15 	stw	r10,168(sp)
   16244:	001559c0 	call	1559c <__sprint_r.part.0>
   16248:	da802a17 	ldw	r10,168(sp)
   1624c:	1000501e 	bne	r2,zero,16390 <___vfiprintf_internal_r+0xce0>
   16250:	d9801b17 	ldw	r6,108(sp)
   16254:	d8801c17 	ldw	r2,112(sp)
   16258:	d811883a 	mov	r8,sp
   1625c:	31000044 	addi	r4,r6,1
   16260:	003e3606 	br	15b3c <__alt_data_end+0xf8015b3c>
   16264:	d9001b17 	ldw	r4,108(sp)
   16268:	d8801c17 	ldw	r2,112(sp)
   1626c:	21400044 	addi	r5,r4,1
   16270:	d9801d87 	ldb	r6,118(sp)
   16274:	303e5226 	beq	r6,zero,15bc0 <__alt_data_end+0xf8015bc0>
   16278:	01800044 	movi	r6,1
   1627c:	d9001d84 	addi	r4,sp,118
   16280:	1185883a 	add	r2,r2,r6
   16284:	41000015 	stw	r4,0(r8)
   16288:	41800115 	stw	r6,4(r8)
   1628c:	d8801c15 	stw	r2,112(sp)
   16290:	d9401b15 	stw	r5,108(sp)
   16294:	010001c4 	movi	r4,7
   16298:	2140b00e 	bge	r4,r5,1655c <___vfiprintf_internal_r+0xeac>
   1629c:	1000f61e 	bne	r2,zero,16678 <___vfiprintf_internal_r+0xfc8>
   162a0:	3800b31e 	bne	r7,zero,16570 <___vfiprintf_internal_r+0xec0>
   162a4:	0009883a 	mov	r4,zero
   162a8:	300b883a 	mov	r5,r6
   162ac:	d811883a 	mov	r8,sp
   162b0:	01802004 	movi	r6,128
   162b4:	19be5226 	beq	r3,r6,15c00 <__alt_data_end+0xf8015c00>
   162b8:	8521c83a 	sub	r16,r16,r20
   162bc:	043e790e 	bge	zero,r16,15ca4 <__alt_data_end+0xf8015ca4>
   162c0:	05400404 	movi	r21,16
   162c4:	ac01b00e 	bge	r21,r16,16988 <___vfiprintf_internal_r+0x12d8>
   162c8:	014000b4 	movhi	r5,2
   162cc:	2972e904 	addi	r5,r5,-13404
   162d0:	d9402315 	stw	r5,140(sp)
   162d4:	070001c4 	movi	fp,7
   162d8:	00000506 	br	162f0 <___vfiprintf_internal_r+0xc40>
   162dc:	21400084 	addi	r5,r4,2
   162e0:	42000204 	addi	r8,r8,8
   162e4:	1809883a 	mov	r4,r3
   162e8:	843ffc04 	addi	r16,r16,-16
   162ec:	ac000d0e 	bge	r21,r16,16324 <___vfiprintf_internal_r+0xc74>
   162f0:	10800404 	addi	r2,r2,16
   162f4:	20c00044 	addi	r3,r4,1
   162f8:	44800015 	stw	r18,0(r8)
   162fc:	45400115 	stw	r21,4(r8)
   16300:	d8801c15 	stw	r2,112(sp)
   16304:	d8c01b15 	stw	r3,108(sp)
   16308:	e0fff40e 	bge	fp,r3,162dc <__alt_data_end+0xf80162dc>
   1630c:	1000101e 	bne	r2,zero,16350 <___vfiprintf_internal_r+0xca0>
   16310:	843ffc04 	addi	r16,r16,-16
   16314:	01400044 	movi	r5,1
   16318:	0009883a 	mov	r4,zero
   1631c:	d811883a 	mov	r8,sp
   16320:	ac3ff316 	blt	r21,r16,162f0 <__alt_data_end+0xf80162f0>
   16324:	d8c02317 	ldw	r3,140(sp)
   16328:	1405883a 	add	r2,r2,r16
   1632c:	44000115 	stw	r16,4(r8)
   16330:	40c00015 	stw	r3,0(r8)
   16334:	d8801c15 	stw	r2,112(sp)
   16338:	d9401b15 	stw	r5,108(sp)
   1633c:	00c001c4 	movi	r3,7
   16340:	19401916 	blt	r3,r5,163a8 <___vfiprintf_internal_r+0xcf8>
   16344:	42000204 	addi	r8,r8,8
   16348:	29400044 	addi	r5,r5,1
   1634c:	003e5506 	br	15ca4 <__alt_data_end+0xf8015ca4>
   16350:	d9402017 	ldw	r5,128(sp)
   16354:	d9002117 	ldw	r4,132(sp)
   16358:	d9801a04 	addi	r6,sp,104
   1635c:	001559c0 	call	1559c <__sprint_r.part.0>
   16360:	10000b1e 	bne	r2,zero,16390 <___vfiprintf_internal_r+0xce0>
   16364:	d9001b17 	ldw	r4,108(sp)
   16368:	d8801c17 	ldw	r2,112(sp)
   1636c:	d811883a 	mov	r8,sp
   16370:	21400044 	addi	r5,r4,1
   16374:	003fdc06 	br	162e8 <__alt_data_end+0xf80162e8>
   16378:	d8801c17 	ldw	r2,112(sp)
   1637c:	10000426 	beq	r2,zero,16390 <___vfiprintf_internal_r+0xce0>
   16380:	d9402017 	ldw	r5,128(sp)
   16384:	d9002117 	ldw	r4,132(sp)
   16388:	d9801a04 	addi	r6,sp,104
   1638c:	001559c0 	call	1559c <__sprint_r.part.0>
   16390:	d9402017 	ldw	r5,128(sp)
   16394:	2880030b 	ldhu	r2,12(r5)
   16398:	1080100c 	andi	r2,r2,64
   1639c:	10014d1e 	bne	r2,zero,168d4 <___vfiprintf_internal_r+0x1224>
   163a0:	d8802417 	ldw	r2,144(sp)
   163a4:	003d9706 	br	15a04 <__alt_data_end+0xf8015a04>
   163a8:	1000d21e 	bne	r2,zero,166f4 <___vfiprintf_internal_r+0x1044>
   163ac:	00c00044 	movi	r3,1
   163b0:	a005883a 	mov	r2,r20
   163b4:	ddc00015 	stw	r23,0(sp)
   163b8:	dd000115 	stw	r20,4(sp)
   163bc:	dd001c15 	stw	r20,112(sp)
   163c0:	d8c01b15 	stw	r3,108(sp)
   163c4:	d811883a 	mov	r8,sp
   163c8:	42000204 	addi	r8,r8,8
   163cc:	8c40010c 	andi	r17,r17,4
   163d0:	88004026 	beq	r17,zero,164d4 <___vfiprintf_internal_r+0xe24>
   163d4:	d9002517 	ldw	r4,148(sp)
   163d8:	24e3c83a 	sub	r17,r4,r19
   163dc:	04403d0e 	bge	zero,r17,164d4 <___vfiprintf_internal_r+0xe24>
   163e0:	04000404 	movi	r16,16
   163e4:	8441a90e 	bge	r16,r17,16a8c <___vfiprintf_internal_r+0x13dc>
   163e8:	00c000b4 	movhi	r3,2
   163ec:	18f2ed04 	addi	r3,r3,-13388
   163f0:	d9001b17 	ldw	r4,108(sp)
   163f4:	d8c02315 	stw	r3,140(sp)
   163f8:	050001c4 	movi	r20,7
   163fc:	dd402117 	ldw	r21,132(sp)
   16400:	ddc02017 	ldw	r23,128(sp)
   16404:	00000506 	br	1641c <___vfiprintf_internal_r+0xd6c>
   16408:	21400084 	addi	r5,r4,2
   1640c:	42000204 	addi	r8,r8,8
   16410:	1809883a 	mov	r4,r3
   16414:	8c7ffc04 	addi	r17,r17,-16
   16418:	84400f0e 	bge	r16,r17,16458 <___vfiprintf_internal_r+0xda8>
   1641c:	014000b4 	movhi	r5,2
   16420:	10800404 	addi	r2,r2,16
   16424:	20c00044 	addi	r3,r4,1
   16428:	2972ed04 	addi	r5,r5,-13388
   1642c:	41400015 	stw	r5,0(r8)
   16430:	44000115 	stw	r16,4(r8)
   16434:	d8801c15 	stw	r2,112(sp)
   16438:	d8c01b15 	stw	r3,108(sp)
   1643c:	a0fff20e 	bge	r20,r3,16408 <__alt_data_end+0xf8016408>
   16440:	1000141e 	bne	r2,zero,16494 <___vfiprintf_internal_r+0xde4>
   16444:	8c7ffc04 	addi	r17,r17,-16
   16448:	01400044 	movi	r5,1
   1644c:	0009883a 	mov	r4,zero
   16450:	d811883a 	mov	r8,sp
   16454:	847ff116 	blt	r16,r17,1641c <__alt_data_end+0xf801641c>
   16458:	d8c02317 	ldw	r3,140(sp)
   1645c:	1445883a 	add	r2,r2,r17
   16460:	44400115 	stw	r17,4(r8)
   16464:	40c00015 	stw	r3,0(r8)
   16468:	d8801c15 	stw	r2,112(sp)
   1646c:	d9401b15 	stw	r5,108(sp)
   16470:	00c001c4 	movi	r3,7
   16474:	1940170e 	bge	r3,r5,164d4 <___vfiprintf_internal_r+0xe24>
   16478:	1000101e 	bne	r2,zero,164bc <___vfiprintf_internal_r+0xe0c>
   1647c:	d8802517 	ldw	r2,148(sp)
   16480:	14c11616 	blt	r2,r19,168dc <___vfiprintf_internal_r+0x122c>
   16484:	d9002417 	ldw	r4,144(sp)
   16488:	2089883a 	add	r4,r4,r2
   1648c:	d9002415 	stw	r4,144(sp)
   16490:	003e1806 	br	15cf4 <__alt_data_end+0xf8015cf4>
   16494:	d9801a04 	addi	r6,sp,104
   16498:	b80b883a 	mov	r5,r23
   1649c:	a809883a 	mov	r4,r21
   164a0:	001559c0 	call	1559c <__sprint_r.part.0>
   164a4:	103fba1e 	bne	r2,zero,16390 <__alt_data_end+0xf8016390>
   164a8:	d9001b17 	ldw	r4,108(sp)
   164ac:	d8801c17 	ldw	r2,112(sp)
   164b0:	d811883a 	mov	r8,sp
   164b4:	21400044 	addi	r5,r4,1
   164b8:	003fd606 	br	16414 <__alt_data_end+0xf8016414>
   164bc:	d9402017 	ldw	r5,128(sp)
   164c0:	d9002117 	ldw	r4,132(sp)
   164c4:	d9801a04 	addi	r6,sp,104
   164c8:	001559c0 	call	1559c <__sprint_r.part.0>
   164cc:	103fb01e 	bne	r2,zero,16390 <__alt_data_end+0xf8016390>
   164d0:	d8801c17 	ldw	r2,112(sp)
   164d4:	d8c02517 	ldw	r3,148(sp)
   164d8:	1cc0010e 	bge	r3,r19,164e0 <___vfiprintf_internal_r+0xe30>
   164dc:	9807883a 	mov	r3,r19
   164e0:	d9002417 	ldw	r4,144(sp)
   164e4:	20c9883a 	add	r4,r4,r3
   164e8:	d9002415 	stw	r4,144(sp)
   164ec:	103e0126 	beq	r2,zero,15cf4 <__alt_data_end+0xf8015cf4>
   164f0:	d9402017 	ldw	r5,128(sp)
   164f4:	d9002117 	ldw	r4,132(sp)
   164f8:	d9801a04 	addi	r6,sp,104
   164fc:	001559c0 	call	1559c <__sprint_r.part.0>
   16500:	103dfc26 	beq	r2,zero,15cf4 <__alt_data_end+0xf8015cf4>
   16504:	003fa206 	br	16390 <__alt_data_end+0xf8016390>
   16508:	d9402017 	ldw	r5,128(sp)
   1650c:	d9002117 	ldw	r4,132(sp)
   16510:	d9801a04 	addi	r6,sp,104
   16514:	d9c02b15 	stw	r7,172(sp)
   16518:	001559c0 	call	1559c <__sprint_r.part.0>
   1651c:	d9c02b17 	ldw	r7,172(sp)
   16520:	103f9b1e 	bne	r2,zero,16390 <__alt_data_end+0xf8016390>
   16524:	d9001b17 	ldw	r4,108(sp)
   16528:	d8801c17 	ldw	r2,112(sp)
   1652c:	d811883a 	mov	r8,sp
   16530:	21800044 	addi	r6,r4,1
   16534:	003dbf06 	br	15c34 <__alt_data_end+0xf8015c34>
   16538:	1000d81e 	bne	r2,zero,1689c <___vfiprintf_internal_r+0x11ec>
   1653c:	d9001d87 	ldb	r4,118(sp)
   16540:	20000a26 	beq	r4,zero,1656c <___vfiprintf_internal_r+0xebc>
   16544:	00800044 	movi	r2,1
   16548:	d9001d84 	addi	r4,sp,118
   1654c:	100b883a 	mov	r5,r2
   16550:	d9000015 	stw	r4,0(sp)
   16554:	d8800115 	stw	r2,4(sp)
   16558:	d811883a 	mov	r8,sp
   1655c:	2809883a 	mov	r4,r5
   16560:	42000204 	addi	r8,r8,8
   16564:	29400044 	addi	r5,r5,1
   16568:	003d9506 	br	15bc0 <__alt_data_end+0xf8015bc0>
   1656c:	3800fd26 	beq	r7,zero,16964 <___vfiprintf_internal_r+0x12b4>
   16570:	00800084 	movi	r2,2
   16574:	d9001d04 	addi	r4,sp,116
   16578:	d9000015 	stw	r4,0(sp)
   1657c:	d8800115 	stw	r2,4(sp)
   16580:	01400044 	movi	r5,1
   16584:	d811883a 	mov	r8,sp
   16588:	2809883a 	mov	r4,r5
   1658c:	42000204 	addi	r8,r8,8
   16590:	29400044 	addi	r5,r5,1
   16594:	003f4606 	br	162b0 <__alt_data_end+0xf80162b0>
   16598:	d8802517 	ldw	r2,148(sp)
   1659c:	14c0010e 	bge	r2,r19,165a4 <___vfiprintf_internal_r+0xef4>
   165a0:	9805883a 	mov	r2,r19
   165a4:	d9402417 	ldw	r5,144(sp)
   165a8:	288b883a 	add	r5,r5,r2
   165ac:	d9402415 	stw	r5,144(sp)
   165b0:	003dd006 	br	15cf4 <__alt_data_end+0xf8015cf4>
   165b4:	d8001d85 	stb	zero,118(sp)
   165b8:	80005d16 	blt	r16,zero,16730 <___vfiprintf_internal_r+0x1080>
   165bc:	00ffdfc4 	movi	r3,-129
   165c0:	9d04b03a 	or	r2,r19,r20
   165c4:	88e2703a 	and	r17,r17,r3
   165c8:	103d3726 	beq	r2,zero,15aa8 <__alt_data_end+0xf8015aa8>
   165cc:	002b883a 	mov	r21,zero
   165d0:	d9002617 	ldw	r4,152(sp)
   165d4:	ddc01a04 	addi	r23,sp,104
   165d8:	988003cc 	andi	r2,r19,15
   165dc:	a006973a 	slli	r3,r20,28
   165e0:	2085883a 	add	r2,r4,r2
   165e4:	9826d13a 	srli	r19,r19,4
   165e8:	10800003 	ldbu	r2,0(r2)
   165ec:	a028d13a 	srli	r20,r20,4
   165f0:	bdffffc4 	addi	r23,r23,-1
   165f4:	1ce6b03a 	or	r19,r3,r19
   165f8:	b8800005 	stb	r2,0(r23)
   165fc:	9d04b03a 	or	r2,r19,r20
   16600:	103ff51e 	bne	r2,zero,165d8 <__alt_data_end+0xf80165d8>
   16604:	d8801e17 	ldw	r2,120(sp)
   16608:	15e9c83a 	sub	r20,r2,r23
   1660c:	003d2b06 	br	15abc <__alt_data_end+0xf8015abc>
   16610:	d9402017 	ldw	r5,128(sp)
   16614:	d9002117 	ldw	r4,132(sp)
   16618:	d9801a04 	addi	r6,sp,104
   1661c:	001559c0 	call	1559c <__sprint_r.part.0>
   16620:	103f5b1e 	bne	r2,zero,16390 <__alt_data_end+0xf8016390>
   16624:	d8801c17 	ldw	r2,112(sp)
   16628:	d811883a 	mov	r8,sp
   1662c:	003f6706 	br	163cc <__alt_data_end+0xf80163cc>
   16630:	d9402017 	ldw	r5,128(sp)
   16634:	d9002117 	ldw	r4,132(sp)
   16638:	d9801a04 	addi	r6,sp,104
   1663c:	001559c0 	call	1559c <__sprint_r.part.0>
   16640:	103f531e 	bne	r2,zero,16390 <__alt_data_end+0xf8016390>
   16644:	d811883a 	mov	r8,sp
   16648:	003cd906 	br	159b0 <__alt_data_end+0xf80159b0>
   1664c:	10803fcc 	andi	r2,r2,255
   16650:	1080201c 	xori	r2,r2,128
   16654:	10bfe004 	addi	r2,r2,-128
   16658:	00c00c04 	movi	r3,48
   1665c:	10ffe926 	beq	r2,r3,16604 <__alt_data_end+0xf8016604>
   16660:	b8ffffc5 	stb	r3,-1(r23)
   16664:	d8c01e17 	ldw	r3,120(sp)
   16668:	b8bfffc4 	addi	r2,r23,-1
   1666c:	102f883a 	mov	r23,r2
   16670:	18a9c83a 	sub	r20,r3,r2
   16674:	003d1106 	br	15abc <__alt_data_end+0xf8015abc>
   16678:	d9402017 	ldw	r5,128(sp)
   1667c:	d9002117 	ldw	r4,132(sp)
   16680:	d9801a04 	addi	r6,sp,104
   16684:	d8c02a15 	stw	r3,168(sp)
   16688:	d9c02b15 	stw	r7,172(sp)
   1668c:	001559c0 	call	1559c <__sprint_r.part.0>
   16690:	d8c02a17 	ldw	r3,168(sp)
   16694:	d9c02b17 	ldw	r7,172(sp)
   16698:	103f3d1e 	bne	r2,zero,16390 <__alt_data_end+0xf8016390>
   1669c:	d9001b17 	ldw	r4,108(sp)
   166a0:	d8801c17 	ldw	r2,112(sp)
   166a4:	d811883a 	mov	r8,sp
   166a8:	21400044 	addi	r5,r4,1
   166ac:	003d4406 	br	15bc0 <__alt_data_end+0xf8015bc0>
   166b0:	d9402017 	ldw	r5,128(sp)
   166b4:	d9002117 	ldw	r4,132(sp)
   166b8:	d9801a04 	addi	r6,sp,104
   166bc:	d8c02a15 	stw	r3,168(sp)
   166c0:	001559c0 	call	1559c <__sprint_r.part.0>
   166c4:	d8c02a17 	ldw	r3,168(sp)
   166c8:	103f311e 	bne	r2,zero,16390 <__alt_data_end+0xf8016390>
   166cc:	d9001b17 	ldw	r4,108(sp)
   166d0:	d8801c17 	ldw	r2,112(sp)
   166d4:	d811883a 	mov	r8,sp
   166d8:	21400044 	addi	r5,r4,1
   166dc:	003ef406 	br	162b0 <__alt_data_end+0xf80162b0>
   166e0:	1000bd1e 	bne	r2,zero,169d8 <___vfiprintf_internal_r+0x1328>
   166e4:	01400044 	movi	r5,1
   166e8:	0009883a 	mov	r4,zero
   166ec:	d811883a 	mov	r8,sp
   166f0:	003ef106 	br	162b8 <__alt_data_end+0xf80162b8>
   166f4:	d9402017 	ldw	r5,128(sp)
   166f8:	d9002117 	ldw	r4,132(sp)
   166fc:	d9801a04 	addi	r6,sp,104
   16700:	001559c0 	call	1559c <__sprint_r.part.0>
   16704:	103f221e 	bne	r2,zero,16390 <__alt_data_end+0xf8016390>
   16708:	d9401b17 	ldw	r5,108(sp)
   1670c:	d8801c17 	ldw	r2,112(sp)
   16710:	d811883a 	mov	r8,sp
   16714:	29400044 	addi	r5,r5,1
   16718:	003d6206 	br	15ca4 <__alt_data_end+0xf8015ca4>
   1671c:	014000b4 	movhi	r5,2
   16720:	29728904 	addi	r5,r5,-13788
   16724:	d9402615 	stw	r5,152(sp)
   16728:	d8c02215 	stw	r3,136(sp)
   1672c:	1023883a 	mov	r17,r2
   16730:	9d04b03a 	or	r2,r19,r20
   16734:	103fa51e 	bne	r2,zero,165cc <__alt_data_end+0xf80165cc>
   16738:	002b883a 	mov	r21,zero
   1673c:	00800084 	movi	r2,2
   16740:	003e4a06 	br	1606c <__alt_data_end+0xf801606c>
   16744:	014000b4 	movhi	r5,2
   16748:	29728904 	addi	r5,r5,-13788
   1674c:	002b883a 	mov	r21,zero
   16750:	d9402615 	stw	r5,152(sp)
   16754:	003f9e06 	br	165d0 <__alt_data_end+0xf80165d0>
   16758:	d9402217 	ldw	r5,136(sp)
   1675c:	d8001d85 	stb	zero,118(sp)
   16760:	0029883a 	mov	r20,zero
   16764:	28800104 	addi	r2,r5,4
   16768:	2cc00017 	ldw	r19,0(r5)
   1676c:	803e3a16 	blt	r16,zero,16058 <__alt_data_end+0xf8016058>
   16770:	00ffdfc4 	movi	r3,-129
   16774:	d8802215 	stw	r2,136(sp)
   16778:	88e2703a 	and	r17,r17,r3
   1677c:	002b883a 	mov	r21,zero
   16780:	983e9b26 	beq	r19,zero,161f0 <__alt_data_end+0xf80161f0>
   16784:	00800244 	movi	r2,9
   16788:	14fdc936 	bltu	r2,r19,15eb0 <__alt_data_end+0xf8015eb0>
   1678c:	003e9a06 	br	161f8 <__alt_data_end+0xf80161f8>
   16790:	00800c04 	movi	r2,48
   16794:	d8c01d45 	stb	r3,117(sp)
   16798:	d8801d05 	stb	r2,116(sp)
   1679c:	d8001d85 	stb	zero,118(sp)
   167a0:	88c00094 	ori	r3,r17,2
   167a4:	80009c16 	blt	r16,zero,16a18 <___vfiprintf_internal_r+0x1368>
   167a8:	00bfdfc4 	movi	r2,-129
   167ac:	88a2703a 	and	r17,r17,r2
   167b0:	8c400094 	ori	r17,r17,2
   167b4:	002b883a 	mov	r21,zero
   167b8:	003f8506 	br	165d0 <__alt_data_end+0xf80165d0>
   167bc:	b029883a 	mov	r20,r22
   167c0:	003c0b06 	br	157f0 <__alt_data_end+0xf80157f0>
   167c4:	04e7c83a 	sub	r19,zero,r19
   167c8:	05400b44 	movi	r21,45
   167cc:	9804c03a 	cmpne	r2,r19,zero
   167d0:	0529c83a 	sub	r20,zero,r20
   167d4:	dd401d85 	stb	r21,118(sp)
   167d8:	a0a9c83a 	sub	r20,r20,r2
   167dc:	80009716 	blt	r16,zero,16a3c <___vfiprintf_internal_r+0x138c>
   167e0:	00bfdfc4 	movi	r2,-129
   167e4:	88a2703a 	and	r17,r17,r2
   167e8:	003db006 	br	15eac <__alt_data_end+0xf8015eac>
   167ec:	b0c00007 	ldb	r3,0(r22)
   167f0:	003c0c06 	br	15824 <__alt_data_end+0xf8015824>
   167f4:	8880100c 	andi	r2,r17,64
   167f8:	d8001d85 	stb	zero,118(sp)
   167fc:	1000461e 	bne	r2,zero,16918 <___vfiprintf_internal_r+0x1268>
   16800:	d9002217 	ldw	r4,136(sp)
   16804:	0029883a 	mov	r20,zero
   16808:	20800104 	addi	r2,r4,4
   1680c:	24c00017 	ldw	r19,0(r4)
   16810:	803df80e 	bge	r16,zero,15ff4 <__alt_data_end+0xf8015ff4>
   16814:	9d06b03a 	or	r3,r19,r20
   16818:	d8802215 	stw	r2,136(sp)
   1681c:	183d5e1e 	bne	r3,zero,15d98 <__alt_data_end+0xf8015d98>
   16820:	002b883a 	mov	r21,zero
   16824:	0005883a 	mov	r2,zero
   16828:	003e1006 	br	1606c <__alt_data_end+0xf801606c>
   1682c:	8880040c 	andi	r2,r17,16
   16830:	1000321e 	bne	r2,zero,168fc <___vfiprintf_internal_r+0x124c>
   16834:	8c40100c 	andi	r17,r17,64
   16838:	88008d26 	beq	r17,zero,16a70 <___vfiprintf_internal_r+0x13c0>
   1683c:	d9402217 	ldw	r5,136(sp)
   16840:	d8c02417 	ldw	r3,144(sp)
   16844:	28800017 	ldw	r2,0(r5)
   16848:	29400104 	addi	r5,r5,4
   1684c:	d9402215 	stw	r5,136(sp)
   16850:	10c0000d 	sth	r3,0(r2)
   16854:	003bca06 	br	15780 <__alt_data_end+0xf8015780>
   16858:	8880100c 	andi	r2,r17,64
   1685c:	10003a26 	beq	r2,zero,16948 <___vfiprintf_internal_r+0x1298>
   16860:	d8802217 	ldw	r2,136(sp)
   16864:	14c0000f 	ldh	r19,0(r2)
   16868:	10800104 	addi	r2,r2,4
   1686c:	d8802215 	stw	r2,136(sp)
   16870:	9829d7fa 	srai	r20,r19,31
   16874:	a005883a 	mov	r2,r20
   16878:	003d8506 	br	15e90 <__alt_data_end+0xf8015e90>
   1687c:	8880100c 	andi	r2,r17,64
   16880:	10002b26 	beq	r2,zero,16930 <___vfiprintf_internal_r+0x1280>
   16884:	d8802217 	ldw	r2,136(sp)
   16888:	0029883a 	mov	r20,zero
   1688c:	14c0000b 	ldhu	r19,0(r2)
   16890:	10800104 	addi	r2,r2,4
   16894:	d8802215 	stw	r2,136(sp)
   16898:	003d5d06 	br	15e10 <__alt_data_end+0xf8015e10>
   1689c:	d9402017 	ldw	r5,128(sp)
   168a0:	d9002117 	ldw	r4,132(sp)
   168a4:	d9801a04 	addi	r6,sp,104
   168a8:	d8c02a15 	stw	r3,168(sp)
   168ac:	d9c02b15 	stw	r7,172(sp)
   168b0:	001559c0 	call	1559c <__sprint_r.part.0>
   168b4:	d8c02a17 	ldw	r3,168(sp)
   168b8:	d9c02b17 	ldw	r7,172(sp)
   168bc:	103eb41e 	bne	r2,zero,16390 <__alt_data_end+0xf8016390>
   168c0:	d9001b17 	ldw	r4,108(sp)
   168c4:	d8801c17 	ldw	r2,112(sp)
   168c8:	d811883a 	mov	r8,sp
   168cc:	21400044 	addi	r5,r4,1
   168d0:	003e6706 	br	16270 <__alt_data_end+0xf8016270>
   168d4:	00bfffc4 	movi	r2,-1
   168d8:	003c4a06 	br	15a04 <__alt_data_end+0xf8015a04>
   168dc:	9805883a 	mov	r2,r19
   168e0:	003ee806 	br	16484 <__alt_data_end+0xf8016484>
   168e4:	d8c02217 	ldw	r3,136(sp)
   168e8:	0029883a 	mov	r20,zero
   168ec:	18800104 	addi	r2,r3,4
   168f0:	1cc0000b 	ldhu	r19,0(r3)
   168f4:	803f9e0e 	bge	r16,zero,16770 <__alt_data_end+0xf8016770>
   168f8:	003dd706 	br	16058 <__alt_data_end+0xf8016058>
   168fc:	d8c02217 	ldw	r3,136(sp)
   16900:	d9002417 	ldw	r4,144(sp)
   16904:	18800017 	ldw	r2,0(r3)
   16908:	18c00104 	addi	r3,r3,4
   1690c:	d8c02215 	stw	r3,136(sp)
   16910:	11000015 	stw	r4,0(r2)
   16914:	003b9a06 	br	15780 <__alt_data_end+0xf8015780>
   16918:	d8c02217 	ldw	r3,136(sp)
   1691c:	0029883a 	mov	r20,zero
   16920:	18800104 	addi	r2,r3,4
   16924:	1cc0000b 	ldhu	r19,0(r3)
   16928:	803db20e 	bge	r16,zero,15ff4 <__alt_data_end+0xf8015ff4>
   1692c:	003fb906 	br	16814 <__alt_data_end+0xf8016814>
   16930:	d9002217 	ldw	r4,136(sp)
   16934:	0029883a 	mov	r20,zero
   16938:	24c00017 	ldw	r19,0(r4)
   1693c:	21000104 	addi	r4,r4,4
   16940:	d9002215 	stw	r4,136(sp)
   16944:	003d3206 	br	15e10 <__alt_data_end+0xf8015e10>
   16948:	d8c02217 	ldw	r3,136(sp)
   1694c:	1cc00017 	ldw	r19,0(r3)
   16950:	18c00104 	addi	r3,r3,4
   16954:	d8c02215 	stw	r3,136(sp)
   16958:	9829d7fa 	srai	r20,r19,31
   1695c:	a005883a 	mov	r2,r20
   16960:	003d4b06 	br	15e90 <__alt_data_end+0xf8015e90>
   16964:	0009883a 	mov	r4,zero
   16968:	01400044 	movi	r5,1
   1696c:	d811883a 	mov	r8,sp
   16970:	003e4f06 	br	162b0 <__alt_data_end+0xf80162b0>
   16974:	d8c02215 	stw	r3,136(sp)
   16978:	002b883a 	mov	r21,zero
   1697c:	003db806 	br	16060 <__alt_data_end+0xf8016060>
   16980:	d811883a 	mov	r8,sp
   16984:	003e9606 	br	163e0 <__alt_data_end+0xf80163e0>
   16988:	010000b4 	movhi	r4,2
   1698c:	2132e904 	addi	r4,r4,-13404
   16990:	d9002315 	stw	r4,140(sp)
   16994:	003e6306 	br	16324 <__alt_data_end+0xf8016324>
   16998:	b0c00043 	ldbu	r3,1(r22)
   1699c:	8c400814 	ori	r17,r17,32
   169a0:	b5800044 	addi	r22,r22,1
   169a4:	18c03fcc 	andi	r3,r3,255
   169a8:	18c0201c 	xori	r3,r3,128
   169ac:	18ffe004 	addi	r3,r3,-128
   169b0:	003b9c06 	br	15824 <__alt_data_end+0xf8015824>
   169b4:	b809883a 	mov	r4,r23
   169b8:	da002a15 	stw	r8,168(sp)
   169bc:	000e6780 	call	e678 <strlen>
   169c0:	1029883a 	mov	r20,r2
   169c4:	dd401d83 	ldbu	r21,118(sp)
   169c8:	df002215 	stw	fp,136(sp)
   169cc:	0021883a 	mov	r16,zero
   169d0:	da002a17 	ldw	r8,168(sp)
   169d4:	003c3906 	br	15abc <__alt_data_end+0xf8015abc>
   169d8:	d9402017 	ldw	r5,128(sp)
   169dc:	d9002117 	ldw	r4,132(sp)
   169e0:	d9801a04 	addi	r6,sp,104
   169e4:	001559c0 	call	1559c <__sprint_r.part.0>
   169e8:	103e691e 	bne	r2,zero,16390 <__alt_data_end+0xf8016390>
   169ec:	d9001b17 	ldw	r4,108(sp)
   169f0:	d8801c17 	ldw	r2,112(sp)
   169f4:	d811883a 	mov	r8,sp
   169f8:	21400044 	addi	r5,r4,1
   169fc:	003e2e06 	br	162b8 <__alt_data_end+0xf80162b8>
   16a00:	010000b4 	movhi	r4,2
   16a04:	2132ed04 	addi	r4,r4,-13388
   16a08:	d9002315 	stw	r4,140(sp)
   16a0c:	d9001b17 	ldw	r4,108(sp)
   16a10:	21000044 	addi	r4,r4,1
   16a14:	003c5e06 	br	15b90 <__alt_data_end+0xf8015b90>
   16a18:	002b883a 	mov	r21,zero
   16a1c:	00800084 	movi	r2,2
   16a20:	10803fcc 	andi	r2,r2,255
   16a24:	01000044 	movi	r4,1
   16a28:	11002b26 	beq	r2,r4,16ad8 <___vfiprintf_internal_r+0x1428>
   16a2c:	01000084 	movi	r4,2
   16a30:	11002b1e 	bne	r2,r4,16ae0 <___vfiprintf_internal_r+0x1430>
   16a34:	1823883a 	mov	r17,r3
   16a38:	003ee506 	br	165d0 <__alt_data_end+0xf80165d0>
   16a3c:	8807883a 	mov	r3,r17
   16a40:	00800044 	movi	r2,1
   16a44:	003ff606 	br	16a20 <__alt_data_end+0xf8016a20>
   16a48:	00800184 	movi	r2,6
   16a4c:	1400012e 	bgeu	r2,r16,16a54 <___vfiprintf_internal_r+0x13a4>
   16a50:	1021883a 	mov	r16,r2
   16a54:	8029883a 	mov	r20,r16
   16a58:	8027883a 	mov	r19,r16
   16a5c:	80002216 	blt	r16,zero,16ae8 <___vfiprintf_internal_r+0x1438>
   16a60:	05c000b4 	movhi	r23,2
   16a64:	df002215 	stw	fp,136(sp)
   16a68:	bdf28e04 	addi	r23,r23,-13768
   16a6c:	003cfb06 	br	15e5c <__alt_data_end+0xf8015e5c>
   16a70:	d9002217 	ldw	r4,136(sp)
   16a74:	d9402417 	ldw	r5,144(sp)
   16a78:	20800017 	ldw	r2,0(r4)
   16a7c:	21000104 	addi	r4,r4,4
   16a80:	d9002215 	stw	r4,136(sp)
   16a84:	11400015 	stw	r5,0(r2)
   16a88:	003b3d06 	br	15780 <__alt_data_end+0xf8015780>
   16a8c:	014000b4 	movhi	r5,2
   16a90:	2972ed04 	addi	r5,r5,-13388
   16a94:	d9402315 	stw	r5,140(sp)
   16a98:	d9401b17 	ldw	r5,108(sp)
   16a9c:	29400044 	addi	r5,r5,1
   16aa0:	003e6d06 	br	16458 <__alt_data_end+0xf8016458>
   16aa4:	8029883a 	mov	r20,r16
   16aa8:	dd401d83 	ldbu	r21,118(sp)
   16aac:	df002215 	stw	fp,136(sp)
   16ab0:	0021883a 	mov	r16,zero
   16ab4:	003c0106 	br	15abc <__alt_data_end+0xf8015abc>
   16ab8:	00c000b4 	movhi	r3,2
   16abc:	18f2e904 	addi	r3,r3,-13404
   16ac0:	d8c02315 	stw	r3,140(sp)
   16ac4:	280d883a 	mov	r6,r5
   16ac8:	003c6906 	br	15c70 <__alt_data_end+0xf8015c70>
   16acc:	802d883a 	mov	r22,r16
   16ad0:	0021883a 	mov	r16,zero
   16ad4:	003b5406 	br	15828 <__alt_data_end+0xf8015828>
   16ad8:	1823883a 	mov	r17,r3
   16adc:	003cf306 	br	15eac <__alt_data_end+0xf8015eac>
   16ae0:	1823883a 	mov	r17,r3
   16ae4:	003cad06 	br	15d9c <__alt_data_end+0xf8015d9c>
   16ae8:	0027883a 	mov	r19,zero
   16aec:	003fdc06 	br	16a60 <__alt_data_end+0xf8016a60>
   16af0:	d9402217 	ldw	r5,136(sp)
   16af4:	8005883a 	mov	r2,r16
   16af8:	b0c00043 	ldbu	r3,1(r22)
   16afc:	2c000017 	ldw	r16,0(r5)
   16b00:	29000104 	addi	r4,r5,4
   16b04:	d9002215 	stw	r4,136(sp)
   16b08:	102d883a 	mov	r22,r2
   16b0c:	803fa50e 	bge	r16,zero,169a4 <__alt_data_end+0xf80169a4>
   16b10:	18c03fcc 	andi	r3,r3,255
   16b14:	18c0201c 	xori	r3,r3,128
   16b18:	043fffc4 	movi	r16,-1
   16b1c:	18ffe004 	addi	r3,r3,-128
   16b20:	003b4006 	br	15824 <__alt_data_end+0xf8015824>
   16b24:	d9402303 	ldbu	r5,140(sp)
   16b28:	d9401d85 	stb	r5,118(sp)
   16b2c:	003cae06 	br	15de8 <__alt_data_end+0xf8015de8>
   16b30:	d8c02303 	ldbu	r3,140(sp)
   16b34:	d8c01d85 	stb	r3,118(sp)
   16b38:	003d1406 	br	15f8c <__alt_data_end+0xf8015f8c>
   16b3c:	d8c02303 	ldbu	r3,140(sp)
   16b40:	d8c01d85 	stb	r3,118(sp)
   16b44:	003cca06 	br	15e70 <__alt_data_end+0xf8015e70>
   16b48:	8880004c 	andi	r2,r17,1
   16b4c:	002b883a 	mov	r21,zero
   16b50:	10000526 	beq	r2,zero,16b68 <___vfiprintf_internal_r+0x14b8>
   16b54:	00800c04 	movi	r2,48
   16b58:	d88019c5 	stb	r2,103(sp)
   16b5c:	dd002817 	ldw	r20,160(sp)
   16b60:	ddc019c4 	addi	r23,sp,103
   16b64:	003bd506 	br	15abc <__alt_data_end+0xf8015abc>
   16b68:	0029883a 	mov	r20,zero
   16b6c:	ddc01a04 	addi	r23,sp,104
   16b70:	003bd206 	br	15abc <__alt_data_end+0xf8015abc>
   16b74:	d9002303 	ldbu	r4,140(sp)
   16b78:	d9001d85 	stb	r4,118(sp)
   16b7c:	003da606 	br	16218 <__alt_data_end+0xf8016218>
   16b80:	d8c02303 	ldbu	r3,140(sp)
   16b84:	d8c01d85 	stb	r3,118(sp)
   16b88:	003c7606 	br	15d64 <__alt_data_end+0xf8015d64>
   16b8c:	d8c02303 	ldbu	r3,140(sp)
   16b90:	d8c01d85 	stb	r3,118(sp)
   16b94:	003c6506 	br	15d2c <__alt_data_end+0xf8015d2c>
   16b98:	d9002303 	ldbu	r4,140(sp)
   16b9c:	d9001d85 	stb	r4,118(sp)
   16ba0:	003d3d06 	br	16098 <__alt_data_end+0xf8016098>
   16ba4:	d8c02303 	ldbu	r3,140(sp)
   16ba8:	d8c01d85 	stb	r3,118(sp)
   16bac:	003d1d06 	br	16024 <__alt_data_end+0xf8016024>
   16bb0:	d8c02303 	ldbu	r3,140(sp)
   16bb4:	d8c01d85 	stb	r3,118(sp)
   16bb8:	003d0306 	br	15fc8 <__alt_data_end+0xf8015fc8>

00016bbc <__vfiprintf_internal>:
   16bbc:	008000b4 	movhi	r2,2
   16bc0:	10b9c804 	addi	r2,r2,-6368
   16bc4:	300f883a 	mov	r7,r6
   16bc8:	280d883a 	mov	r6,r5
   16bcc:	200b883a 	mov	r5,r4
   16bd0:	11000017 	ldw	r4,0(r2)
   16bd4:	00156b01 	jmpi	156b0 <___vfiprintf_internal_r>

00016bd8 <__sbprintf>:
   16bd8:	2880030b 	ldhu	r2,12(r5)
   16bdc:	2ac01917 	ldw	r11,100(r5)
   16be0:	2a80038b 	ldhu	r10,14(r5)
   16be4:	2a400717 	ldw	r9,28(r5)
   16be8:	2a000917 	ldw	r8,36(r5)
   16bec:	defee204 	addi	sp,sp,-1144
   16bf0:	00c10004 	movi	r3,1024
   16bf4:	dc011a15 	stw	r16,1128(sp)
   16bf8:	10bfff4c 	andi	r2,r2,65533
   16bfc:	2821883a 	mov	r16,r5
   16c00:	d8cb883a 	add	r5,sp,r3
   16c04:	dc811c15 	stw	r18,1136(sp)
   16c08:	dc411b15 	stw	r17,1132(sp)
   16c0c:	dfc11d15 	stw	ra,1140(sp)
   16c10:	2025883a 	mov	r18,r4
   16c14:	d881030d 	sth	r2,1036(sp)
   16c18:	dac11915 	stw	r11,1124(sp)
   16c1c:	da81038d 	sth	r10,1038(sp)
   16c20:	da410715 	stw	r9,1052(sp)
   16c24:	da010915 	stw	r8,1060(sp)
   16c28:	dec10015 	stw	sp,1024(sp)
   16c2c:	dec10415 	stw	sp,1040(sp)
   16c30:	d8c10215 	stw	r3,1032(sp)
   16c34:	d8c10515 	stw	r3,1044(sp)
   16c38:	d8010615 	stw	zero,1048(sp)
   16c3c:	00156b00 	call	156b0 <___vfiprintf_internal_r>
   16c40:	1023883a 	mov	r17,r2
   16c44:	10000416 	blt	r2,zero,16c58 <__sbprintf+0x80>
   16c48:	d9410004 	addi	r5,sp,1024
   16c4c:	9009883a 	mov	r4,r18
   16c50:	00126ec0 	call	126ec <_fflush_r>
   16c54:	10000d1e 	bne	r2,zero,16c8c <__sbprintf+0xb4>
   16c58:	d881030b 	ldhu	r2,1036(sp)
   16c5c:	1080100c 	andi	r2,r2,64
   16c60:	10000326 	beq	r2,zero,16c70 <__sbprintf+0x98>
   16c64:	8080030b 	ldhu	r2,12(r16)
   16c68:	10801014 	ori	r2,r2,64
   16c6c:	8080030d 	sth	r2,12(r16)
   16c70:	8805883a 	mov	r2,r17
   16c74:	dfc11d17 	ldw	ra,1140(sp)
   16c78:	dc811c17 	ldw	r18,1136(sp)
   16c7c:	dc411b17 	ldw	r17,1132(sp)
   16c80:	dc011a17 	ldw	r16,1128(sp)
   16c84:	dec11e04 	addi	sp,sp,1144
   16c88:	f800283a 	ret
   16c8c:	047fffc4 	movi	r17,-1
   16c90:	003ff106 	br	16c58 <__alt_data_end+0xf8016c58>

00016c94 <_write_r>:
   16c94:	defffd04 	addi	sp,sp,-12
   16c98:	2805883a 	mov	r2,r5
   16c9c:	dc000015 	stw	r16,0(sp)
   16ca0:	040000b4 	movhi	r16,2
   16ca4:	dc400115 	stw	r17,4(sp)
   16ca8:	300b883a 	mov	r5,r6
   16cac:	8400bf04 	addi	r16,r16,764
   16cb0:	2023883a 	mov	r17,r4
   16cb4:	380d883a 	mov	r6,r7
   16cb8:	1009883a 	mov	r4,r2
   16cbc:	dfc00215 	stw	ra,8(sp)
   16cc0:	80000015 	stw	zero,0(r16)
   16cc4:	0019f940 	call	19f94 <write>
   16cc8:	00ffffc4 	movi	r3,-1
   16ccc:	10c00526 	beq	r2,r3,16ce4 <_write_r+0x50>
   16cd0:	dfc00217 	ldw	ra,8(sp)
   16cd4:	dc400117 	ldw	r17,4(sp)
   16cd8:	dc000017 	ldw	r16,0(sp)
   16cdc:	dec00304 	addi	sp,sp,12
   16ce0:	f800283a 	ret
   16ce4:	80c00017 	ldw	r3,0(r16)
   16ce8:	183ff926 	beq	r3,zero,16cd0 <__alt_data_end+0xf8016cd0>
   16cec:	88c00015 	stw	r3,0(r17)
   16cf0:	003ff706 	br	16cd0 <__alt_data_end+0xf8016cd0>

00016cf4 <_close_r>:
   16cf4:	defffd04 	addi	sp,sp,-12
   16cf8:	dc000015 	stw	r16,0(sp)
   16cfc:	040000b4 	movhi	r16,2
   16d00:	dc400115 	stw	r17,4(sp)
   16d04:	8400bf04 	addi	r16,r16,764
   16d08:	2023883a 	mov	r17,r4
   16d0c:	2809883a 	mov	r4,r5
   16d10:	dfc00215 	stw	ra,8(sp)
   16d14:	80000015 	stw	zero,0(r16)
   16d18:	00196580 	call	19658 <close>
   16d1c:	00ffffc4 	movi	r3,-1
   16d20:	10c00526 	beq	r2,r3,16d38 <_close_r+0x44>
   16d24:	dfc00217 	ldw	ra,8(sp)
   16d28:	dc400117 	ldw	r17,4(sp)
   16d2c:	dc000017 	ldw	r16,0(sp)
   16d30:	dec00304 	addi	sp,sp,12
   16d34:	f800283a 	ret
   16d38:	80c00017 	ldw	r3,0(r16)
   16d3c:	183ff926 	beq	r3,zero,16d24 <__alt_data_end+0xf8016d24>
   16d40:	88c00015 	stw	r3,0(r17)
   16d44:	003ff706 	br	16d24 <__alt_data_end+0xf8016d24>

00016d48 <_calloc_r>:
   16d48:	defffe04 	addi	sp,sp,-8
   16d4c:	2805883a 	mov	r2,r5
   16d50:	dc000015 	stw	r16,0(sp)
   16d54:	300b883a 	mov	r5,r6
   16d58:	2021883a 	mov	r16,r4
   16d5c:	1009883a 	mov	r4,r2
   16d60:	dfc00115 	stw	ra,4(sp)
   16d64:	000c68c0 	call	c68c <__mulsi3>
   16d68:	100b883a 	mov	r5,r2
   16d6c:	8009883a 	mov	r4,r16
   16d70:	000dc5c0 	call	dc5c <_malloc_r>
   16d74:	10002926 	beq	r2,zero,16e1c <_calloc_r+0xd4>
   16d78:	11bfff17 	ldw	r6,-4(r2)
   16d7c:	1021883a 	mov	r16,r2
   16d80:	00bfff04 	movi	r2,-4
   16d84:	308c703a 	and	r6,r6,r2
   16d88:	00c00904 	movi	r3,36
   16d8c:	308d883a 	add	r6,r6,r2
   16d90:	19801636 	bltu	r3,r6,16dec <_calloc_r+0xa4>
   16d94:	008004c4 	movi	r2,19
   16d98:	11800b2e 	bgeu	r2,r6,16dc8 <_calloc_r+0x80>
   16d9c:	80000015 	stw	zero,0(r16)
   16da0:	80000115 	stw	zero,4(r16)
   16da4:	008006c4 	movi	r2,27
   16da8:	11801a2e 	bgeu	r2,r6,16e14 <_calloc_r+0xcc>
   16dac:	80000215 	stw	zero,8(r16)
   16db0:	80000315 	stw	zero,12(r16)
   16db4:	30c0151e 	bne	r6,r3,16e0c <_calloc_r+0xc4>
   16db8:	80000415 	stw	zero,16(r16)
   16dbc:	80800604 	addi	r2,r16,24
   16dc0:	80000515 	stw	zero,20(r16)
   16dc4:	00000106 	br	16dcc <_calloc_r+0x84>
   16dc8:	8005883a 	mov	r2,r16
   16dcc:	10000015 	stw	zero,0(r2)
   16dd0:	10000115 	stw	zero,4(r2)
   16dd4:	10000215 	stw	zero,8(r2)
   16dd8:	8005883a 	mov	r2,r16
   16ddc:	dfc00117 	ldw	ra,4(sp)
   16de0:	dc000017 	ldw	r16,0(sp)
   16de4:	dec00204 	addi	sp,sp,8
   16de8:	f800283a 	ret
   16dec:	000b883a 	mov	r5,zero
   16df0:	8009883a 	mov	r4,r16
   16df4:	0013bcc0 	call	13bcc <memset>
   16df8:	8005883a 	mov	r2,r16
   16dfc:	dfc00117 	ldw	ra,4(sp)
   16e00:	dc000017 	ldw	r16,0(sp)
   16e04:	dec00204 	addi	sp,sp,8
   16e08:	f800283a 	ret
   16e0c:	80800404 	addi	r2,r16,16
   16e10:	003fee06 	br	16dcc <__alt_data_end+0xf8016dcc>
   16e14:	80800204 	addi	r2,r16,8
   16e18:	003fec06 	br	16dcc <__alt_data_end+0xf8016dcc>
   16e1c:	0005883a 	mov	r2,zero
   16e20:	003fee06 	br	16ddc <__alt_data_end+0xf8016ddc>

00016e24 <_fclose_r>:
   16e24:	28003926 	beq	r5,zero,16f0c <_fclose_r+0xe8>
   16e28:	defffc04 	addi	sp,sp,-16
   16e2c:	dc400115 	stw	r17,4(sp)
   16e30:	dc000015 	stw	r16,0(sp)
   16e34:	dfc00315 	stw	ra,12(sp)
   16e38:	dc800215 	stw	r18,8(sp)
   16e3c:	2023883a 	mov	r17,r4
   16e40:	2821883a 	mov	r16,r5
   16e44:	20000226 	beq	r4,zero,16e50 <_fclose_r+0x2c>
   16e48:	20800e17 	ldw	r2,56(r4)
   16e4c:	10002726 	beq	r2,zero,16eec <_fclose_r+0xc8>
   16e50:	8080030f 	ldh	r2,12(r16)
   16e54:	1000071e 	bne	r2,zero,16e74 <_fclose_r+0x50>
   16e58:	0005883a 	mov	r2,zero
   16e5c:	dfc00317 	ldw	ra,12(sp)
   16e60:	dc800217 	ldw	r18,8(sp)
   16e64:	dc400117 	ldw	r17,4(sp)
   16e68:	dc000017 	ldw	r16,0(sp)
   16e6c:	dec00404 	addi	sp,sp,16
   16e70:	f800283a 	ret
   16e74:	800b883a 	mov	r5,r16
   16e78:	8809883a 	mov	r4,r17
   16e7c:	00124d00 	call	124d0 <__sflush_r>
   16e80:	1025883a 	mov	r18,r2
   16e84:	80800b17 	ldw	r2,44(r16)
   16e88:	10000426 	beq	r2,zero,16e9c <_fclose_r+0x78>
   16e8c:	81400717 	ldw	r5,28(r16)
   16e90:	8809883a 	mov	r4,r17
   16e94:	103ee83a 	callr	r2
   16e98:	10001616 	blt	r2,zero,16ef4 <_fclose_r+0xd0>
   16e9c:	8080030b 	ldhu	r2,12(r16)
   16ea0:	1080200c 	andi	r2,r2,128
   16ea4:	1000151e 	bne	r2,zero,16efc <_fclose_r+0xd8>
   16ea8:	81400c17 	ldw	r5,48(r16)
   16eac:	28000526 	beq	r5,zero,16ec4 <_fclose_r+0xa0>
   16eb0:	80801004 	addi	r2,r16,64
   16eb4:	28800226 	beq	r5,r2,16ec0 <_fclose_r+0x9c>
   16eb8:	8809883a 	mov	r4,r17
   16ebc:	0012c4c0 	call	12c4c <_free_r>
   16ec0:	80000c15 	stw	zero,48(r16)
   16ec4:	81401117 	ldw	r5,68(r16)
   16ec8:	28000326 	beq	r5,zero,16ed8 <_fclose_r+0xb4>
   16ecc:	8809883a 	mov	r4,r17
   16ed0:	0012c4c0 	call	12c4c <_free_r>
   16ed4:	80001115 	stw	zero,68(r16)
   16ed8:	0012ae80 	call	12ae8 <__sfp_lock_acquire>
   16edc:	8000030d 	sth	zero,12(r16)
   16ee0:	0012aec0 	call	12aec <__sfp_lock_release>
   16ee4:	9005883a 	mov	r2,r18
   16ee8:	003fdc06 	br	16e5c <__alt_data_end+0xf8016e5c>
   16eec:	0012ad80 	call	12ad8 <__sinit>
   16ef0:	003fd706 	br	16e50 <__alt_data_end+0xf8016e50>
   16ef4:	04bfffc4 	movi	r18,-1
   16ef8:	003fe806 	br	16e9c <__alt_data_end+0xf8016e9c>
   16efc:	81400417 	ldw	r5,16(r16)
   16f00:	8809883a 	mov	r4,r17
   16f04:	0012c4c0 	call	12c4c <_free_r>
   16f08:	003fe706 	br	16ea8 <__alt_data_end+0xf8016ea8>
   16f0c:	0005883a 	mov	r2,zero
   16f10:	f800283a 	ret

00016f14 <fclose>:
   16f14:	008000b4 	movhi	r2,2
   16f18:	10b9c804 	addi	r2,r2,-6368
   16f1c:	200b883a 	mov	r5,r4
   16f20:	11000017 	ldw	r4,0(r2)
   16f24:	0016e241 	jmpi	16e24 <_fclose_r>

00016f28 <__fputwc>:
   16f28:	defff804 	addi	sp,sp,-32
   16f2c:	dcc00415 	stw	r19,16(sp)
   16f30:	dc800315 	stw	r18,12(sp)
   16f34:	dc000115 	stw	r16,4(sp)
   16f38:	dfc00715 	stw	ra,28(sp)
   16f3c:	dd400615 	stw	r21,24(sp)
   16f40:	dd000515 	stw	r20,20(sp)
   16f44:	dc400215 	stw	r17,8(sp)
   16f48:	2027883a 	mov	r19,r4
   16f4c:	2825883a 	mov	r18,r5
   16f50:	3021883a 	mov	r16,r6
   16f54:	00136340 	call	13634 <__locale_mb_cur_max>
   16f58:	00c00044 	movi	r3,1
   16f5c:	10c03e26 	beq	r2,r3,17058 <__fputwc+0x130>
   16f60:	81c01704 	addi	r7,r16,92
   16f64:	900d883a 	mov	r6,r18
   16f68:	d80b883a 	mov	r5,sp
   16f6c:	9809883a 	mov	r4,r19
   16f70:	00173f80 	call	173f8 <_wcrtomb_r>
   16f74:	1029883a 	mov	r20,r2
   16f78:	00bfffc4 	movi	r2,-1
   16f7c:	a0802026 	beq	r20,r2,17000 <__fputwc+0xd8>
   16f80:	d9400003 	ldbu	r5,0(sp)
   16f84:	a0001c26 	beq	r20,zero,16ff8 <__fputwc+0xd0>
   16f88:	0023883a 	mov	r17,zero
   16f8c:	05400284 	movi	r21,10
   16f90:	00000906 	br	16fb8 <__fputwc+0x90>
   16f94:	80800017 	ldw	r2,0(r16)
   16f98:	11400005 	stb	r5,0(r2)
   16f9c:	80c00017 	ldw	r3,0(r16)
   16fa0:	18c00044 	addi	r3,r3,1
   16fa4:	80c00015 	stw	r3,0(r16)
   16fa8:	8c400044 	addi	r17,r17,1
   16fac:	dc45883a 	add	r2,sp,r17
   16fb0:	8d00112e 	bgeu	r17,r20,16ff8 <__fputwc+0xd0>
   16fb4:	11400003 	ldbu	r5,0(r2)
   16fb8:	80c00217 	ldw	r3,8(r16)
   16fbc:	18ffffc4 	addi	r3,r3,-1
   16fc0:	80c00215 	stw	r3,8(r16)
   16fc4:	183ff30e 	bge	r3,zero,16f94 <__alt_data_end+0xf8016f94>
   16fc8:	80800617 	ldw	r2,24(r16)
   16fcc:	18801916 	blt	r3,r2,17034 <__fputwc+0x10c>
   16fd0:	80800017 	ldw	r2,0(r16)
   16fd4:	11400005 	stb	r5,0(r2)
   16fd8:	80800017 	ldw	r2,0(r16)
   16fdc:	10c00003 	ldbu	r3,0(r2)
   16fe0:	10800044 	addi	r2,r2,1
   16fe4:	1d402326 	beq	r3,r21,17074 <__fputwc+0x14c>
   16fe8:	80800015 	stw	r2,0(r16)
   16fec:	8c400044 	addi	r17,r17,1
   16ff0:	dc45883a 	add	r2,sp,r17
   16ff4:	8d3fef36 	bltu	r17,r20,16fb4 <__alt_data_end+0xf8016fb4>
   16ff8:	9005883a 	mov	r2,r18
   16ffc:	00000406 	br	17010 <__fputwc+0xe8>
   17000:	80c0030b 	ldhu	r3,12(r16)
   17004:	a005883a 	mov	r2,r20
   17008:	18c01014 	ori	r3,r3,64
   1700c:	80c0030d 	sth	r3,12(r16)
   17010:	dfc00717 	ldw	ra,28(sp)
   17014:	dd400617 	ldw	r21,24(sp)
   17018:	dd000517 	ldw	r20,20(sp)
   1701c:	dcc00417 	ldw	r19,16(sp)
   17020:	dc800317 	ldw	r18,12(sp)
   17024:	dc400217 	ldw	r17,8(sp)
   17028:	dc000117 	ldw	r16,4(sp)
   1702c:	dec00804 	addi	sp,sp,32
   17030:	f800283a 	ret
   17034:	800d883a 	mov	r6,r16
   17038:	29403fcc 	andi	r5,r5,255
   1703c:	9809883a 	mov	r4,r19
   17040:	00172a00 	call	172a0 <__swbuf_r>
   17044:	10bfffe0 	cmpeqi	r2,r2,-1
   17048:	10803fcc 	andi	r2,r2,255
   1704c:	103fd626 	beq	r2,zero,16fa8 <__alt_data_end+0xf8016fa8>
   17050:	00bfffc4 	movi	r2,-1
   17054:	003fee06 	br	17010 <__alt_data_end+0xf8017010>
   17058:	90ffffc4 	addi	r3,r18,-1
   1705c:	01003f84 	movi	r4,254
   17060:	20ffbf36 	bltu	r4,r3,16f60 <__alt_data_end+0xf8016f60>
   17064:	900b883a 	mov	r5,r18
   17068:	dc800005 	stb	r18,0(sp)
   1706c:	1029883a 	mov	r20,r2
   17070:	003fc506 	br	16f88 <__alt_data_end+0xf8016f88>
   17074:	800d883a 	mov	r6,r16
   17078:	a80b883a 	mov	r5,r21
   1707c:	9809883a 	mov	r4,r19
   17080:	00172a00 	call	172a0 <__swbuf_r>
   17084:	10bfffe0 	cmpeqi	r2,r2,-1
   17088:	003fef06 	br	17048 <__alt_data_end+0xf8017048>

0001708c <_fputwc_r>:
   1708c:	3080030b 	ldhu	r2,12(r6)
   17090:	10c8000c 	andi	r3,r2,8192
   17094:	1800051e 	bne	r3,zero,170ac <_fputwc_r+0x20>
   17098:	30c01917 	ldw	r3,100(r6)
   1709c:	10880014 	ori	r2,r2,8192
   170a0:	3080030d 	sth	r2,12(r6)
   170a4:	18880014 	ori	r2,r3,8192
   170a8:	30801915 	stw	r2,100(r6)
   170ac:	0016f281 	jmpi	16f28 <__fputwc>

000170b0 <fputwc>:
   170b0:	008000b4 	movhi	r2,2
   170b4:	defffc04 	addi	sp,sp,-16
   170b8:	10b9c804 	addi	r2,r2,-6368
   170bc:	dc000115 	stw	r16,4(sp)
   170c0:	14000017 	ldw	r16,0(r2)
   170c4:	dc400215 	stw	r17,8(sp)
   170c8:	dfc00315 	stw	ra,12(sp)
   170cc:	2023883a 	mov	r17,r4
   170d0:	80000226 	beq	r16,zero,170dc <fputwc+0x2c>
   170d4:	80800e17 	ldw	r2,56(r16)
   170d8:	10001026 	beq	r2,zero,1711c <fputwc+0x6c>
   170dc:	2880030b 	ldhu	r2,12(r5)
   170e0:	10c8000c 	andi	r3,r2,8192
   170e4:	1800051e 	bne	r3,zero,170fc <fputwc+0x4c>
   170e8:	28c01917 	ldw	r3,100(r5)
   170ec:	10880014 	ori	r2,r2,8192
   170f0:	2880030d 	sth	r2,12(r5)
   170f4:	18880014 	ori	r2,r3,8192
   170f8:	28801915 	stw	r2,100(r5)
   170fc:	280d883a 	mov	r6,r5
   17100:	8009883a 	mov	r4,r16
   17104:	880b883a 	mov	r5,r17
   17108:	dfc00317 	ldw	ra,12(sp)
   1710c:	dc400217 	ldw	r17,8(sp)
   17110:	dc000117 	ldw	r16,4(sp)
   17114:	dec00404 	addi	sp,sp,16
   17118:	0016f281 	jmpi	16f28 <__fputwc>
   1711c:	8009883a 	mov	r4,r16
   17120:	d9400015 	stw	r5,0(sp)
   17124:	0012ad80 	call	12ad8 <__sinit>
   17128:	d9400017 	ldw	r5,0(sp)
   1712c:	003feb06 	br	170dc <__alt_data_end+0xf80170dc>

00017130 <_fstat_r>:
   17130:	defffd04 	addi	sp,sp,-12
   17134:	2805883a 	mov	r2,r5
   17138:	dc000015 	stw	r16,0(sp)
   1713c:	040000b4 	movhi	r16,2
   17140:	dc400115 	stw	r17,4(sp)
   17144:	8400bf04 	addi	r16,r16,764
   17148:	2023883a 	mov	r17,r4
   1714c:	300b883a 	mov	r5,r6
   17150:	1009883a 	mov	r4,r2
   17154:	dfc00215 	stw	ra,8(sp)
   17158:	80000015 	stw	zero,0(r16)
   1715c:	00197980 	call	19798 <fstat>
   17160:	00ffffc4 	movi	r3,-1
   17164:	10c00526 	beq	r2,r3,1717c <_fstat_r+0x4c>
   17168:	dfc00217 	ldw	ra,8(sp)
   1716c:	dc400117 	ldw	r17,4(sp)
   17170:	dc000017 	ldw	r16,0(sp)
   17174:	dec00304 	addi	sp,sp,12
   17178:	f800283a 	ret
   1717c:	80c00017 	ldw	r3,0(r16)
   17180:	183ff926 	beq	r3,zero,17168 <__alt_data_end+0xf8017168>
   17184:	88c00015 	stw	r3,0(r17)
   17188:	003ff706 	br	17168 <__alt_data_end+0xf8017168>

0001718c <_isatty_r>:
   1718c:	defffd04 	addi	sp,sp,-12
   17190:	dc000015 	stw	r16,0(sp)
   17194:	040000b4 	movhi	r16,2
   17198:	dc400115 	stw	r17,4(sp)
   1719c:	8400bf04 	addi	r16,r16,764
   171a0:	2023883a 	mov	r17,r4
   171a4:	2809883a 	mov	r4,r5
   171a8:	dfc00215 	stw	ra,8(sp)
   171ac:	80000015 	stw	zero,0(r16)
   171b0:	001988c0 	call	1988c <isatty>
   171b4:	00ffffc4 	movi	r3,-1
   171b8:	10c00526 	beq	r2,r3,171d0 <_isatty_r+0x44>
   171bc:	dfc00217 	ldw	ra,8(sp)
   171c0:	dc400117 	ldw	r17,4(sp)
   171c4:	dc000017 	ldw	r16,0(sp)
   171c8:	dec00304 	addi	sp,sp,12
   171cc:	f800283a 	ret
   171d0:	80c00017 	ldw	r3,0(r16)
   171d4:	183ff926 	beq	r3,zero,171bc <__alt_data_end+0xf80171bc>
   171d8:	88c00015 	stw	r3,0(r17)
   171dc:	003ff706 	br	171bc <__alt_data_end+0xf80171bc>

000171e0 <_lseek_r>:
   171e0:	defffd04 	addi	sp,sp,-12
   171e4:	2805883a 	mov	r2,r5
   171e8:	dc000015 	stw	r16,0(sp)
   171ec:	040000b4 	movhi	r16,2
   171f0:	dc400115 	stw	r17,4(sp)
   171f4:	300b883a 	mov	r5,r6
   171f8:	8400bf04 	addi	r16,r16,764
   171fc:	2023883a 	mov	r17,r4
   17200:	380d883a 	mov	r6,r7
   17204:	1009883a 	mov	r4,r2
   17208:	dfc00215 	stw	ra,8(sp)
   1720c:	80000015 	stw	zero,0(r16)
   17210:	0019a600 	call	19a60 <lseek>
   17214:	00ffffc4 	movi	r3,-1
   17218:	10c00526 	beq	r2,r3,17230 <_lseek_r+0x50>
   1721c:	dfc00217 	ldw	ra,8(sp)
   17220:	dc400117 	ldw	r17,4(sp)
   17224:	dc000017 	ldw	r16,0(sp)
   17228:	dec00304 	addi	sp,sp,12
   1722c:	f800283a 	ret
   17230:	80c00017 	ldw	r3,0(r16)
   17234:	183ff926 	beq	r3,zero,1721c <__alt_data_end+0xf801721c>
   17238:	88c00015 	stw	r3,0(r17)
   1723c:	003ff706 	br	1721c <__alt_data_end+0xf801721c>

00017240 <_read_r>:
   17240:	defffd04 	addi	sp,sp,-12
   17244:	2805883a 	mov	r2,r5
   17248:	dc000015 	stw	r16,0(sp)
   1724c:	040000b4 	movhi	r16,2
   17250:	dc400115 	stw	r17,4(sp)
   17254:	300b883a 	mov	r5,r6
   17258:	8400bf04 	addi	r16,r16,764
   1725c:	2023883a 	mov	r17,r4
   17260:	380d883a 	mov	r6,r7
   17264:	1009883a 	mov	r4,r2
   17268:	dfc00215 	stw	ra,8(sp)
   1726c:	80000015 	stw	zero,0(r16)
   17270:	0019c3c0 	call	19c3c <read>
   17274:	00ffffc4 	movi	r3,-1
   17278:	10c00526 	beq	r2,r3,17290 <_read_r+0x50>
   1727c:	dfc00217 	ldw	ra,8(sp)
   17280:	dc400117 	ldw	r17,4(sp)
   17284:	dc000017 	ldw	r16,0(sp)
   17288:	dec00304 	addi	sp,sp,12
   1728c:	f800283a 	ret
   17290:	80c00017 	ldw	r3,0(r16)
   17294:	183ff926 	beq	r3,zero,1727c <__alt_data_end+0xf801727c>
   17298:	88c00015 	stw	r3,0(r17)
   1729c:	003ff706 	br	1727c <__alt_data_end+0xf801727c>

000172a0 <__swbuf_r>:
   172a0:	defffb04 	addi	sp,sp,-20
   172a4:	dcc00315 	stw	r19,12(sp)
   172a8:	dc800215 	stw	r18,8(sp)
   172ac:	dc000015 	stw	r16,0(sp)
   172b0:	dfc00415 	stw	ra,16(sp)
   172b4:	dc400115 	stw	r17,4(sp)
   172b8:	2025883a 	mov	r18,r4
   172bc:	2827883a 	mov	r19,r5
   172c0:	3021883a 	mov	r16,r6
   172c4:	20000226 	beq	r4,zero,172d0 <__swbuf_r+0x30>
   172c8:	20800e17 	ldw	r2,56(r4)
   172cc:	10004226 	beq	r2,zero,173d8 <__swbuf_r+0x138>
   172d0:	80800617 	ldw	r2,24(r16)
   172d4:	8100030b 	ldhu	r4,12(r16)
   172d8:	80800215 	stw	r2,8(r16)
   172dc:	2080020c 	andi	r2,r4,8
   172e0:	10003626 	beq	r2,zero,173bc <__swbuf_r+0x11c>
   172e4:	80c00417 	ldw	r3,16(r16)
   172e8:	18003426 	beq	r3,zero,173bc <__swbuf_r+0x11c>
   172ec:	2088000c 	andi	r2,r4,8192
   172f0:	9c403fcc 	andi	r17,r19,255
   172f4:	10001a26 	beq	r2,zero,17360 <__swbuf_r+0xc0>
   172f8:	80800017 	ldw	r2,0(r16)
   172fc:	81000517 	ldw	r4,20(r16)
   17300:	10c7c83a 	sub	r3,r2,r3
   17304:	1900200e 	bge	r3,r4,17388 <__swbuf_r+0xe8>
   17308:	18c00044 	addi	r3,r3,1
   1730c:	81000217 	ldw	r4,8(r16)
   17310:	11400044 	addi	r5,r2,1
   17314:	81400015 	stw	r5,0(r16)
   17318:	213fffc4 	addi	r4,r4,-1
   1731c:	81000215 	stw	r4,8(r16)
   17320:	14c00005 	stb	r19,0(r2)
   17324:	80800517 	ldw	r2,20(r16)
   17328:	10c01e26 	beq	r2,r3,173a4 <__swbuf_r+0x104>
   1732c:	8080030b 	ldhu	r2,12(r16)
   17330:	1080004c 	andi	r2,r2,1
   17334:	10000226 	beq	r2,zero,17340 <__swbuf_r+0xa0>
   17338:	00800284 	movi	r2,10
   1733c:	88801926 	beq	r17,r2,173a4 <__swbuf_r+0x104>
   17340:	8805883a 	mov	r2,r17
   17344:	dfc00417 	ldw	ra,16(sp)
   17348:	dcc00317 	ldw	r19,12(sp)
   1734c:	dc800217 	ldw	r18,8(sp)
   17350:	dc400117 	ldw	r17,4(sp)
   17354:	dc000017 	ldw	r16,0(sp)
   17358:	dec00504 	addi	sp,sp,20
   1735c:	f800283a 	ret
   17360:	81401917 	ldw	r5,100(r16)
   17364:	00b7ffc4 	movi	r2,-8193
   17368:	21080014 	ori	r4,r4,8192
   1736c:	2884703a 	and	r2,r5,r2
   17370:	80801915 	stw	r2,100(r16)
   17374:	80800017 	ldw	r2,0(r16)
   17378:	8100030d 	sth	r4,12(r16)
   1737c:	81000517 	ldw	r4,20(r16)
   17380:	10c7c83a 	sub	r3,r2,r3
   17384:	193fe016 	blt	r3,r4,17308 <__alt_data_end+0xf8017308>
   17388:	800b883a 	mov	r5,r16
   1738c:	9009883a 	mov	r4,r18
   17390:	00126ec0 	call	126ec <_fflush_r>
   17394:	1000071e 	bne	r2,zero,173b4 <__swbuf_r+0x114>
   17398:	80800017 	ldw	r2,0(r16)
   1739c:	00c00044 	movi	r3,1
   173a0:	003fda06 	br	1730c <__alt_data_end+0xf801730c>
   173a4:	800b883a 	mov	r5,r16
   173a8:	9009883a 	mov	r4,r18
   173ac:	00126ec0 	call	126ec <_fflush_r>
   173b0:	103fe326 	beq	r2,zero,17340 <__alt_data_end+0xf8017340>
   173b4:	00bfffc4 	movi	r2,-1
   173b8:	003fe206 	br	17344 <__alt_data_end+0xf8017344>
   173bc:	800b883a 	mov	r5,r16
   173c0:	9009883a 	mov	r4,r18
   173c4:	0010acc0 	call	10acc <__swsetup_r>
   173c8:	103ffa1e 	bne	r2,zero,173b4 <__alt_data_end+0xf80173b4>
   173cc:	8100030b 	ldhu	r4,12(r16)
   173d0:	80c00417 	ldw	r3,16(r16)
   173d4:	003fc506 	br	172ec <__alt_data_end+0xf80172ec>
   173d8:	0012ad80 	call	12ad8 <__sinit>
   173dc:	003fbc06 	br	172d0 <__alt_data_end+0xf80172d0>

000173e0 <__swbuf>:
   173e0:	008000b4 	movhi	r2,2
   173e4:	10b9c804 	addi	r2,r2,-6368
   173e8:	280d883a 	mov	r6,r5
   173ec:	200b883a 	mov	r5,r4
   173f0:	11000017 	ldw	r4,0(r2)
   173f4:	00172a01 	jmpi	172a0 <__swbuf_r>

000173f8 <_wcrtomb_r>:
   173f8:	defff604 	addi	sp,sp,-40
   173fc:	008000b4 	movhi	r2,2
   17400:	dc800815 	stw	r18,32(sp)
   17404:	dc400715 	stw	r17,28(sp)
   17408:	dc000615 	stw	r16,24(sp)
   1740c:	10b9cc04 	addi	r2,r2,-6352
   17410:	dfc00915 	stw	ra,36(sp)
   17414:	2021883a 	mov	r16,r4
   17418:	3823883a 	mov	r17,r7
   1741c:	14800017 	ldw	r18,0(r2)
   17420:	28001426 	beq	r5,zero,17474 <_wcrtomb_r+0x7c>
   17424:	d9400415 	stw	r5,16(sp)
   17428:	d9800515 	stw	r6,20(sp)
   1742c:	00136280 	call	13628 <__locale_charset>
   17430:	d9800517 	ldw	r6,20(sp)
   17434:	d9400417 	ldw	r5,16(sp)
   17438:	100f883a 	mov	r7,r2
   1743c:	dc400015 	stw	r17,0(sp)
   17440:	8009883a 	mov	r4,r16
   17444:	903ee83a 	callr	r18
   17448:	00ffffc4 	movi	r3,-1
   1744c:	10c0031e 	bne	r2,r3,1745c <_wcrtomb_r+0x64>
   17450:	88000015 	stw	zero,0(r17)
   17454:	00c02284 	movi	r3,138
   17458:	80c00015 	stw	r3,0(r16)
   1745c:	dfc00917 	ldw	ra,36(sp)
   17460:	dc800817 	ldw	r18,32(sp)
   17464:	dc400717 	ldw	r17,28(sp)
   17468:	dc000617 	ldw	r16,24(sp)
   1746c:	dec00a04 	addi	sp,sp,40
   17470:	f800283a 	ret
   17474:	00136280 	call	13628 <__locale_charset>
   17478:	100f883a 	mov	r7,r2
   1747c:	dc400015 	stw	r17,0(sp)
   17480:	000d883a 	mov	r6,zero
   17484:	d9400104 	addi	r5,sp,4
   17488:	8009883a 	mov	r4,r16
   1748c:	903ee83a 	callr	r18
   17490:	003fed06 	br	17448 <__alt_data_end+0xf8017448>

00017494 <wcrtomb>:
   17494:	defff604 	addi	sp,sp,-40
   17498:	008000b4 	movhi	r2,2
   1749c:	dc800615 	stw	r18,24(sp)
   174a0:	dc400515 	stw	r17,20(sp)
   174a4:	10b9c804 	addi	r2,r2,-6368
   174a8:	dfc00915 	stw	ra,36(sp)
   174ac:	dd000815 	stw	r20,32(sp)
   174b0:	dcc00715 	stw	r19,28(sp)
   174b4:	dc000415 	stw	r16,16(sp)
   174b8:	3025883a 	mov	r18,r6
   174bc:	14400017 	ldw	r17,0(r2)
   174c0:	20001926 	beq	r4,zero,17528 <wcrtomb+0x94>
   174c4:	008000b4 	movhi	r2,2
   174c8:	10b9cc04 	addi	r2,r2,-6352
   174cc:	15000017 	ldw	r20,0(r2)
   174d0:	2021883a 	mov	r16,r4
   174d4:	2827883a 	mov	r19,r5
   174d8:	00136280 	call	13628 <__locale_charset>
   174dc:	100f883a 	mov	r7,r2
   174e0:	dc800015 	stw	r18,0(sp)
   174e4:	980d883a 	mov	r6,r19
   174e8:	800b883a 	mov	r5,r16
   174ec:	8809883a 	mov	r4,r17
   174f0:	a03ee83a 	callr	r20
   174f4:	00ffffc4 	movi	r3,-1
   174f8:	10c0031e 	bne	r2,r3,17508 <wcrtomb+0x74>
   174fc:	90000015 	stw	zero,0(r18)
   17500:	00c02284 	movi	r3,138
   17504:	88c00015 	stw	r3,0(r17)
   17508:	dfc00917 	ldw	ra,36(sp)
   1750c:	dd000817 	ldw	r20,32(sp)
   17510:	dcc00717 	ldw	r19,28(sp)
   17514:	dc800617 	ldw	r18,24(sp)
   17518:	dc400517 	ldw	r17,20(sp)
   1751c:	dc000417 	ldw	r16,16(sp)
   17520:	dec00a04 	addi	sp,sp,40
   17524:	f800283a 	ret
   17528:	008000b4 	movhi	r2,2
   1752c:	10b9cc04 	addi	r2,r2,-6352
   17530:	14000017 	ldw	r16,0(r2)
   17534:	00136280 	call	13628 <__locale_charset>
   17538:	100f883a 	mov	r7,r2
   1753c:	dc800015 	stw	r18,0(sp)
   17540:	000d883a 	mov	r6,zero
   17544:	d9400104 	addi	r5,sp,4
   17548:	8809883a 	mov	r4,r17
   1754c:	803ee83a 	callr	r16
   17550:	003fe806 	br	174f4 <__alt_data_end+0xf80174f4>

00017554 <__ascii_wctomb>:
   17554:	28000526 	beq	r5,zero,1756c <__ascii_wctomb+0x18>
   17558:	00803fc4 	movi	r2,255
   1755c:	11800536 	bltu	r2,r6,17574 <__ascii_wctomb+0x20>
   17560:	29800005 	stb	r6,0(r5)
   17564:	00800044 	movi	r2,1
   17568:	f800283a 	ret
   1756c:	0005883a 	mov	r2,zero
   17570:	f800283a 	ret
   17574:	00802284 	movi	r2,138
   17578:	20800015 	stw	r2,0(r4)
   1757c:	00bfffc4 	movi	r2,-1
   17580:	f800283a 	ret

00017584 <_wctomb_r>:
   17584:	008000b4 	movhi	r2,2
   17588:	defff904 	addi	sp,sp,-28
   1758c:	10b9cc04 	addi	r2,r2,-6352
   17590:	dfc00615 	stw	ra,24(sp)
   17594:	dc400515 	stw	r17,20(sp)
   17598:	dc000415 	stw	r16,16(sp)
   1759c:	3823883a 	mov	r17,r7
   175a0:	14000017 	ldw	r16,0(r2)
   175a4:	d9000115 	stw	r4,4(sp)
   175a8:	d9400215 	stw	r5,8(sp)
   175ac:	d9800315 	stw	r6,12(sp)
   175b0:	00136280 	call	13628 <__locale_charset>
   175b4:	d9800317 	ldw	r6,12(sp)
   175b8:	d9400217 	ldw	r5,8(sp)
   175bc:	d9000117 	ldw	r4,4(sp)
   175c0:	100f883a 	mov	r7,r2
   175c4:	dc400015 	stw	r17,0(sp)
   175c8:	803ee83a 	callr	r16
   175cc:	dfc00617 	ldw	ra,24(sp)
   175d0:	dc400517 	ldw	r17,20(sp)
   175d4:	dc000417 	ldw	r16,16(sp)
   175d8:	dec00704 	addi	sp,sp,28
   175dc:	f800283a 	ret

000175e0 <__muldi3>:
   175e0:	defff604 	addi	sp,sp,-40
   175e4:	dd800615 	stw	r22,24(sp)
   175e8:	dd400515 	stw	r21,20(sp)
   175ec:	dc400115 	stw	r17,4(sp)
   175f0:	357fffcc 	andi	r21,r6,65535
   175f4:	2022d43a 	srli	r17,r4,16
   175f8:	25bfffcc 	andi	r22,r4,65535
   175fc:	dcc00315 	stw	r19,12(sp)
   17600:	dc800215 	stw	r18,8(sp)
   17604:	2027883a 	mov	r19,r4
   17608:	2825883a 	mov	r18,r5
   1760c:	b009883a 	mov	r4,r22
   17610:	a80b883a 	mov	r5,r21
   17614:	dfc00915 	stw	ra,36(sp)
   17618:	df000815 	stw	fp,32(sp)
   1761c:	ddc00715 	stw	r23,28(sp)
   17620:	3839883a 	mov	fp,r7
   17624:	302ed43a 	srli	r23,r6,16
   17628:	dd000415 	stw	r20,16(sp)
   1762c:	dc000015 	stw	r16,0(sp)
   17630:	3029883a 	mov	r20,r6
   17634:	000c68c0 	call	c68c <__mulsi3>
   17638:	a80b883a 	mov	r5,r21
   1763c:	8809883a 	mov	r4,r17
   17640:	1021883a 	mov	r16,r2
   17644:	000c68c0 	call	c68c <__mulsi3>
   17648:	8809883a 	mov	r4,r17
   1764c:	b80b883a 	mov	r5,r23
   17650:	102b883a 	mov	r21,r2
   17654:	000c68c0 	call	c68c <__mulsi3>
   17658:	b80b883a 	mov	r5,r23
   1765c:	b009883a 	mov	r4,r22
   17660:	1023883a 	mov	r17,r2
   17664:	000c68c0 	call	c68c <__mulsi3>
   17668:	8006d43a 	srli	r3,r16,16
   1766c:	1545883a 	add	r2,r2,r21
   17670:	1885883a 	add	r2,r3,r2
   17674:	1540022e 	bgeu	r2,r21,17680 <__muldi3+0xa0>
   17678:	00c00074 	movhi	r3,1
   1767c:	88e3883a 	add	r17,r17,r3
   17680:	1006d43a 	srli	r3,r2,16
   17684:	1004943a 	slli	r2,r2,16
   17688:	e00b883a 	mov	r5,fp
   1768c:	9809883a 	mov	r4,r19
   17690:	843fffcc 	andi	r16,r16,65535
   17694:	1c63883a 	add	r17,r3,r17
   17698:	1421883a 	add	r16,r2,r16
   1769c:	000c68c0 	call	c68c <__mulsi3>
   176a0:	900b883a 	mov	r5,r18
   176a4:	a009883a 	mov	r4,r20
   176a8:	1027883a 	mov	r19,r2
   176ac:	000c68c0 	call	c68c <__mulsi3>
   176b0:	9885883a 	add	r2,r19,r2
   176b4:	1447883a 	add	r3,r2,r17
   176b8:	8005883a 	mov	r2,r16
   176bc:	dfc00917 	ldw	ra,36(sp)
   176c0:	df000817 	ldw	fp,32(sp)
   176c4:	ddc00717 	ldw	r23,28(sp)
   176c8:	dd800617 	ldw	r22,24(sp)
   176cc:	dd400517 	ldw	r21,20(sp)
   176d0:	dd000417 	ldw	r20,16(sp)
   176d4:	dcc00317 	ldw	r19,12(sp)
   176d8:	dc800217 	ldw	r18,8(sp)
   176dc:	dc400117 	ldw	r17,4(sp)
   176e0:	dc000017 	ldw	r16,0(sp)
   176e4:	dec00a04 	addi	sp,sp,40
   176e8:	f800283a 	ret

000176ec <__udivdi3>:
   176ec:	defff404 	addi	sp,sp,-48
   176f0:	dcc00515 	stw	r19,20(sp)
   176f4:	dc000215 	stw	r16,8(sp)
   176f8:	dfc00b15 	stw	ra,44(sp)
   176fc:	df000a15 	stw	fp,40(sp)
   17700:	ddc00915 	stw	r23,36(sp)
   17704:	dd800815 	stw	r22,32(sp)
   17708:	dd400715 	stw	r21,28(sp)
   1770c:	dd000615 	stw	r20,24(sp)
   17710:	dc800415 	stw	r18,16(sp)
   17714:	dc400315 	stw	r17,12(sp)
   17718:	2027883a 	mov	r19,r4
   1771c:	2821883a 	mov	r16,r5
   17720:	3800461e 	bne	r7,zero,1783c <__udivdi3+0x150>
   17724:	3023883a 	mov	r17,r6
   17728:	2025883a 	mov	r18,r4
   1772c:	2980572e 	bgeu	r5,r6,1788c <__udivdi3+0x1a0>
   17730:	00bfffd4 	movui	r2,65535
   17734:	282d883a 	mov	r22,r5
   17738:	1180b236 	bltu	r2,r6,17a04 <__udivdi3+0x318>
   1773c:	00803fc4 	movi	r2,255
   17740:	1185803a 	cmpltu	r2,r2,r6
   17744:	100490fa 	slli	r2,r2,3
   17748:	3086d83a 	srl	r3,r6,r2
   1774c:	010000b4 	movhi	r4,2
   17750:	21323e04 	addi	r4,r4,-14088
   17754:	20c7883a 	add	r3,r4,r3
   17758:	18c00003 	ldbu	r3,0(r3)
   1775c:	1885883a 	add	r2,r3,r2
   17760:	00c00804 	movi	r3,32
   17764:	1887c83a 	sub	r3,r3,r2
   17768:	18000526 	beq	r3,zero,17780 <__udivdi3+0x94>
   1776c:	80e0983a 	sll	r16,r16,r3
   17770:	9884d83a 	srl	r2,r19,r2
   17774:	30e2983a 	sll	r17,r6,r3
   17778:	98e4983a 	sll	r18,r19,r3
   1777c:	142cb03a 	or	r22,r2,r16
   17780:	882ad43a 	srli	r21,r17,16
   17784:	b009883a 	mov	r4,r22
   17788:	8d3fffcc 	andi	r20,r17,65535
   1778c:	a80b883a 	mov	r5,r21
   17790:	000c6340 	call	c634 <__umodsi3>
   17794:	b009883a 	mov	r4,r22
   17798:	a80b883a 	mov	r5,r21
   1779c:	1027883a 	mov	r19,r2
   177a0:	000c5d00 	call	c5d0 <__udivsi3>
   177a4:	100b883a 	mov	r5,r2
   177a8:	a009883a 	mov	r4,r20
   177ac:	102d883a 	mov	r22,r2
   177b0:	000c68c0 	call	c68c <__mulsi3>
   177b4:	9826943a 	slli	r19,r19,16
   177b8:	9006d43a 	srli	r3,r18,16
   177bc:	1cc6b03a 	or	r3,r3,r19
   177c0:	1880052e 	bgeu	r3,r2,177d8 <__udivdi3+0xec>
   177c4:	1c47883a 	add	r3,r3,r17
   177c8:	b13fffc4 	addi	r4,r22,-1
   177cc:	1c400136 	bltu	r3,r17,177d4 <__udivdi3+0xe8>
   177d0:	18814236 	bltu	r3,r2,17cdc <__udivdi3+0x5f0>
   177d4:	202d883a 	mov	r22,r4
   177d8:	18a1c83a 	sub	r16,r3,r2
   177dc:	8009883a 	mov	r4,r16
   177e0:	a80b883a 	mov	r5,r21
   177e4:	000c6340 	call	c634 <__umodsi3>
   177e8:	1027883a 	mov	r19,r2
   177ec:	8009883a 	mov	r4,r16
   177f0:	a80b883a 	mov	r5,r21
   177f4:	9826943a 	slli	r19,r19,16
   177f8:	000c5d00 	call	c5d0 <__udivsi3>
   177fc:	100b883a 	mov	r5,r2
   17800:	a009883a 	mov	r4,r20
   17804:	94bfffcc 	andi	r18,r18,65535
   17808:	1021883a 	mov	r16,r2
   1780c:	94e4b03a 	or	r18,r18,r19
   17810:	000c68c0 	call	c68c <__mulsi3>
   17814:	9080052e 	bgeu	r18,r2,1782c <__udivdi3+0x140>
   17818:	8ca5883a 	add	r18,r17,r18
   1781c:	80ffffc4 	addi	r3,r16,-1
   17820:	94410c36 	bltu	r18,r17,17c54 <__udivdi3+0x568>
   17824:	90810b2e 	bgeu	r18,r2,17c54 <__udivdi3+0x568>
   17828:	843fff84 	addi	r16,r16,-2
   1782c:	b004943a 	slli	r2,r22,16
   17830:	0007883a 	mov	r3,zero
   17834:	1404b03a 	or	r2,r2,r16
   17838:	00005e06 	br	179b4 <__udivdi3+0x2c8>
   1783c:	29c05b36 	bltu	r5,r7,179ac <__udivdi3+0x2c0>
   17840:	00bfffd4 	movui	r2,65535
   17844:	11c0672e 	bgeu	r2,r7,179e4 <__udivdi3+0x2f8>
   17848:	00804034 	movhi	r2,256
   1784c:	10bfffc4 	addi	r2,r2,-1
   17850:	11c10a36 	bltu	r2,r7,17c7c <__udivdi3+0x590>
   17854:	00800404 	movi	r2,16
   17858:	3886d83a 	srl	r3,r7,r2
   1785c:	010000b4 	movhi	r4,2
   17860:	21323e04 	addi	r4,r4,-14088
   17864:	20c7883a 	add	r3,r4,r3
   17868:	18c00003 	ldbu	r3,0(r3)
   1786c:	05c00804 	movi	r23,32
   17870:	1885883a 	add	r2,r3,r2
   17874:	b8afc83a 	sub	r23,r23,r2
   17878:	b800671e 	bne	r23,zero,17a18 <__udivdi3+0x32c>
   1787c:	3c010536 	bltu	r7,r16,17c94 <__udivdi3+0x5a8>
   17880:	9985403a 	cmpgeu	r2,r19,r6
   17884:	0007883a 	mov	r3,zero
   17888:	00004a06 	br	179b4 <__udivdi3+0x2c8>
   1788c:	3000041e 	bne	r6,zero,178a0 <__udivdi3+0x1b4>
   17890:	000b883a 	mov	r5,zero
   17894:	01000044 	movi	r4,1
   17898:	000c5d00 	call	c5d0 <__udivsi3>
   1789c:	1023883a 	mov	r17,r2
   178a0:	00bfffd4 	movui	r2,65535
   178a4:	1440532e 	bgeu	r2,r17,179f4 <__udivdi3+0x308>
   178a8:	00804034 	movhi	r2,256
   178ac:	10bfffc4 	addi	r2,r2,-1
   178b0:	1440f436 	bltu	r2,r17,17c84 <__udivdi3+0x598>
   178b4:	00800404 	movi	r2,16
   178b8:	8886d83a 	srl	r3,r17,r2
   178bc:	010000b4 	movhi	r4,2
   178c0:	21323e04 	addi	r4,r4,-14088
   178c4:	20c7883a 	add	r3,r4,r3
   178c8:	18c00003 	ldbu	r3,0(r3)
   178cc:	1885883a 	add	r2,r3,r2
   178d0:	00c00804 	movi	r3,32
   178d4:	1887c83a 	sub	r3,r3,r2
   178d8:	1800a51e 	bne	r3,zero,17b70 <__udivdi3+0x484>
   178dc:	882ad43a 	srli	r21,r17,16
   178e0:	8461c83a 	sub	r16,r16,r17
   178e4:	8d3fffcc 	andi	r20,r17,65535
   178e8:	00c00044 	movi	r3,1
   178ec:	a80b883a 	mov	r5,r21
   178f0:	8009883a 	mov	r4,r16
   178f4:	d8c00115 	stw	r3,4(sp)
   178f8:	000c6340 	call	c634 <__umodsi3>
   178fc:	a80b883a 	mov	r5,r21
   17900:	8009883a 	mov	r4,r16
   17904:	1027883a 	mov	r19,r2
   17908:	000c5d00 	call	c5d0 <__udivsi3>
   1790c:	a00b883a 	mov	r5,r20
   17910:	1009883a 	mov	r4,r2
   17914:	102d883a 	mov	r22,r2
   17918:	000c68c0 	call	c68c <__mulsi3>
   1791c:	9826943a 	slli	r19,r19,16
   17920:	900ed43a 	srli	r7,r18,16
   17924:	d8c00117 	ldw	r3,4(sp)
   17928:	3cceb03a 	or	r7,r7,r19
   1792c:	3880052e 	bgeu	r7,r2,17944 <__udivdi3+0x258>
   17930:	3c4f883a 	add	r7,r7,r17
   17934:	b13fffc4 	addi	r4,r22,-1
   17938:	3c400136 	bltu	r7,r17,17940 <__udivdi3+0x254>
   1793c:	3880e436 	bltu	r7,r2,17cd0 <__udivdi3+0x5e4>
   17940:	202d883a 	mov	r22,r4
   17944:	38a1c83a 	sub	r16,r7,r2
   17948:	8009883a 	mov	r4,r16
   1794c:	a80b883a 	mov	r5,r21
   17950:	d8c00115 	stw	r3,4(sp)
   17954:	000c6340 	call	c634 <__umodsi3>
   17958:	1027883a 	mov	r19,r2
   1795c:	8009883a 	mov	r4,r16
   17960:	a80b883a 	mov	r5,r21
   17964:	9826943a 	slli	r19,r19,16
   17968:	000c5d00 	call	c5d0 <__udivsi3>
   1796c:	a00b883a 	mov	r5,r20
   17970:	1009883a 	mov	r4,r2
   17974:	94bfffcc 	andi	r18,r18,65535
   17978:	1021883a 	mov	r16,r2
   1797c:	94e4b03a 	or	r18,r18,r19
   17980:	000c68c0 	call	c68c <__mulsi3>
   17984:	d8c00117 	ldw	r3,4(sp)
   17988:	9080052e 	bgeu	r18,r2,179a0 <__udivdi3+0x2b4>
   1798c:	8ca5883a 	add	r18,r17,r18
   17990:	813fffc4 	addi	r4,r16,-1
   17994:	9440ad36 	bltu	r18,r17,17c4c <__udivdi3+0x560>
   17998:	9080ac2e 	bgeu	r18,r2,17c4c <__udivdi3+0x560>
   1799c:	843fff84 	addi	r16,r16,-2
   179a0:	b004943a 	slli	r2,r22,16
   179a4:	1404b03a 	or	r2,r2,r16
   179a8:	00000206 	br	179b4 <__udivdi3+0x2c8>
   179ac:	0007883a 	mov	r3,zero
   179b0:	0005883a 	mov	r2,zero
   179b4:	dfc00b17 	ldw	ra,44(sp)
   179b8:	df000a17 	ldw	fp,40(sp)
   179bc:	ddc00917 	ldw	r23,36(sp)
   179c0:	dd800817 	ldw	r22,32(sp)
   179c4:	dd400717 	ldw	r21,28(sp)
   179c8:	dd000617 	ldw	r20,24(sp)
   179cc:	dcc00517 	ldw	r19,20(sp)
   179d0:	dc800417 	ldw	r18,16(sp)
   179d4:	dc400317 	ldw	r17,12(sp)
   179d8:	dc000217 	ldw	r16,8(sp)
   179dc:	dec00c04 	addi	sp,sp,48
   179e0:	f800283a 	ret
   179e4:	00803fc4 	movi	r2,255
   179e8:	11c5803a 	cmpltu	r2,r2,r7
   179ec:	100490fa 	slli	r2,r2,3
   179f0:	003f9906 	br	17858 <__alt_data_end+0xf8017858>
   179f4:	00803fc4 	movi	r2,255
   179f8:	1445803a 	cmpltu	r2,r2,r17
   179fc:	100490fa 	slli	r2,r2,3
   17a00:	003fad06 	br	178b8 <__alt_data_end+0xf80178b8>
   17a04:	00804034 	movhi	r2,256
   17a08:	10bfffc4 	addi	r2,r2,-1
   17a0c:	11809f36 	bltu	r2,r6,17c8c <__udivdi3+0x5a0>
   17a10:	00800404 	movi	r2,16
   17a14:	003f4c06 	br	17748 <__alt_data_end+0xf8017748>
   17a18:	3dce983a 	sll	r7,r7,r23
   17a1c:	30b8d83a 	srl	fp,r6,r2
   17a20:	80a2d83a 	srl	r17,r16,r2
   17a24:	35cc983a 	sll	r6,r6,r23
   17a28:	3f38b03a 	or	fp,r7,fp
   17a2c:	e024d43a 	srli	r18,fp,16
   17a30:	9884d83a 	srl	r2,r19,r2
   17a34:	85e0983a 	sll	r16,r16,r23
   17a38:	8809883a 	mov	r4,r17
   17a3c:	900b883a 	mov	r5,r18
   17a40:	d9800015 	stw	r6,0(sp)
   17a44:	1420b03a 	or	r16,r2,r16
   17a48:	000c6340 	call	c634 <__umodsi3>
   17a4c:	900b883a 	mov	r5,r18
   17a50:	8809883a 	mov	r4,r17
   17a54:	1029883a 	mov	r20,r2
   17a58:	e5bfffcc 	andi	r22,fp,65535
   17a5c:	000c5d00 	call	c5d0 <__udivsi3>
   17a60:	100b883a 	mov	r5,r2
   17a64:	b009883a 	mov	r4,r22
   17a68:	102b883a 	mov	r21,r2
   17a6c:	000c68c0 	call	c68c <__mulsi3>
   17a70:	a028943a 	slli	r20,r20,16
   17a74:	8006d43a 	srli	r3,r16,16
   17a78:	1d06b03a 	or	r3,r3,r20
   17a7c:	1880042e 	bgeu	r3,r2,17a90 <__udivdi3+0x3a4>
   17a80:	1f07883a 	add	r3,r3,fp
   17a84:	a93fffc4 	addi	r4,r21,-1
   17a88:	1f00892e 	bgeu	r3,fp,17cb0 <__udivdi3+0x5c4>
   17a8c:	202b883a 	mov	r21,r4
   17a90:	18a3c83a 	sub	r17,r3,r2
   17a94:	8809883a 	mov	r4,r17
   17a98:	900b883a 	mov	r5,r18
   17a9c:	000c6340 	call	c634 <__umodsi3>
   17aa0:	1029883a 	mov	r20,r2
   17aa4:	8809883a 	mov	r4,r17
   17aa8:	900b883a 	mov	r5,r18
   17aac:	a028943a 	slli	r20,r20,16
   17ab0:	000c5d00 	call	c5d0 <__udivsi3>
   17ab4:	100b883a 	mov	r5,r2
   17ab8:	b009883a 	mov	r4,r22
   17abc:	843fffcc 	andi	r16,r16,65535
   17ac0:	1023883a 	mov	r17,r2
   17ac4:	8520b03a 	or	r16,r16,r20
   17ac8:	000c68c0 	call	c68c <__mulsi3>
   17acc:	8080042e 	bgeu	r16,r2,17ae0 <__udivdi3+0x3f4>
   17ad0:	8721883a 	add	r16,r16,fp
   17ad4:	88ffffc4 	addi	r3,r17,-1
   17ad8:	8700712e 	bgeu	r16,fp,17ca0 <__udivdi3+0x5b4>
   17adc:	1823883a 	mov	r17,r3
   17ae0:	a80e943a 	slli	r7,r21,16
   17ae4:	d8c00017 	ldw	r3,0(sp)
   17ae8:	80a1c83a 	sub	r16,r16,r2
   17aec:	3c64b03a 	or	r18,r7,r17
   17af0:	1d3fffcc 	andi	r20,r3,65535
   17af4:	9022d43a 	srli	r17,r18,16
   17af8:	95bfffcc 	andi	r22,r18,65535
   17afc:	a00b883a 	mov	r5,r20
   17b00:	b009883a 	mov	r4,r22
   17b04:	182ad43a 	srli	r21,r3,16
   17b08:	000c68c0 	call	c68c <__mulsi3>
   17b0c:	a00b883a 	mov	r5,r20
   17b10:	8809883a 	mov	r4,r17
   17b14:	1039883a 	mov	fp,r2
   17b18:	000c68c0 	call	c68c <__mulsi3>
   17b1c:	8809883a 	mov	r4,r17
   17b20:	a80b883a 	mov	r5,r21
   17b24:	1029883a 	mov	r20,r2
   17b28:	000c68c0 	call	c68c <__mulsi3>
   17b2c:	a80b883a 	mov	r5,r21
   17b30:	b009883a 	mov	r4,r22
   17b34:	1023883a 	mov	r17,r2
   17b38:	000c68c0 	call	c68c <__mulsi3>
   17b3c:	e006d43a 	srli	r3,fp,16
   17b40:	1505883a 	add	r2,r2,r20
   17b44:	1887883a 	add	r3,r3,r2
   17b48:	1d00022e 	bgeu	r3,r20,17b54 <__udivdi3+0x468>
   17b4c:	00800074 	movhi	r2,1
   17b50:	88a3883a 	add	r17,r17,r2
   17b54:	1804d43a 	srli	r2,r3,16
   17b58:	1463883a 	add	r17,r2,r17
   17b5c:	84404436 	bltu	r16,r17,17c70 <__udivdi3+0x584>
   17b60:	84403e26 	beq	r16,r17,17c5c <__udivdi3+0x570>
   17b64:	9005883a 	mov	r2,r18
   17b68:	0007883a 	mov	r3,zero
   17b6c:	003f9106 	br	179b4 <__alt_data_end+0xf80179b4>
   17b70:	88e2983a 	sll	r17,r17,r3
   17b74:	80aed83a 	srl	r23,r16,r2
   17b78:	80e0983a 	sll	r16,r16,r3
   17b7c:	882ad43a 	srli	r21,r17,16
   17b80:	9884d83a 	srl	r2,r19,r2
   17b84:	b809883a 	mov	r4,r23
   17b88:	a80b883a 	mov	r5,r21
   17b8c:	98e4983a 	sll	r18,r19,r3
   17b90:	142cb03a 	or	r22,r2,r16
   17b94:	000c6340 	call	c634 <__umodsi3>
   17b98:	b809883a 	mov	r4,r23
   17b9c:	a80b883a 	mov	r5,r21
   17ba0:	1027883a 	mov	r19,r2
   17ba4:	8d3fffcc 	andi	r20,r17,65535
   17ba8:	000c5d00 	call	c5d0 <__udivsi3>
   17bac:	a009883a 	mov	r4,r20
   17bb0:	100b883a 	mov	r5,r2
   17bb4:	102f883a 	mov	r23,r2
   17bb8:	000c68c0 	call	c68c <__mulsi3>
   17bbc:	9826943a 	slli	r19,r19,16
   17bc0:	b008d43a 	srli	r4,r22,16
   17bc4:	24c8b03a 	or	r4,r4,r19
   17bc8:	2080062e 	bgeu	r4,r2,17be4 <__udivdi3+0x4f8>
   17bcc:	2449883a 	add	r4,r4,r17
   17bd0:	b8ffffc4 	addi	r3,r23,-1
   17bd4:	24403c36 	bltu	r4,r17,17cc8 <__udivdi3+0x5dc>
   17bd8:	20803b2e 	bgeu	r4,r2,17cc8 <__udivdi3+0x5dc>
   17bdc:	bdffff84 	addi	r23,r23,-2
   17be0:	2449883a 	add	r4,r4,r17
   17be4:	20a1c83a 	sub	r16,r4,r2
   17be8:	a80b883a 	mov	r5,r21
   17bec:	8009883a 	mov	r4,r16
   17bf0:	000c6340 	call	c634 <__umodsi3>
   17bf4:	a80b883a 	mov	r5,r21
   17bf8:	8009883a 	mov	r4,r16
   17bfc:	1027883a 	mov	r19,r2
   17c00:	000c5d00 	call	c5d0 <__udivsi3>
   17c04:	a009883a 	mov	r4,r20
   17c08:	100b883a 	mov	r5,r2
   17c0c:	9826943a 	slli	r19,r19,16
   17c10:	1039883a 	mov	fp,r2
   17c14:	000c68c0 	call	c68c <__mulsi3>
   17c18:	b13fffcc 	andi	r4,r22,65535
   17c1c:	24c8b03a 	or	r4,r4,r19
   17c20:	2080062e 	bgeu	r4,r2,17c3c <__udivdi3+0x550>
   17c24:	2449883a 	add	r4,r4,r17
   17c28:	e0ffffc4 	addi	r3,fp,-1
   17c2c:	24402436 	bltu	r4,r17,17cc0 <__udivdi3+0x5d4>
   17c30:	2080232e 	bgeu	r4,r2,17cc0 <__udivdi3+0x5d4>
   17c34:	e73fff84 	addi	fp,fp,-2
   17c38:	2449883a 	add	r4,r4,r17
   17c3c:	b82e943a 	slli	r23,r23,16
   17c40:	20a1c83a 	sub	r16,r4,r2
   17c44:	bf06b03a 	or	r3,r23,fp
   17c48:	003f2806 	br	178ec <__alt_data_end+0xf80178ec>
   17c4c:	2021883a 	mov	r16,r4
   17c50:	003f5306 	br	179a0 <__alt_data_end+0xf80179a0>
   17c54:	1821883a 	mov	r16,r3
   17c58:	003ef406 	br	1782c <__alt_data_end+0xf801782c>
   17c5c:	1806943a 	slli	r3,r3,16
   17c60:	9de6983a 	sll	r19,r19,r23
   17c64:	e73fffcc 	andi	fp,fp,65535
   17c68:	1f07883a 	add	r3,r3,fp
   17c6c:	98ffbd2e 	bgeu	r19,r3,17b64 <__alt_data_end+0xf8017b64>
   17c70:	90bfffc4 	addi	r2,r18,-1
   17c74:	0007883a 	mov	r3,zero
   17c78:	003f4e06 	br	179b4 <__alt_data_end+0xf80179b4>
   17c7c:	00800604 	movi	r2,24
   17c80:	003ef506 	br	17858 <__alt_data_end+0xf8017858>
   17c84:	00800604 	movi	r2,24
   17c88:	003f0b06 	br	178b8 <__alt_data_end+0xf80178b8>
   17c8c:	00800604 	movi	r2,24
   17c90:	003ead06 	br	17748 <__alt_data_end+0xf8017748>
   17c94:	0007883a 	mov	r3,zero
   17c98:	00800044 	movi	r2,1
   17c9c:	003f4506 	br	179b4 <__alt_data_end+0xf80179b4>
   17ca0:	80bf8e2e 	bgeu	r16,r2,17adc <__alt_data_end+0xf8017adc>
   17ca4:	8c7fff84 	addi	r17,r17,-2
   17ca8:	8721883a 	add	r16,r16,fp
   17cac:	003f8c06 	br	17ae0 <__alt_data_end+0xf8017ae0>
   17cb0:	18bf762e 	bgeu	r3,r2,17a8c <__alt_data_end+0xf8017a8c>
   17cb4:	ad7fff84 	addi	r21,r21,-2
   17cb8:	1f07883a 	add	r3,r3,fp
   17cbc:	003f7406 	br	17a90 <__alt_data_end+0xf8017a90>
   17cc0:	1839883a 	mov	fp,r3
   17cc4:	003fdd06 	br	17c3c <__alt_data_end+0xf8017c3c>
   17cc8:	182f883a 	mov	r23,r3
   17ccc:	003fc506 	br	17be4 <__alt_data_end+0xf8017be4>
   17cd0:	b5bfff84 	addi	r22,r22,-2
   17cd4:	3c4f883a 	add	r7,r7,r17
   17cd8:	003f1a06 	br	17944 <__alt_data_end+0xf8017944>
   17cdc:	b5bfff84 	addi	r22,r22,-2
   17ce0:	1c47883a 	add	r3,r3,r17
   17ce4:	003ebc06 	br	177d8 <__alt_data_end+0xf80177d8>

00017ce8 <__umoddi3>:
   17ce8:	defff304 	addi	sp,sp,-52
   17cec:	df000b15 	stw	fp,44(sp)
   17cf0:	dc400415 	stw	r17,16(sp)
   17cf4:	dc000315 	stw	r16,12(sp)
   17cf8:	dfc00c15 	stw	ra,48(sp)
   17cfc:	ddc00a15 	stw	r23,40(sp)
   17d00:	dd800915 	stw	r22,36(sp)
   17d04:	dd400815 	stw	r21,32(sp)
   17d08:	dd000715 	stw	r20,28(sp)
   17d0c:	dcc00615 	stw	r19,24(sp)
   17d10:	dc800515 	stw	r18,20(sp)
   17d14:	2021883a 	mov	r16,r4
   17d18:	2823883a 	mov	r17,r5
   17d1c:	2839883a 	mov	fp,r5
   17d20:	3800401e 	bne	r7,zero,17e24 <__umoddi3+0x13c>
   17d24:	3027883a 	mov	r19,r6
   17d28:	2029883a 	mov	r20,r4
   17d2c:	2980552e 	bgeu	r5,r6,17e84 <__umoddi3+0x19c>
   17d30:	00bfffd4 	movui	r2,65535
   17d34:	1180a236 	bltu	r2,r6,17fc0 <__umoddi3+0x2d8>
   17d38:	01003fc4 	movi	r4,255
   17d3c:	2189803a 	cmpltu	r4,r4,r6
   17d40:	200890fa 	slli	r4,r4,3
   17d44:	3104d83a 	srl	r2,r6,r4
   17d48:	00c000b4 	movhi	r3,2
   17d4c:	18f23e04 	addi	r3,r3,-14088
   17d50:	1885883a 	add	r2,r3,r2
   17d54:	10c00003 	ldbu	r3,0(r2)
   17d58:	00800804 	movi	r2,32
   17d5c:	1909883a 	add	r4,r3,r4
   17d60:	1125c83a 	sub	r18,r2,r4
   17d64:	90000526 	beq	r18,zero,17d7c <__umoddi3+0x94>
   17d68:	8ca2983a 	sll	r17,r17,r18
   17d6c:	8108d83a 	srl	r4,r16,r4
   17d70:	34a6983a 	sll	r19,r6,r18
   17d74:	84a8983a 	sll	r20,r16,r18
   17d78:	2478b03a 	or	fp,r4,r17
   17d7c:	982cd43a 	srli	r22,r19,16
   17d80:	e009883a 	mov	r4,fp
   17d84:	9dffffcc 	andi	r23,r19,65535
   17d88:	b00b883a 	mov	r5,r22
   17d8c:	000c6340 	call	c634 <__umodsi3>
   17d90:	b00b883a 	mov	r5,r22
   17d94:	e009883a 	mov	r4,fp
   17d98:	102b883a 	mov	r21,r2
   17d9c:	000c5d00 	call	c5d0 <__udivsi3>
   17da0:	100b883a 	mov	r5,r2
   17da4:	b809883a 	mov	r4,r23
   17da8:	000c68c0 	call	c68c <__mulsi3>
   17dac:	a82a943a 	slli	r21,r21,16
   17db0:	a006d43a 	srli	r3,r20,16
   17db4:	1d46b03a 	or	r3,r3,r21
   17db8:	1880032e 	bgeu	r3,r2,17dc8 <__umoddi3+0xe0>
   17dbc:	1cc7883a 	add	r3,r3,r19
   17dc0:	1cc00136 	bltu	r3,r19,17dc8 <__umoddi3+0xe0>
   17dc4:	18813136 	bltu	r3,r2,1828c <__umoddi3+0x5a4>
   17dc8:	18a1c83a 	sub	r16,r3,r2
   17dcc:	b00b883a 	mov	r5,r22
   17dd0:	8009883a 	mov	r4,r16
   17dd4:	000c6340 	call	c634 <__umodsi3>
   17dd8:	b00b883a 	mov	r5,r22
   17ddc:	8009883a 	mov	r4,r16
   17de0:	1023883a 	mov	r17,r2
   17de4:	000c5d00 	call	c5d0 <__udivsi3>
   17de8:	100b883a 	mov	r5,r2
   17dec:	b809883a 	mov	r4,r23
   17df0:	8822943a 	slli	r17,r17,16
   17df4:	000c68c0 	call	c68c <__mulsi3>
   17df8:	a0ffffcc 	andi	r3,r20,65535
   17dfc:	1c46b03a 	or	r3,r3,r17
   17e00:	1880042e 	bgeu	r3,r2,17e14 <__umoddi3+0x12c>
   17e04:	1cc7883a 	add	r3,r3,r19
   17e08:	1cc00236 	bltu	r3,r19,17e14 <__umoddi3+0x12c>
   17e0c:	1880012e 	bgeu	r3,r2,17e14 <__umoddi3+0x12c>
   17e10:	1cc7883a 	add	r3,r3,r19
   17e14:	1885c83a 	sub	r2,r3,r2
   17e18:	1484d83a 	srl	r2,r2,r18
   17e1c:	0007883a 	mov	r3,zero
   17e20:	00005306 	br	17f70 <__umoddi3+0x288>
   17e24:	29c05036 	bltu	r5,r7,17f68 <__umoddi3+0x280>
   17e28:	00bfffd4 	movui	r2,65535
   17e2c:	11c05c2e 	bgeu	r2,r7,17fa0 <__umoddi3+0x2b8>
   17e30:	00804034 	movhi	r2,256
   17e34:	10bfffc4 	addi	r2,r2,-1
   17e38:	11c10636 	bltu	r2,r7,18254 <__umoddi3+0x56c>
   17e3c:	01000404 	movi	r4,16
   17e40:	3904d83a 	srl	r2,r7,r4
   17e44:	00c000b4 	movhi	r3,2
   17e48:	18f23e04 	addi	r3,r3,-14088
   17e4c:	1885883a 	add	r2,r3,r2
   17e50:	14c00003 	ldbu	r19,0(r2)
   17e54:	00c00804 	movi	r3,32
   17e58:	9927883a 	add	r19,r19,r4
   17e5c:	1ce9c83a 	sub	r20,r3,r19
   17e60:	a0005c1e 	bne	r20,zero,17fd4 <__umoddi3+0x2ec>
   17e64:	3c400136 	bltu	r7,r17,17e6c <__umoddi3+0x184>
   17e68:	81810a36 	bltu	r16,r6,18294 <__umoddi3+0x5ac>
   17e6c:	8185c83a 	sub	r2,r16,r6
   17e70:	89e3c83a 	sub	r17,r17,r7
   17e74:	8089803a 	cmpltu	r4,r16,r2
   17e78:	8939c83a 	sub	fp,r17,r4
   17e7c:	e007883a 	mov	r3,fp
   17e80:	00003b06 	br	17f70 <__umoddi3+0x288>
   17e84:	3000041e 	bne	r6,zero,17e98 <__umoddi3+0x1b0>
   17e88:	000b883a 	mov	r5,zero
   17e8c:	01000044 	movi	r4,1
   17e90:	000c5d00 	call	c5d0 <__udivsi3>
   17e94:	1027883a 	mov	r19,r2
   17e98:	00bfffd4 	movui	r2,65535
   17e9c:	14c0442e 	bgeu	r2,r19,17fb0 <__umoddi3+0x2c8>
   17ea0:	00804034 	movhi	r2,256
   17ea4:	10bfffc4 	addi	r2,r2,-1
   17ea8:	14c0ec36 	bltu	r2,r19,1825c <__umoddi3+0x574>
   17eac:	00800404 	movi	r2,16
   17eb0:	9886d83a 	srl	r3,r19,r2
   17eb4:	010000b4 	movhi	r4,2
   17eb8:	21323e04 	addi	r4,r4,-14088
   17ebc:	20c7883a 	add	r3,r4,r3
   17ec0:	18c00003 	ldbu	r3,0(r3)
   17ec4:	1887883a 	add	r3,r3,r2
   17ec8:	00800804 	movi	r2,32
   17ecc:	10e5c83a 	sub	r18,r2,r3
   17ed0:	9000ab1e 	bne	r18,zero,18180 <__umoddi3+0x498>
   17ed4:	982cd43a 	srli	r22,r19,16
   17ed8:	8ce3c83a 	sub	r17,r17,r19
   17edc:	9dffffcc 	andi	r23,r19,65535
   17ee0:	b00b883a 	mov	r5,r22
   17ee4:	8809883a 	mov	r4,r17
   17ee8:	000c6340 	call	c634 <__umodsi3>
   17eec:	b00b883a 	mov	r5,r22
   17ef0:	8809883a 	mov	r4,r17
   17ef4:	102b883a 	mov	r21,r2
   17ef8:	000c5d00 	call	c5d0 <__udivsi3>
   17efc:	b80b883a 	mov	r5,r23
   17f00:	1009883a 	mov	r4,r2
   17f04:	000c68c0 	call	c68c <__mulsi3>
   17f08:	a82a943a 	slli	r21,r21,16
   17f0c:	a006d43a 	srli	r3,r20,16
   17f10:	1d46b03a 	or	r3,r3,r21
   17f14:	1880042e 	bgeu	r3,r2,17f28 <__umoddi3+0x240>
   17f18:	1cc7883a 	add	r3,r3,r19
   17f1c:	1cc00236 	bltu	r3,r19,17f28 <__umoddi3+0x240>
   17f20:	1880012e 	bgeu	r3,r2,17f28 <__umoddi3+0x240>
   17f24:	1cc7883a 	add	r3,r3,r19
   17f28:	18a1c83a 	sub	r16,r3,r2
   17f2c:	b00b883a 	mov	r5,r22
   17f30:	8009883a 	mov	r4,r16
   17f34:	000c6340 	call	c634 <__umodsi3>
   17f38:	1023883a 	mov	r17,r2
   17f3c:	b00b883a 	mov	r5,r22
   17f40:	8009883a 	mov	r4,r16
   17f44:	000c5d00 	call	c5d0 <__udivsi3>
   17f48:	8822943a 	slli	r17,r17,16
   17f4c:	b80b883a 	mov	r5,r23
   17f50:	1009883a 	mov	r4,r2
   17f54:	000c68c0 	call	c68c <__mulsi3>
   17f58:	a53fffcc 	andi	r20,r20,65535
   17f5c:	a446b03a 	or	r3,r20,r17
   17f60:	18bfac2e 	bgeu	r3,r2,17e14 <__alt_data_end+0xf8017e14>
   17f64:	003fa706 	br	17e04 <__alt_data_end+0xf8017e04>
   17f68:	2005883a 	mov	r2,r4
   17f6c:	2807883a 	mov	r3,r5
   17f70:	dfc00c17 	ldw	ra,48(sp)
   17f74:	df000b17 	ldw	fp,44(sp)
   17f78:	ddc00a17 	ldw	r23,40(sp)
   17f7c:	dd800917 	ldw	r22,36(sp)
   17f80:	dd400817 	ldw	r21,32(sp)
   17f84:	dd000717 	ldw	r20,28(sp)
   17f88:	dcc00617 	ldw	r19,24(sp)
   17f8c:	dc800517 	ldw	r18,20(sp)
   17f90:	dc400417 	ldw	r17,16(sp)
   17f94:	dc000317 	ldw	r16,12(sp)
   17f98:	dec00d04 	addi	sp,sp,52
   17f9c:	f800283a 	ret
   17fa0:	04c03fc4 	movi	r19,255
   17fa4:	99c9803a 	cmpltu	r4,r19,r7
   17fa8:	200890fa 	slli	r4,r4,3
   17fac:	003fa406 	br	17e40 <__alt_data_end+0xf8017e40>
   17fb0:	00803fc4 	movi	r2,255
   17fb4:	14c5803a 	cmpltu	r2,r2,r19
   17fb8:	100490fa 	slli	r2,r2,3
   17fbc:	003fbc06 	br	17eb0 <__alt_data_end+0xf8017eb0>
   17fc0:	00804034 	movhi	r2,256
   17fc4:	10bfffc4 	addi	r2,r2,-1
   17fc8:	1180a636 	bltu	r2,r6,18264 <__umoddi3+0x57c>
   17fcc:	01000404 	movi	r4,16
   17fd0:	003f5c06 	br	17d44 <__alt_data_end+0xf8017d44>
   17fd4:	3d0e983a 	sll	r7,r7,r20
   17fd8:	34ead83a 	srl	r21,r6,r19
   17fdc:	8cc6d83a 	srl	r3,r17,r19
   17fe0:	8d10983a 	sll	r8,r17,r20
   17fe4:	3d6ab03a 	or	r21,r7,r21
   17fe8:	a82cd43a 	srli	r22,r21,16
   17fec:	84e2d83a 	srl	r17,r16,r19
   17ff0:	1809883a 	mov	r4,r3
   17ff4:	b00b883a 	mov	r5,r22
   17ff8:	8a22b03a 	or	r17,r17,r8
   17ffc:	3524983a 	sll	r18,r6,r20
   18000:	dc400015 	stw	r17,0(sp)
   18004:	d8c00115 	stw	r3,4(sp)
   18008:	000c6340 	call	c634 <__umodsi3>
   1800c:	d8c00117 	ldw	r3,4(sp)
   18010:	b00b883a 	mov	r5,r22
   18014:	1039883a 	mov	fp,r2
   18018:	1809883a 	mov	r4,r3
   1801c:	000c5d00 	call	c5d0 <__udivsi3>
   18020:	adffffcc 	andi	r23,r21,65535
   18024:	100b883a 	mov	r5,r2
   18028:	b809883a 	mov	r4,r23
   1802c:	1023883a 	mov	r17,r2
   18030:	000c68c0 	call	c68c <__mulsi3>
   18034:	d9400017 	ldw	r5,0(sp)
   18038:	e008943a 	slli	r4,fp,16
   1803c:	8520983a 	sll	r16,r16,r20
   18040:	2806d43a 	srli	r3,r5,16
   18044:	1906b03a 	or	r3,r3,r4
   18048:	1880042e 	bgeu	r3,r2,1805c <__umoddi3+0x374>
   1804c:	1d47883a 	add	r3,r3,r21
   18050:	893fffc4 	addi	r4,r17,-1
   18054:	1d40892e 	bgeu	r3,r21,1827c <__umoddi3+0x594>
   18058:	2023883a 	mov	r17,r4
   1805c:	18b9c83a 	sub	fp,r3,r2
   18060:	b00b883a 	mov	r5,r22
   18064:	e009883a 	mov	r4,fp
   18068:	000c6340 	call	c634 <__umodsi3>
   1806c:	b00b883a 	mov	r5,r22
   18070:	e009883a 	mov	r4,fp
   18074:	d8800215 	stw	r2,8(sp)
   18078:	000c5d00 	call	c5d0 <__udivsi3>
   1807c:	100b883a 	mov	r5,r2
   18080:	b809883a 	mov	r4,r23
   18084:	102d883a 	mov	r22,r2
   18088:	000c68c0 	call	c68c <__mulsi3>
   1808c:	d9800217 	ldw	r6,8(sp)
   18090:	d8c00017 	ldw	r3,0(sp)
   18094:	300c943a 	slli	r6,r6,16
   18098:	1a3fffcc 	andi	r8,r3,65535
   1809c:	4190b03a 	or	r8,r8,r6
   180a0:	4080042e 	bgeu	r8,r2,180b4 <__umoddi3+0x3cc>
   180a4:	4551883a 	add	r8,r8,r21
   180a8:	b0ffffc4 	addi	r3,r22,-1
   180ac:	45406f2e 	bgeu	r8,r21,1826c <__umoddi3+0x584>
   180b0:	182d883a 	mov	r22,r3
   180b4:	880e943a 	slli	r7,r17,16
   180b8:	9006d43a 	srli	r3,r18,16
   180bc:	91bfffcc 	andi	r6,r18,65535
   180c0:	3dacb03a 	or	r22,r7,r22
   180c4:	b02ed43a 	srli	r23,r22,16
   180c8:	b5bfffcc 	andi	r22,r22,65535
   180cc:	300b883a 	mov	r5,r6
   180d0:	b009883a 	mov	r4,r22
   180d4:	40a3c83a 	sub	r17,r8,r2
   180d8:	d8c00115 	stw	r3,4(sp)
   180dc:	d9800215 	stw	r6,8(sp)
   180e0:	000c68c0 	call	c68c <__mulsi3>
   180e4:	d9800217 	ldw	r6,8(sp)
   180e8:	b809883a 	mov	r4,r23
   180ec:	1039883a 	mov	fp,r2
   180f0:	300b883a 	mov	r5,r6
   180f4:	000c68c0 	call	c68c <__mulsi3>
   180f8:	d8c00117 	ldw	r3,4(sp)
   180fc:	b809883a 	mov	r4,r23
   18100:	d8800215 	stw	r2,8(sp)
   18104:	180b883a 	mov	r5,r3
   18108:	000c68c0 	call	c68c <__mulsi3>
   1810c:	d8c00117 	ldw	r3,4(sp)
   18110:	b009883a 	mov	r4,r22
   18114:	102f883a 	mov	r23,r2
   18118:	180b883a 	mov	r5,r3
   1811c:	000c68c0 	call	c68c <__mulsi3>
   18120:	d9800217 	ldw	r6,8(sp)
   18124:	e006d43a 	srli	r3,fp,16
   18128:	1185883a 	add	r2,r2,r6
   1812c:	1885883a 	add	r2,r3,r2
   18130:	1180022e 	bgeu	r2,r6,1813c <__umoddi3+0x454>
   18134:	00c00074 	movhi	r3,1
   18138:	b8ef883a 	add	r23,r23,r3
   1813c:	1006d43a 	srli	r3,r2,16
   18140:	1004943a 	slli	r2,r2,16
   18144:	e73fffcc 	andi	fp,fp,65535
   18148:	1dc7883a 	add	r3,r3,r23
   1814c:	1739883a 	add	fp,r2,fp
   18150:	88c03a36 	bltu	r17,r3,1823c <__umoddi3+0x554>
   18154:	88c05126 	beq	r17,r3,1829c <__umoddi3+0x5b4>
   18158:	88c9c83a 	sub	r4,r17,r3
   1815c:	e00f883a 	mov	r7,fp
   18160:	81cfc83a 	sub	r7,r16,r7
   18164:	81c7803a 	cmpltu	r3,r16,r7
   18168:	20c7c83a 	sub	r3,r4,r3
   1816c:	1cc4983a 	sll	r2,r3,r19
   18170:	3d0ed83a 	srl	r7,r7,r20
   18174:	1d06d83a 	srl	r3,r3,r20
   18178:	11c4b03a 	or	r2,r2,r7
   1817c:	003f7c06 	br	17f70 <__alt_data_end+0xf8017f70>
   18180:	9ca6983a 	sll	r19,r19,r18
   18184:	88f8d83a 	srl	fp,r17,r3
   18188:	80c4d83a 	srl	r2,r16,r3
   1818c:	982cd43a 	srli	r22,r19,16
   18190:	8ca2983a 	sll	r17,r17,r18
   18194:	e009883a 	mov	r4,fp
   18198:	b00b883a 	mov	r5,r22
   1819c:	146ab03a 	or	r21,r2,r17
   181a0:	000c6340 	call	c634 <__umodsi3>
   181a4:	b00b883a 	mov	r5,r22
   181a8:	e009883a 	mov	r4,fp
   181ac:	1029883a 	mov	r20,r2
   181b0:	9dffffcc 	andi	r23,r19,65535
   181b4:	000c5d00 	call	c5d0 <__udivsi3>
   181b8:	b809883a 	mov	r4,r23
   181bc:	100b883a 	mov	r5,r2
   181c0:	000c68c0 	call	c68c <__mulsi3>
   181c4:	a008943a 	slli	r4,r20,16
   181c8:	a806d43a 	srli	r3,r21,16
   181cc:	84a8983a 	sll	r20,r16,r18
   181d0:	1906b03a 	or	r3,r3,r4
   181d4:	1880042e 	bgeu	r3,r2,181e8 <__umoddi3+0x500>
   181d8:	1cc7883a 	add	r3,r3,r19
   181dc:	1cc00236 	bltu	r3,r19,181e8 <__umoddi3+0x500>
   181e0:	1880012e 	bgeu	r3,r2,181e8 <__umoddi3+0x500>
   181e4:	1cc7883a 	add	r3,r3,r19
   181e8:	18a3c83a 	sub	r17,r3,r2
   181ec:	b00b883a 	mov	r5,r22
   181f0:	8809883a 	mov	r4,r17
   181f4:	000c6340 	call	c634 <__umodsi3>
   181f8:	b00b883a 	mov	r5,r22
   181fc:	8809883a 	mov	r4,r17
   18200:	1021883a 	mov	r16,r2
   18204:	000c5d00 	call	c5d0 <__udivsi3>
   18208:	100b883a 	mov	r5,r2
   1820c:	b809883a 	mov	r4,r23
   18210:	8020943a 	slli	r16,r16,16
   18214:	000c68c0 	call	c68c <__mulsi3>
   18218:	a8ffffcc 	andi	r3,r21,65535
   1821c:	1c06b03a 	or	r3,r3,r16
   18220:	1880042e 	bgeu	r3,r2,18234 <__umoddi3+0x54c>
   18224:	1cc7883a 	add	r3,r3,r19
   18228:	1cc00236 	bltu	r3,r19,18234 <__umoddi3+0x54c>
   1822c:	1880012e 	bgeu	r3,r2,18234 <__umoddi3+0x54c>
   18230:	1cc7883a 	add	r3,r3,r19
   18234:	18a3c83a 	sub	r17,r3,r2
   18238:	003f2906 	br	17ee0 <__alt_data_end+0xf8017ee0>
   1823c:	e48fc83a 	sub	r7,fp,r18
   18240:	1d49c83a 	sub	r4,r3,r21
   18244:	e1f9803a 	cmpltu	fp,fp,r7
   18248:	2739c83a 	sub	fp,r4,fp
   1824c:	8f09c83a 	sub	r4,r17,fp
   18250:	003fc306 	br	18160 <__alt_data_end+0xf8018160>
   18254:	01000604 	movi	r4,24
   18258:	003ef906 	br	17e40 <__alt_data_end+0xf8017e40>
   1825c:	00800604 	movi	r2,24
   18260:	003f1306 	br	17eb0 <__alt_data_end+0xf8017eb0>
   18264:	01000604 	movi	r4,24
   18268:	003eb606 	br	17d44 <__alt_data_end+0xf8017d44>
   1826c:	40bf902e 	bgeu	r8,r2,180b0 <__alt_data_end+0xf80180b0>
   18270:	b5bfff84 	addi	r22,r22,-2
   18274:	4551883a 	add	r8,r8,r21
   18278:	003f8e06 	br	180b4 <__alt_data_end+0xf80180b4>
   1827c:	18bf762e 	bgeu	r3,r2,18058 <__alt_data_end+0xf8018058>
   18280:	8c7fff84 	addi	r17,r17,-2
   18284:	1d47883a 	add	r3,r3,r21
   18288:	003f7406 	br	1805c <__alt_data_end+0xf801805c>
   1828c:	1cc7883a 	add	r3,r3,r19
   18290:	003ecd06 	br	17dc8 <__alt_data_end+0xf8017dc8>
   18294:	8005883a 	mov	r2,r16
   18298:	003ef806 	br	17e7c <__alt_data_end+0xf8017e7c>
   1829c:	873fe736 	bltu	r16,fp,1823c <__alt_data_end+0xf801823c>
   182a0:	e00f883a 	mov	r7,fp
   182a4:	0009883a 	mov	r4,zero
   182a8:	003fad06 	br	18160 <__alt_data_end+0xf8018160>

000182ac <__adddf3>:
   182ac:	02c00434 	movhi	r11,16
   182b0:	5affffc4 	addi	r11,r11,-1
   182b4:	2806d7fa 	srli	r3,r5,31
   182b8:	2ad4703a 	and	r10,r5,r11
   182bc:	3ad2703a 	and	r9,r7,r11
   182c0:	3804d53a 	srli	r2,r7,20
   182c4:	3018d77a 	srli	r12,r6,29
   182c8:	280ad53a 	srli	r5,r5,20
   182cc:	501490fa 	slli	r10,r10,3
   182d0:	2010d77a 	srli	r8,r4,29
   182d4:	481290fa 	slli	r9,r9,3
   182d8:	380ed7fa 	srli	r7,r7,31
   182dc:	defffb04 	addi	sp,sp,-20
   182e0:	dc800215 	stw	r18,8(sp)
   182e4:	dc400115 	stw	r17,4(sp)
   182e8:	dc000015 	stw	r16,0(sp)
   182ec:	dfc00415 	stw	ra,16(sp)
   182f0:	dcc00315 	stw	r19,12(sp)
   182f4:	1c803fcc 	andi	r18,r3,255
   182f8:	2c01ffcc 	andi	r16,r5,2047
   182fc:	5210b03a 	or	r8,r10,r8
   18300:	202290fa 	slli	r17,r4,3
   18304:	1081ffcc 	andi	r2,r2,2047
   18308:	4b12b03a 	or	r9,r9,r12
   1830c:	300c90fa 	slli	r6,r6,3
   18310:	91c07526 	beq	r18,r7,184e8 <__adddf3+0x23c>
   18314:	8087c83a 	sub	r3,r16,r2
   18318:	00c0ab0e 	bge	zero,r3,185c8 <__adddf3+0x31c>
   1831c:	10002a1e 	bne	r2,zero,183c8 <__adddf3+0x11c>
   18320:	4984b03a 	or	r2,r9,r6
   18324:	1000961e 	bne	r2,zero,18580 <__adddf3+0x2d4>
   18328:	888001cc 	andi	r2,r17,7
   1832c:	10000726 	beq	r2,zero,1834c <__adddf3+0xa0>
   18330:	888003cc 	andi	r2,r17,15
   18334:	00c00104 	movi	r3,4
   18338:	10c00426 	beq	r2,r3,1834c <__adddf3+0xa0>
   1833c:	88c7883a 	add	r3,r17,r3
   18340:	1c63803a 	cmpltu	r17,r3,r17
   18344:	4451883a 	add	r8,r8,r17
   18348:	1823883a 	mov	r17,r3
   1834c:	4080202c 	andhi	r2,r8,128
   18350:	10005926 	beq	r2,zero,184b8 <__adddf3+0x20c>
   18354:	84000044 	addi	r16,r16,1
   18358:	0081ffc4 	movi	r2,2047
   1835c:	8080ba26 	beq	r16,r2,18648 <__adddf3+0x39c>
   18360:	00bfe034 	movhi	r2,65408
   18364:	10bfffc4 	addi	r2,r2,-1
   18368:	4090703a 	and	r8,r8,r2
   1836c:	4004977a 	slli	r2,r8,29
   18370:	4010927a 	slli	r8,r8,9
   18374:	8822d0fa 	srli	r17,r17,3
   18378:	8401ffcc 	andi	r16,r16,2047
   1837c:	4010d33a 	srli	r8,r8,12
   18380:	9007883a 	mov	r3,r18
   18384:	1444b03a 	or	r2,r2,r17
   18388:	8401ffcc 	andi	r16,r16,2047
   1838c:	8020953a 	slli	r16,r16,20
   18390:	18c03fcc 	andi	r3,r3,255
   18394:	01000434 	movhi	r4,16
   18398:	213fffc4 	addi	r4,r4,-1
   1839c:	180697fa 	slli	r3,r3,31
   183a0:	4110703a 	and	r8,r8,r4
   183a4:	4410b03a 	or	r8,r8,r16
   183a8:	40c6b03a 	or	r3,r8,r3
   183ac:	dfc00417 	ldw	ra,16(sp)
   183b0:	dcc00317 	ldw	r19,12(sp)
   183b4:	dc800217 	ldw	r18,8(sp)
   183b8:	dc400117 	ldw	r17,4(sp)
   183bc:	dc000017 	ldw	r16,0(sp)
   183c0:	dec00504 	addi	sp,sp,20
   183c4:	f800283a 	ret
   183c8:	0081ffc4 	movi	r2,2047
   183cc:	80bfd626 	beq	r16,r2,18328 <__alt_data_end+0xf8018328>
   183d0:	4a402034 	orhi	r9,r9,128
   183d4:	00800e04 	movi	r2,56
   183d8:	10c09f16 	blt	r2,r3,18658 <__adddf3+0x3ac>
   183dc:	008007c4 	movi	r2,31
   183e0:	10c0c216 	blt	r2,r3,186ec <__adddf3+0x440>
   183e4:	00800804 	movi	r2,32
   183e8:	10c5c83a 	sub	r2,r2,r3
   183ec:	488a983a 	sll	r5,r9,r2
   183f0:	30c8d83a 	srl	r4,r6,r3
   183f4:	3084983a 	sll	r2,r6,r2
   183f8:	48c6d83a 	srl	r3,r9,r3
   183fc:	290cb03a 	or	r6,r5,r4
   18400:	1004c03a 	cmpne	r2,r2,zero
   18404:	308cb03a 	or	r6,r6,r2
   18408:	898dc83a 	sub	r6,r17,r6
   1840c:	89a3803a 	cmpltu	r17,r17,r6
   18410:	40d1c83a 	sub	r8,r8,r3
   18414:	4451c83a 	sub	r8,r8,r17
   18418:	3023883a 	mov	r17,r6
   1841c:	4080202c 	andhi	r2,r8,128
   18420:	10002326 	beq	r2,zero,184b0 <__adddf3+0x204>
   18424:	04c02034 	movhi	r19,128
   18428:	9cffffc4 	addi	r19,r19,-1
   1842c:	44e6703a 	and	r19,r8,r19
   18430:	98007626 	beq	r19,zero,1860c <__adddf3+0x360>
   18434:	9809883a 	mov	r4,r19
   18438:	000db840 	call	db84 <__clzsi2>
   1843c:	10fffe04 	addi	r3,r2,-8
   18440:	010007c4 	movi	r4,31
   18444:	20c07716 	blt	r4,r3,18624 <__adddf3+0x378>
   18448:	00800804 	movi	r2,32
   1844c:	10c5c83a 	sub	r2,r2,r3
   18450:	8884d83a 	srl	r2,r17,r2
   18454:	98d0983a 	sll	r8,r19,r3
   18458:	88e2983a 	sll	r17,r17,r3
   1845c:	1204b03a 	or	r2,r2,r8
   18460:	1c007416 	blt	r3,r16,18634 <__adddf3+0x388>
   18464:	1c21c83a 	sub	r16,r3,r16
   18468:	82000044 	addi	r8,r16,1
   1846c:	00c007c4 	movi	r3,31
   18470:	1a009116 	blt	r3,r8,186b8 <__adddf3+0x40c>
   18474:	00c00804 	movi	r3,32
   18478:	1a07c83a 	sub	r3,r3,r8
   1847c:	8a08d83a 	srl	r4,r17,r8
   18480:	88e2983a 	sll	r17,r17,r3
   18484:	10c6983a 	sll	r3,r2,r3
   18488:	1210d83a 	srl	r8,r2,r8
   1848c:	8804c03a 	cmpne	r2,r17,zero
   18490:	1906b03a 	or	r3,r3,r4
   18494:	18a2b03a 	or	r17,r3,r2
   18498:	0021883a 	mov	r16,zero
   1849c:	003fa206 	br	18328 <__alt_data_end+0xf8018328>
   184a0:	1890b03a 	or	r8,r3,r2
   184a4:	40017d26 	beq	r8,zero,18a9c <__adddf3+0x7f0>
   184a8:	1011883a 	mov	r8,r2
   184ac:	1823883a 	mov	r17,r3
   184b0:	888001cc 	andi	r2,r17,7
   184b4:	103f9e1e 	bne	r2,zero,18330 <__alt_data_end+0xf8018330>
   184b8:	4004977a 	slli	r2,r8,29
   184bc:	8822d0fa 	srli	r17,r17,3
   184c0:	4010d0fa 	srli	r8,r8,3
   184c4:	9007883a 	mov	r3,r18
   184c8:	1444b03a 	or	r2,r2,r17
   184cc:	0101ffc4 	movi	r4,2047
   184d0:	81002426 	beq	r16,r4,18564 <__adddf3+0x2b8>
   184d4:	8120703a 	and	r16,r16,r4
   184d8:	01000434 	movhi	r4,16
   184dc:	213fffc4 	addi	r4,r4,-1
   184e0:	4110703a 	and	r8,r8,r4
   184e4:	003fa806 	br	18388 <__alt_data_end+0xf8018388>
   184e8:	8089c83a 	sub	r4,r16,r2
   184ec:	01005e0e 	bge	zero,r4,18668 <__adddf3+0x3bc>
   184f0:	10002b26 	beq	r2,zero,185a0 <__adddf3+0x2f4>
   184f4:	0081ffc4 	movi	r2,2047
   184f8:	80bf8b26 	beq	r16,r2,18328 <__alt_data_end+0xf8018328>
   184fc:	4a402034 	orhi	r9,r9,128
   18500:	00800e04 	movi	r2,56
   18504:	1100a40e 	bge	r2,r4,18798 <__adddf3+0x4ec>
   18508:	498cb03a 	or	r6,r9,r6
   1850c:	300ac03a 	cmpne	r5,r6,zero
   18510:	0013883a 	mov	r9,zero
   18514:	2c4b883a 	add	r5,r5,r17
   18518:	2c63803a 	cmpltu	r17,r5,r17
   1851c:	4a11883a 	add	r8,r9,r8
   18520:	8a11883a 	add	r8,r17,r8
   18524:	2823883a 	mov	r17,r5
   18528:	4080202c 	andhi	r2,r8,128
   1852c:	103fe026 	beq	r2,zero,184b0 <__alt_data_end+0xf80184b0>
   18530:	84000044 	addi	r16,r16,1
   18534:	0081ffc4 	movi	r2,2047
   18538:	8080d226 	beq	r16,r2,18884 <__adddf3+0x5d8>
   1853c:	00bfe034 	movhi	r2,65408
   18540:	10bfffc4 	addi	r2,r2,-1
   18544:	4090703a 	and	r8,r8,r2
   18548:	880ad07a 	srli	r5,r17,1
   1854c:	400897fa 	slli	r4,r8,31
   18550:	88c0004c 	andi	r3,r17,1
   18554:	28e2b03a 	or	r17,r5,r3
   18558:	4010d07a 	srli	r8,r8,1
   1855c:	2462b03a 	or	r17,r4,r17
   18560:	003f7106 	br	18328 <__alt_data_end+0xf8018328>
   18564:	4088b03a 	or	r4,r8,r2
   18568:	20014526 	beq	r4,zero,18a80 <__adddf3+0x7d4>
   1856c:	01000434 	movhi	r4,16
   18570:	42000234 	orhi	r8,r8,8
   18574:	213fffc4 	addi	r4,r4,-1
   18578:	4110703a 	and	r8,r8,r4
   1857c:	003f8206 	br	18388 <__alt_data_end+0xf8018388>
   18580:	18ffffc4 	addi	r3,r3,-1
   18584:	1800491e 	bne	r3,zero,186ac <__adddf3+0x400>
   18588:	898bc83a 	sub	r5,r17,r6
   1858c:	8963803a 	cmpltu	r17,r17,r5
   18590:	4251c83a 	sub	r8,r8,r9
   18594:	4451c83a 	sub	r8,r8,r17
   18598:	2823883a 	mov	r17,r5
   1859c:	003f9f06 	br	1841c <__alt_data_end+0xf801841c>
   185a0:	4984b03a 	or	r2,r9,r6
   185a4:	103f6026 	beq	r2,zero,18328 <__alt_data_end+0xf8018328>
   185a8:	213fffc4 	addi	r4,r4,-1
   185ac:	2000931e 	bne	r4,zero,187fc <__adddf3+0x550>
   185b0:	898d883a 	add	r6,r17,r6
   185b4:	3463803a 	cmpltu	r17,r6,r17
   185b8:	4251883a 	add	r8,r8,r9
   185bc:	8a11883a 	add	r8,r17,r8
   185c0:	3023883a 	mov	r17,r6
   185c4:	003fd806 	br	18528 <__alt_data_end+0xf8018528>
   185c8:	1800541e 	bne	r3,zero,1871c <__adddf3+0x470>
   185cc:	80800044 	addi	r2,r16,1
   185d0:	1081ffcc 	andi	r2,r2,2047
   185d4:	00c00044 	movi	r3,1
   185d8:	1880a00e 	bge	r3,r2,1885c <__adddf3+0x5b0>
   185dc:	8989c83a 	sub	r4,r17,r6
   185e0:	8905803a 	cmpltu	r2,r17,r4
   185e4:	4267c83a 	sub	r19,r8,r9
   185e8:	98a7c83a 	sub	r19,r19,r2
   185ec:	9880202c 	andhi	r2,r19,128
   185f0:	10006326 	beq	r2,zero,18780 <__adddf3+0x4d4>
   185f4:	3463c83a 	sub	r17,r6,r17
   185f8:	4a07c83a 	sub	r3,r9,r8
   185fc:	344d803a 	cmpltu	r6,r6,r17
   18600:	19a7c83a 	sub	r19,r3,r6
   18604:	3825883a 	mov	r18,r7
   18608:	983f8a1e 	bne	r19,zero,18434 <__alt_data_end+0xf8018434>
   1860c:	8809883a 	mov	r4,r17
   18610:	000db840 	call	db84 <__clzsi2>
   18614:	10800804 	addi	r2,r2,32
   18618:	10fffe04 	addi	r3,r2,-8
   1861c:	010007c4 	movi	r4,31
   18620:	20ff890e 	bge	r4,r3,18448 <__alt_data_end+0xf8018448>
   18624:	10bff604 	addi	r2,r2,-40
   18628:	8884983a 	sll	r2,r17,r2
   1862c:	0023883a 	mov	r17,zero
   18630:	1c3f8c0e 	bge	r3,r16,18464 <__alt_data_end+0xf8018464>
   18634:	023fe034 	movhi	r8,65408
   18638:	423fffc4 	addi	r8,r8,-1
   1863c:	80e1c83a 	sub	r16,r16,r3
   18640:	1210703a 	and	r8,r2,r8
   18644:	003f3806 	br	18328 <__alt_data_end+0xf8018328>
   18648:	9007883a 	mov	r3,r18
   1864c:	0011883a 	mov	r8,zero
   18650:	0005883a 	mov	r2,zero
   18654:	003f4c06 	br	18388 <__alt_data_end+0xf8018388>
   18658:	498cb03a 	or	r6,r9,r6
   1865c:	300cc03a 	cmpne	r6,r6,zero
   18660:	0007883a 	mov	r3,zero
   18664:	003f6806 	br	18408 <__alt_data_end+0xf8018408>
   18668:	20009c1e 	bne	r4,zero,188dc <__adddf3+0x630>
   1866c:	80800044 	addi	r2,r16,1
   18670:	1141ffcc 	andi	r5,r2,2047
   18674:	01000044 	movi	r4,1
   18678:	2140670e 	bge	r4,r5,18818 <__adddf3+0x56c>
   1867c:	0101ffc4 	movi	r4,2047
   18680:	11007f26 	beq	r2,r4,18880 <__adddf3+0x5d4>
   18684:	898d883a 	add	r6,r17,r6
   18688:	4247883a 	add	r3,r8,r9
   1868c:	3451803a 	cmpltu	r8,r6,r17
   18690:	40d1883a 	add	r8,r8,r3
   18694:	402297fa 	slli	r17,r8,31
   18698:	300cd07a 	srli	r6,r6,1
   1869c:	4010d07a 	srli	r8,r8,1
   186a0:	1021883a 	mov	r16,r2
   186a4:	89a2b03a 	or	r17,r17,r6
   186a8:	003f1f06 	br	18328 <__alt_data_end+0xf8018328>
   186ac:	0081ffc4 	movi	r2,2047
   186b0:	80bf481e 	bne	r16,r2,183d4 <__alt_data_end+0xf80183d4>
   186b4:	003f1c06 	br	18328 <__alt_data_end+0xf8018328>
   186b8:	843ff844 	addi	r16,r16,-31
   186bc:	01000804 	movi	r4,32
   186c0:	1406d83a 	srl	r3,r2,r16
   186c4:	41005026 	beq	r8,r4,18808 <__adddf3+0x55c>
   186c8:	01001004 	movi	r4,64
   186cc:	2211c83a 	sub	r8,r4,r8
   186d0:	1204983a 	sll	r2,r2,r8
   186d4:	88a2b03a 	or	r17,r17,r2
   186d8:	8822c03a 	cmpne	r17,r17,zero
   186dc:	1c62b03a 	or	r17,r3,r17
   186e0:	0011883a 	mov	r8,zero
   186e4:	0021883a 	mov	r16,zero
   186e8:	003f7106 	br	184b0 <__alt_data_end+0xf80184b0>
   186ec:	193ff804 	addi	r4,r3,-32
   186f0:	00800804 	movi	r2,32
   186f4:	4908d83a 	srl	r4,r9,r4
   186f8:	18804526 	beq	r3,r2,18810 <__adddf3+0x564>
   186fc:	00801004 	movi	r2,64
   18700:	10c5c83a 	sub	r2,r2,r3
   18704:	4886983a 	sll	r3,r9,r2
   18708:	198cb03a 	or	r6,r3,r6
   1870c:	300cc03a 	cmpne	r6,r6,zero
   18710:	218cb03a 	or	r6,r4,r6
   18714:	0007883a 	mov	r3,zero
   18718:	003f3b06 	br	18408 <__alt_data_end+0xf8018408>
   1871c:	80002a26 	beq	r16,zero,187c8 <__adddf3+0x51c>
   18720:	0101ffc4 	movi	r4,2047
   18724:	11006826 	beq	r2,r4,188c8 <__adddf3+0x61c>
   18728:	00c7c83a 	sub	r3,zero,r3
   1872c:	42002034 	orhi	r8,r8,128
   18730:	01000e04 	movi	r4,56
   18734:	20c07c16 	blt	r4,r3,18928 <__adddf3+0x67c>
   18738:	010007c4 	movi	r4,31
   1873c:	20c0da16 	blt	r4,r3,18aa8 <__adddf3+0x7fc>
   18740:	01000804 	movi	r4,32
   18744:	20c9c83a 	sub	r4,r4,r3
   18748:	4114983a 	sll	r10,r8,r4
   1874c:	88cad83a 	srl	r5,r17,r3
   18750:	8908983a 	sll	r4,r17,r4
   18754:	40c6d83a 	srl	r3,r8,r3
   18758:	5162b03a 	or	r17,r10,r5
   1875c:	2008c03a 	cmpne	r4,r4,zero
   18760:	8922b03a 	or	r17,r17,r4
   18764:	3463c83a 	sub	r17,r6,r17
   18768:	48c7c83a 	sub	r3,r9,r3
   1876c:	344d803a 	cmpltu	r6,r6,r17
   18770:	1991c83a 	sub	r8,r3,r6
   18774:	1021883a 	mov	r16,r2
   18778:	3825883a 	mov	r18,r7
   1877c:	003f2706 	br	1841c <__alt_data_end+0xf801841c>
   18780:	24d0b03a 	or	r8,r4,r19
   18784:	40001b1e 	bne	r8,zero,187f4 <__adddf3+0x548>
   18788:	0005883a 	mov	r2,zero
   1878c:	0007883a 	mov	r3,zero
   18790:	0021883a 	mov	r16,zero
   18794:	003f4d06 	br	184cc <__alt_data_end+0xf80184cc>
   18798:	008007c4 	movi	r2,31
   1879c:	11003c16 	blt	r2,r4,18890 <__adddf3+0x5e4>
   187a0:	00800804 	movi	r2,32
   187a4:	1105c83a 	sub	r2,r2,r4
   187a8:	488e983a 	sll	r7,r9,r2
   187ac:	310ad83a 	srl	r5,r6,r4
   187b0:	3084983a 	sll	r2,r6,r2
   187b4:	4912d83a 	srl	r9,r9,r4
   187b8:	394ab03a 	or	r5,r7,r5
   187bc:	1004c03a 	cmpne	r2,r2,zero
   187c0:	288ab03a 	or	r5,r5,r2
   187c4:	003f5306 	br	18514 <__alt_data_end+0xf8018514>
   187c8:	4448b03a 	or	r4,r8,r17
   187cc:	20003e26 	beq	r4,zero,188c8 <__adddf3+0x61c>
   187d0:	00c6303a 	nor	r3,zero,r3
   187d4:	18003a1e 	bne	r3,zero,188c0 <__adddf3+0x614>
   187d8:	3463c83a 	sub	r17,r6,r17
   187dc:	4a07c83a 	sub	r3,r9,r8
   187e0:	344d803a 	cmpltu	r6,r6,r17
   187e4:	1991c83a 	sub	r8,r3,r6
   187e8:	1021883a 	mov	r16,r2
   187ec:	3825883a 	mov	r18,r7
   187f0:	003f0a06 	br	1841c <__alt_data_end+0xf801841c>
   187f4:	2023883a 	mov	r17,r4
   187f8:	003f0d06 	br	18430 <__alt_data_end+0xf8018430>
   187fc:	0081ffc4 	movi	r2,2047
   18800:	80bf3f1e 	bne	r16,r2,18500 <__alt_data_end+0xf8018500>
   18804:	003ec806 	br	18328 <__alt_data_end+0xf8018328>
   18808:	0005883a 	mov	r2,zero
   1880c:	003fb106 	br	186d4 <__alt_data_end+0xf80186d4>
   18810:	0007883a 	mov	r3,zero
   18814:	003fbc06 	br	18708 <__alt_data_end+0xf8018708>
   18818:	4444b03a 	or	r2,r8,r17
   1881c:	8000871e 	bne	r16,zero,18a3c <__adddf3+0x790>
   18820:	1000ba26 	beq	r2,zero,18b0c <__adddf3+0x860>
   18824:	4984b03a 	or	r2,r9,r6
   18828:	103ebf26 	beq	r2,zero,18328 <__alt_data_end+0xf8018328>
   1882c:	8985883a 	add	r2,r17,r6
   18830:	4247883a 	add	r3,r8,r9
   18834:	1451803a 	cmpltu	r8,r2,r17
   18838:	40d1883a 	add	r8,r8,r3
   1883c:	40c0202c 	andhi	r3,r8,128
   18840:	1023883a 	mov	r17,r2
   18844:	183f1a26 	beq	r3,zero,184b0 <__alt_data_end+0xf80184b0>
   18848:	00bfe034 	movhi	r2,65408
   1884c:	10bfffc4 	addi	r2,r2,-1
   18850:	2021883a 	mov	r16,r4
   18854:	4090703a 	and	r8,r8,r2
   18858:	003eb306 	br	18328 <__alt_data_end+0xf8018328>
   1885c:	4444b03a 	or	r2,r8,r17
   18860:	8000291e 	bne	r16,zero,18908 <__adddf3+0x65c>
   18864:	10004b1e 	bne	r2,zero,18994 <__adddf3+0x6e8>
   18868:	4990b03a 	or	r8,r9,r6
   1886c:	40008b26 	beq	r8,zero,18a9c <__adddf3+0x7f0>
   18870:	4811883a 	mov	r8,r9
   18874:	3023883a 	mov	r17,r6
   18878:	3825883a 	mov	r18,r7
   1887c:	003eaa06 	br	18328 <__alt_data_end+0xf8018328>
   18880:	1021883a 	mov	r16,r2
   18884:	0011883a 	mov	r8,zero
   18888:	0005883a 	mov	r2,zero
   1888c:	003f0f06 	br	184cc <__alt_data_end+0xf80184cc>
   18890:	217ff804 	addi	r5,r4,-32
   18894:	00800804 	movi	r2,32
   18898:	494ad83a 	srl	r5,r9,r5
   1889c:	20807d26 	beq	r4,r2,18a94 <__adddf3+0x7e8>
   188a0:	00801004 	movi	r2,64
   188a4:	1109c83a 	sub	r4,r2,r4
   188a8:	4912983a 	sll	r9,r9,r4
   188ac:	498cb03a 	or	r6,r9,r6
   188b0:	300cc03a 	cmpne	r6,r6,zero
   188b4:	298ab03a 	or	r5,r5,r6
   188b8:	0013883a 	mov	r9,zero
   188bc:	003f1506 	br	18514 <__alt_data_end+0xf8018514>
   188c0:	0101ffc4 	movi	r4,2047
   188c4:	113f9a1e 	bne	r2,r4,18730 <__alt_data_end+0xf8018730>
   188c8:	4811883a 	mov	r8,r9
   188cc:	3023883a 	mov	r17,r6
   188d0:	1021883a 	mov	r16,r2
   188d4:	3825883a 	mov	r18,r7
   188d8:	003e9306 	br	18328 <__alt_data_end+0xf8018328>
   188dc:	8000161e 	bne	r16,zero,18938 <__adddf3+0x68c>
   188e0:	444ab03a 	or	r5,r8,r17
   188e4:	28005126 	beq	r5,zero,18a2c <__adddf3+0x780>
   188e8:	0108303a 	nor	r4,zero,r4
   188ec:	20004d1e 	bne	r4,zero,18a24 <__adddf3+0x778>
   188f0:	89a3883a 	add	r17,r17,r6
   188f4:	4253883a 	add	r9,r8,r9
   188f8:	898d803a 	cmpltu	r6,r17,r6
   188fc:	3251883a 	add	r8,r6,r9
   18900:	1021883a 	mov	r16,r2
   18904:	003f0806 	br	18528 <__alt_data_end+0xf8018528>
   18908:	1000301e 	bne	r2,zero,189cc <__adddf3+0x720>
   1890c:	4984b03a 	or	r2,r9,r6
   18910:	10007126 	beq	r2,zero,18ad8 <__adddf3+0x82c>
   18914:	4811883a 	mov	r8,r9
   18918:	3023883a 	mov	r17,r6
   1891c:	3825883a 	mov	r18,r7
   18920:	0401ffc4 	movi	r16,2047
   18924:	003e8006 	br	18328 <__alt_data_end+0xf8018328>
   18928:	4462b03a 	or	r17,r8,r17
   1892c:	8822c03a 	cmpne	r17,r17,zero
   18930:	0007883a 	mov	r3,zero
   18934:	003f8b06 	br	18764 <__alt_data_end+0xf8018764>
   18938:	0141ffc4 	movi	r5,2047
   1893c:	11403b26 	beq	r2,r5,18a2c <__adddf3+0x780>
   18940:	0109c83a 	sub	r4,zero,r4
   18944:	42002034 	orhi	r8,r8,128
   18948:	01400e04 	movi	r5,56
   1894c:	29006716 	blt	r5,r4,18aec <__adddf3+0x840>
   18950:	014007c4 	movi	r5,31
   18954:	29007016 	blt	r5,r4,18b18 <__adddf3+0x86c>
   18958:	01400804 	movi	r5,32
   1895c:	290bc83a 	sub	r5,r5,r4
   18960:	4154983a 	sll	r10,r8,r5
   18964:	890ed83a 	srl	r7,r17,r4
   18968:	894a983a 	sll	r5,r17,r5
   1896c:	4108d83a 	srl	r4,r8,r4
   18970:	51e2b03a 	or	r17,r10,r7
   18974:	280ac03a 	cmpne	r5,r5,zero
   18978:	8962b03a 	or	r17,r17,r5
   1897c:	89a3883a 	add	r17,r17,r6
   18980:	2253883a 	add	r9,r4,r9
   18984:	898d803a 	cmpltu	r6,r17,r6
   18988:	3251883a 	add	r8,r6,r9
   1898c:	1021883a 	mov	r16,r2
   18990:	003ee506 	br	18528 <__alt_data_end+0xf8018528>
   18994:	4984b03a 	or	r2,r9,r6
   18998:	103e6326 	beq	r2,zero,18328 <__alt_data_end+0xf8018328>
   1899c:	8987c83a 	sub	r3,r17,r6
   189a0:	88c9803a 	cmpltu	r4,r17,r3
   189a4:	4245c83a 	sub	r2,r8,r9
   189a8:	1105c83a 	sub	r2,r2,r4
   189ac:	1100202c 	andhi	r4,r2,128
   189b0:	203ebb26 	beq	r4,zero,184a0 <__alt_data_end+0xf80184a0>
   189b4:	3463c83a 	sub	r17,r6,r17
   189b8:	4a07c83a 	sub	r3,r9,r8
   189bc:	344d803a 	cmpltu	r6,r6,r17
   189c0:	1991c83a 	sub	r8,r3,r6
   189c4:	3825883a 	mov	r18,r7
   189c8:	003e5706 	br	18328 <__alt_data_end+0xf8018328>
   189cc:	4984b03a 	or	r2,r9,r6
   189d0:	10002e26 	beq	r2,zero,18a8c <__adddf3+0x7e0>
   189d4:	4004d0fa 	srli	r2,r8,3
   189d8:	8822d0fa 	srli	r17,r17,3
   189dc:	4010977a 	slli	r8,r8,29
   189e0:	10c0022c 	andhi	r3,r2,8
   189e4:	4462b03a 	or	r17,r8,r17
   189e8:	18000826 	beq	r3,zero,18a0c <__adddf3+0x760>
   189ec:	4808d0fa 	srli	r4,r9,3
   189f0:	20c0022c 	andhi	r3,r4,8
   189f4:	1800051e 	bne	r3,zero,18a0c <__adddf3+0x760>
   189f8:	300cd0fa 	srli	r6,r6,3
   189fc:	4806977a 	slli	r3,r9,29
   18a00:	2005883a 	mov	r2,r4
   18a04:	3825883a 	mov	r18,r7
   18a08:	19a2b03a 	or	r17,r3,r6
   18a0c:	8810d77a 	srli	r8,r17,29
   18a10:	100490fa 	slli	r2,r2,3
   18a14:	882290fa 	slli	r17,r17,3
   18a18:	0401ffc4 	movi	r16,2047
   18a1c:	4090b03a 	or	r8,r8,r2
   18a20:	003e4106 	br	18328 <__alt_data_end+0xf8018328>
   18a24:	0141ffc4 	movi	r5,2047
   18a28:	117fc71e 	bne	r2,r5,18948 <__alt_data_end+0xf8018948>
   18a2c:	4811883a 	mov	r8,r9
   18a30:	3023883a 	mov	r17,r6
   18a34:	1021883a 	mov	r16,r2
   18a38:	003e3b06 	br	18328 <__alt_data_end+0xf8018328>
   18a3c:	10002f26 	beq	r2,zero,18afc <__adddf3+0x850>
   18a40:	4984b03a 	or	r2,r9,r6
   18a44:	10001126 	beq	r2,zero,18a8c <__adddf3+0x7e0>
   18a48:	4004d0fa 	srli	r2,r8,3
   18a4c:	8822d0fa 	srli	r17,r17,3
   18a50:	4010977a 	slli	r8,r8,29
   18a54:	10c0022c 	andhi	r3,r2,8
   18a58:	4462b03a 	or	r17,r8,r17
   18a5c:	183feb26 	beq	r3,zero,18a0c <__alt_data_end+0xf8018a0c>
   18a60:	4808d0fa 	srli	r4,r9,3
   18a64:	20c0022c 	andhi	r3,r4,8
   18a68:	183fe81e 	bne	r3,zero,18a0c <__alt_data_end+0xf8018a0c>
   18a6c:	300cd0fa 	srli	r6,r6,3
   18a70:	4806977a 	slli	r3,r9,29
   18a74:	2005883a 	mov	r2,r4
   18a78:	19a2b03a 	or	r17,r3,r6
   18a7c:	003fe306 	br	18a0c <__alt_data_end+0xf8018a0c>
   18a80:	0011883a 	mov	r8,zero
   18a84:	0005883a 	mov	r2,zero
   18a88:	003e3f06 	br	18388 <__alt_data_end+0xf8018388>
   18a8c:	0401ffc4 	movi	r16,2047
   18a90:	003e2506 	br	18328 <__alt_data_end+0xf8018328>
   18a94:	0013883a 	mov	r9,zero
   18a98:	003f8406 	br	188ac <__alt_data_end+0xf80188ac>
   18a9c:	0005883a 	mov	r2,zero
   18aa0:	0007883a 	mov	r3,zero
   18aa4:	003e8906 	br	184cc <__alt_data_end+0xf80184cc>
   18aa8:	197ff804 	addi	r5,r3,-32
   18aac:	01000804 	movi	r4,32
   18ab0:	414ad83a 	srl	r5,r8,r5
   18ab4:	19002426 	beq	r3,r4,18b48 <__adddf3+0x89c>
   18ab8:	01001004 	movi	r4,64
   18abc:	20c7c83a 	sub	r3,r4,r3
   18ac0:	40c6983a 	sll	r3,r8,r3
   18ac4:	1c46b03a 	or	r3,r3,r17
   18ac8:	1806c03a 	cmpne	r3,r3,zero
   18acc:	28e2b03a 	or	r17,r5,r3
   18ad0:	0007883a 	mov	r3,zero
   18ad4:	003f2306 	br	18764 <__alt_data_end+0xf8018764>
   18ad8:	0007883a 	mov	r3,zero
   18adc:	5811883a 	mov	r8,r11
   18ae0:	00bfffc4 	movi	r2,-1
   18ae4:	0401ffc4 	movi	r16,2047
   18ae8:	003e7806 	br	184cc <__alt_data_end+0xf80184cc>
   18aec:	4462b03a 	or	r17,r8,r17
   18af0:	8822c03a 	cmpne	r17,r17,zero
   18af4:	0009883a 	mov	r4,zero
   18af8:	003fa006 	br	1897c <__alt_data_end+0xf801897c>
   18afc:	4811883a 	mov	r8,r9
   18b00:	3023883a 	mov	r17,r6
   18b04:	0401ffc4 	movi	r16,2047
   18b08:	003e0706 	br	18328 <__alt_data_end+0xf8018328>
   18b0c:	4811883a 	mov	r8,r9
   18b10:	3023883a 	mov	r17,r6
   18b14:	003e0406 	br	18328 <__alt_data_end+0xf8018328>
   18b18:	21fff804 	addi	r7,r4,-32
   18b1c:	01400804 	movi	r5,32
   18b20:	41ced83a 	srl	r7,r8,r7
   18b24:	21400a26 	beq	r4,r5,18b50 <__adddf3+0x8a4>
   18b28:	01401004 	movi	r5,64
   18b2c:	2909c83a 	sub	r4,r5,r4
   18b30:	4108983a 	sll	r4,r8,r4
   18b34:	2448b03a 	or	r4,r4,r17
   18b38:	2008c03a 	cmpne	r4,r4,zero
   18b3c:	3922b03a 	or	r17,r7,r4
   18b40:	0009883a 	mov	r4,zero
   18b44:	003f8d06 	br	1897c <__alt_data_end+0xf801897c>
   18b48:	0007883a 	mov	r3,zero
   18b4c:	003fdd06 	br	18ac4 <__alt_data_end+0xf8018ac4>
   18b50:	0009883a 	mov	r4,zero
   18b54:	003ff706 	br	18b34 <__alt_data_end+0xf8018b34>

00018b58 <__eqdf2>:
   18b58:	2804d53a 	srli	r2,r5,20
   18b5c:	3806d53a 	srli	r3,r7,20
   18b60:	02000434 	movhi	r8,16
   18b64:	423fffc4 	addi	r8,r8,-1
   18b68:	1081ffcc 	andi	r2,r2,2047
   18b6c:	0281ffc4 	movi	r10,2047
   18b70:	2a12703a 	and	r9,r5,r8
   18b74:	18c1ffcc 	andi	r3,r3,2047
   18b78:	3a10703a 	and	r8,r7,r8
   18b7c:	280ad7fa 	srli	r5,r5,31
   18b80:	380ed7fa 	srli	r7,r7,31
   18b84:	12801026 	beq	r2,r10,18bc8 <__eqdf2+0x70>
   18b88:	0281ffc4 	movi	r10,2047
   18b8c:	1a800a26 	beq	r3,r10,18bb8 <__eqdf2+0x60>
   18b90:	10c00226 	beq	r2,r3,18b9c <__eqdf2+0x44>
   18b94:	00800044 	movi	r2,1
   18b98:	f800283a 	ret
   18b9c:	4a3ffd1e 	bne	r9,r8,18b94 <__alt_data_end+0xf8018b94>
   18ba0:	21bffc1e 	bne	r4,r6,18b94 <__alt_data_end+0xf8018b94>
   18ba4:	29c00c26 	beq	r5,r7,18bd8 <__eqdf2+0x80>
   18ba8:	103ffa1e 	bne	r2,zero,18b94 <__alt_data_end+0xf8018b94>
   18bac:	2244b03a 	or	r2,r4,r9
   18bb0:	1004c03a 	cmpne	r2,r2,zero
   18bb4:	f800283a 	ret
   18bb8:	3214b03a 	or	r10,r6,r8
   18bbc:	503ff426 	beq	r10,zero,18b90 <__alt_data_end+0xf8018b90>
   18bc0:	00800044 	movi	r2,1
   18bc4:	f800283a 	ret
   18bc8:	2254b03a 	or	r10,r4,r9
   18bcc:	503fee26 	beq	r10,zero,18b88 <__alt_data_end+0xf8018b88>
   18bd0:	00800044 	movi	r2,1
   18bd4:	f800283a 	ret
   18bd8:	0005883a 	mov	r2,zero
   18bdc:	f800283a 	ret

00018be0 <__ledf2>:
   18be0:	2804d53a 	srli	r2,r5,20
   18be4:	3810d53a 	srli	r8,r7,20
   18be8:	00c00434 	movhi	r3,16
   18bec:	18ffffc4 	addi	r3,r3,-1
   18bf0:	1081ffcc 	andi	r2,r2,2047
   18bf4:	0241ffc4 	movi	r9,2047
   18bf8:	28d4703a 	and	r10,r5,r3
   18bfc:	4201ffcc 	andi	r8,r8,2047
   18c00:	38c6703a 	and	r3,r7,r3
   18c04:	280ad7fa 	srli	r5,r5,31
   18c08:	380ed7fa 	srli	r7,r7,31
   18c0c:	12401f26 	beq	r2,r9,18c8c <__ledf2+0xac>
   18c10:	0241ffc4 	movi	r9,2047
   18c14:	42401426 	beq	r8,r9,18c68 <__ledf2+0x88>
   18c18:	1000091e 	bne	r2,zero,18c40 <__ledf2+0x60>
   18c1c:	2296b03a 	or	r11,r4,r10
   18c20:	5813003a 	cmpeq	r9,r11,zero
   18c24:	29403fcc 	andi	r5,r5,255
   18c28:	40000a1e 	bne	r8,zero,18c54 <__ledf2+0x74>
   18c2c:	30d8b03a 	or	r12,r6,r3
   18c30:	6000081e 	bne	r12,zero,18c54 <__ledf2+0x74>
   18c34:	0005883a 	mov	r2,zero
   18c38:	5800111e 	bne	r11,zero,18c80 <__ledf2+0xa0>
   18c3c:	f800283a 	ret
   18c40:	29403fcc 	andi	r5,r5,255
   18c44:	40000c1e 	bne	r8,zero,18c78 <__ledf2+0x98>
   18c48:	30d2b03a 	or	r9,r6,r3
   18c4c:	48000c26 	beq	r9,zero,18c80 <__ledf2+0xa0>
   18c50:	0013883a 	mov	r9,zero
   18c54:	39c03fcc 	andi	r7,r7,255
   18c58:	48000826 	beq	r9,zero,18c7c <__ledf2+0x9c>
   18c5c:	38001126 	beq	r7,zero,18ca4 <__ledf2+0xc4>
   18c60:	00800044 	movi	r2,1
   18c64:	f800283a 	ret
   18c68:	30d2b03a 	or	r9,r6,r3
   18c6c:	483fea26 	beq	r9,zero,18c18 <__alt_data_end+0xf8018c18>
   18c70:	00800084 	movi	r2,2
   18c74:	f800283a 	ret
   18c78:	39c03fcc 	andi	r7,r7,255
   18c7c:	39400726 	beq	r7,r5,18c9c <__ledf2+0xbc>
   18c80:	2800081e 	bne	r5,zero,18ca4 <__ledf2+0xc4>
   18c84:	00800044 	movi	r2,1
   18c88:	f800283a 	ret
   18c8c:	2292b03a 	or	r9,r4,r10
   18c90:	483fdf26 	beq	r9,zero,18c10 <__alt_data_end+0xf8018c10>
   18c94:	00800084 	movi	r2,2
   18c98:	f800283a 	ret
   18c9c:	4080030e 	bge	r8,r2,18cac <__ledf2+0xcc>
   18ca0:	383fef26 	beq	r7,zero,18c60 <__alt_data_end+0xf8018c60>
   18ca4:	00bfffc4 	movi	r2,-1
   18ca8:	f800283a 	ret
   18cac:	123feb16 	blt	r2,r8,18c5c <__alt_data_end+0xf8018c5c>
   18cb0:	1abff336 	bltu	r3,r10,18c80 <__alt_data_end+0xf8018c80>
   18cb4:	50c00326 	beq	r10,r3,18cc4 <__ledf2+0xe4>
   18cb8:	50c0042e 	bgeu	r10,r3,18ccc <__ledf2+0xec>
   18cbc:	283fe81e 	bne	r5,zero,18c60 <__alt_data_end+0xf8018c60>
   18cc0:	003ff806 	br	18ca4 <__alt_data_end+0xf8018ca4>
   18cc4:	313fee36 	bltu	r6,r4,18c80 <__alt_data_end+0xf8018c80>
   18cc8:	21bffc36 	bltu	r4,r6,18cbc <__alt_data_end+0xf8018cbc>
   18ccc:	0005883a 	mov	r2,zero
   18cd0:	f800283a 	ret

00018cd4 <__muldf3>:
   18cd4:	deffee04 	addi	sp,sp,-72
   18cd8:	dd000c15 	stw	r20,48(sp)
   18cdc:	2828d53a 	srli	r20,r5,20
   18ce0:	ddc00f15 	stw	r23,60(sp)
   18ce4:	282ed7fa 	srli	r23,r5,31
   18ce8:	dc000815 	stw	r16,32(sp)
   18cec:	04000434 	movhi	r16,16
   18cf0:	dcc00b15 	stw	r19,44(sp)
   18cf4:	843fffc4 	addi	r16,r16,-1
   18cf8:	dfc01115 	stw	ra,68(sp)
   18cfc:	df001015 	stw	fp,64(sp)
   18d00:	dd800e15 	stw	r22,56(sp)
   18d04:	dd400d15 	stw	r21,52(sp)
   18d08:	dc800a15 	stw	r18,40(sp)
   18d0c:	dc400915 	stw	r17,36(sp)
   18d10:	a501ffcc 	andi	r20,r20,2047
   18d14:	2c20703a 	and	r16,r5,r16
   18d18:	b827883a 	mov	r19,r23
   18d1c:	ba403fcc 	andi	r9,r23,255
   18d20:	a0006026 	beq	r20,zero,18ea4 <__muldf3+0x1d0>
   18d24:	0081ffc4 	movi	r2,2047
   18d28:	202d883a 	mov	r22,r4
   18d2c:	a0803626 	beq	r20,r2,18e08 <__muldf3+0x134>
   18d30:	84000434 	orhi	r16,r16,16
   18d34:	200ad77a 	srli	r5,r4,29
   18d38:	800490fa 	slli	r2,r16,3
   18d3c:	202c90fa 	slli	r22,r4,3
   18d40:	a53f0044 	addi	r20,r20,-1023
   18d44:	28a0b03a 	or	r16,r5,r2
   18d48:	002b883a 	mov	r21,zero
   18d4c:	000b883a 	mov	r5,zero
   18d50:	3804d53a 	srli	r2,r7,20
   18d54:	3838d7fa 	srli	fp,r7,31
   18d58:	04400434 	movhi	r17,16
   18d5c:	8c7fffc4 	addi	r17,r17,-1
   18d60:	1081ffcc 	andi	r2,r2,2047
   18d64:	3025883a 	mov	r18,r6
   18d68:	3c62703a 	and	r17,r7,r17
   18d6c:	e2803fcc 	andi	r10,fp,255
   18d70:	10006d26 	beq	r2,zero,18f28 <__muldf3+0x254>
   18d74:	00c1ffc4 	movi	r3,2047
   18d78:	10c06526 	beq	r2,r3,18f10 <__muldf3+0x23c>
   18d7c:	8c400434 	orhi	r17,r17,16
   18d80:	300ed77a 	srli	r7,r6,29
   18d84:	880690fa 	slli	r3,r17,3
   18d88:	302490fa 	slli	r18,r6,3
   18d8c:	10bf0044 	addi	r2,r2,-1023
   18d90:	38e2b03a 	or	r17,r7,r3
   18d94:	000f883a 	mov	r7,zero
   18d98:	a087883a 	add	r3,r20,r2
   18d9c:	010003c4 	movi	r4,15
   18da0:	3d44b03a 	or	r2,r7,r21
   18da4:	e5ccf03a 	xor	r6,fp,r23
   18da8:	1a000044 	addi	r8,r3,1
   18dac:	20809b36 	bltu	r4,r2,1901c <__muldf3+0x348>
   18db0:	100490ba 	slli	r2,r2,2
   18db4:	010000b4 	movhi	r4,2
   18db8:	21237204 	addi	r4,r4,-29240
   18dbc:	1105883a 	add	r2,r2,r4
   18dc0:	10800017 	ldw	r2,0(r2)
   18dc4:	1000683a 	jmp	r2
   18dc8:	0001901c 	xori	zero,zero,1600
   18dcc:	00018e28 	cmpgeui	zero,zero,1592
   18dd0:	00018e28 	cmpgeui	zero,zero,1592
   18dd4:	00018e24 	muli	zero,zero,1592
   18dd8:	00018ff8 	rdprs	zero,zero,1599
   18ddc:	00018ff8 	rdprs	zero,zero,1599
   18de0:	00018fe0 	cmpeqi	zero,zero,1599
   18de4:	00018e24 	muli	zero,zero,1592
   18de8:	00018ff8 	rdprs	zero,zero,1599
   18dec:	00018fe0 	cmpeqi	zero,zero,1599
   18df0:	00018ff8 	rdprs	zero,zero,1599
   18df4:	00018e24 	muli	zero,zero,1592
   18df8:	00019008 	cmpgei	zero,zero,1600
   18dfc:	00019008 	cmpgei	zero,zero,1600
   18e00:	00019008 	cmpgei	zero,zero,1600
   18e04:	00019368 	cmpgeui	zero,zero,1613
   18e08:	2404b03a 	or	r2,r4,r16
   18e0c:	1000711e 	bne	r2,zero,18fd4 <__muldf3+0x300>
   18e10:	05400204 	movi	r21,8
   18e14:	0021883a 	mov	r16,zero
   18e18:	002d883a 	mov	r22,zero
   18e1c:	01400084 	movi	r5,2
   18e20:	003fcb06 	br	18d50 <__alt_data_end+0xf8018d50>
   18e24:	500d883a 	mov	r6,r10
   18e28:	00800084 	movi	r2,2
   18e2c:	38805926 	beq	r7,r2,18f94 <__muldf3+0x2c0>
   18e30:	008000c4 	movi	r2,3
   18e34:	3881bb26 	beq	r7,r2,19524 <__muldf3+0x850>
   18e38:	00800044 	movi	r2,1
   18e3c:	3881961e 	bne	r7,r2,19498 <__muldf3+0x7c4>
   18e40:	3027883a 	mov	r19,r6
   18e44:	0005883a 	mov	r2,zero
   18e48:	0021883a 	mov	r16,zero
   18e4c:	002d883a 	mov	r22,zero
   18e50:	1004953a 	slli	r2,r2,20
   18e54:	98c03fcc 	andi	r3,r19,255
   18e58:	04400434 	movhi	r17,16
   18e5c:	8c7fffc4 	addi	r17,r17,-1
   18e60:	180697fa 	slli	r3,r3,31
   18e64:	8460703a 	and	r16,r16,r17
   18e68:	80a0b03a 	or	r16,r16,r2
   18e6c:	80c6b03a 	or	r3,r16,r3
   18e70:	b005883a 	mov	r2,r22
   18e74:	dfc01117 	ldw	ra,68(sp)
   18e78:	df001017 	ldw	fp,64(sp)
   18e7c:	ddc00f17 	ldw	r23,60(sp)
   18e80:	dd800e17 	ldw	r22,56(sp)
   18e84:	dd400d17 	ldw	r21,52(sp)
   18e88:	dd000c17 	ldw	r20,48(sp)
   18e8c:	dcc00b17 	ldw	r19,44(sp)
   18e90:	dc800a17 	ldw	r18,40(sp)
   18e94:	dc400917 	ldw	r17,36(sp)
   18e98:	dc000817 	ldw	r16,32(sp)
   18e9c:	dec01204 	addi	sp,sp,72
   18ea0:	f800283a 	ret
   18ea4:	2404b03a 	or	r2,r4,r16
   18ea8:	202b883a 	mov	r21,r4
   18eac:	10004426 	beq	r2,zero,18fc0 <__muldf3+0x2ec>
   18eb0:	80015126 	beq	r16,zero,193f8 <__muldf3+0x724>
   18eb4:	8009883a 	mov	r4,r16
   18eb8:	d9800715 	stw	r6,28(sp)
   18ebc:	d9c00215 	stw	r7,8(sp)
   18ec0:	da400415 	stw	r9,16(sp)
   18ec4:	000db840 	call	db84 <__clzsi2>
   18ec8:	d9800717 	ldw	r6,28(sp)
   18ecc:	d9c00217 	ldw	r7,8(sp)
   18ed0:	da400417 	ldw	r9,16(sp)
   18ed4:	113ffd44 	addi	r4,r2,-11
   18ed8:	00c00704 	movi	r3,28
   18edc:	19014216 	blt	r3,r4,193e8 <__muldf3+0x714>
   18ee0:	00c00744 	movi	r3,29
   18ee4:	15bffe04 	addi	r22,r2,-8
   18ee8:	1907c83a 	sub	r3,r3,r4
   18eec:	85a0983a 	sll	r16,r16,r22
   18ef0:	a8c6d83a 	srl	r3,r21,r3
   18ef4:	adac983a 	sll	r22,r21,r22
   18ef8:	1c20b03a 	or	r16,r3,r16
   18efc:	1080fcc4 	addi	r2,r2,1011
   18f00:	00a9c83a 	sub	r20,zero,r2
   18f04:	002b883a 	mov	r21,zero
   18f08:	000b883a 	mov	r5,zero
   18f0c:	003f9006 	br	18d50 <__alt_data_end+0xf8018d50>
   18f10:	3446b03a 	or	r3,r6,r17
   18f14:	1800281e 	bne	r3,zero,18fb8 <__muldf3+0x2e4>
   18f18:	0023883a 	mov	r17,zero
   18f1c:	0025883a 	mov	r18,zero
   18f20:	01c00084 	movi	r7,2
   18f24:	003f9c06 	br	18d98 <__alt_data_end+0xf8018d98>
   18f28:	3446b03a 	or	r3,r6,r17
   18f2c:	18001e26 	beq	r3,zero,18fa8 <__muldf3+0x2d4>
   18f30:	88012126 	beq	r17,zero,193b8 <__muldf3+0x6e4>
   18f34:	8809883a 	mov	r4,r17
   18f38:	d9400215 	stw	r5,8(sp)
   18f3c:	d9800715 	stw	r6,28(sp)
   18f40:	da400415 	stw	r9,16(sp)
   18f44:	da800315 	stw	r10,12(sp)
   18f48:	000db840 	call	db84 <__clzsi2>
   18f4c:	d9400217 	ldw	r5,8(sp)
   18f50:	d9800717 	ldw	r6,28(sp)
   18f54:	da400417 	ldw	r9,16(sp)
   18f58:	da800317 	ldw	r10,12(sp)
   18f5c:	113ffd44 	addi	r4,r2,-11
   18f60:	00c00704 	movi	r3,28
   18f64:	19011016 	blt	r3,r4,193a8 <__muldf3+0x6d4>
   18f68:	00c00744 	movi	r3,29
   18f6c:	14bffe04 	addi	r18,r2,-8
   18f70:	1907c83a 	sub	r3,r3,r4
   18f74:	8ca2983a 	sll	r17,r17,r18
   18f78:	30c6d83a 	srl	r3,r6,r3
   18f7c:	34a4983a 	sll	r18,r6,r18
   18f80:	1c62b03a 	or	r17,r3,r17
   18f84:	1080fcc4 	addi	r2,r2,1011
   18f88:	0085c83a 	sub	r2,zero,r2
   18f8c:	000f883a 	mov	r7,zero
   18f90:	003f8106 	br	18d98 <__alt_data_end+0xf8018d98>
   18f94:	3027883a 	mov	r19,r6
   18f98:	0081ffc4 	movi	r2,2047
   18f9c:	0021883a 	mov	r16,zero
   18fa0:	002d883a 	mov	r22,zero
   18fa4:	003faa06 	br	18e50 <__alt_data_end+0xf8018e50>
   18fa8:	0023883a 	mov	r17,zero
   18fac:	0025883a 	mov	r18,zero
   18fb0:	01c00044 	movi	r7,1
   18fb4:	003f7806 	br	18d98 <__alt_data_end+0xf8018d98>
   18fb8:	01c000c4 	movi	r7,3
   18fbc:	003f7606 	br	18d98 <__alt_data_end+0xf8018d98>
   18fc0:	05400104 	movi	r21,4
   18fc4:	0021883a 	mov	r16,zero
   18fc8:	002d883a 	mov	r22,zero
   18fcc:	01400044 	movi	r5,1
   18fd0:	003f5f06 	br	18d50 <__alt_data_end+0xf8018d50>
   18fd4:	05400304 	movi	r21,12
   18fd8:	014000c4 	movi	r5,3
   18fdc:	003f5c06 	br	18d50 <__alt_data_end+0xf8018d50>
   18fe0:	04000434 	movhi	r16,16
   18fe4:	0027883a 	mov	r19,zero
   18fe8:	843fffc4 	addi	r16,r16,-1
   18fec:	05bfffc4 	movi	r22,-1
   18ff0:	0081ffc4 	movi	r2,2047
   18ff4:	003f9606 	br	18e50 <__alt_data_end+0xf8018e50>
   18ff8:	8023883a 	mov	r17,r16
   18ffc:	b025883a 	mov	r18,r22
   19000:	280f883a 	mov	r7,r5
   19004:	003f8806 	br	18e28 <__alt_data_end+0xf8018e28>
   19008:	8023883a 	mov	r17,r16
   1900c:	b025883a 	mov	r18,r22
   19010:	480d883a 	mov	r6,r9
   19014:	280f883a 	mov	r7,r5
   19018:	003f8306 	br	18e28 <__alt_data_end+0xf8018e28>
   1901c:	b026d43a 	srli	r19,r22,16
   19020:	902ed43a 	srli	r23,r18,16
   19024:	b5bfffcc 	andi	r22,r22,65535
   19028:	94bfffcc 	andi	r18,r18,65535
   1902c:	b00b883a 	mov	r5,r22
   19030:	9009883a 	mov	r4,r18
   19034:	d8c00515 	stw	r3,20(sp)
   19038:	d9800715 	stw	r6,28(sp)
   1903c:	da000615 	stw	r8,24(sp)
   19040:	000c68c0 	call	c68c <__mulsi3>
   19044:	980b883a 	mov	r5,r19
   19048:	9009883a 	mov	r4,r18
   1904c:	1029883a 	mov	r20,r2
   19050:	000c68c0 	call	c68c <__mulsi3>
   19054:	b80b883a 	mov	r5,r23
   19058:	9809883a 	mov	r4,r19
   1905c:	102b883a 	mov	r21,r2
   19060:	000c68c0 	call	c68c <__mulsi3>
   19064:	b809883a 	mov	r4,r23
   19068:	b00b883a 	mov	r5,r22
   1906c:	1039883a 	mov	fp,r2
   19070:	000c68c0 	call	c68c <__mulsi3>
   19074:	a008d43a 	srli	r4,r20,16
   19078:	1545883a 	add	r2,r2,r21
   1907c:	d8c00517 	ldw	r3,20(sp)
   19080:	2085883a 	add	r2,r4,r2
   19084:	d9800717 	ldw	r6,28(sp)
   19088:	da000617 	ldw	r8,24(sp)
   1908c:	1540022e 	bgeu	r2,r21,19098 <__muldf3+0x3c4>
   19090:	01000074 	movhi	r4,1
   19094:	e139883a 	add	fp,fp,r4
   19098:	100e943a 	slli	r7,r2,16
   1909c:	1004d43a 	srli	r2,r2,16
   190a0:	882ad43a 	srli	r21,r17,16
   190a4:	a53fffcc 	andi	r20,r20,65535
   190a8:	8c7fffcc 	andi	r17,r17,65535
   190ac:	3d29883a 	add	r20,r7,r20
   190b0:	b00b883a 	mov	r5,r22
   190b4:	8809883a 	mov	r4,r17
   190b8:	d8c00515 	stw	r3,20(sp)
   190bc:	d9800715 	stw	r6,28(sp)
   190c0:	da000615 	stw	r8,24(sp)
   190c4:	dd000115 	stw	r20,4(sp)
   190c8:	d8800015 	stw	r2,0(sp)
   190cc:	000c68c0 	call	c68c <__mulsi3>
   190d0:	980b883a 	mov	r5,r19
   190d4:	8809883a 	mov	r4,r17
   190d8:	d8800215 	stw	r2,8(sp)
   190dc:	000c68c0 	call	c68c <__mulsi3>
   190e0:	9809883a 	mov	r4,r19
   190e4:	a80b883a 	mov	r5,r21
   190e8:	1029883a 	mov	r20,r2
   190ec:	000c68c0 	call	c68c <__mulsi3>
   190f0:	b00b883a 	mov	r5,r22
   190f4:	a809883a 	mov	r4,r21
   190f8:	d8800415 	stw	r2,16(sp)
   190fc:	000c68c0 	call	c68c <__mulsi3>
   19100:	d9c00217 	ldw	r7,8(sp)
   19104:	1505883a 	add	r2,r2,r20
   19108:	d8c00517 	ldw	r3,20(sp)
   1910c:	3826d43a 	srli	r19,r7,16
   19110:	d9800717 	ldw	r6,28(sp)
   19114:	da000617 	ldw	r8,24(sp)
   19118:	9885883a 	add	r2,r19,r2
   1911c:	da400417 	ldw	r9,16(sp)
   19120:	1500022e 	bgeu	r2,r20,1912c <__muldf3+0x458>
   19124:	01000074 	movhi	r4,1
   19128:	4913883a 	add	r9,r9,r4
   1912c:	1028d43a 	srli	r20,r2,16
   19130:	1004943a 	slli	r2,r2,16
   19134:	802cd43a 	srli	r22,r16,16
   19138:	843fffcc 	andi	r16,r16,65535
   1913c:	3cffffcc 	andi	r19,r7,65535
   19140:	9009883a 	mov	r4,r18
   19144:	800b883a 	mov	r5,r16
   19148:	a269883a 	add	r20,r20,r9
   1914c:	d8c00515 	stw	r3,20(sp)
   19150:	d9800715 	stw	r6,28(sp)
   19154:	da000615 	stw	r8,24(sp)
   19158:	14e7883a 	add	r19,r2,r19
   1915c:	000c68c0 	call	c68c <__mulsi3>
   19160:	9009883a 	mov	r4,r18
   19164:	b00b883a 	mov	r5,r22
   19168:	d8800315 	stw	r2,12(sp)
   1916c:	000c68c0 	call	c68c <__mulsi3>
   19170:	b809883a 	mov	r4,r23
   19174:	b00b883a 	mov	r5,r22
   19178:	d8800215 	stw	r2,8(sp)
   1917c:	000c68c0 	call	c68c <__mulsi3>
   19180:	b80b883a 	mov	r5,r23
   19184:	8009883a 	mov	r4,r16
   19188:	d8800415 	stw	r2,16(sp)
   1918c:	000c68c0 	call	c68c <__mulsi3>
   19190:	da800317 	ldw	r10,12(sp)
   19194:	d9c00217 	ldw	r7,8(sp)
   19198:	d9000017 	ldw	r4,0(sp)
   1919c:	502ed43a 	srli	r23,r10,16
   191a0:	11c5883a 	add	r2,r2,r7
   191a4:	24e5883a 	add	r18,r4,r19
   191a8:	b885883a 	add	r2,r23,r2
   191ac:	d8c00517 	ldw	r3,20(sp)
   191b0:	d9800717 	ldw	r6,28(sp)
   191b4:	da000617 	ldw	r8,24(sp)
   191b8:	da400417 	ldw	r9,16(sp)
   191bc:	11c0022e 	bgeu	r2,r7,191c8 <__muldf3+0x4f4>
   191c0:	01000074 	movhi	r4,1
   191c4:	4913883a 	add	r9,r9,r4
   191c8:	100ed43a 	srli	r7,r2,16
   191cc:	1004943a 	slli	r2,r2,16
   191d0:	55ffffcc 	andi	r23,r10,65535
   191d4:	3a53883a 	add	r9,r7,r9
   191d8:	8809883a 	mov	r4,r17
   191dc:	800b883a 	mov	r5,r16
   191e0:	d8c00515 	stw	r3,20(sp)
   191e4:	d9800715 	stw	r6,28(sp)
   191e8:	da000615 	stw	r8,24(sp)
   191ec:	da400415 	stw	r9,16(sp)
   191f0:	15ef883a 	add	r23,r2,r23
   191f4:	000c68c0 	call	c68c <__mulsi3>
   191f8:	8809883a 	mov	r4,r17
   191fc:	b00b883a 	mov	r5,r22
   19200:	d8800215 	stw	r2,8(sp)
   19204:	000c68c0 	call	c68c <__mulsi3>
   19208:	b00b883a 	mov	r5,r22
   1920c:	a809883a 	mov	r4,r21
   19210:	d8800315 	stw	r2,12(sp)
   19214:	000c68c0 	call	c68c <__mulsi3>
   19218:	8009883a 	mov	r4,r16
   1921c:	a80b883a 	mov	r5,r21
   19220:	1023883a 	mov	r17,r2
   19224:	000c68c0 	call	c68c <__mulsi3>
   19228:	d9c00217 	ldw	r7,8(sp)
   1922c:	da800317 	ldw	r10,12(sp)
   19230:	d8c00517 	ldw	r3,20(sp)
   19234:	3808d43a 	srli	r4,r7,16
   19238:	1285883a 	add	r2,r2,r10
   1923c:	d9800717 	ldw	r6,28(sp)
   19240:	2085883a 	add	r2,r4,r2
   19244:	da000617 	ldw	r8,24(sp)
   19248:	da400417 	ldw	r9,16(sp)
   1924c:	1280022e 	bgeu	r2,r10,19258 <__muldf3+0x584>
   19250:	01000074 	movhi	r4,1
   19254:	8923883a 	add	r17,r17,r4
   19258:	1008943a 	slli	r4,r2,16
   1925c:	39ffffcc 	andi	r7,r7,65535
   19260:	e4b9883a 	add	fp,fp,r18
   19264:	21cf883a 	add	r7,r4,r7
   19268:	e4e7803a 	cmpltu	r19,fp,r19
   1926c:	3d0f883a 	add	r7,r7,r20
   19270:	bf39883a 	add	fp,r23,fp
   19274:	99c9883a 	add	r4,r19,r7
   19278:	e5ef803a 	cmpltu	r23,fp,r23
   1927c:	490b883a 	add	r5,r9,r4
   19280:	1004d43a 	srli	r2,r2,16
   19284:	b965883a 	add	r18,r23,r5
   19288:	24c9803a 	cmpltu	r4,r4,r19
   1928c:	3d29803a 	cmpltu	r20,r7,r20
   19290:	a128b03a 	or	r20,r20,r4
   19294:	95ef803a 	cmpltu	r23,r18,r23
   19298:	2a53803a 	cmpltu	r9,r5,r9
   1929c:	a0a9883a 	add	r20,r20,r2
   192a0:	4deeb03a 	or	r23,r9,r23
   192a4:	a5ef883a 	add	r23,r20,r23
   192a8:	bc63883a 	add	r17,r23,r17
   192ac:	e004927a 	slli	r2,fp,9
   192b0:	d9000117 	ldw	r4,4(sp)
   192b4:	882e927a 	slli	r23,r17,9
   192b8:	9022d5fa 	srli	r17,r18,23
   192bc:	e038d5fa 	srli	fp,fp,23
   192c0:	1104b03a 	or	r2,r2,r4
   192c4:	9024927a 	slli	r18,r18,9
   192c8:	1004c03a 	cmpne	r2,r2,zero
   192cc:	bc62b03a 	or	r17,r23,r17
   192d0:	1738b03a 	or	fp,r2,fp
   192d4:	8880402c 	andhi	r2,r17,256
   192d8:	e4a4b03a 	or	r18,fp,r18
   192dc:	10000726 	beq	r2,zero,192fc <__muldf3+0x628>
   192e0:	9006d07a 	srli	r3,r18,1
   192e4:	880497fa 	slli	r2,r17,31
   192e8:	9480004c 	andi	r18,r18,1
   192ec:	8822d07a 	srli	r17,r17,1
   192f0:	1ca4b03a 	or	r18,r3,r18
   192f4:	14a4b03a 	or	r18,r2,r18
   192f8:	4007883a 	mov	r3,r8
   192fc:	1880ffc4 	addi	r2,r3,1023
   19300:	0080460e 	bge	zero,r2,1941c <__muldf3+0x748>
   19304:	910001cc 	andi	r4,r18,7
   19308:	20000726 	beq	r4,zero,19328 <__muldf3+0x654>
   1930c:	910003cc 	andi	r4,r18,15
   19310:	01400104 	movi	r5,4
   19314:	21400426 	beq	r4,r5,19328 <__muldf3+0x654>
   19318:	9149883a 	add	r4,r18,r5
   1931c:	24a5803a 	cmpltu	r18,r4,r18
   19320:	8ca3883a 	add	r17,r17,r18
   19324:	2025883a 	mov	r18,r4
   19328:	8900402c 	andhi	r4,r17,256
   1932c:	20000426 	beq	r4,zero,19340 <__muldf3+0x66c>
   19330:	18810004 	addi	r2,r3,1024
   19334:	00ffc034 	movhi	r3,65280
   19338:	18ffffc4 	addi	r3,r3,-1
   1933c:	88e2703a 	and	r17,r17,r3
   19340:	00c1ff84 	movi	r3,2046
   19344:	18bf1316 	blt	r3,r2,18f94 <__alt_data_end+0xf8018f94>
   19348:	882c977a 	slli	r22,r17,29
   1934c:	9024d0fa 	srli	r18,r18,3
   19350:	8822927a 	slli	r17,r17,9
   19354:	1081ffcc 	andi	r2,r2,2047
   19358:	b4acb03a 	or	r22,r22,r18
   1935c:	8820d33a 	srli	r16,r17,12
   19360:	3027883a 	mov	r19,r6
   19364:	003eba06 	br	18e50 <__alt_data_end+0xf8018e50>
   19368:	8080022c 	andhi	r2,r16,8
   1936c:	10000926 	beq	r2,zero,19394 <__muldf3+0x6c0>
   19370:	8880022c 	andhi	r2,r17,8
   19374:	1000071e 	bne	r2,zero,19394 <__muldf3+0x6c0>
   19378:	00800434 	movhi	r2,16
   1937c:	8c000234 	orhi	r16,r17,8
   19380:	10bfffc4 	addi	r2,r2,-1
   19384:	e027883a 	mov	r19,fp
   19388:	80a0703a 	and	r16,r16,r2
   1938c:	902d883a 	mov	r22,r18
   19390:	003f1706 	br	18ff0 <__alt_data_end+0xf8018ff0>
   19394:	00800434 	movhi	r2,16
   19398:	84000234 	orhi	r16,r16,8
   1939c:	10bfffc4 	addi	r2,r2,-1
   193a0:	80a0703a 	and	r16,r16,r2
   193a4:	003f1206 	br	18ff0 <__alt_data_end+0xf8018ff0>
   193a8:	147ff604 	addi	r17,r2,-40
   193ac:	3462983a 	sll	r17,r6,r17
   193b0:	0025883a 	mov	r18,zero
   193b4:	003ef306 	br	18f84 <__alt_data_end+0xf8018f84>
   193b8:	3009883a 	mov	r4,r6
   193bc:	d9400215 	stw	r5,8(sp)
   193c0:	d9800715 	stw	r6,28(sp)
   193c4:	da400415 	stw	r9,16(sp)
   193c8:	da800315 	stw	r10,12(sp)
   193cc:	000db840 	call	db84 <__clzsi2>
   193d0:	10800804 	addi	r2,r2,32
   193d4:	da800317 	ldw	r10,12(sp)
   193d8:	da400417 	ldw	r9,16(sp)
   193dc:	d9800717 	ldw	r6,28(sp)
   193e0:	d9400217 	ldw	r5,8(sp)
   193e4:	003edd06 	br	18f5c <__alt_data_end+0xf8018f5c>
   193e8:	143ff604 	addi	r16,r2,-40
   193ec:	ac20983a 	sll	r16,r21,r16
   193f0:	002d883a 	mov	r22,zero
   193f4:	003ec106 	br	18efc <__alt_data_end+0xf8018efc>
   193f8:	d9800715 	stw	r6,28(sp)
   193fc:	d9c00215 	stw	r7,8(sp)
   19400:	da400415 	stw	r9,16(sp)
   19404:	000db840 	call	db84 <__clzsi2>
   19408:	10800804 	addi	r2,r2,32
   1940c:	da400417 	ldw	r9,16(sp)
   19410:	d9c00217 	ldw	r7,8(sp)
   19414:	d9800717 	ldw	r6,28(sp)
   19418:	003eae06 	br	18ed4 <__alt_data_end+0xf8018ed4>
   1941c:	00c00044 	movi	r3,1
   19420:	1887c83a 	sub	r3,r3,r2
   19424:	01000e04 	movi	r4,56
   19428:	20fe8516 	blt	r4,r3,18e40 <__alt_data_end+0xf8018e40>
   1942c:	010007c4 	movi	r4,31
   19430:	20c01b16 	blt	r4,r3,194a0 <__muldf3+0x7cc>
   19434:	00800804 	movi	r2,32
   19438:	10c5c83a 	sub	r2,r2,r3
   1943c:	888a983a 	sll	r5,r17,r2
   19440:	90c8d83a 	srl	r4,r18,r3
   19444:	9084983a 	sll	r2,r18,r2
   19448:	88e2d83a 	srl	r17,r17,r3
   1944c:	2906b03a 	or	r3,r5,r4
   19450:	1004c03a 	cmpne	r2,r2,zero
   19454:	1886b03a 	or	r3,r3,r2
   19458:	188001cc 	andi	r2,r3,7
   1945c:	10000726 	beq	r2,zero,1947c <__muldf3+0x7a8>
   19460:	188003cc 	andi	r2,r3,15
   19464:	01000104 	movi	r4,4
   19468:	11000426 	beq	r2,r4,1947c <__muldf3+0x7a8>
   1946c:	1805883a 	mov	r2,r3
   19470:	10c00104 	addi	r3,r2,4
   19474:	1885803a 	cmpltu	r2,r3,r2
   19478:	88a3883a 	add	r17,r17,r2
   1947c:	8880202c 	andhi	r2,r17,128
   19480:	10001c26 	beq	r2,zero,194f4 <__muldf3+0x820>
   19484:	3027883a 	mov	r19,r6
   19488:	00800044 	movi	r2,1
   1948c:	0021883a 	mov	r16,zero
   19490:	002d883a 	mov	r22,zero
   19494:	003e6e06 	br	18e50 <__alt_data_end+0xf8018e50>
   19498:	4007883a 	mov	r3,r8
   1949c:	003f9706 	br	192fc <__alt_data_end+0xf80192fc>
   194a0:	017ff844 	movi	r5,-31
   194a4:	2885c83a 	sub	r2,r5,r2
   194a8:	888ad83a 	srl	r5,r17,r2
   194ac:	00800804 	movi	r2,32
   194b0:	18801a26 	beq	r3,r2,1951c <__muldf3+0x848>
   194b4:	01001004 	movi	r4,64
   194b8:	20c7c83a 	sub	r3,r4,r3
   194bc:	88e2983a 	sll	r17,r17,r3
   194c0:	8ca4b03a 	or	r18,r17,r18
   194c4:	9004c03a 	cmpne	r2,r18,zero
   194c8:	2884b03a 	or	r2,r5,r2
   194cc:	144001cc 	andi	r17,r2,7
   194d0:	88000d1e 	bne	r17,zero,19508 <__muldf3+0x834>
   194d4:	0021883a 	mov	r16,zero
   194d8:	102cd0fa 	srli	r22,r2,3
   194dc:	3027883a 	mov	r19,r6
   194e0:	0005883a 	mov	r2,zero
   194e4:	b46cb03a 	or	r22,r22,r17
   194e8:	003e5906 	br	18e50 <__alt_data_end+0xf8018e50>
   194ec:	1007883a 	mov	r3,r2
   194f0:	0023883a 	mov	r17,zero
   194f4:	8820927a 	slli	r16,r17,9
   194f8:	1805883a 	mov	r2,r3
   194fc:	8822977a 	slli	r17,r17,29
   19500:	8020d33a 	srli	r16,r16,12
   19504:	003ff406 	br	194d8 <__alt_data_end+0xf80194d8>
   19508:	10c003cc 	andi	r3,r2,15
   1950c:	01000104 	movi	r4,4
   19510:	193ff626 	beq	r3,r4,194ec <__alt_data_end+0xf80194ec>
   19514:	0023883a 	mov	r17,zero
   19518:	003fd506 	br	19470 <__alt_data_end+0xf8019470>
   1951c:	0023883a 	mov	r17,zero
   19520:	003fe706 	br	194c0 <__alt_data_end+0xf80194c0>
   19524:	00800434 	movhi	r2,16
   19528:	8c000234 	orhi	r16,r17,8
   1952c:	10bfffc4 	addi	r2,r2,-1
   19530:	3027883a 	mov	r19,r6
   19534:	80a0703a 	and	r16,r16,r2
   19538:	902d883a 	mov	r22,r18
   1953c:	003eac06 	br	18ff0 <__alt_data_end+0xf8018ff0>

00019540 <__floatsidf>:
   19540:	defffd04 	addi	sp,sp,-12
   19544:	dfc00215 	stw	ra,8(sp)
   19548:	dc400115 	stw	r17,4(sp)
   1954c:	dc000015 	stw	r16,0(sp)
   19550:	20002b26 	beq	r4,zero,19600 <__floatsidf+0xc0>
   19554:	2023883a 	mov	r17,r4
   19558:	2020d7fa 	srli	r16,r4,31
   1955c:	20002d16 	blt	r4,zero,19614 <__floatsidf+0xd4>
   19560:	8809883a 	mov	r4,r17
   19564:	000db840 	call	db84 <__clzsi2>
   19568:	01410784 	movi	r5,1054
   1956c:	288bc83a 	sub	r5,r5,r2
   19570:	01010cc4 	movi	r4,1075
   19574:	2149c83a 	sub	r4,r4,r5
   19578:	00c007c4 	movi	r3,31
   1957c:	1900160e 	bge	r3,r4,195d8 <__floatsidf+0x98>
   19580:	00c104c4 	movi	r3,1043
   19584:	1947c83a 	sub	r3,r3,r5
   19588:	88c6983a 	sll	r3,r17,r3
   1958c:	00800434 	movhi	r2,16
   19590:	10bfffc4 	addi	r2,r2,-1
   19594:	1886703a 	and	r3,r3,r2
   19598:	2941ffcc 	andi	r5,r5,2047
   1959c:	800d883a 	mov	r6,r16
   195a0:	0005883a 	mov	r2,zero
   195a4:	280a953a 	slli	r5,r5,20
   195a8:	31803fcc 	andi	r6,r6,255
   195ac:	01000434 	movhi	r4,16
   195b0:	300c97fa 	slli	r6,r6,31
   195b4:	213fffc4 	addi	r4,r4,-1
   195b8:	1906703a 	and	r3,r3,r4
   195bc:	1946b03a 	or	r3,r3,r5
   195c0:	1986b03a 	or	r3,r3,r6
   195c4:	dfc00217 	ldw	ra,8(sp)
   195c8:	dc400117 	ldw	r17,4(sp)
   195cc:	dc000017 	ldw	r16,0(sp)
   195d0:	dec00304 	addi	sp,sp,12
   195d4:	f800283a 	ret
   195d8:	00c002c4 	movi	r3,11
   195dc:	1887c83a 	sub	r3,r3,r2
   195e0:	88c6d83a 	srl	r3,r17,r3
   195e4:	8904983a 	sll	r2,r17,r4
   195e8:	01000434 	movhi	r4,16
   195ec:	213fffc4 	addi	r4,r4,-1
   195f0:	2941ffcc 	andi	r5,r5,2047
   195f4:	1906703a 	and	r3,r3,r4
   195f8:	800d883a 	mov	r6,r16
   195fc:	003fe906 	br	195a4 <__alt_data_end+0xf80195a4>
   19600:	000d883a 	mov	r6,zero
   19604:	000b883a 	mov	r5,zero
   19608:	0007883a 	mov	r3,zero
   1960c:	0005883a 	mov	r2,zero
   19610:	003fe406 	br	195a4 <__alt_data_end+0xf80195a4>
   19614:	0123c83a 	sub	r17,zero,r4
   19618:	003fd106 	br	19560 <__alt_data_end+0xf8019560>

0001961c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1961c:	defffe04 	addi	sp,sp,-8
   19620:	dfc00115 	stw	ra,4(sp)
   19624:	df000015 	stw	fp,0(sp)
   19628:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1962c:	d0a01717 	ldw	r2,-32676(gp)
   19630:	10000326 	beq	r2,zero,19640 <alt_get_errno+0x24>
   19634:	d0a01717 	ldw	r2,-32676(gp)
   19638:	103ee83a 	callr	r2
   1963c:	00000106 	br	19644 <alt_get_errno+0x28>
   19640:	d0a70404 	addi	r2,gp,-25584
}
   19644:	e037883a 	mov	sp,fp
   19648:	dfc00117 	ldw	ra,4(sp)
   1964c:	df000017 	ldw	fp,0(sp)
   19650:	dec00204 	addi	sp,sp,8
   19654:	f800283a 	ret

00019658 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   19658:	defffb04 	addi	sp,sp,-20
   1965c:	dfc00415 	stw	ra,16(sp)
   19660:	df000315 	stw	fp,12(sp)
   19664:	df000304 	addi	fp,sp,12
   19668:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1966c:	e0bfff17 	ldw	r2,-4(fp)
   19670:	10000816 	blt	r2,zero,19694 <close+0x3c>
   19674:	01400304 	movi	r5,12
   19678:	e13fff17 	ldw	r4,-4(fp)
   1967c:	000c68c0 	call	c68c <__mulsi3>
   19680:	1007883a 	mov	r3,r2
   19684:	008000b4 	movhi	r2,2
   19688:	10b54304 	addi	r2,r2,-10996
   1968c:	1885883a 	add	r2,r3,r2
   19690:	00000106 	br	19698 <close+0x40>
   19694:	0005883a 	mov	r2,zero
   19698:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1969c:	e0bffd17 	ldw	r2,-12(fp)
   196a0:	10001926 	beq	r2,zero,19708 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   196a4:	e0bffd17 	ldw	r2,-12(fp)
   196a8:	10800017 	ldw	r2,0(r2)
   196ac:	10800417 	ldw	r2,16(r2)
   196b0:	10000626 	beq	r2,zero,196cc <close+0x74>
   196b4:	e0bffd17 	ldw	r2,-12(fp)
   196b8:	10800017 	ldw	r2,0(r2)
   196bc:	10800417 	ldw	r2,16(r2)
   196c0:	e13ffd17 	ldw	r4,-12(fp)
   196c4:	103ee83a 	callr	r2
   196c8:	00000106 	br	196d0 <close+0x78>
   196cc:	0005883a 	mov	r2,zero
   196d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   196d4:	e13fff17 	ldw	r4,-4(fp)
   196d8:	0019d400 	call	19d40 <alt_release_fd>
    if (rval < 0)
   196dc:	e0bffe17 	ldw	r2,-8(fp)
   196e0:	1000070e 	bge	r2,zero,19700 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   196e4:	001961c0 	call	1961c <alt_get_errno>
   196e8:	1007883a 	mov	r3,r2
   196ec:	e0bffe17 	ldw	r2,-8(fp)
   196f0:	0085c83a 	sub	r2,zero,r2
   196f4:	18800015 	stw	r2,0(r3)
      return -1;
   196f8:	00bfffc4 	movi	r2,-1
   196fc:	00000706 	br	1971c <close+0xc4>
    }
    return 0;
   19700:	0005883a 	mov	r2,zero
   19704:	00000506 	br	1971c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19708:	001961c0 	call	1961c <alt_get_errno>
   1970c:	1007883a 	mov	r3,r2
   19710:	00801444 	movi	r2,81
   19714:	18800015 	stw	r2,0(r3)
    return -1;
   19718:	00bfffc4 	movi	r2,-1
  }
}
   1971c:	e037883a 	mov	sp,fp
   19720:	dfc00117 	ldw	ra,4(sp)
   19724:	df000017 	ldw	fp,0(sp)
   19728:	dec00204 	addi	sp,sp,8
   1972c:	f800283a 	ret

00019730 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   19730:	defffc04 	addi	sp,sp,-16
   19734:	df000315 	stw	fp,12(sp)
   19738:	df000304 	addi	fp,sp,12
   1973c:	e13ffd15 	stw	r4,-12(fp)
   19740:	e17ffe15 	stw	r5,-8(fp)
   19744:	e1bfff15 	stw	r6,-4(fp)
  return len;
   19748:	e0bfff17 	ldw	r2,-4(fp)
}
   1974c:	e037883a 	mov	sp,fp
   19750:	df000017 	ldw	fp,0(sp)
   19754:	dec00104 	addi	sp,sp,4
   19758:	f800283a 	ret

0001975c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1975c:	defffe04 	addi	sp,sp,-8
   19760:	dfc00115 	stw	ra,4(sp)
   19764:	df000015 	stw	fp,0(sp)
   19768:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1976c:	d0a01717 	ldw	r2,-32676(gp)
   19770:	10000326 	beq	r2,zero,19780 <alt_get_errno+0x24>
   19774:	d0a01717 	ldw	r2,-32676(gp)
   19778:	103ee83a 	callr	r2
   1977c:	00000106 	br	19784 <alt_get_errno+0x28>
   19780:	d0a70404 	addi	r2,gp,-25584
}
   19784:	e037883a 	mov	sp,fp
   19788:	dfc00117 	ldw	ra,4(sp)
   1978c:	df000017 	ldw	fp,0(sp)
   19790:	dec00204 	addi	sp,sp,8
   19794:	f800283a 	ret

00019798 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   19798:	defffb04 	addi	sp,sp,-20
   1979c:	dfc00415 	stw	ra,16(sp)
   197a0:	df000315 	stw	fp,12(sp)
   197a4:	df000304 	addi	fp,sp,12
   197a8:	e13ffe15 	stw	r4,-8(fp)
   197ac:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   197b0:	e0bffe17 	ldw	r2,-8(fp)
   197b4:	10000816 	blt	r2,zero,197d8 <fstat+0x40>
   197b8:	01400304 	movi	r5,12
   197bc:	e13ffe17 	ldw	r4,-8(fp)
   197c0:	000c68c0 	call	c68c <__mulsi3>
   197c4:	1007883a 	mov	r3,r2
   197c8:	008000b4 	movhi	r2,2
   197cc:	10b54304 	addi	r2,r2,-10996
   197d0:	1885883a 	add	r2,r3,r2
   197d4:	00000106 	br	197dc <fstat+0x44>
   197d8:	0005883a 	mov	r2,zero
   197dc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   197e0:	e0bffd17 	ldw	r2,-12(fp)
   197e4:	10001026 	beq	r2,zero,19828 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   197e8:	e0bffd17 	ldw	r2,-12(fp)
   197ec:	10800017 	ldw	r2,0(r2)
   197f0:	10800817 	ldw	r2,32(r2)
   197f4:	10000726 	beq	r2,zero,19814 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   197f8:	e0bffd17 	ldw	r2,-12(fp)
   197fc:	10800017 	ldw	r2,0(r2)
   19800:	10800817 	ldw	r2,32(r2)
   19804:	e17fff17 	ldw	r5,-4(fp)
   19808:	e13ffd17 	ldw	r4,-12(fp)
   1980c:	103ee83a 	callr	r2
   19810:	00000a06 	br	1983c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   19814:	e0bfff17 	ldw	r2,-4(fp)
   19818:	00c80004 	movi	r3,8192
   1981c:	10c00115 	stw	r3,4(r2)
      return 0;
   19820:	0005883a 	mov	r2,zero
   19824:	00000506 	br	1983c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19828:	001975c0 	call	1975c <alt_get_errno>
   1982c:	1007883a 	mov	r3,r2
   19830:	00801444 	movi	r2,81
   19834:	18800015 	stw	r2,0(r3)
    return -1;
   19838:	00bfffc4 	movi	r2,-1
  }
}
   1983c:	e037883a 	mov	sp,fp
   19840:	dfc00117 	ldw	ra,4(sp)
   19844:	df000017 	ldw	fp,0(sp)
   19848:	dec00204 	addi	sp,sp,8
   1984c:	f800283a 	ret

00019850 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19850:	defffe04 	addi	sp,sp,-8
   19854:	dfc00115 	stw	ra,4(sp)
   19858:	df000015 	stw	fp,0(sp)
   1985c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19860:	d0a01717 	ldw	r2,-32676(gp)
   19864:	10000326 	beq	r2,zero,19874 <alt_get_errno+0x24>
   19868:	d0a01717 	ldw	r2,-32676(gp)
   1986c:	103ee83a 	callr	r2
   19870:	00000106 	br	19878 <alt_get_errno+0x28>
   19874:	d0a70404 	addi	r2,gp,-25584
}
   19878:	e037883a 	mov	sp,fp
   1987c:	dfc00117 	ldw	ra,4(sp)
   19880:	df000017 	ldw	fp,0(sp)
   19884:	dec00204 	addi	sp,sp,8
   19888:	f800283a 	ret

0001988c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1988c:	deffed04 	addi	sp,sp,-76
   19890:	dfc01215 	stw	ra,72(sp)
   19894:	df001115 	stw	fp,68(sp)
   19898:	df001104 	addi	fp,sp,68
   1989c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   198a0:	e0bfff17 	ldw	r2,-4(fp)
   198a4:	10000816 	blt	r2,zero,198c8 <isatty+0x3c>
   198a8:	01400304 	movi	r5,12
   198ac:	e13fff17 	ldw	r4,-4(fp)
   198b0:	000c68c0 	call	c68c <__mulsi3>
   198b4:	1007883a 	mov	r3,r2
   198b8:	008000b4 	movhi	r2,2
   198bc:	10b54304 	addi	r2,r2,-10996
   198c0:	1885883a 	add	r2,r3,r2
   198c4:	00000106 	br	198cc <isatty+0x40>
   198c8:	0005883a 	mov	r2,zero
   198cc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   198d0:	e0bfef17 	ldw	r2,-68(fp)
   198d4:	10000e26 	beq	r2,zero,19910 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   198d8:	e0bfef17 	ldw	r2,-68(fp)
   198dc:	10800017 	ldw	r2,0(r2)
   198e0:	10800817 	ldw	r2,32(r2)
   198e4:	1000021e 	bne	r2,zero,198f0 <isatty+0x64>
    {
      return 1;
   198e8:	00800044 	movi	r2,1
   198ec:	00000d06 	br	19924 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   198f0:	e0bff004 	addi	r2,fp,-64
   198f4:	100b883a 	mov	r5,r2
   198f8:	e13fff17 	ldw	r4,-4(fp)
   198fc:	00197980 	call	19798 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   19900:	e0bff117 	ldw	r2,-60(fp)
   19904:	10880020 	cmpeqi	r2,r2,8192
   19908:	10803fcc 	andi	r2,r2,255
   1990c:	00000506 	br	19924 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19910:	00198500 	call	19850 <alt_get_errno>
   19914:	1007883a 	mov	r3,r2
   19918:	00801444 	movi	r2,81
   1991c:	18800015 	stw	r2,0(r3)
    return 0;
   19920:	0005883a 	mov	r2,zero
  }
}
   19924:	e037883a 	mov	sp,fp
   19928:	dfc00117 	ldw	ra,4(sp)
   1992c:	df000017 	ldw	fp,0(sp)
   19930:	dec00204 	addi	sp,sp,8
   19934:	f800283a 	ret

00019938 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   19938:	defffc04 	addi	sp,sp,-16
   1993c:	df000315 	stw	fp,12(sp)
   19940:	df000304 	addi	fp,sp,12
   19944:	e13ffd15 	stw	r4,-12(fp)
   19948:	e17ffe15 	stw	r5,-8(fp)
   1994c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   19950:	e0fffe17 	ldw	r3,-8(fp)
   19954:	e0bffd17 	ldw	r2,-12(fp)
   19958:	18800c26 	beq	r3,r2,1998c <alt_load_section+0x54>
  {
    while( to != end )
   1995c:	00000806 	br	19980 <alt_load_section+0x48>
    {
      *to++ = *from++;
   19960:	e0bffe17 	ldw	r2,-8(fp)
   19964:	10c00104 	addi	r3,r2,4
   19968:	e0fffe15 	stw	r3,-8(fp)
   1996c:	e0fffd17 	ldw	r3,-12(fp)
   19970:	19000104 	addi	r4,r3,4
   19974:	e13ffd15 	stw	r4,-12(fp)
   19978:	18c00017 	ldw	r3,0(r3)
   1997c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   19980:	e0fffe17 	ldw	r3,-8(fp)
   19984:	e0bfff17 	ldw	r2,-4(fp)
   19988:	18bff51e 	bne	r3,r2,19960 <__alt_data_end+0xf8019960>
    {
      *to++ = *from++;
    }
  }
}
   1998c:	0001883a 	nop
   19990:	e037883a 	mov	sp,fp
   19994:	df000017 	ldw	fp,0(sp)
   19998:	dec00104 	addi	sp,sp,4
   1999c:	f800283a 	ret

000199a0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   199a0:	defffe04 	addi	sp,sp,-8
   199a4:	dfc00115 	stw	ra,4(sp)
   199a8:	df000015 	stw	fp,0(sp)
   199ac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   199b0:	018000b4 	movhi	r6,2
   199b4:	31b9d704 	addi	r6,r6,-6308
   199b8:	014000b4 	movhi	r5,2
   199bc:	2972fe04 	addi	r5,r5,-13320
   199c0:	010000b4 	movhi	r4,2
   199c4:	2139d704 	addi	r4,r4,-6308
   199c8:	00199380 	call	19938 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   199cc:	01800034 	movhi	r6,0
   199d0:	31808c04 	addi	r6,r6,560
   199d4:	01400034 	movhi	r5,0
   199d8:	29400804 	addi	r5,r5,32
   199dc:	01000034 	movhi	r4,0
   199e0:	21000804 	addi	r4,r4,32
   199e4:	00199380 	call	19938 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   199e8:	018000b4 	movhi	r6,2
   199ec:	31b2fe04 	addi	r6,r6,-13320
   199f0:	014000b4 	movhi	r5,2
   199f4:	296fff04 	addi	r5,r5,-16388
   199f8:	010000b4 	movhi	r4,2
   199fc:	212fff04 	addi	r4,r4,-16388
   19a00:	00199380 	call	19938 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   19a04:	001af440 	call	1af44 <alt_dcache_flush_all>
  alt_icache_flush_all();
   19a08:	001b1040 	call	1b104 <alt_icache_flush_all>
}
   19a0c:	0001883a 	nop
   19a10:	e037883a 	mov	sp,fp
   19a14:	dfc00117 	ldw	ra,4(sp)
   19a18:	df000017 	ldw	fp,0(sp)
   19a1c:	dec00204 	addi	sp,sp,8
   19a20:	f800283a 	ret

00019a24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19a24:	defffe04 	addi	sp,sp,-8
   19a28:	dfc00115 	stw	ra,4(sp)
   19a2c:	df000015 	stw	fp,0(sp)
   19a30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19a34:	d0a01717 	ldw	r2,-32676(gp)
   19a38:	10000326 	beq	r2,zero,19a48 <alt_get_errno+0x24>
   19a3c:	d0a01717 	ldw	r2,-32676(gp)
   19a40:	103ee83a 	callr	r2
   19a44:	00000106 	br	19a4c <alt_get_errno+0x28>
   19a48:	d0a70404 	addi	r2,gp,-25584
}
   19a4c:	e037883a 	mov	sp,fp
   19a50:	dfc00117 	ldw	ra,4(sp)
   19a54:	df000017 	ldw	fp,0(sp)
   19a58:	dec00204 	addi	sp,sp,8
   19a5c:	f800283a 	ret

00019a60 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   19a60:	defff904 	addi	sp,sp,-28
   19a64:	dfc00615 	stw	ra,24(sp)
   19a68:	df000515 	stw	fp,20(sp)
   19a6c:	df000504 	addi	fp,sp,20
   19a70:	e13ffd15 	stw	r4,-12(fp)
   19a74:	e17ffe15 	stw	r5,-8(fp)
   19a78:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   19a7c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19a80:	e0bffd17 	ldw	r2,-12(fp)
   19a84:	10000816 	blt	r2,zero,19aa8 <lseek+0x48>
   19a88:	01400304 	movi	r5,12
   19a8c:	e13ffd17 	ldw	r4,-12(fp)
   19a90:	000c68c0 	call	c68c <__mulsi3>
   19a94:	1007883a 	mov	r3,r2
   19a98:	008000b4 	movhi	r2,2
   19a9c:	10b54304 	addi	r2,r2,-10996
   19aa0:	1885883a 	add	r2,r3,r2
   19aa4:	00000106 	br	19aac <lseek+0x4c>
   19aa8:	0005883a 	mov	r2,zero
   19aac:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   19ab0:	e0bffc17 	ldw	r2,-16(fp)
   19ab4:	10001026 	beq	r2,zero,19af8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   19ab8:	e0bffc17 	ldw	r2,-16(fp)
   19abc:	10800017 	ldw	r2,0(r2)
   19ac0:	10800717 	ldw	r2,28(r2)
   19ac4:	10000926 	beq	r2,zero,19aec <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   19ac8:	e0bffc17 	ldw	r2,-16(fp)
   19acc:	10800017 	ldw	r2,0(r2)
   19ad0:	10800717 	ldw	r2,28(r2)
   19ad4:	e1bfff17 	ldw	r6,-4(fp)
   19ad8:	e17ffe17 	ldw	r5,-8(fp)
   19adc:	e13ffc17 	ldw	r4,-16(fp)
   19ae0:	103ee83a 	callr	r2
   19ae4:	e0bffb15 	stw	r2,-20(fp)
   19ae8:	00000506 	br	19b00 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   19aec:	00bfde84 	movi	r2,-134
   19af0:	e0bffb15 	stw	r2,-20(fp)
   19af4:	00000206 	br	19b00 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   19af8:	00bfebc4 	movi	r2,-81
   19afc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   19b00:	e0bffb17 	ldw	r2,-20(fp)
   19b04:	1000070e 	bge	r2,zero,19b24 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   19b08:	0019a240 	call	19a24 <alt_get_errno>
   19b0c:	1007883a 	mov	r3,r2
   19b10:	e0bffb17 	ldw	r2,-20(fp)
   19b14:	0085c83a 	sub	r2,zero,r2
   19b18:	18800015 	stw	r2,0(r3)
    rc = -1;
   19b1c:	00bfffc4 	movi	r2,-1
   19b20:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   19b24:	e0bffb17 	ldw	r2,-20(fp)
}
   19b28:	e037883a 	mov	sp,fp
   19b2c:	dfc00117 	ldw	ra,4(sp)
   19b30:	df000017 	ldw	fp,0(sp)
   19b34:	dec00204 	addi	sp,sp,8
   19b38:	f800283a 	ret

00019b3c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   19b3c:	defffd04 	addi	sp,sp,-12
   19b40:	dfc00215 	stw	ra,8(sp)
   19b44:	df000115 	stw	fp,4(sp)
   19b48:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   19b4c:	0009883a 	mov	r4,zero
   19b50:	001a0c80 	call	1a0c8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   19b54:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   19b58:	001a1000 	call	1a100 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   19b5c:	018000b4 	movhi	r6,2
   19b60:	31b2f404 	addi	r6,r6,-13360
   19b64:	014000b4 	movhi	r5,2
   19b68:	2972f404 	addi	r5,r5,-13360
   19b6c:	010000b4 	movhi	r4,2
   19b70:	2132f404 	addi	r4,r4,-13360
   19b74:	001b4a80 	call	1b4a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   19b78:	001b0440 	call	1b044 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   19b7c:	010000b4 	movhi	r4,2
   19b80:	212c2904 	addi	r4,r4,-20316
   19b84:	001bc680 	call	1bc68 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   19b88:	d0a70817 	ldw	r2,-25568(gp)
   19b8c:	d0e70917 	ldw	r3,-25564(gp)
   19b90:	d1270a17 	ldw	r4,-25560(gp)
   19b94:	200d883a 	mov	r6,r4
   19b98:	180b883a 	mov	r5,r3
   19b9c:	1009883a 	mov	r4,r2
   19ba0:	000ad7c0 	call	ad7c <main>
   19ba4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   19ba8:	01000044 	movi	r4,1
   19bac:	00196580 	call	19658 <close>
  exit (result);
   19bb0:	e13fff17 	ldw	r4,-4(fp)
   19bb4:	001bc7c0 	call	1bc7c <exit>

00019bb8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   19bb8:	defffe04 	addi	sp,sp,-8
   19bbc:	df000115 	stw	fp,4(sp)
   19bc0:	df000104 	addi	fp,sp,4
   19bc4:	e13fff15 	stw	r4,-4(fp)
}
   19bc8:	0001883a 	nop
   19bcc:	e037883a 	mov	sp,fp
   19bd0:	df000017 	ldw	fp,0(sp)
   19bd4:	dec00104 	addi	sp,sp,4
   19bd8:	f800283a 	ret

00019bdc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   19bdc:	defffe04 	addi	sp,sp,-8
   19be0:	df000115 	stw	fp,4(sp)
   19be4:	df000104 	addi	fp,sp,4
   19be8:	e13fff15 	stw	r4,-4(fp)
}
   19bec:	0001883a 	nop
   19bf0:	e037883a 	mov	sp,fp
   19bf4:	df000017 	ldw	fp,0(sp)
   19bf8:	dec00104 	addi	sp,sp,4
   19bfc:	f800283a 	ret

00019c00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19c00:	defffe04 	addi	sp,sp,-8
   19c04:	dfc00115 	stw	ra,4(sp)
   19c08:	df000015 	stw	fp,0(sp)
   19c0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19c10:	d0a01717 	ldw	r2,-32676(gp)
   19c14:	10000326 	beq	r2,zero,19c24 <alt_get_errno+0x24>
   19c18:	d0a01717 	ldw	r2,-32676(gp)
   19c1c:	103ee83a 	callr	r2
   19c20:	00000106 	br	19c28 <alt_get_errno+0x28>
   19c24:	d0a70404 	addi	r2,gp,-25584
}
   19c28:	e037883a 	mov	sp,fp
   19c2c:	dfc00117 	ldw	ra,4(sp)
   19c30:	df000017 	ldw	fp,0(sp)
   19c34:	dec00204 	addi	sp,sp,8
   19c38:	f800283a 	ret

00019c3c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   19c3c:	defff904 	addi	sp,sp,-28
   19c40:	dfc00615 	stw	ra,24(sp)
   19c44:	df000515 	stw	fp,20(sp)
   19c48:	df000504 	addi	fp,sp,20
   19c4c:	e13ffd15 	stw	r4,-12(fp)
   19c50:	e17ffe15 	stw	r5,-8(fp)
   19c54:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19c58:	e0bffd17 	ldw	r2,-12(fp)
   19c5c:	10000816 	blt	r2,zero,19c80 <read+0x44>
   19c60:	01400304 	movi	r5,12
   19c64:	e13ffd17 	ldw	r4,-12(fp)
   19c68:	000c68c0 	call	c68c <__mulsi3>
   19c6c:	1007883a 	mov	r3,r2
   19c70:	008000b4 	movhi	r2,2
   19c74:	10b54304 	addi	r2,r2,-10996
   19c78:	1885883a 	add	r2,r3,r2
   19c7c:	00000106 	br	19c84 <read+0x48>
   19c80:	0005883a 	mov	r2,zero
   19c84:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   19c88:	e0bffb17 	ldw	r2,-20(fp)
   19c8c:	10002226 	beq	r2,zero,19d18 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   19c90:	e0bffb17 	ldw	r2,-20(fp)
   19c94:	10800217 	ldw	r2,8(r2)
   19c98:	108000cc 	andi	r2,r2,3
   19c9c:	10800060 	cmpeqi	r2,r2,1
   19ca0:	1000181e 	bne	r2,zero,19d04 <read+0xc8>
        (fd->dev->read))
   19ca4:	e0bffb17 	ldw	r2,-20(fp)
   19ca8:	10800017 	ldw	r2,0(r2)
   19cac:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   19cb0:	10001426 	beq	r2,zero,19d04 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   19cb4:	e0bffb17 	ldw	r2,-20(fp)
   19cb8:	10800017 	ldw	r2,0(r2)
   19cbc:	10800517 	ldw	r2,20(r2)
   19cc0:	e0ffff17 	ldw	r3,-4(fp)
   19cc4:	180d883a 	mov	r6,r3
   19cc8:	e17ffe17 	ldw	r5,-8(fp)
   19ccc:	e13ffb17 	ldw	r4,-20(fp)
   19cd0:	103ee83a 	callr	r2
   19cd4:	e0bffc15 	stw	r2,-16(fp)
   19cd8:	e0bffc17 	ldw	r2,-16(fp)
   19cdc:	1000070e 	bge	r2,zero,19cfc <read+0xc0>
        {
          ALT_ERRNO = -rval;
   19ce0:	0019c000 	call	19c00 <alt_get_errno>
   19ce4:	1007883a 	mov	r3,r2
   19ce8:	e0bffc17 	ldw	r2,-16(fp)
   19cec:	0085c83a 	sub	r2,zero,r2
   19cf0:	18800015 	stw	r2,0(r3)
          return -1;
   19cf4:	00bfffc4 	movi	r2,-1
   19cf8:	00000c06 	br	19d2c <read+0xf0>
        }
        return rval;
   19cfc:	e0bffc17 	ldw	r2,-16(fp)
   19d00:	00000a06 	br	19d2c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   19d04:	0019c000 	call	19c00 <alt_get_errno>
   19d08:	1007883a 	mov	r3,r2
   19d0c:	00800344 	movi	r2,13
   19d10:	18800015 	stw	r2,0(r3)
   19d14:	00000406 	br	19d28 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   19d18:	0019c000 	call	19c00 <alt_get_errno>
   19d1c:	1007883a 	mov	r3,r2
   19d20:	00801444 	movi	r2,81
   19d24:	18800015 	stw	r2,0(r3)
  }
  return -1;
   19d28:	00bfffc4 	movi	r2,-1
}
   19d2c:	e037883a 	mov	sp,fp
   19d30:	dfc00117 	ldw	ra,4(sp)
   19d34:	df000017 	ldw	fp,0(sp)
   19d38:	dec00204 	addi	sp,sp,8
   19d3c:	f800283a 	ret

00019d40 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   19d40:	defffc04 	addi	sp,sp,-16
   19d44:	dfc00315 	stw	ra,12(sp)
   19d48:	df000215 	stw	fp,8(sp)
   19d4c:	dc000115 	stw	r16,4(sp)
   19d50:	df000204 	addi	fp,sp,8
   19d54:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   19d58:	e0bffe17 	ldw	r2,-8(fp)
   19d5c:	108000d0 	cmplti	r2,r2,3
   19d60:	1000111e 	bne	r2,zero,19da8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   19d64:	040000b4 	movhi	r16,2
   19d68:	84354304 	addi	r16,r16,-10996
   19d6c:	e0bffe17 	ldw	r2,-8(fp)
   19d70:	01400304 	movi	r5,12
   19d74:	1009883a 	mov	r4,r2
   19d78:	000c68c0 	call	c68c <__mulsi3>
   19d7c:	8085883a 	add	r2,r16,r2
   19d80:	10800204 	addi	r2,r2,8
   19d84:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   19d88:	040000b4 	movhi	r16,2
   19d8c:	84354304 	addi	r16,r16,-10996
   19d90:	e0bffe17 	ldw	r2,-8(fp)
   19d94:	01400304 	movi	r5,12
   19d98:	1009883a 	mov	r4,r2
   19d9c:	000c68c0 	call	c68c <__mulsi3>
   19da0:	8085883a 	add	r2,r16,r2
   19da4:	10000015 	stw	zero,0(r2)
  }
}
   19da8:	0001883a 	nop
   19dac:	e6ffff04 	addi	sp,fp,-4
   19db0:	dfc00217 	ldw	ra,8(sp)
   19db4:	df000117 	ldw	fp,4(sp)
   19db8:	dc000017 	ldw	r16,0(sp)
   19dbc:	dec00304 	addi	sp,sp,12
   19dc0:	f800283a 	ret

00019dc4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   19dc4:	defff904 	addi	sp,sp,-28
   19dc8:	df000615 	stw	fp,24(sp)
   19dcc:	df000604 	addi	fp,sp,24
   19dd0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19dd4:	0005303a 	rdctl	r2,status
   19dd8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19ddc:	e0fffe17 	ldw	r3,-8(fp)
   19de0:	00bfff84 	movi	r2,-2
   19de4:	1884703a 	and	r2,r3,r2
   19de8:	1001703a 	wrctl	status,r2
  
  return context;
   19dec:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   19df0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   19df4:	d0a01817 	ldw	r2,-32672(gp)
   19df8:	10c000c4 	addi	r3,r2,3
   19dfc:	00bfff04 	movi	r2,-4
   19e00:	1884703a 	and	r2,r3,r2
   19e04:	d0a01815 	stw	r2,-32672(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   19e08:	d0e01817 	ldw	r3,-32672(gp)
   19e0c:	e0bfff17 	ldw	r2,-4(fp)
   19e10:	1887883a 	add	r3,r3,r2
   19e14:	00820034 	movhi	r2,2048
   19e18:	10800004 	addi	r2,r2,0
   19e1c:	10c0062e 	bgeu	r2,r3,19e38 <sbrk+0x74>
   19e20:	e0bffb17 	ldw	r2,-20(fp)
   19e24:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19e28:	e0bffa17 	ldw	r2,-24(fp)
   19e2c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   19e30:	00bfffc4 	movi	r2,-1
   19e34:	00000b06 	br	19e64 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   19e38:	d0a01817 	ldw	r2,-32672(gp)
   19e3c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   19e40:	d0e01817 	ldw	r3,-32672(gp)
   19e44:	e0bfff17 	ldw	r2,-4(fp)
   19e48:	1885883a 	add	r2,r3,r2
   19e4c:	d0a01815 	stw	r2,-32672(gp)
   19e50:	e0bffb17 	ldw	r2,-20(fp)
   19e54:	e0bffc15 	stw	r2,-16(fp)
   19e58:	e0bffc17 	ldw	r2,-16(fp)
   19e5c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   19e60:	e0bffd17 	ldw	r2,-12(fp)
} 
   19e64:	e037883a 	mov	sp,fp
   19e68:	df000017 	ldw	fp,0(sp)
   19e6c:	dec00104 	addi	sp,sp,4
   19e70:	f800283a 	ret

00019e74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19e74:	defffe04 	addi	sp,sp,-8
   19e78:	dfc00115 	stw	ra,4(sp)
   19e7c:	df000015 	stw	fp,0(sp)
   19e80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19e84:	d0a01717 	ldw	r2,-32676(gp)
   19e88:	10000326 	beq	r2,zero,19e98 <alt_get_errno+0x24>
   19e8c:	d0a01717 	ldw	r2,-32676(gp)
   19e90:	103ee83a 	callr	r2
   19e94:	00000106 	br	19e9c <alt_get_errno+0x28>
   19e98:	d0a70404 	addi	r2,gp,-25584
}
   19e9c:	e037883a 	mov	sp,fp
   19ea0:	dfc00117 	ldw	ra,4(sp)
   19ea4:	df000017 	ldw	fp,0(sp)
   19ea8:	dec00204 	addi	sp,sp,8
   19eac:	f800283a 	ret

00019eb0 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   19eb0:	defffc04 	addi	sp,sp,-16
   19eb4:	dfc00315 	stw	ra,12(sp)
   19eb8:	df000215 	stw	fp,8(sp)
   19ebc:	df000204 	addi	fp,sp,8
   19ec0:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   19ec4:	d0a70d17 	ldw	r2,-25548(gp)
  clock_t ticks = alt_nticks(); 
   19ec8:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   19ecc:	d0a70c17 	ldw	r2,-25552(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   19ed0:	1000061e 	bne	r2,zero,19eec <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   19ed4:	0019e740 	call	19e74 <alt_get_errno>
   19ed8:	1007883a 	mov	r3,r2
   19edc:	00801604 	movi	r2,88
   19ee0:	18800015 	stw	r2,0(r3)
    return 0;
   19ee4:	0005883a 	mov	r2,zero
   19ee8:	00000a06 	br	19f14 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   19eec:	e0bfff17 	ldw	r2,-4(fp)
   19ef0:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   19ef4:	e0bfff17 	ldw	r2,-4(fp)
   19ef8:	e0fffe17 	ldw	r3,-8(fp)
   19efc:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   19f00:	e0bfff17 	ldw	r2,-4(fp)
   19f04:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   19f08:	e0bfff17 	ldw	r2,-4(fp)
   19f0c:	10000315 	stw	zero,12(r2)

  return ticks;
   19f10:	e0bffe17 	ldw	r2,-8(fp)
}
   19f14:	e037883a 	mov	sp,fp
   19f18:	dfc00117 	ldw	ra,4(sp)
   19f1c:	df000017 	ldw	fp,0(sp)
   19f20:	dec00204 	addi	sp,sp,8
   19f24:	f800283a 	ret

00019f28 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   19f28:	defffd04 	addi	sp,sp,-12
   19f2c:	dfc00215 	stw	ra,8(sp)
   19f30:	df000115 	stw	fp,4(sp)
   19f34:	df000104 	addi	fp,sp,4
   19f38:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   19f3c:	e13fff17 	ldw	r4,-4(fp)
   19f40:	001adec0 	call	1adec <alt_busy_sleep>
}
   19f44:	e037883a 	mov	sp,fp
   19f48:	dfc00117 	ldw	ra,4(sp)
   19f4c:	df000017 	ldw	fp,0(sp)
   19f50:	dec00204 	addi	sp,sp,8
   19f54:	f800283a 	ret

00019f58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19f58:	defffe04 	addi	sp,sp,-8
   19f5c:	dfc00115 	stw	ra,4(sp)
   19f60:	df000015 	stw	fp,0(sp)
   19f64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19f68:	d0a01717 	ldw	r2,-32676(gp)
   19f6c:	10000326 	beq	r2,zero,19f7c <alt_get_errno+0x24>
   19f70:	d0a01717 	ldw	r2,-32676(gp)
   19f74:	103ee83a 	callr	r2
   19f78:	00000106 	br	19f80 <alt_get_errno+0x28>
   19f7c:	d0a70404 	addi	r2,gp,-25584
}
   19f80:	e037883a 	mov	sp,fp
   19f84:	dfc00117 	ldw	ra,4(sp)
   19f88:	df000017 	ldw	fp,0(sp)
   19f8c:	dec00204 	addi	sp,sp,8
   19f90:	f800283a 	ret

00019f94 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   19f94:	defff904 	addi	sp,sp,-28
   19f98:	dfc00615 	stw	ra,24(sp)
   19f9c:	df000515 	stw	fp,20(sp)
   19fa0:	df000504 	addi	fp,sp,20
   19fa4:	e13ffd15 	stw	r4,-12(fp)
   19fa8:	e17ffe15 	stw	r5,-8(fp)
   19fac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19fb0:	e0bffd17 	ldw	r2,-12(fp)
   19fb4:	10000816 	blt	r2,zero,19fd8 <write+0x44>
   19fb8:	01400304 	movi	r5,12
   19fbc:	e13ffd17 	ldw	r4,-12(fp)
   19fc0:	000c68c0 	call	c68c <__mulsi3>
   19fc4:	1007883a 	mov	r3,r2
   19fc8:	008000b4 	movhi	r2,2
   19fcc:	10b54304 	addi	r2,r2,-10996
   19fd0:	1885883a 	add	r2,r3,r2
   19fd4:	00000106 	br	19fdc <write+0x48>
   19fd8:	0005883a 	mov	r2,zero
   19fdc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   19fe0:	e0bffb17 	ldw	r2,-20(fp)
   19fe4:	10002126 	beq	r2,zero,1a06c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   19fe8:	e0bffb17 	ldw	r2,-20(fp)
   19fec:	10800217 	ldw	r2,8(r2)
   19ff0:	108000cc 	andi	r2,r2,3
   19ff4:	10001826 	beq	r2,zero,1a058 <write+0xc4>
   19ff8:	e0bffb17 	ldw	r2,-20(fp)
   19ffc:	10800017 	ldw	r2,0(r2)
   1a000:	10800617 	ldw	r2,24(r2)
   1a004:	10001426 	beq	r2,zero,1a058 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1a008:	e0bffb17 	ldw	r2,-20(fp)
   1a00c:	10800017 	ldw	r2,0(r2)
   1a010:	10800617 	ldw	r2,24(r2)
   1a014:	e0ffff17 	ldw	r3,-4(fp)
   1a018:	180d883a 	mov	r6,r3
   1a01c:	e17ffe17 	ldw	r5,-8(fp)
   1a020:	e13ffb17 	ldw	r4,-20(fp)
   1a024:	103ee83a 	callr	r2
   1a028:	e0bffc15 	stw	r2,-16(fp)
   1a02c:	e0bffc17 	ldw	r2,-16(fp)
   1a030:	1000070e 	bge	r2,zero,1a050 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   1a034:	0019f580 	call	19f58 <alt_get_errno>
   1a038:	1007883a 	mov	r3,r2
   1a03c:	e0bffc17 	ldw	r2,-16(fp)
   1a040:	0085c83a 	sub	r2,zero,r2
   1a044:	18800015 	stw	r2,0(r3)
        return -1;
   1a048:	00bfffc4 	movi	r2,-1
   1a04c:	00000c06 	br	1a080 <write+0xec>
      }
      return rval;
   1a050:	e0bffc17 	ldw	r2,-16(fp)
   1a054:	00000a06 	br	1a080 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1a058:	0019f580 	call	19f58 <alt_get_errno>
   1a05c:	1007883a 	mov	r3,r2
   1a060:	00800344 	movi	r2,13
   1a064:	18800015 	stw	r2,0(r3)
   1a068:	00000406 	br	1a07c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1a06c:	0019f580 	call	19f58 <alt_get_errno>
   1a070:	1007883a 	mov	r3,r2
   1a074:	00801444 	movi	r2,81
   1a078:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1a07c:	00bfffc4 	movi	r2,-1
}
   1a080:	e037883a 	mov	sp,fp
   1a084:	dfc00117 	ldw	ra,4(sp)
   1a088:	df000017 	ldw	fp,0(sp)
   1a08c:	dec00204 	addi	sp,sp,8
   1a090:	f800283a 	ret

0001a094 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1a094:	defffd04 	addi	sp,sp,-12
   1a098:	dfc00215 	stw	ra,8(sp)
   1a09c:	df000115 	stw	fp,4(sp)
   1a0a0:	df000104 	addi	fp,sp,4
   1a0a4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1a0a8:	d1601404 	addi	r5,gp,-32688
   1a0ac:	e13fff17 	ldw	r4,-4(fp)
   1a0b0:	001afa00 	call	1afa0 <alt_dev_llist_insert>
}
   1a0b4:	e037883a 	mov	sp,fp
   1a0b8:	dfc00117 	ldw	ra,4(sp)
   1a0bc:	df000017 	ldw	fp,0(sp)
   1a0c0:	dec00204 	addi	sp,sp,8
   1a0c4:	f800283a 	ret

0001a0c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1a0c8:	defffd04 	addi	sp,sp,-12
   1a0cc:	dfc00215 	stw	ra,8(sp)
   1a0d0:	df000115 	stw	fp,4(sp)
   1a0d4:	df000104 	addi	fp,sp,4
   1a0d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   1a0dc:	001b94c0 	call	1b94c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1a0e0:	00800044 	movi	r2,1
   1a0e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1a0e8:	0001883a 	nop
   1a0ec:	e037883a 	mov	sp,fp
   1a0f0:	dfc00117 	ldw	ra,4(sp)
   1a0f4:	df000017 	ldw	fp,0(sp)
   1a0f8:	dec00204 	addi	sp,sp,8
   1a0fc:	f800283a 	ret

0001a100 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1a100:	defffe04 	addi	sp,sp,-8
   1a104:	dfc00115 	stw	ra,4(sp)
   1a108:	df000015 	stw	fp,0(sp)
   1a10c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1a110:	01c0fa04 	movi	r7,1000
   1a114:	01800044 	movi	r6,1
   1a118:	000b883a 	mov	r5,zero
   1a11c:	01020034 	movhi	r4,2048
   1a120:	21042804 	addi	r4,r4,4256
   1a124:	001ac440 	call	1ac44 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1a128:	01800144 	movi	r6,5
   1a12c:	000b883a 	mov	r5,zero
   1a130:	010000b4 	movhi	r4,2
   1a134:	2135ad04 	addi	r4,r4,-10572
   1a138:	001a2c80 	call	1a2c8 <altera_avalon_jtag_uart_init>
   1a13c:	010000b4 	movhi	r4,2
   1a140:	2135a304 	addi	r4,r4,-10612
   1a144:	001a0940 	call	1a094 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   1a148:	0001883a 	nop
}
   1a14c:	0001883a 	nop
   1a150:	e037883a 	mov	sp,fp
   1a154:	dfc00117 	ldw	ra,4(sp)
   1a158:	df000017 	ldw	fp,0(sp)
   1a15c:	dec00204 	addi	sp,sp,8
   1a160:	f800283a 	ret

0001a164 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1a164:	defffa04 	addi	sp,sp,-24
   1a168:	dfc00515 	stw	ra,20(sp)
   1a16c:	df000415 	stw	fp,16(sp)
   1a170:	df000404 	addi	fp,sp,16
   1a174:	e13ffd15 	stw	r4,-12(fp)
   1a178:	e17ffe15 	stw	r5,-8(fp)
   1a17c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a180:	e0bffd17 	ldw	r2,-12(fp)
   1a184:	10800017 	ldw	r2,0(r2)
   1a188:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1a18c:	e0bffc17 	ldw	r2,-16(fp)
   1a190:	10c00a04 	addi	r3,r2,40
   1a194:	e0bffd17 	ldw	r2,-12(fp)
   1a198:	10800217 	ldw	r2,8(r2)
   1a19c:	100f883a 	mov	r7,r2
   1a1a0:	e1bfff17 	ldw	r6,-4(fp)
   1a1a4:	e17ffe17 	ldw	r5,-8(fp)
   1a1a8:	1809883a 	mov	r4,r3
   1a1ac:	001a78c0 	call	1a78c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1a1b0:	e037883a 	mov	sp,fp
   1a1b4:	dfc00117 	ldw	ra,4(sp)
   1a1b8:	df000017 	ldw	fp,0(sp)
   1a1bc:	dec00204 	addi	sp,sp,8
   1a1c0:	f800283a 	ret

0001a1c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1a1c4:	defffa04 	addi	sp,sp,-24
   1a1c8:	dfc00515 	stw	ra,20(sp)
   1a1cc:	df000415 	stw	fp,16(sp)
   1a1d0:	df000404 	addi	fp,sp,16
   1a1d4:	e13ffd15 	stw	r4,-12(fp)
   1a1d8:	e17ffe15 	stw	r5,-8(fp)
   1a1dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a1e0:	e0bffd17 	ldw	r2,-12(fp)
   1a1e4:	10800017 	ldw	r2,0(r2)
   1a1e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1a1ec:	e0bffc17 	ldw	r2,-16(fp)
   1a1f0:	10c00a04 	addi	r3,r2,40
   1a1f4:	e0bffd17 	ldw	r2,-12(fp)
   1a1f8:	10800217 	ldw	r2,8(r2)
   1a1fc:	100f883a 	mov	r7,r2
   1a200:	e1bfff17 	ldw	r6,-4(fp)
   1a204:	e17ffe17 	ldw	r5,-8(fp)
   1a208:	1809883a 	mov	r4,r3
   1a20c:	001a9a80 	call	1a9a8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1a210:	e037883a 	mov	sp,fp
   1a214:	dfc00117 	ldw	ra,4(sp)
   1a218:	df000017 	ldw	fp,0(sp)
   1a21c:	dec00204 	addi	sp,sp,8
   1a220:	f800283a 	ret

0001a224 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1a224:	defffc04 	addi	sp,sp,-16
   1a228:	dfc00315 	stw	ra,12(sp)
   1a22c:	df000215 	stw	fp,8(sp)
   1a230:	df000204 	addi	fp,sp,8
   1a234:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a238:	e0bfff17 	ldw	r2,-4(fp)
   1a23c:	10800017 	ldw	r2,0(r2)
   1a240:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1a244:	e0bffe17 	ldw	r2,-8(fp)
   1a248:	10c00a04 	addi	r3,r2,40
   1a24c:	e0bfff17 	ldw	r2,-4(fp)
   1a250:	10800217 	ldw	r2,8(r2)
   1a254:	100b883a 	mov	r5,r2
   1a258:	1809883a 	mov	r4,r3
   1a25c:	001a6340 	call	1a634 <altera_avalon_jtag_uart_close>
}
   1a260:	e037883a 	mov	sp,fp
   1a264:	dfc00117 	ldw	ra,4(sp)
   1a268:	df000017 	ldw	fp,0(sp)
   1a26c:	dec00204 	addi	sp,sp,8
   1a270:	f800283a 	ret

0001a274 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1a274:	defffa04 	addi	sp,sp,-24
   1a278:	dfc00515 	stw	ra,20(sp)
   1a27c:	df000415 	stw	fp,16(sp)
   1a280:	df000404 	addi	fp,sp,16
   1a284:	e13ffd15 	stw	r4,-12(fp)
   1a288:	e17ffe15 	stw	r5,-8(fp)
   1a28c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1a290:	e0bffd17 	ldw	r2,-12(fp)
   1a294:	10800017 	ldw	r2,0(r2)
   1a298:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1a29c:	e0bffc17 	ldw	r2,-16(fp)
   1a2a0:	10800a04 	addi	r2,r2,40
   1a2a4:	e1bfff17 	ldw	r6,-4(fp)
   1a2a8:	e17ffe17 	ldw	r5,-8(fp)
   1a2ac:	1009883a 	mov	r4,r2
   1a2b0:	001a69c0 	call	1a69c <altera_avalon_jtag_uart_ioctl>
}
   1a2b4:	e037883a 	mov	sp,fp
   1a2b8:	dfc00117 	ldw	ra,4(sp)
   1a2bc:	df000017 	ldw	fp,0(sp)
   1a2c0:	dec00204 	addi	sp,sp,8
   1a2c4:	f800283a 	ret

0001a2c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1a2c8:	defffa04 	addi	sp,sp,-24
   1a2cc:	dfc00515 	stw	ra,20(sp)
   1a2d0:	df000415 	stw	fp,16(sp)
   1a2d4:	df000404 	addi	fp,sp,16
   1a2d8:	e13ffd15 	stw	r4,-12(fp)
   1a2dc:	e17ffe15 	stw	r5,-8(fp)
   1a2e0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1a2e4:	e0bffd17 	ldw	r2,-12(fp)
   1a2e8:	00c00044 	movi	r3,1
   1a2ec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1a2f0:	e0bffd17 	ldw	r2,-12(fp)
   1a2f4:	10800017 	ldw	r2,0(r2)
   1a2f8:	10800104 	addi	r2,r2,4
   1a2fc:	1007883a 	mov	r3,r2
   1a300:	e0bffd17 	ldw	r2,-12(fp)
   1a304:	10800817 	ldw	r2,32(r2)
   1a308:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1a30c:	e0bffe17 	ldw	r2,-8(fp)
   1a310:	e0ffff17 	ldw	r3,-4(fp)
   1a314:	d8000015 	stw	zero,0(sp)
   1a318:	e1fffd17 	ldw	r7,-12(fp)
   1a31c:	018000b4 	movhi	r6,2
   1a320:	31a8e204 	addi	r6,r6,-23672
   1a324:	180b883a 	mov	r5,r3
   1a328:	1009883a 	mov	r4,r2
   1a32c:	001b1240 	call	1b124 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1a330:	e0bffd17 	ldw	r2,-12(fp)
   1a334:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1a338:	e0bffd17 	ldw	r2,-12(fp)
   1a33c:	10800204 	addi	r2,r2,8
   1a340:	d0e70c17 	ldw	r3,-25552(gp)
   1a344:	e1fffd17 	ldw	r7,-12(fp)
   1a348:	018000b4 	movhi	r6,2
   1a34c:	31a96504 	addi	r6,r6,-23148
   1a350:	180b883a 	mov	r5,r3
   1a354:	1009883a 	mov	r4,r2
   1a358:	001acc00 	call	1acc0 <alt_alarm_start>
   1a35c:	1000040e 	bge	r2,zero,1a370 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1a360:	e0fffd17 	ldw	r3,-12(fp)
   1a364:	00a00034 	movhi	r2,32768
   1a368:	10bfffc4 	addi	r2,r2,-1
   1a36c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1a370:	0001883a 	nop
   1a374:	e037883a 	mov	sp,fp
   1a378:	dfc00117 	ldw	ra,4(sp)
   1a37c:	df000017 	ldw	fp,0(sp)
   1a380:	dec00204 	addi	sp,sp,8
   1a384:	f800283a 	ret

0001a388 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1a388:	defff804 	addi	sp,sp,-32
   1a38c:	df000715 	stw	fp,28(sp)
   1a390:	df000704 	addi	fp,sp,28
   1a394:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1a398:	e0bfff17 	ldw	r2,-4(fp)
   1a39c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   1a3a0:	e0bffb17 	ldw	r2,-20(fp)
   1a3a4:	10800017 	ldw	r2,0(r2)
   1a3a8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a3ac:	e0bffc17 	ldw	r2,-16(fp)
   1a3b0:	10800104 	addi	r2,r2,4
   1a3b4:	10800037 	ldwio	r2,0(r2)
   1a3b8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1a3bc:	e0bffd17 	ldw	r2,-12(fp)
   1a3c0:	1080c00c 	andi	r2,r2,768
   1a3c4:	10006d26 	beq	r2,zero,1a57c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1a3c8:	e0bffd17 	ldw	r2,-12(fp)
   1a3cc:	1080400c 	andi	r2,r2,256
   1a3d0:	10003526 	beq	r2,zero,1a4a8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1a3d4:	00800074 	movhi	r2,1
   1a3d8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a3dc:	e0bffb17 	ldw	r2,-20(fp)
   1a3e0:	10800a17 	ldw	r2,40(r2)
   1a3e4:	10800044 	addi	r2,r2,1
   1a3e8:	1081ffcc 	andi	r2,r2,2047
   1a3ec:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   1a3f0:	e0bffb17 	ldw	r2,-20(fp)
   1a3f4:	10c00b17 	ldw	r3,44(r2)
   1a3f8:	e0bffe17 	ldw	r2,-8(fp)
   1a3fc:	18801526 	beq	r3,r2,1a454 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1a400:	e0bffc17 	ldw	r2,-16(fp)
   1a404:	10800037 	ldwio	r2,0(r2)
   1a408:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1a40c:	e0bff917 	ldw	r2,-28(fp)
   1a410:	10a0000c 	andi	r2,r2,32768
   1a414:	10001126 	beq	r2,zero,1a45c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1a418:	e0bffb17 	ldw	r2,-20(fp)
   1a41c:	10800a17 	ldw	r2,40(r2)
   1a420:	e0fff917 	ldw	r3,-28(fp)
   1a424:	1809883a 	mov	r4,r3
   1a428:	e0fffb17 	ldw	r3,-20(fp)
   1a42c:	1885883a 	add	r2,r3,r2
   1a430:	10800e04 	addi	r2,r2,56
   1a434:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a438:	e0bffb17 	ldw	r2,-20(fp)
   1a43c:	10800a17 	ldw	r2,40(r2)
   1a440:	10800044 	addi	r2,r2,1
   1a444:	10c1ffcc 	andi	r3,r2,2047
   1a448:	e0bffb17 	ldw	r2,-20(fp)
   1a44c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1a450:	003fe206 	br	1a3dc <__alt_data_end+0xf801a3dc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1a454:	0001883a 	nop
   1a458:	00000106 	br	1a460 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1a45c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1a460:	e0bff917 	ldw	r2,-28(fp)
   1a464:	10bfffec 	andhi	r2,r2,65535
   1a468:	10000f26 	beq	r2,zero,1a4a8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1a46c:	e0bffb17 	ldw	r2,-20(fp)
   1a470:	10c00817 	ldw	r3,32(r2)
   1a474:	00bfff84 	movi	r2,-2
   1a478:	1886703a 	and	r3,r3,r2
   1a47c:	e0bffb17 	ldw	r2,-20(fp)
   1a480:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1a484:	e0bffc17 	ldw	r2,-16(fp)
   1a488:	10800104 	addi	r2,r2,4
   1a48c:	1007883a 	mov	r3,r2
   1a490:	e0bffb17 	ldw	r2,-20(fp)
   1a494:	10800817 	ldw	r2,32(r2)
   1a498:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a49c:	e0bffc17 	ldw	r2,-16(fp)
   1a4a0:	10800104 	addi	r2,r2,4
   1a4a4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1a4a8:	e0bffd17 	ldw	r2,-12(fp)
   1a4ac:	1080800c 	andi	r2,r2,512
   1a4b0:	103fbe26 	beq	r2,zero,1a3ac <__alt_data_end+0xf801a3ac>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1a4b4:	e0bffd17 	ldw	r2,-12(fp)
   1a4b8:	1004d43a 	srli	r2,r2,16
   1a4bc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1a4c0:	00001406 	br	1a514 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1a4c4:	e0bffc17 	ldw	r2,-16(fp)
   1a4c8:	e0fffb17 	ldw	r3,-20(fp)
   1a4cc:	18c00d17 	ldw	r3,52(r3)
   1a4d0:	e13ffb17 	ldw	r4,-20(fp)
   1a4d4:	20c7883a 	add	r3,r4,r3
   1a4d8:	18c20e04 	addi	r3,r3,2104
   1a4dc:	18c00003 	ldbu	r3,0(r3)
   1a4e0:	18c03fcc 	andi	r3,r3,255
   1a4e4:	18c0201c 	xori	r3,r3,128
   1a4e8:	18ffe004 	addi	r3,r3,-128
   1a4ec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a4f0:	e0bffb17 	ldw	r2,-20(fp)
   1a4f4:	10800d17 	ldw	r2,52(r2)
   1a4f8:	10800044 	addi	r2,r2,1
   1a4fc:	10c1ffcc 	andi	r3,r2,2047
   1a500:	e0bffb17 	ldw	r2,-20(fp)
   1a504:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1a508:	e0bffa17 	ldw	r2,-24(fp)
   1a50c:	10bfffc4 	addi	r2,r2,-1
   1a510:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1a514:	e0bffa17 	ldw	r2,-24(fp)
   1a518:	10000526 	beq	r2,zero,1a530 <altera_avalon_jtag_uart_irq+0x1a8>
   1a51c:	e0bffb17 	ldw	r2,-20(fp)
   1a520:	10c00d17 	ldw	r3,52(r2)
   1a524:	e0bffb17 	ldw	r2,-20(fp)
   1a528:	10800c17 	ldw	r2,48(r2)
   1a52c:	18bfe51e 	bne	r3,r2,1a4c4 <__alt_data_end+0xf801a4c4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1a530:	e0bffa17 	ldw	r2,-24(fp)
   1a534:	103f9d26 	beq	r2,zero,1a3ac <__alt_data_end+0xf801a3ac>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1a538:	e0bffb17 	ldw	r2,-20(fp)
   1a53c:	10c00817 	ldw	r3,32(r2)
   1a540:	00bfff44 	movi	r2,-3
   1a544:	1886703a 	and	r3,r3,r2
   1a548:	e0bffb17 	ldw	r2,-20(fp)
   1a54c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1a550:	e0bffb17 	ldw	r2,-20(fp)
   1a554:	10800017 	ldw	r2,0(r2)
   1a558:	10800104 	addi	r2,r2,4
   1a55c:	1007883a 	mov	r3,r2
   1a560:	e0bffb17 	ldw	r2,-20(fp)
   1a564:	10800817 	ldw	r2,32(r2)
   1a568:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a56c:	e0bffc17 	ldw	r2,-16(fp)
   1a570:	10800104 	addi	r2,r2,4
   1a574:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1a578:	003f8c06 	br	1a3ac <__alt_data_end+0xf801a3ac>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1a57c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1a580:	0001883a 	nop
   1a584:	e037883a 	mov	sp,fp
   1a588:	df000017 	ldw	fp,0(sp)
   1a58c:	dec00104 	addi	sp,sp,4
   1a590:	f800283a 	ret

0001a594 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1a594:	defff804 	addi	sp,sp,-32
   1a598:	df000715 	stw	fp,28(sp)
   1a59c:	df000704 	addi	fp,sp,28
   1a5a0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1a5a4:	e0bffb17 	ldw	r2,-20(fp)
   1a5a8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1a5ac:	e0bff917 	ldw	r2,-28(fp)
   1a5b0:	10800017 	ldw	r2,0(r2)
   1a5b4:	10800104 	addi	r2,r2,4
   1a5b8:	10800037 	ldwio	r2,0(r2)
   1a5bc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1a5c0:	e0bffa17 	ldw	r2,-24(fp)
   1a5c4:	1081000c 	andi	r2,r2,1024
   1a5c8:	10000b26 	beq	r2,zero,1a5f8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1a5cc:	e0bff917 	ldw	r2,-28(fp)
   1a5d0:	10800017 	ldw	r2,0(r2)
   1a5d4:	10800104 	addi	r2,r2,4
   1a5d8:	1007883a 	mov	r3,r2
   1a5dc:	e0bff917 	ldw	r2,-28(fp)
   1a5e0:	10800817 	ldw	r2,32(r2)
   1a5e4:	10810014 	ori	r2,r2,1024
   1a5e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1a5ec:	e0bff917 	ldw	r2,-28(fp)
   1a5f0:	10000915 	stw	zero,36(r2)
   1a5f4:	00000a06 	br	1a620 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1a5f8:	e0bff917 	ldw	r2,-28(fp)
   1a5fc:	10c00917 	ldw	r3,36(r2)
   1a600:	00a00034 	movhi	r2,32768
   1a604:	10bfff04 	addi	r2,r2,-4
   1a608:	10c00536 	bltu	r2,r3,1a620 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1a60c:	e0bff917 	ldw	r2,-28(fp)
   1a610:	10800917 	ldw	r2,36(r2)
   1a614:	10c00044 	addi	r3,r2,1
   1a618:	e0bff917 	ldw	r2,-28(fp)
   1a61c:	10c00915 	stw	r3,36(r2)
   1a620:	d0a70c17 	ldw	r2,-25552(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1a624:	e037883a 	mov	sp,fp
   1a628:	df000017 	ldw	fp,0(sp)
   1a62c:	dec00104 	addi	sp,sp,4
   1a630:	f800283a 	ret

0001a634 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1a634:	defffd04 	addi	sp,sp,-12
   1a638:	df000215 	stw	fp,8(sp)
   1a63c:	df000204 	addi	fp,sp,8
   1a640:	e13ffe15 	stw	r4,-8(fp)
   1a644:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1a648:	00000506 	br	1a660 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1a64c:	e0bfff17 	ldw	r2,-4(fp)
   1a650:	1090000c 	andi	r2,r2,16384
   1a654:	10000226 	beq	r2,zero,1a660 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1a658:	00bffd44 	movi	r2,-11
   1a65c:	00000b06 	br	1a68c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1a660:	e0bffe17 	ldw	r2,-8(fp)
   1a664:	10c00d17 	ldw	r3,52(r2)
   1a668:	e0bffe17 	ldw	r2,-8(fp)
   1a66c:	10800c17 	ldw	r2,48(r2)
   1a670:	18800526 	beq	r3,r2,1a688 <altera_avalon_jtag_uart_close+0x54>
   1a674:	e0bffe17 	ldw	r2,-8(fp)
   1a678:	10c00917 	ldw	r3,36(r2)
   1a67c:	e0bffe17 	ldw	r2,-8(fp)
   1a680:	10800117 	ldw	r2,4(r2)
   1a684:	18bff136 	bltu	r3,r2,1a64c <__alt_data_end+0xf801a64c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1a688:	0005883a 	mov	r2,zero
}
   1a68c:	e037883a 	mov	sp,fp
   1a690:	df000017 	ldw	fp,0(sp)
   1a694:	dec00104 	addi	sp,sp,4
   1a698:	f800283a 	ret

0001a69c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1a69c:	defffa04 	addi	sp,sp,-24
   1a6a0:	df000515 	stw	fp,20(sp)
   1a6a4:	df000504 	addi	fp,sp,20
   1a6a8:	e13ffd15 	stw	r4,-12(fp)
   1a6ac:	e17ffe15 	stw	r5,-8(fp)
   1a6b0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1a6b4:	00bff9c4 	movi	r2,-25
   1a6b8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1a6bc:	e0bffe17 	ldw	r2,-8(fp)
   1a6c0:	10da8060 	cmpeqi	r3,r2,27137
   1a6c4:	1800031e 	bne	r3,zero,1a6d4 <altera_avalon_jtag_uart_ioctl+0x38>
   1a6c8:	109a80a0 	cmpeqi	r2,r2,27138
   1a6cc:	1000181e 	bne	r2,zero,1a730 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1a6d0:	00002906 	br	1a778 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1a6d4:	e0bffd17 	ldw	r2,-12(fp)
   1a6d8:	10c00117 	ldw	r3,4(r2)
   1a6dc:	00a00034 	movhi	r2,32768
   1a6e0:	10bfffc4 	addi	r2,r2,-1
   1a6e4:	18802126 	beq	r3,r2,1a76c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1a6e8:	e0bfff17 	ldw	r2,-4(fp)
   1a6ec:	10800017 	ldw	r2,0(r2)
   1a6f0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1a6f4:	e0bffc17 	ldw	r2,-16(fp)
   1a6f8:	10800090 	cmplti	r2,r2,2
   1a6fc:	1000061e 	bne	r2,zero,1a718 <altera_avalon_jtag_uart_ioctl+0x7c>
   1a700:	e0fffc17 	ldw	r3,-16(fp)
   1a704:	00a00034 	movhi	r2,32768
   1a708:	10bfffc4 	addi	r2,r2,-1
   1a70c:	18800226 	beq	r3,r2,1a718 <altera_avalon_jtag_uart_ioctl+0x7c>
   1a710:	e0bffc17 	ldw	r2,-16(fp)
   1a714:	00000206 	br	1a720 <altera_avalon_jtag_uart_ioctl+0x84>
   1a718:	00a00034 	movhi	r2,32768
   1a71c:	10bfff84 	addi	r2,r2,-2
   1a720:	e0fffd17 	ldw	r3,-12(fp)
   1a724:	18800115 	stw	r2,4(r3)
      rc = 0;
   1a728:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1a72c:	00000f06 	br	1a76c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1a730:	e0bffd17 	ldw	r2,-12(fp)
   1a734:	10c00117 	ldw	r3,4(r2)
   1a738:	00a00034 	movhi	r2,32768
   1a73c:	10bfffc4 	addi	r2,r2,-1
   1a740:	18800c26 	beq	r3,r2,1a774 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1a744:	e0bffd17 	ldw	r2,-12(fp)
   1a748:	10c00917 	ldw	r3,36(r2)
   1a74c:	e0bffd17 	ldw	r2,-12(fp)
   1a750:	10800117 	ldw	r2,4(r2)
   1a754:	1885803a 	cmpltu	r2,r3,r2
   1a758:	10c03fcc 	andi	r3,r2,255
   1a75c:	e0bfff17 	ldw	r2,-4(fp)
   1a760:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1a764:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1a768:	00000206 	br	1a774 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1a76c:	0001883a 	nop
   1a770:	00000106 	br	1a778 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1a774:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1a778:	e0bffb17 	ldw	r2,-20(fp)
}
   1a77c:	e037883a 	mov	sp,fp
   1a780:	df000017 	ldw	fp,0(sp)
   1a784:	dec00104 	addi	sp,sp,4
   1a788:	f800283a 	ret

0001a78c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1a78c:	defff304 	addi	sp,sp,-52
   1a790:	dfc00c15 	stw	ra,48(sp)
   1a794:	df000b15 	stw	fp,44(sp)
   1a798:	df000b04 	addi	fp,sp,44
   1a79c:	e13ffc15 	stw	r4,-16(fp)
   1a7a0:	e17ffd15 	stw	r5,-12(fp)
   1a7a4:	e1bffe15 	stw	r6,-8(fp)
   1a7a8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1a7ac:	e0bffd17 	ldw	r2,-12(fp)
   1a7b0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1a7b4:	00004706 	br	1a8d4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1a7b8:	e0bffc17 	ldw	r2,-16(fp)
   1a7bc:	10800a17 	ldw	r2,40(r2)
   1a7c0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1a7c4:	e0bffc17 	ldw	r2,-16(fp)
   1a7c8:	10800b17 	ldw	r2,44(r2)
   1a7cc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1a7d0:	e0fff717 	ldw	r3,-36(fp)
   1a7d4:	e0bff817 	ldw	r2,-32(fp)
   1a7d8:	18800536 	bltu	r3,r2,1a7f0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1a7dc:	e0fff717 	ldw	r3,-36(fp)
   1a7e0:	e0bff817 	ldw	r2,-32(fp)
   1a7e4:	1885c83a 	sub	r2,r3,r2
   1a7e8:	e0bff615 	stw	r2,-40(fp)
   1a7ec:	00000406 	br	1a800 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1a7f0:	00c20004 	movi	r3,2048
   1a7f4:	e0bff817 	ldw	r2,-32(fp)
   1a7f8:	1885c83a 	sub	r2,r3,r2
   1a7fc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1a800:	e0bff617 	ldw	r2,-40(fp)
   1a804:	10001e26 	beq	r2,zero,1a880 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   1a808:	e0fffe17 	ldw	r3,-8(fp)
   1a80c:	e0bff617 	ldw	r2,-40(fp)
   1a810:	1880022e 	bgeu	r3,r2,1a81c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1a814:	e0bffe17 	ldw	r2,-8(fp)
   1a818:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1a81c:	e0bffc17 	ldw	r2,-16(fp)
   1a820:	10c00e04 	addi	r3,r2,56
   1a824:	e0bff817 	ldw	r2,-32(fp)
   1a828:	1885883a 	add	r2,r3,r2
   1a82c:	e1bff617 	ldw	r6,-40(fp)
   1a830:	100b883a 	mov	r5,r2
   1a834:	e13ff517 	ldw	r4,-44(fp)
   1a838:	00139280 	call	13928 <memcpy>
      ptr   += n;
   1a83c:	e0fff517 	ldw	r3,-44(fp)
   1a840:	e0bff617 	ldw	r2,-40(fp)
   1a844:	1885883a 	add	r2,r3,r2
   1a848:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1a84c:	e0fffe17 	ldw	r3,-8(fp)
   1a850:	e0bff617 	ldw	r2,-40(fp)
   1a854:	1885c83a 	sub	r2,r3,r2
   1a858:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a85c:	e0fff817 	ldw	r3,-32(fp)
   1a860:	e0bff617 	ldw	r2,-40(fp)
   1a864:	1885883a 	add	r2,r3,r2
   1a868:	10c1ffcc 	andi	r3,r2,2047
   1a86c:	e0bffc17 	ldw	r2,-16(fp)
   1a870:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1a874:	e0bffe17 	ldw	r2,-8(fp)
   1a878:	00bfcf16 	blt	zero,r2,1a7b8 <__alt_data_end+0xf801a7b8>
   1a87c:	00000106 	br	1a884 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1a880:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1a884:	e0fff517 	ldw	r3,-44(fp)
   1a888:	e0bffd17 	ldw	r2,-12(fp)
   1a88c:	1880141e 	bne	r3,r2,1a8e0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1a890:	e0bfff17 	ldw	r2,-4(fp)
   1a894:	1090000c 	andi	r2,r2,16384
   1a898:	1000131e 	bne	r2,zero,1a8e8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1a89c:	0001883a 	nop
   1a8a0:	e0bffc17 	ldw	r2,-16(fp)
   1a8a4:	10c00a17 	ldw	r3,40(r2)
   1a8a8:	e0bff717 	ldw	r2,-36(fp)
   1a8ac:	1880051e 	bne	r3,r2,1a8c4 <altera_avalon_jtag_uart_read+0x138>
   1a8b0:	e0bffc17 	ldw	r2,-16(fp)
   1a8b4:	10c00917 	ldw	r3,36(r2)
   1a8b8:	e0bffc17 	ldw	r2,-16(fp)
   1a8bc:	10800117 	ldw	r2,4(r2)
   1a8c0:	18bff736 	bltu	r3,r2,1a8a0 <__alt_data_end+0xf801a8a0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1a8c4:	e0bffc17 	ldw	r2,-16(fp)
   1a8c8:	10c00a17 	ldw	r3,40(r2)
   1a8cc:	e0bff717 	ldw	r2,-36(fp)
   1a8d0:	18800726 	beq	r3,r2,1a8f0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1a8d4:	e0bffe17 	ldw	r2,-8(fp)
   1a8d8:	00bfb716 	blt	zero,r2,1a7b8 <__alt_data_end+0xf801a7b8>
   1a8dc:	00000506 	br	1a8f4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1a8e0:	0001883a 	nop
   1a8e4:	00000306 	br	1a8f4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1a8e8:	0001883a 	nop
   1a8ec:	00000106 	br	1a8f4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1a8f0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1a8f4:	e0fff517 	ldw	r3,-44(fp)
   1a8f8:	e0bffd17 	ldw	r2,-12(fp)
   1a8fc:	18801826 	beq	r3,r2,1a960 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a900:	0005303a 	rdctl	r2,status
   1a904:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a908:	e0fffb17 	ldw	r3,-20(fp)
   1a90c:	00bfff84 	movi	r2,-2
   1a910:	1884703a 	and	r2,r3,r2
   1a914:	1001703a 	wrctl	status,r2
  
  return context;
   1a918:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1a91c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1a920:	e0bffc17 	ldw	r2,-16(fp)
   1a924:	10800817 	ldw	r2,32(r2)
   1a928:	10c00054 	ori	r3,r2,1
   1a92c:	e0bffc17 	ldw	r2,-16(fp)
   1a930:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1a934:	e0bffc17 	ldw	r2,-16(fp)
   1a938:	10800017 	ldw	r2,0(r2)
   1a93c:	10800104 	addi	r2,r2,4
   1a940:	1007883a 	mov	r3,r2
   1a944:	e0bffc17 	ldw	r2,-16(fp)
   1a948:	10800817 	ldw	r2,32(r2)
   1a94c:	18800035 	stwio	r2,0(r3)
   1a950:	e0bffa17 	ldw	r2,-24(fp)
   1a954:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a958:	e0bff917 	ldw	r2,-28(fp)
   1a95c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1a960:	e0fff517 	ldw	r3,-44(fp)
   1a964:	e0bffd17 	ldw	r2,-12(fp)
   1a968:	18800426 	beq	r3,r2,1a97c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   1a96c:	e0fff517 	ldw	r3,-44(fp)
   1a970:	e0bffd17 	ldw	r2,-12(fp)
   1a974:	1885c83a 	sub	r2,r3,r2
   1a978:	00000606 	br	1a994 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   1a97c:	e0bfff17 	ldw	r2,-4(fp)
   1a980:	1090000c 	andi	r2,r2,16384
   1a984:	10000226 	beq	r2,zero,1a990 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1a988:	00bffd44 	movi	r2,-11
   1a98c:	00000106 	br	1a994 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   1a990:	00bffec4 	movi	r2,-5
}
   1a994:	e037883a 	mov	sp,fp
   1a998:	dfc00117 	ldw	ra,4(sp)
   1a99c:	df000017 	ldw	fp,0(sp)
   1a9a0:	dec00204 	addi	sp,sp,8
   1a9a4:	f800283a 	ret

0001a9a8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1a9a8:	defff304 	addi	sp,sp,-52
   1a9ac:	dfc00c15 	stw	ra,48(sp)
   1a9b0:	df000b15 	stw	fp,44(sp)
   1a9b4:	df000b04 	addi	fp,sp,44
   1a9b8:	e13ffc15 	stw	r4,-16(fp)
   1a9bc:	e17ffd15 	stw	r5,-12(fp)
   1a9c0:	e1bffe15 	stw	r6,-8(fp)
   1a9c4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1a9c8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1a9cc:	e0bffd17 	ldw	r2,-12(fp)
   1a9d0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1a9d4:	00003706 	br	1aab4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1a9d8:	e0bffc17 	ldw	r2,-16(fp)
   1a9dc:	10800c17 	ldw	r2,48(r2)
   1a9e0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   1a9e4:	e0bffc17 	ldw	r2,-16(fp)
   1a9e8:	10800d17 	ldw	r2,52(r2)
   1a9ec:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1a9f0:	e0fff917 	ldw	r3,-28(fp)
   1a9f4:	e0bff517 	ldw	r2,-44(fp)
   1a9f8:	1880062e 	bgeu	r3,r2,1aa14 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1a9fc:	e0fff517 	ldw	r3,-44(fp)
   1aa00:	e0bff917 	ldw	r2,-28(fp)
   1aa04:	1885c83a 	sub	r2,r3,r2
   1aa08:	10bfffc4 	addi	r2,r2,-1
   1aa0c:	e0bff615 	stw	r2,-40(fp)
   1aa10:	00000b06 	br	1aa40 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1aa14:	e0bff517 	ldw	r2,-44(fp)
   1aa18:	10000526 	beq	r2,zero,1aa30 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1aa1c:	00c20004 	movi	r3,2048
   1aa20:	e0bff917 	ldw	r2,-28(fp)
   1aa24:	1885c83a 	sub	r2,r3,r2
   1aa28:	e0bff615 	stw	r2,-40(fp)
   1aa2c:	00000406 	br	1aa40 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1aa30:	00c1ffc4 	movi	r3,2047
   1aa34:	e0bff917 	ldw	r2,-28(fp)
   1aa38:	1885c83a 	sub	r2,r3,r2
   1aa3c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1aa40:	e0bff617 	ldw	r2,-40(fp)
   1aa44:	10001e26 	beq	r2,zero,1aac0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1aa48:	e0fffe17 	ldw	r3,-8(fp)
   1aa4c:	e0bff617 	ldw	r2,-40(fp)
   1aa50:	1880022e 	bgeu	r3,r2,1aa5c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1aa54:	e0bffe17 	ldw	r2,-8(fp)
   1aa58:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1aa5c:	e0bffc17 	ldw	r2,-16(fp)
   1aa60:	10c20e04 	addi	r3,r2,2104
   1aa64:	e0bff917 	ldw	r2,-28(fp)
   1aa68:	1885883a 	add	r2,r3,r2
   1aa6c:	e1bff617 	ldw	r6,-40(fp)
   1aa70:	e17ffd17 	ldw	r5,-12(fp)
   1aa74:	1009883a 	mov	r4,r2
   1aa78:	00139280 	call	13928 <memcpy>
      ptr   += n;
   1aa7c:	e0fffd17 	ldw	r3,-12(fp)
   1aa80:	e0bff617 	ldw	r2,-40(fp)
   1aa84:	1885883a 	add	r2,r3,r2
   1aa88:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1aa8c:	e0fffe17 	ldw	r3,-8(fp)
   1aa90:	e0bff617 	ldw	r2,-40(fp)
   1aa94:	1885c83a 	sub	r2,r3,r2
   1aa98:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1aa9c:	e0fff917 	ldw	r3,-28(fp)
   1aaa0:	e0bff617 	ldw	r2,-40(fp)
   1aaa4:	1885883a 	add	r2,r3,r2
   1aaa8:	10c1ffcc 	andi	r3,r2,2047
   1aaac:	e0bffc17 	ldw	r2,-16(fp)
   1aab0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1aab4:	e0bffe17 	ldw	r2,-8(fp)
   1aab8:	00bfc716 	blt	zero,r2,1a9d8 <__alt_data_end+0xf801a9d8>
   1aabc:	00000106 	br	1aac4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1aac0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aac4:	0005303a 	rdctl	r2,status
   1aac8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aacc:	e0fffb17 	ldw	r3,-20(fp)
   1aad0:	00bfff84 	movi	r2,-2
   1aad4:	1884703a 	and	r2,r3,r2
   1aad8:	1001703a 	wrctl	status,r2
  
  return context;
   1aadc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1aae0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1aae4:	e0bffc17 	ldw	r2,-16(fp)
   1aae8:	10800817 	ldw	r2,32(r2)
   1aaec:	10c00094 	ori	r3,r2,2
   1aaf0:	e0bffc17 	ldw	r2,-16(fp)
   1aaf4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1aaf8:	e0bffc17 	ldw	r2,-16(fp)
   1aafc:	10800017 	ldw	r2,0(r2)
   1ab00:	10800104 	addi	r2,r2,4
   1ab04:	1007883a 	mov	r3,r2
   1ab08:	e0bffc17 	ldw	r2,-16(fp)
   1ab0c:	10800817 	ldw	r2,32(r2)
   1ab10:	18800035 	stwio	r2,0(r3)
   1ab14:	e0bffa17 	ldw	r2,-24(fp)
   1ab18:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ab1c:	e0bff817 	ldw	r2,-32(fp)
   1ab20:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1ab24:	e0bffe17 	ldw	r2,-8(fp)
   1ab28:	0080100e 	bge	zero,r2,1ab6c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1ab2c:	e0bfff17 	ldw	r2,-4(fp)
   1ab30:	1090000c 	andi	r2,r2,16384
   1ab34:	1000101e 	bne	r2,zero,1ab78 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1ab38:	0001883a 	nop
   1ab3c:	e0bffc17 	ldw	r2,-16(fp)
   1ab40:	10c00d17 	ldw	r3,52(r2)
   1ab44:	e0bff517 	ldw	r2,-44(fp)
   1ab48:	1880051e 	bne	r3,r2,1ab60 <altera_avalon_jtag_uart_write+0x1b8>
   1ab4c:	e0bffc17 	ldw	r2,-16(fp)
   1ab50:	10c00917 	ldw	r3,36(r2)
   1ab54:	e0bffc17 	ldw	r2,-16(fp)
   1ab58:	10800117 	ldw	r2,4(r2)
   1ab5c:	18bff736 	bltu	r3,r2,1ab3c <__alt_data_end+0xf801ab3c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1ab60:	e0bffc17 	ldw	r2,-16(fp)
   1ab64:	10800917 	ldw	r2,36(r2)
   1ab68:	1000051e 	bne	r2,zero,1ab80 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   1ab6c:	e0bffe17 	ldw	r2,-8(fp)
   1ab70:	00bfd016 	blt	zero,r2,1aab4 <__alt_data_end+0xf801aab4>
   1ab74:	00000306 	br	1ab84 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1ab78:	0001883a 	nop
   1ab7c:	00000106 	br	1ab84 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1ab80:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1ab84:	e0fffd17 	ldw	r3,-12(fp)
   1ab88:	e0bff717 	ldw	r2,-36(fp)
   1ab8c:	18800426 	beq	r3,r2,1aba0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1ab90:	e0fffd17 	ldw	r3,-12(fp)
   1ab94:	e0bff717 	ldw	r2,-36(fp)
   1ab98:	1885c83a 	sub	r2,r3,r2
   1ab9c:	00000606 	br	1abb8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1aba0:	e0bfff17 	ldw	r2,-4(fp)
   1aba4:	1090000c 	andi	r2,r2,16384
   1aba8:	10000226 	beq	r2,zero,1abb4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   1abac:	00bffd44 	movi	r2,-11
   1abb0:	00000106 	br	1abb8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1abb4:	00bffec4 	movi	r2,-5
}
   1abb8:	e037883a 	mov	sp,fp
   1abbc:	dfc00117 	ldw	ra,4(sp)
   1abc0:	df000017 	ldw	fp,0(sp)
   1abc4:	dec00204 	addi	sp,sp,8
   1abc8:	f800283a 	ret

0001abcc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1abcc:	defffa04 	addi	sp,sp,-24
   1abd0:	dfc00515 	stw	ra,20(sp)
   1abd4:	df000415 	stw	fp,16(sp)
   1abd8:	df000404 	addi	fp,sp,16
   1abdc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1abe0:	0007883a 	mov	r3,zero
   1abe4:	e0bfff17 	ldw	r2,-4(fp)
   1abe8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1abec:	e0bfff17 	ldw	r2,-4(fp)
   1abf0:	10800104 	addi	r2,r2,4
   1abf4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1abf8:	0005303a 	rdctl	r2,status
   1abfc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ac00:	e0fffd17 	ldw	r3,-12(fp)
   1ac04:	00bfff84 	movi	r2,-2
   1ac08:	1884703a 	and	r2,r3,r2
   1ac0c:	1001703a 	wrctl	status,r2
  
  return context;
   1ac10:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1ac14:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1ac18:	001b8440 	call	1b844 <alt_tick>
   1ac1c:	e0bffc17 	ldw	r2,-16(fp)
   1ac20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ac24:	e0bffe17 	ldw	r2,-8(fp)
   1ac28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1ac2c:	0001883a 	nop
   1ac30:	e037883a 	mov	sp,fp
   1ac34:	dfc00117 	ldw	ra,4(sp)
   1ac38:	df000017 	ldw	fp,0(sp)
   1ac3c:	dec00204 	addi	sp,sp,8
   1ac40:	f800283a 	ret

0001ac44 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1ac44:	defff804 	addi	sp,sp,-32
   1ac48:	dfc00715 	stw	ra,28(sp)
   1ac4c:	df000615 	stw	fp,24(sp)
   1ac50:	df000604 	addi	fp,sp,24
   1ac54:	e13ffc15 	stw	r4,-16(fp)
   1ac58:	e17ffd15 	stw	r5,-12(fp)
   1ac5c:	e1bffe15 	stw	r6,-8(fp)
   1ac60:	e1ffff15 	stw	r7,-4(fp)
   1ac64:	e0bfff17 	ldw	r2,-4(fp)
   1ac68:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1ac6c:	d0a70c17 	ldw	r2,-25552(gp)
   1ac70:	1000021e 	bne	r2,zero,1ac7c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1ac74:	e0bffb17 	ldw	r2,-20(fp)
   1ac78:	d0a70c15 	stw	r2,-25552(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1ac7c:	e0bffc17 	ldw	r2,-16(fp)
   1ac80:	10800104 	addi	r2,r2,4
   1ac84:	00c001c4 	movi	r3,7
   1ac88:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1ac8c:	d8000015 	stw	zero,0(sp)
   1ac90:	e1fffc17 	ldw	r7,-16(fp)
   1ac94:	018000b4 	movhi	r6,2
   1ac98:	31aaf304 	addi	r6,r6,-21556
   1ac9c:	e17ffe17 	ldw	r5,-8(fp)
   1aca0:	e13ffd17 	ldw	r4,-12(fp)
   1aca4:	001b1240 	call	1b124 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1aca8:	0001883a 	nop
   1acac:	e037883a 	mov	sp,fp
   1acb0:	dfc00117 	ldw	ra,4(sp)
   1acb4:	df000017 	ldw	fp,0(sp)
   1acb8:	dec00204 	addi	sp,sp,8
   1acbc:	f800283a 	ret

0001acc0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1acc0:	defff504 	addi	sp,sp,-44
   1acc4:	df000a15 	stw	fp,40(sp)
   1acc8:	df000a04 	addi	fp,sp,40
   1accc:	e13ffc15 	stw	r4,-16(fp)
   1acd0:	e17ffd15 	stw	r5,-12(fp)
   1acd4:	e1bffe15 	stw	r6,-8(fp)
   1acd8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1acdc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1ace0:	d0a70c17 	ldw	r2,-25552(gp)
  
  if (alt_ticks_per_second ())
   1ace4:	10003c26 	beq	r2,zero,1add8 <alt_alarm_start+0x118>
  {
    if (alarm)
   1ace8:	e0bffc17 	ldw	r2,-16(fp)
   1acec:	10003826 	beq	r2,zero,1add0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1acf0:	e0bffc17 	ldw	r2,-16(fp)
   1acf4:	e0fffe17 	ldw	r3,-8(fp)
   1acf8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1acfc:	e0bffc17 	ldw	r2,-16(fp)
   1ad00:	e0ffff17 	ldw	r3,-4(fp)
   1ad04:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ad08:	0005303a 	rdctl	r2,status
   1ad0c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ad10:	e0fff917 	ldw	r3,-28(fp)
   1ad14:	00bfff84 	movi	r2,-2
   1ad18:	1884703a 	and	r2,r3,r2
   1ad1c:	1001703a 	wrctl	status,r2
  
  return context;
   1ad20:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1ad24:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1ad28:	d0a70d17 	ldw	r2,-25548(gp)
      
      current_nticks = alt_nticks();
   1ad2c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1ad30:	e0fffd17 	ldw	r3,-12(fp)
   1ad34:	e0bff617 	ldw	r2,-40(fp)
   1ad38:	1885883a 	add	r2,r3,r2
   1ad3c:	10c00044 	addi	r3,r2,1
   1ad40:	e0bffc17 	ldw	r2,-16(fp)
   1ad44:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1ad48:	e0bffc17 	ldw	r2,-16(fp)
   1ad4c:	10c00217 	ldw	r3,8(r2)
   1ad50:	e0bff617 	ldw	r2,-40(fp)
   1ad54:	1880042e 	bgeu	r3,r2,1ad68 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1ad58:	e0bffc17 	ldw	r2,-16(fp)
   1ad5c:	00c00044 	movi	r3,1
   1ad60:	10c00405 	stb	r3,16(r2)
   1ad64:	00000206 	br	1ad70 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1ad68:	e0bffc17 	ldw	r2,-16(fp)
   1ad6c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1ad70:	e0bffc17 	ldw	r2,-16(fp)
   1ad74:	d0e01a04 	addi	r3,gp,-32664
   1ad78:	e0fffa15 	stw	r3,-24(fp)
   1ad7c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1ad80:	e0bffb17 	ldw	r2,-20(fp)
   1ad84:	e0fffa17 	ldw	r3,-24(fp)
   1ad88:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1ad8c:	e0bffa17 	ldw	r2,-24(fp)
   1ad90:	10c00017 	ldw	r3,0(r2)
   1ad94:	e0bffb17 	ldw	r2,-20(fp)
   1ad98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1ad9c:	e0bffa17 	ldw	r2,-24(fp)
   1ada0:	10800017 	ldw	r2,0(r2)
   1ada4:	e0fffb17 	ldw	r3,-20(fp)
   1ada8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1adac:	e0bffa17 	ldw	r2,-24(fp)
   1adb0:	e0fffb17 	ldw	r3,-20(fp)
   1adb4:	10c00015 	stw	r3,0(r2)
   1adb8:	e0bff817 	ldw	r2,-32(fp)
   1adbc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1adc0:	e0bff717 	ldw	r2,-36(fp)
   1adc4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1adc8:	0005883a 	mov	r2,zero
   1adcc:	00000306 	br	1addc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1add0:	00bffa84 	movi	r2,-22
   1add4:	00000106 	br	1addc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1add8:	00bfde84 	movi	r2,-134
  }
}
   1addc:	e037883a 	mov	sp,fp
   1ade0:	df000017 	ldw	fp,0(sp)
   1ade4:	dec00104 	addi	sp,sp,4
   1ade8:	f800283a 	ret

0001adec <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   1adec:	defffa04 	addi	sp,sp,-24
   1adf0:	dfc00515 	stw	ra,20(sp)
   1adf4:	df000415 	stw	fp,16(sp)
   1adf8:	df000404 	addi	fp,sp,16
   1adfc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   1ae00:	00800244 	movi	r2,9
   1ae04:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   1ae08:	014003f4 	movhi	r5,15
   1ae0c:	29509004 	addi	r5,r5,16960
   1ae10:	e13ffd17 	ldw	r4,-12(fp)
   1ae14:	000c68c0 	call	c68c <__mulsi3>
   1ae18:	100b883a 	mov	r5,r2
   1ae1c:	0100bef4 	movhi	r4,763
   1ae20:	213c2004 	addi	r4,r4,-3968
   1ae24:	000c5d00 	call	c5d0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1ae28:	100b883a 	mov	r5,r2
   1ae2c:	01200034 	movhi	r4,32768
   1ae30:	213fffc4 	addi	r4,r4,-1
   1ae34:	000c5d00 	call	c5d0 <__udivsi3>
   1ae38:	100b883a 	mov	r5,r2
   1ae3c:	e13fff17 	ldw	r4,-4(fp)
   1ae40:	000c5d00 	call	c5d0 <__udivsi3>
   1ae44:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1ae48:	e0bffe17 	ldw	r2,-8(fp)
   1ae4c:	10002a26 	beq	r2,zero,1aef8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   1ae50:	e03ffc15 	stw	zero,-16(fp)
   1ae54:	00001706 	br	1aeb4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1ae58:	00a00034 	movhi	r2,32768
   1ae5c:	10bfffc4 	addi	r2,r2,-1
   1ae60:	10bfffc4 	addi	r2,r2,-1
   1ae64:	103ffe1e 	bne	r2,zero,1ae60 <__alt_data_end+0xf801ae60>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   1ae68:	014003f4 	movhi	r5,15
   1ae6c:	29509004 	addi	r5,r5,16960
   1ae70:	e13ffd17 	ldw	r4,-12(fp)
   1ae74:	000c68c0 	call	c68c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   1ae78:	100b883a 	mov	r5,r2
   1ae7c:	0100bef4 	movhi	r4,763
   1ae80:	213c2004 	addi	r4,r4,-3968
   1ae84:	000c5d00 	call	c5d0 <__udivsi3>
   1ae88:	100b883a 	mov	r5,r2
   1ae8c:	01200034 	movhi	r4,32768
   1ae90:	213fffc4 	addi	r4,r4,-1
   1ae94:	000c5d00 	call	c5d0 <__udivsi3>
   1ae98:	1007883a 	mov	r3,r2
   1ae9c:	e0bfff17 	ldw	r2,-4(fp)
   1aea0:	10c5c83a 	sub	r2,r2,r3
   1aea4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1aea8:	e0bffc17 	ldw	r2,-16(fp)
   1aeac:	10800044 	addi	r2,r2,1
   1aeb0:	e0bffc15 	stw	r2,-16(fp)
   1aeb4:	e0fffc17 	ldw	r3,-16(fp)
   1aeb8:	e0bffe17 	ldw	r2,-8(fp)
   1aebc:	18bfe616 	blt	r3,r2,1ae58 <__alt_data_end+0xf801ae58>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1aec0:	014003f4 	movhi	r5,15
   1aec4:	29509004 	addi	r5,r5,16960
   1aec8:	e13ffd17 	ldw	r4,-12(fp)
   1aecc:	000c68c0 	call	c68c <__mulsi3>
   1aed0:	100b883a 	mov	r5,r2
   1aed4:	0100bef4 	movhi	r4,763
   1aed8:	213c2004 	addi	r4,r4,-3968
   1aedc:	000c5d00 	call	c5d0 <__udivsi3>
   1aee0:	e17fff17 	ldw	r5,-4(fp)
   1aee4:	1009883a 	mov	r4,r2
   1aee8:	000c68c0 	call	c68c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1aeec:	10bfffc4 	addi	r2,r2,-1
   1aef0:	103ffe1e 	bne	r2,zero,1aeec <__alt_data_end+0xf801aeec>
   1aef4:	00000d06 	br	1af2c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1aef8:	014003f4 	movhi	r5,15
   1aefc:	29509004 	addi	r5,r5,16960
   1af00:	e13ffd17 	ldw	r4,-12(fp)
   1af04:	000c68c0 	call	c68c <__mulsi3>
   1af08:	100b883a 	mov	r5,r2
   1af0c:	0100bef4 	movhi	r4,763
   1af10:	213c2004 	addi	r4,r4,-3968
   1af14:	000c5d00 	call	c5d0 <__udivsi3>
   1af18:	e17fff17 	ldw	r5,-4(fp)
   1af1c:	1009883a 	mov	r4,r2
   1af20:	000c68c0 	call	c68c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1af24:	10bfffc4 	addi	r2,r2,-1
   1af28:	00bffe16 	blt	zero,r2,1af24 <__alt_data_end+0xf801af24>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   1af2c:	0005883a 	mov	r2,zero
}
   1af30:	e037883a 	mov	sp,fp
   1af34:	dfc00117 	ldw	ra,4(sp)
   1af38:	df000017 	ldw	fp,0(sp)
   1af3c:	dec00204 	addi	sp,sp,8
   1af40:	f800283a 	ret

0001af44 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1af44:	deffff04 	addi	sp,sp,-4
   1af48:	df000015 	stw	fp,0(sp)
   1af4c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1af50:	0001883a 	nop
   1af54:	e037883a 	mov	sp,fp
   1af58:	df000017 	ldw	fp,0(sp)
   1af5c:	dec00104 	addi	sp,sp,4
   1af60:	f800283a 	ret

0001af64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1af64:	defffe04 	addi	sp,sp,-8
   1af68:	dfc00115 	stw	ra,4(sp)
   1af6c:	df000015 	stw	fp,0(sp)
   1af70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1af74:	d0a01717 	ldw	r2,-32676(gp)
   1af78:	10000326 	beq	r2,zero,1af88 <alt_get_errno+0x24>
   1af7c:	d0a01717 	ldw	r2,-32676(gp)
   1af80:	103ee83a 	callr	r2
   1af84:	00000106 	br	1af8c <alt_get_errno+0x28>
   1af88:	d0a70404 	addi	r2,gp,-25584
}
   1af8c:	e037883a 	mov	sp,fp
   1af90:	dfc00117 	ldw	ra,4(sp)
   1af94:	df000017 	ldw	fp,0(sp)
   1af98:	dec00204 	addi	sp,sp,8
   1af9c:	f800283a 	ret

0001afa0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1afa0:	defffa04 	addi	sp,sp,-24
   1afa4:	dfc00515 	stw	ra,20(sp)
   1afa8:	df000415 	stw	fp,16(sp)
   1afac:	df000404 	addi	fp,sp,16
   1afb0:	e13ffe15 	stw	r4,-8(fp)
   1afb4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1afb8:	e0bffe17 	ldw	r2,-8(fp)
   1afbc:	10000326 	beq	r2,zero,1afcc <alt_dev_llist_insert+0x2c>
   1afc0:	e0bffe17 	ldw	r2,-8(fp)
   1afc4:	10800217 	ldw	r2,8(r2)
   1afc8:	1000061e 	bne	r2,zero,1afe4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1afcc:	001af640 	call	1af64 <alt_get_errno>
   1afd0:	1007883a 	mov	r3,r2
   1afd4:	00800584 	movi	r2,22
   1afd8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1afdc:	00bffa84 	movi	r2,-22
   1afe0:	00001306 	br	1b030 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1afe4:	e0bffe17 	ldw	r2,-8(fp)
   1afe8:	e0ffff17 	ldw	r3,-4(fp)
   1afec:	e0fffc15 	stw	r3,-16(fp)
   1aff0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1aff4:	e0bffd17 	ldw	r2,-12(fp)
   1aff8:	e0fffc17 	ldw	r3,-16(fp)
   1affc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b000:	e0bffc17 	ldw	r2,-16(fp)
   1b004:	10c00017 	ldw	r3,0(r2)
   1b008:	e0bffd17 	ldw	r2,-12(fp)
   1b00c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b010:	e0bffc17 	ldw	r2,-16(fp)
   1b014:	10800017 	ldw	r2,0(r2)
   1b018:	e0fffd17 	ldw	r3,-12(fp)
   1b01c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b020:	e0bffc17 	ldw	r2,-16(fp)
   1b024:	e0fffd17 	ldw	r3,-12(fp)
   1b028:	10c00015 	stw	r3,0(r2)

  return 0;  
   1b02c:	0005883a 	mov	r2,zero
}
   1b030:	e037883a 	mov	sp,fp
   1b034:	dfc00117 	ldw	ra,4(sp)
   1b038:	df000017 	ldw	fp,0(sp)
   1b03c:	dec00204 	addi	sp,sp,8
   1b040:	f800283a 	ret

0001b044 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1b044:	defffd04 	addi	sp,sp,-12
   1b048:	dfc00215 	stw	ra,8(sp)
   1b04c:	df000115 	stw	fp,4(sp)
   1b050:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b054:	008000b4 	movhi	r2,2
   1b058:	10affe04 	addi	r2,r2,-16392
   1b05c:	e0bfff15 	stw	r2,-4(fp)
   1b060:	00000606 	br	1b07c <_do_ctors+0x38>
        (*ctor) (); 
   1b064:	e0bfff17 	ldw	r2,-4(fp)
   1b068:	10800017 	ldw	r2,0(r2)
   1b06c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b070:	e0bfff17 	ldw	r2,-4(fp)
   1b074:	10bfff04 	addi	r2,r2,-4
   1b078:	e0bfff15 	stw	r2,-4(fp)
   1b07c:	e0ffff17 	ldw	r3,-4(fp)
   1b080:	008000b4 	movhi	r2,2
   1b084:	10afff04 	addi	r2,r2,-16388
   1b088:	18bff62e 	bgeu	r3,r2,1b064 <__alt_data_end+0xf801b064>
        (*ctor) (); 
}
   1b08c:	0001883a 	nop
   1b090:	e037883a 	mov	sp,fp
   1b094:	dfc00117 	ldw	ra,4(sp)
   1b098:	df000017 	ldw	fp,0(sp)
   1b09c:	dec00204 	addi	sp,sp,8
   1b0a0:	f800283a 	ret

0001b0a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1b0a4:	defffd04 	addi	sp,sp,-12
   1b0a8:	dfc00215 	stw	ra,8(sp)
   1b0ac:	df000115 	stw	fp,4(sp)
   1b0b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b0b4:	008000b4 	movhi	r2,2
   1b0b8:	10affe04 	addi	r2,r2,-16392
   1b0bc:	e0bfff15 	stw	r2,-4(fp)
   1b0c0:	00000606 	br	1b0dc <_do_dtors+0x38>
        (*dtor) (); 
   1b0c4:	e0bfff17 	ldw	r2,-4(fp)
   1b0c8:	10800017 	ldw	r2,0(r2)
   1b0cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b0d0:	e0bfff17 	ldw	r2,-4(fp)
   1b0d4:	10bfff04 	addi	r2,r2,-4
   1b0d8:	e0bfff15 	stw	r2,-4(fp)
   1b0dc:	e0ffff17 	ldw	r3,-4(fp)
   1b0e0:	008000b4 	movhi	r2,2
   1b0e4:	10afff04 	addi	r2,r2,-16388
   1b0e8:	18bff62e 	bgeu	r3,r2,1b0c4 <__alt_data_end+0xf801b0c4>
        (*dtor) (); 
}
   1b0ec:	0001883a 	nop
   1b0f0:	e037883a 	mov	sp,fp
   1b0f4:	dfc00117 	ldw	ra,4(sp)
   1b0f8:	df000017 	ldw	fp,0(sp)
   1b0fc:	dec00204 	addi	sp,sp,8
   1b100:	f800283a 	ret

0001b104 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1b104:	deffff04 	addi	sp,sp,-4
   1b108:	df000015 	stw	fp,0(sp)
   1b10c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   1b110:	0001883a 	nop
   1b114:	e037883a 	mov	sp,fp
   1b118:	df000017 	ldw	fp,0(sp)
   1b11c:	dec00104 	addi	sp,sp,4
   1b120:	f800283a 	ret

0001b124 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1b124:	defff904 	addi	sp,sp,-28
   1b128:	dfc00615 	stw	ra,24(sp)
   1b12c:	df000515 	stw	fp,20(sp)
   1b130:	df000504 	addi	fp,sp,20
   1b134:	e13ffc15 	stw	r4,-16(fp)
   1b138:	e17ffd15 	stw	r5,-12(fp)
   1b13c:	e1bffe15 	stw	r6,-8(fp)
   1b140:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1b144:	e0800217 	ldw	r2,8(fp)
   1b148:	d8800015 	stw	r2,0(sp)
   1b14c:	e1ffff17 	ldw	r7,-4(fp)
   1b150:	e1bffe17 	ldw	r6,-8(fp)
   1b154:	e17ffd17 	ldw	r5,-12(fp)
   1b158:	e13ffc17 	ldw	r4,-16(fp)
   1b15c:	001b2d40 	call	1b2d4 <alt_iic_isr_register>
}  
   1b160:	e037883a 	mov	sp,fp
   1b164:	dfc00117 	ldw	ra,4(sp)
   1b168:	df000017 	ldw	fp,0(sp)
   1b16c:	dec00204 	addi	sp,sp,8
   1b170:	f800283a 	ret

0001b174 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1b174:	defff904 	addi	sp,sp,-28
   1b178:	df000615 	stw	fp,24(sp)
   1b17c:	df000604 	addi	fp,sp,24
   1b180:	e13ffe15 	stw	r4,-8(fp)
   1b184:	e17fff15 	stw	r5,-4(fp)
   1b188:	e0bfff17 	ldw	r2,-4(fp)
   1b18c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b190:	0005303a 	rdctl	r2,status
   1b194:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b198:	e0fffb17 	ldw	r3,-20(fp)
   1b19c:	00bfff84 	movi	r2,-2
   1b1a0:	1884703a 	and	r2,r3,r2
   1b1a4:	1001703a 	wrctl	status,r2
  
  return context;
   1b1a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b1ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1b1b0:	00c00044 	movi	r3,1
   1b1b4:	e0bffa17 	ldw	r2,-24(fp)
   1b1b8:	1884983a 	sll	r2,r3,r2
   1b1bc:	1007883a 	mov	r3,r2
   1b1c0:	d0a70b17 	ldw	r2,-25556(gp)
   1b1c4:	1884b03a 	or	r2,r3,r2
   1b1c8:	d0a70b15 	stw	r2,-25556(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b1cc:	d0a70b17 	ldw	r2,-25556(gp)
   1b1d0:	100170fa 	wrctl	ienable,r2
   1b1d4:	e0bffc17 	ldw	r2,-16(fp)
   1b1d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b1dc:	e0bffd17 	ldw	r2,-12(fp)
   1b1e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b1e4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1b1e8:	0001883a 	nop
}
   1b1ec:	e037883a 	mov	sp,fp
   1b1f0:	df000017 	ldw	fp,0(sp)
   1b1f4:	dec00104 	addi	sp,sp,4
   1b1f8:	f800283a 	ret

0001b1fc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1b1fc:	defff904 	addi	sp,sp,-28
   1b200:	df000615 	stw	fp,24(sp)
   1b204:	df000604 	addi	fp,sp,24
   1b208:	e13ffe15 	stw	r4,-8(fp)
   1b20c:	e17fff15 	stw	r5,-4(fp)
   1b210:	e0bfff17 	ldw	r2,-4(fp)
   1b214:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b218:	0005303a 	rdctl	r2,status
   1b21c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b220:	e0fffb17 	ldw	r3,-20(fp)
   1b224:	00bfff84 	movi	r2,-2
   1b228:	1884703a 	and	r2,r3,r2
   1b22c:	1001703a 	wrctl	status,r2
  
  return context;
   1b230:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b234:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1b238:	00c00044 	movi	r3,1
   1b23c:	e0bffa17 	ldw	r2,-24(fp)
   1b240:	1884983a 	sll	r2,r3,r2
   1b244:	0084303a 	nor	r2,zero,r2
   1b248:	1007883a 	mov	r3,r2
   1b24c:	d0a70b17 	ldw	r2,-25556(gp)
   1b250:	1884703a 	and	r2,r3,r2
   1b254:	d0a70b15 	stw	r2,-25556(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b258:	d0a70b17 	ldw	r2,-25556(gp)
   1b25c:	100170fa 	wrctl	ienable,r2
   1b260:	e0bffc17 	ldw	r2,-16(fp)
   1b264:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b268:	e0bffd17 	ldw	r2,-12(fp)
   1b26c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b270:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1b274:	0001883a 	nop
}
   1b278:	e037883a 	mov	sp,fp
   1b27c:	df000017 	ldw	fp,0(sp)
   1b280:	dec00104 	addi	sp,sp,4
   1b284:	f800283a 	ret

0001b288 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1b288:	defffc04 	addi	sp,sp,-16
   1b28c:	df000315 	stw	fp,12(sp)
   1b290:	df000304 	addi	fp,sp,12
   1b294:	e13ffe15 	stw	r4,-8(fp)
   1b298:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1b29c:	000530fa 	rdctl	r2,ienable
   1b2a0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1b2a4:	00c00044 	movi	r3,1
   1b2a8:	e0bfff17 	ldw	r2,-4(fp)
   1b2ac:	1884983a 	sll	r2,r3,r2
   1b2b0:	1007883a 	mov	r3,r2
   1b2b4:	e0bffd17 	ldw	r2,-12(fp)
   1b2b8:	1884703a 	and	r2,r3,r2
   1b2bc:	1004c03a 	cmpne	r2,r2,zero
   1b2c0:	10803fcc 	andi	r2,r2,255
}
   1b2c4:	e037883a 	mov	sp,fp
   1b2c8:	df000017 	ldw	fp,0(sp)
   1b2cc:	dec00104 	addi	sp,sp,4
   1b2d0:	f800283a 	ret

0001b2d4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1b2d4:	defff504 	addi	sp,sp,-44
   1b2d8:	dfc00a15 	stw	ra,40(sp)
   1b2dc:	df000915 	stw	fp,36(sp)
   1b2e0:	df000904 	addi	fp,sp,36
   1b2e4:	e13ffc15 	stw	r4,-16(fp)
   1b2e8:	e17ffd15 	stw	r5,-12(fp)
   1b2ec:	e1bffe15 	stw	r6,-8(fp)
   1b2f0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1b2f4:	00bffa84 	movi	r2,-22
   1b2f8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1b2fc:	e0bffd17 	ldw	r2,-12(fp)
   1b300:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1b304:	e0bff817 	ldw	r2,-32(fp)
   1b308:	10800808 	cmpgei	r2,r2,32
   1b30c:	1000271e 	bne	r2,zero,1b3ac <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b310:	0005303a 	rdctl	r2,status
   1b314:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b318:	e0fffb17 	ldw	r3,-20(fp)
   1b31c:	00bfff84 	movi	r2,-2
   1b320:	1884703a 	and	r2,r3,r2
   1b324:	1001703a 	wrctl	status,r2
  
  return context;
   1b328:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1b32c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   1b330:	008000b4 	movhi	r2,2
   1b334:	1080da04 	addi	r2,r2,872
   1b338:	e0fff817 	ldw	r3,-32(fp)
   1b33c:	180690fa 	slli	r3,r3,3
   1b340:	10c5883a 	add	r2,r2,r3
   1b344:	e0fffe17 	ldw	r3,-8(fp)
   1b348:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1b34c:	008000b4 	movhi	r2,2
   1b350:	1080da04 	addi	r2,r2,872
   1b354:	e0fff817 	ldw	r3,-32(fp)
   1b358:	180690fa 	slli	r3,r3,3
   1b35c:	10c5883a 	add	r2,r2,r3
   1b360:	10800104 	addi	r2,r2,4
   1b364:	e0ffff17 	ldw	r3,-4(fp)
   1b368:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1b36c:	e0bffe17 	ldw	r2,-8(fp)
   1b370:	10000526 	beq	r2,zero,1b388 <alt_iic_isr_register+0xb4>
   1b374:	e0bff817 	ldw	r2,-32(fp)
   1b378:	100b883a 	mov	r5,r2
   1b37c:	e13ffc17 	ldw	r4,-16(fp)
   1b380:	001b1740 	call	1b174 <alt_ic_irq_enable>
   1b384:	00000406 	br	1b398 <alt_iic_isr_register+0xc4>
   1b388:	e0bff817 	ldw	r2,-32(fp)
   1b38c:	100b883a 	mov	r5,r2
   1b390:	e13ffc17 	ldw	r4,-16(fp)
   1b394:	001b1fc0 	call	1b1fc <alt_ic_irq_disable>
   1b398:	e0bff715 	stw	r2,-36(fp)
   1b39c:	e0bffa17 	ldw	r2,-24(fp)
   1b3a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b3a4:	e0bff917 	ldw	r2,-28(fp)
   1b3a8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1b3ac:	e0bff717 	ldw	r2,-36(fp)
}
   1b3b0:	e037883a 	mov	sp,fp
   1b3b4:	dfc00117 	ldw	ra,4(sp)
   1b3b8:	df000017 	ldw	fp,0(sp)
   1b3bc:	dec00204 	addi	sp,sp,8
   1b3c0:	f800283a 	ret

0001b3c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1b3c4:	defff804 	addi	sp,sp,-32
   1b3c8:	dfc00715 	stw	ra,28(sp)
   1b3cc:	df000615 	stw	fp,24(sp)
   1b3d0:	dc000515 	stw	r16,20(sp)
   1b3d4:	df000604 	addi	fp,sp,24
   1b3d8:	e13ffb15 	stw	r4,-20(fp)
   1b3dc:	e17ffc15 	stw	r5,-16(fp)
   1b3e0:	e1bffd15 	stw	r6,-12(fp)
   1b3e4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   1b3e8:	e1bffe17 	ldw	r6,-8(fp)
   1b3ec:	e17ffd17 	ldw	r5,-12(fp)
   1b3f0:	e13ffc17 	ldw	r4,-16(fp)
   1b3f4:	001b64c0 	call	1b64c <open>
   1b3f8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   1b3fc:	e0bffa17 	ldw	r2,-24(fp)
   1b400:	10002216 	blt	r2,zero,1b48c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   1b404:	040000b4 	movhi	r16,2
   1b408:	84354304 	addi	r16,r16,-10996
   1b40c:	e0bffa17 	ldw	r2,-24(fp)
   1b410:	01400304 	movi	r5,12
   1b414:	1009883a 	mov	r4,r2
   1b418:	000c68c0 	call	c68c <__mulsi3>
   1b41c:	8085883a 	add	r2,r16,r2
   1b420:	10c00017 	ldw	r3,0(r2)
   1b424:	e0bffb17 	ldw	r2,-20(fp)
   1b428:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1b42c:	040000b4 	movhi	r16,2
   1b430:	84354304 	addi	r16,r16,-10996
   1b434:	e0bffa17 	ldw	r2,-24(fp)
   1b438:	01400304 	movi	r5,12
   1b43c:	1009883a 	mov	r4,r2
   1b440:	000c68c0 	call	c68c <__mulsi3>
   1b444:	8085883a 	add	r2,r16,r2
   1b448:	10800104 	addi	r2,r2,4
   1b44c:	10c00017 	ldw	r3,0(r2)
   1b450:	e0bffb17 	ldw	r2,-20(fp)
   1b454:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1b458:	040000b4 	movhi	r16,2
   1b45c:	84354304 	addi	r16,r16,-10996
   1b460:	e0bffa17 	ldw	r2,-24(fp)
   1b464:	01400304 	movi	r5,12
   1b468:	1009883a 	mov	r4,r2
   1b46c:	000c68c0 	call	c68c <__mulsi3>
   1b470:	8085883a 	add	r2,r16,r2
   1b474:	10800204 	addi	r2,r2,8
   1b478:	10c00017 	ldw	r3,0(r2)
   1b47c:	e0bffb17 	ldw	r2,-20(fp)
   1b480:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1b484:	e13ffa17 	ldw	r4,-24(fp)
   1b488:	0019d400 	call	19d40 <alt_release_fd>
  }
} 
   1b48c:	0001883a 	nop
   1b490:	e6ffff04 	addi	sp,fp,-4
   1b494:	dfc00217 	ldw	ra,8(sp)
   1b498:	df000117 	ldw	fp,4(sp)
   1b49c:	dc000017 	ldw	r16,0(sp)
   1b4a0:	dec00304 	addi	sp,sp,12
   1b4a4:	f800283a 	ret

0001b4a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1b4a8:	defffb04 	addi	sp,sp,-20
   1b4ac:	dfc00415 	stw	ra,16(sp)
   1b4b0:	df000315 	stw	fp,12(sp)
   1b4b4:	df000304 	addi	fp,sp,12
   1b4b8:	e13ffd15 	stw	r4,-12(fp)
   1b4bc:	e17ffe15 	stw	r5,-8(fp)
   1b4c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1b4c4:	01c07fc4 	movi	r7,511
   1b4c8:	01800044 	movi	r6,1
   1b4cc:	e17ffd17 	ldw	r5,-12(fp)
   1b4d0:	010000b4 	movhi	r4,2
   1b4d4:	21354604 	addi	r4,r4,-10984
   1b4d8:	001b3c40 	call	1b3c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1b4dc:	01c07fc4 	movi	r7,511
   1b4e0:	000d883a 	mov	r6,zero
   1b4e4:	e17ffe17 	ldw	r5,-8(fp)
   1b4e8:	010000b4 	movhi	r4,2
   1b4ec:	21354304 	addi	r4,r4,-10996
   1b4f0:	001b3c40 	call	1b3c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1b4f4:	01c07fc4 	movi	r7,511
   1b4f8:	01800044 	movi	r6,1
   1b4fc:	e17fff17 	ldw	r5,-4(fp)
   1b500:	010000b4 	movhi	r4,2
   1b504:	21354904 	addi	r4,r4,-10972
   1b508:	001b3c40 	call	1b3c4 <alt_open_fd>
}  
   1b50c:	0001883a 	nop
   1b510:	e037883a 	mov	sp,fp
   1b514:	dfc00117 	ldw	ra,4(sp)
   1b518:	df000017 	ldw	fp,0(sp)
   1b51c:	dec00204 	addi	sp,sp,8
   1b520:	f800283a 	ret

0001b524 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b524:	defffe04 	addi	sp,sp,-8
   1b528:	dfc00115 	stw	ra,4(sp)
   1b52c:	df000015 	stw	fp,0(sp)
   1b530:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b534:	d0a01717 	ldw	r2,-32676(gp)
   1b538:	10000326 	beq	r2,zero,1b548 <alt_get_errno+0x24>
   1b53c:	d0a01717 	ldw	r2,-32676(gp)
   1b540:	103ee83a 	callr	r2
   1b544:	00000106 	br	1b54c <alt_get_errno+0x28>
   1b548:	d0a70404 	addi	r2,gp,-25584
}
   1b54c:	e037883a 	mov	sp,fp
   1b550:	dfc00117 	ldw	ra,4(sp)
   1b554:	df000017 	ldw	fp,0(sp)
   1b558:	dec00204 	addi	sp,sp,8
   1b55c:	f800283a 	ret

0001b560 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1b560:	defffb04 	addi	sp,sp,-20
   1b564:	dfc00415 	stw	ra,16(sp)
   1b568:	df000315 	stw	fp,12(sp)
   1b56c:	dc000215 	stw	r16,8(sp)
   1b570:	df000304 	addi	fp,sp,12
   1b574:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1b578:	e0bffe17 	ldw	r2,-8(fp)
   1b57c:	10800217 	ldw	r2,8(r2)
   1b580:	10d00034 	orhi	r3,r2,16384
   1b584:	e0bffe17 	ldw	r2,-8(fp)
   1b588:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b58c:	e03ffd15 	stw	zero,-12(fp)
   1b590:	00002306 	br	1b620 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b594:	040000b4 	movhi	r16,2
   1b598:	84354304 	addi	r16,r16,-10996
   1b59c:	e0bffd17 	ldw	r2,-12(fp)
   1b5a0:	01400304 	movi	r5,12
   1b5a4:	1009883a 	mov	r4,r2
   1b5a8:	000c68c0 	call	c68c <__mulsi3>
   1b5ac:	8085883a 	add	r2,r16,r2
   1b5b0:	10c00017 	ldw	r3,0(r2)
   1b5b4:	e0bffe17 	ldw	r2,-8(fp)
   1b5b8:	10800017 	ldw	r2,0(r2)
   1b5bc:	1880151e 	bne	r3,r2,1b614 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1b5c0:	040000b4 	movhi	r16,2
   1b5c4:	84354304 	addi	r16,r16,-10996
   1b5c8:	e0bffd17 	ldw	r2,-12(fp)
   1b5cc:	01400304 	movi	r5,12
   1b5d0:	1009883a 	mov	r4,r2
   1b5d4:	000c68c0 	call	c68c <__mulsi3>
   1b5d8:	8085883a 	add	r2,r16,r2
   1b5dc:	10800204 	addi	r2,r2,8
   1b5e0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b5e4:	10000b0e 	bge	r2,zero,1b614 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1b5e8:	01400304 	movi	r5,12
   1b5ec:	e13ffd17 	ldw	r4,-12(fp)
   1b5f0:	000c68c0 	call	c68c <__mulsi3>
   1b5f4:	1007883a 	mov	r3,r2
   1b5f8:	008000b4 	movhi	r2,2
   1b5fc:	10b54304 	addi	r2,r2,-10996
   1b600:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1b604:	e0bffe17 	ldw	r2,-8(fp)
   1b608:	18800226 	beq	r3,r2,1b614 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1b60c:	00bffcc4 	movi	r2,-13
   1b610:	00000806 	br	1b634 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b614:	e0bffd17 	ldw	r2,-12(fp)
   1b618:	10800044 	addi	r2,r2,1
   1b61c:	e0bffd15 	stw	r2,-12(fp)
   1b620:	d0a01617 	ldw	r2,-32680(gp)
   1b624:	1007883a 	mov	r3,r2
   1b628:	e0bffd17 	ldw	r2,-12(fp)
   1b62c:	18bfd92e 	bgeu	r3,r2,1b594 <__alt_data_end+0xf801b594>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1b630:	0005883a 	mov	r2,zero
}
   1b634:	e6ffff04 	addi	sp,fp,-4
   1b638:	dfc00217 	ldw	ra,8(sp)
   1b63c:	df000117 	ldw	fp,4(sp)
   1b640:	dc000017 	ldw	r16,0(sp)
   1b644:	dec00304 	addi	sp,sp,12
   1b648:	f800283a 	ret

0001b64c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1b64c:	defff604 	addi	sp,sp,-40
   1b650:	dfc00915 	stw	ra,36(sp)
   1b654:	df000815 	stw	fp,32(sp)
   1b658:	df000804 	addi	fp,sp,32
   1b65c:	e13ffd15 	stw	r4,-12(fp)
   1b660:	e17ffe15 	stw	r5,-8(fp)
   1b664:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1b668:	00bfffc4 	movi	r2,-1
   1b66c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1b670:	00bffb44 	movi	r2,-19
   1b674:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1b678:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1b67c:	d1601404 	addi	r5,gp,-32688
   1b680:	e13ffd17 	ldw	r4,-12(fp)
   1b684:	001b9700 	call	1b970 <alt_find_dev>
   1b688:	e0bff815 	stw	r2,-32(fp)
   1b68c:	e0bff817 	ldw	r2,-32(fp)
   1b690:	1000051e 	bne	r2,zero,1b6a8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1b694:	e13ffd17 	ldw	r4,-12(fp)
   1b698:	001ba000 	call	1ba00 <alt_find_file>
   1b69c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1b6a0:	00800044 	movi	r2,1
   1b6a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1b6a8:	e0bff817 	ldw	r2,-32(fp)
   1b6ac:	10002b26 	beq	r2,zero,1b75c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1b6b0:	e13ff817 	ldw	r4,-32(fp)
   1b6b4:	001bb080 	call	1bb08 <alt_get_fd>
   1b6b8:	e0bff915 	stw	r2,-28(fp)
   1b6bc:	e0bff917 	ldw	r2,-28(fp)
   1b6c0:	1000030e 	bge	r2,zero,1b6d0 <open+0x84>
    {
      status = index;
   1b6c4:	e0bff917 	ldw	r2,-28(fp)
   1b6c8:	e0bffa15 	stw	r2,-24(fp)
   1b6cc:	00002506 	br	1b764 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   1b6d0:	01400304 	movi	r5,12
   1b6d4:	e13ff917 	ldw	r4,-28(fp)
   1b6d8:	000c68c0 	call	c68c <__mulsi3>
   1b6dc:	1007883a 	mov	r3,r2
   1b6e0:	008000b4 	movhi	r2,2
   1b6e4:	10b54304 	addi	r2,r2,-10996
   1b6e8:	1885883a 	add	r2,r3,r2
   1b6ec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1b6f0:	e0fffe17 	ldw	r3,-8(fp)
   1b6f4:	00900034 	movhi	r2,16384
   1b6f8:	10bfffc4 	addi	r2,r2,-1
   1b6fc:	1886703a 	and	r3,r3,r2
   1b700:	e0bffc17 	ldw	r2,-16(fp)
   1b704:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1b708:	e0bffb17 	ldw	r2,-20(fp)
   1b70c:	1000051e 	bne	r2,zero,1b724 <open+0xd8>
   1b710:	e13ffc17 	ldw	r4,-16(fp)
   1b714:	001b5600 	call	1b560 <alt_file_locked>
   1b718:	e0bffa15 	stw	r2,-24(fp)
   1b71c:	e0bffa17 	ldw	r2,-24(fp)
   1b720:	10001016 	blt	r2,zero,1b764 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1b724:	e0bff817 	ldw	r2,-32(fp)
   1b728:	10800317 	ldw	r2,12(r2)
   1b72c:	10000826 	beq	r2,zero,1b750 <open+0x104>
   1b730:	e0bff817 	ldw	r2,-32(fp)
   1b734:	10800317 	ldw	r2,12(r2)
   1b738:	e1ffff17 	ldw	r7,-4(fp)
   1b73c:	e1bffe17 	ldw	r6,-8(fp)
   1b740:	e17ffd17 	ldw	r5,-12(fp)
   1b744:	e13ffc17 	ldw	r4,-16(fp)
   1b748:	103ee83a 	callr	r2
   1b74c:	00000106 	br	1b754 <open+0x108>
   1b750:	0005883a 	mov	r2,zero
   1b754:	e0bffa15 	stw	r2,-24(fp)
   1b758:	00000206 	br	1b764 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1b75c:	00bffb44 	movi	r2,-19
   1b760:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1b764:	e0bffa17 	ldw	r2,-24(fp)
   1b768:	1000090e 	bge	r2,zero,1b790 <open+0x144>
  {
    alt_release_fd (index);  
   1b76c:	e13ff917 	ldw	r4,-28(fp)
   1b770:	0019d400 	call	19d40 <alt_release_fd>
    ALT_ERRNO = -status;
   1b774:	001b5240 	call	1b524 <alt_get_errno>
   1b778:	1007883a 	mov	r3,r2
   1b77c:	e0bffa17 	ldw	r2,-24(fp)
   1b780:	0085c83a 	sub	r2,zero,r2
   1b784:	18800015 	stw	r2,0(r3)
    return -1;
   1b788:	00bfffc4 	movi	r2,-1
   1b78c:	00000106 	br	1b794 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   1b790:	e0bff917 	ldw	r2,-28(fp)
}
   1b794:	e037883a 	mov	sp,fp
   1b798:	dfc00117 	ldw	ra,4(sp)
   1b79c:	df000017 	ldw	fp,0(sp)
   1b7a0:	dec00204 	addi	sp,sp,8
   1b7a4:	f800283a 	ret

0001b7a8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1b7a8:	defffa04 	addi	sp,sp,-24
   1b7ac:	df000515 	stw	fp,20(sp)
   1b7b0:	df000504 	addi	fp,sp,20
   1b7b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b7b8:	0005303a 	rdctl	r2,status
   1b7bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b7c0:	e0fffc17 	ldw	r3,-16(fp)
   1b7c4:	00bfff84 	movi	r2,-2
   1b7c8:	1884703a 	and	r2,r3,r2
   1b7cc:	1001703a 	wrctl	status,r2
  
  return context;
   1b7d0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1b7d4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1b7d8:	e0bfff17 	ldw	r2,-4(fp)
   1b7dc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1b7e0:	e0bffd17 	ldw	r2,-12(fp)
   1b7e4:	10800017 	ldw	r2,0(r2)
   1b7e8:	e0fffd17 	ldw	r3,-12(fp)
   1b7ec:	18c00117 	ldw	r3,4(r3)
   1b7f0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1b7f4:	e0bffd17 	ldw	r2,-12(fp)
   1b7f8:	10800117 	ldw	r2,4(r2)
   1b7fc:	e0fffd17 	ldw	r3,-12(fp)
   1b800:	18c00017 	ldw	r3,0(r3)
   1b804:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1b808:	e0bffd17 	ldw	r2,-12(fp)
   1b80c:	e0fffd17 	ldw	r3,-12(fp)
   1b810:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1b814:	e0bffd17 	ldw	r2,-12(fp)
   1b818:	e0fffd17 	ldw	r3,-12(fp)
   1b81c:	10c00015 	stw	r3,0(r2)
   1b820:	e0bffb17 	ldw	r2,-20(fp)
   1b824:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b828:	e0bffe17 	ldw	r2,-8(fp)
   1b82c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1b830:	0001883a 	nop
   1b834:	e037883a 	mov	sp,fp
   1b838:	df000017 	ldw	fp,0(sp)
   1b83c:	dec00104 	addi	sp,sp,4
   1b840:	f800283a 	ret

0001b844 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1b844:	defffb04 	addi	sp,sp,-20
   1b848:	dfc00415 	stw	ra,16(sp)
   1b84c:	df000315 	stw	fp,12(sp)
   1b850:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1b854:	d0a01a17 	ldw	r2,-32664(gp)
   1b858:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1b85c:	d0a70d17 	ldw	r2,-25548(gp)
   1b860:	10800044 	addi	r2,r2,1
   1b864:	d0a70d15 	stw	r2,-25548(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1b868:	00002e06 	br	1b924 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1b86c:	e0bffd17 	ldw	r2,-12(fp)
   1b870:	10800017 	ldw	r2,0(r2)
   1b874:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1b878:	e0bffd17 	ldw	r2,-12(fp)
   1b87c:	10800403 	ldbu	r2,16(r2)
   1b880:	10803fcc 	andi	r2,r2,255
   1b884:	10000426 	beq	r2,zero,1b898 <alt_tick+0x54>
   1b888:	d0a70d17 	ldw	r2,-25548(gp)
   1b88c:	1000021e 	bne	r2,zero,1b898 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1b890:	e0bffd17 	ldw	r2,-12(fp)
   1b894:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1b898:	e0bffd17 	ldw	r2,-12(fp)
   1b89c:	10800217 	ldw	r2,8(r2)
   1b8a0:	d0e70d17 	ldw	r3,-25548(gp)
   1b8a4:	18801d36 	bltu	r3,r2,1b91c <alt_tick+0xd8>
   1b8a8:	e0bffd17 	ldw	r2,-12(fp)
   1b8ac:	10800403 	ldbu	r2,16(r2)
   1b8b0:	10803fcc 	andi	r2,r2,255
   1b8b4:	1000191e 	bne	r2,zero,1b91c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1b8b8:	e0bffd17 	ldw	r2,-12(fp)
   1b8bc:	10800317 	ldw	r2,12(r2)
   1b8c0:	e0fffd17 	ldw	r3,-12(fp)
   1b8c4:	18c00517 	ldw	r3,20(r3)
   1b8c8:	1809883a 	mov	r4,r3
   1b8cc:	103ee83a 	callr	r2
   1b8d0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1b8d4:	e0bfff17 	ldw	r2,-4(fp)
   1b8d8:	1000031e 	bne	r2,zero,1b8e8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1b8dc:	e13ffd17 	ldw	r4,-12(fp)
   1b8e0:	001b7a80 	call	1b7a8 <alt_alarm_stop>
   1b8e4:	00000d06 	br	1b91c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1b8e8:	e0bffd17 	ldw	r2,-12(fp)
   1b8ec:	10c00217 	ldw	r3,8(r2)
   1b8f0:	e0bfff17 	ldw	r2,-4(fp)
   1b8f4:	1887883a 	add	r3,r3,r2
   1b8f8:	e0bffd17 	ldw	r2,-12(fp)
   1b8fc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1b900:	e0bffd17 	ldw	r2,-12(fp)
   1b904:	10c00217 	ldw	r3,8(r2)
   1b908:	d0a70d17 	ldw	r2,-25548(gp)
   1b90c:	1880032e 	bgeu	r3,r2,1b91c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1b910:	e0bffd17 	ldw	r2,-12(fp)
   1b914:	00c00044 	movi	r3,1
   1b918:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1b91c:	e0bffe17 	ldw	r2,-8(fp)
   1b920:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1b924:	e0fffd17 	ldw	r3,-12(fp)
   1b928:	d0a01a04 	addi	r2,gp,-32664
   1b92c:	18bfcf1e 	bne	r3,r2,1b86c <__alt_data_end+0xf801b86c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1b930:	0001883a 	nop
}
   1b934:	0001883a 	nop
   1b938:	e037883a 	mov	sp,fp
   1b93c:	dfc00117 	ldw	ra,4(sp)
   1b940:	df000017 	ldw	fp,0(sp)
   1b944:	dec00204 	addi	sp,sp,8
   1b948:	f800283a 	ret

0001b94c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1b94c:	deffff04 	addi	sp,sp,-4
   1b950:	df000015 	stw	fp,0(sp)
   1b954:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1b958:	000170fa 	wrctl	ienable,zero
}
   1b95c:	0001883a 	nop
   1b960:	e037883a 	mov	sp,fp
   1b964:	df000017 	ldw	fp,0(sp)
   1b968:	dec00104 	addi	sp,sp,4
   1b96c:	f800283a 	ret

0001b970 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1b970:	defffa04 	addi	sp,sp,-24
   1b974:	dfc00515 	stw	ra,20(sp)
   1b978:	df000415 	stw	fp,16(sp)
   1b97c:	df000404 	addi	fp,sp,16
   1b980:	e13ffe15 	stw	r4,-8(fp)
   1b984:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1b988:	e0bfff17 	ldw	r2,-4(fp)
   1b98c:	10800017 	ldw	r2,0(r2)
   1b990:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1b994:	e13ffe17 	ldw	r4,-8(fp)
   1b998:	000e6780 	call	e678 <strlen>
   1b99c:	10800044 	addi	r2,r2,1
   1b9a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1b9a4:	00000d06 	br	1b9dc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1b9a8:	e0bffc17 	ldw	r2,-16(fp)
   1b9ac:	10800217 	ldw	r2,8(r2)
   1b9b0:	e0fffd17 	ldw	r3,-12(fp)
   1b9b4:	180d883a 	mov	r6,r3
   1b9b8:	e17ffe17 	ldw	r5,-8(fp)
   1b9bc:	1009883a 	mov	r4,r2
   1b9c0:	001bcb40 	call	1bcb4 <memcmp>
   1b9c4:	1000021e 	bne	r2,zero,1b9d0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1b9c8:	e0bffc17 	ldw	r2,-16(fp)
   1b9cc:	00000706 	br	1b9ec <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1b9d0:	e0bffc17 	ldw	r2,-16(fp)
   1b9d4:	10800017 	ldw	r2,0(r2)
   1b9d8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1b9dc:	e0fffc17 	ldw	r3,-16(fp)
   1b9e0:	e0bfff17 	ldw	r2,-4(fp)
   1b9e4:	18bff01e 	bne	r3,r2,1b9a8 <__alt_data_end+0xf801b9a8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1b9e8:	0005883a 	mov	r2,zero
}
   1b9ec:	e037883a 	mov	sp,fp
   1b9f0:	dfc00117 	ldw	ra,4(sp)
   1b9f4:	df000017 	ldw	fp,0(sp)
   1b9f8:	dec00204 	addi	sp,sp,8
   1b9fc:	f800283a 	ret

0001ba00 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1ba00:	defffb04 	addi	sp,sp,-20
   1ba04:	dfc00415 	stw	ra,16(sp)
   1ba08:	df000315 	stw	fp,12(sp)
   1ba0c:	df000304 	addi	fp,sp,12
   1ba10:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1ba14:	d0a01217 	ldw	r2,-32696(gp)
   1ba18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1ba1c:	00003106 	br	1bae4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1ba20:	e0bffd17 	ldw	r2,-12(fp)
   1ba24:	10800217 	ldw	r2,8(r2)
   1ba28:	1009883a 	mov	r4,r2
   1ba2c:	000e6780 	call	e678 <strlen>
   1ba30:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1ba34:	e0bffd17 	ldw	r2,-12(fp)
   1ba38:	10c00217 	ldw	r3,8(r2)
   1ba3c:	e0bffe17 	ldw	r2,-8(fp)
   1ba40:	10bfffc4 	addi	r2,r2,-1
   1ba44:	1885883a 	add	r2,r3,r2
   1ba48:	10800003 	ldbu	r2,0(r2)
   1ba4c:	10803fcc 	andi	r2,r2,255
   1ba50:	1080201c 	xori	r2,r2,128
   1ba54:	10bfe004 	addi	r2,r2,-128
   1ba58:	10800bd8 	cmpnei	r2,r2,47
   1ba5c:	1000031e 	bne	r2,zero,1ba6c <alt_find_file+0x6c>
    {
      len -= 1;
   1ba60:	e0bffe17 	ldw	r2,-8(fp)
   1ba64:	10bfffc4 	addi	r2,r2,-1
   1ba68:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1ba6c:	e0bffe17 	ldw	r2,-8(fp)
   1ba70:	e0ffff17 	ldw	r3,-4(fp)
   1ba74:	1885883a 	add	r2,r3,r2
   1ba78:	10800003 	ldbu	r2,0(r2)
   1ba7c:	10803fcc 	andi	r2,r2,255
   1ba80:	1080201c 	xori	r2,r2,128
   1ba84:	10bfe004 	addi	r2,r2,-128
   1ba88:	10800be0 	cmpeqi	r2,r2,47
   1ba8c:	1000081e 	bne	r2,zero,1bab0 <alt_find_file+0xb0>
   1ba90:	e0bffe17 	ldw	r2,-8(fp)
   1ba94:	e0ffff17 	ldw	r3,-4(fp)
   1ba98:	1885883a 	add	r2,r3,r2
   1ba9c:	10800003 	ldbu	r2,0(r2)
   1baa0:	10803fcc 	andi	r2,r2,255
   1baa4:	1080201c 	xori	r2,r2,128
   1baa8:	10bfe004 	addi	r2,r2,-128
   1baac:	10000a1e 	bne	r2,zero,1bad8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1bab0:	e0bffd17 	ldw	r2,-12(fp)
   1bab4:	10800217 	ldw	r2,8(r2)
   1bab8:	e0fffe17 	ldw	r3,-8(fp)
   1babc:	180d883a 	mov	r6,r3
   1bac0:	e17fff17 	ldw	r5,-4(fp)
   1bac4:	1009883a 	mov	r4,r2
   1bac8:	001bcb40 	call	1bcb4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1bacc:	1000021e 	bne	r2,zero,1bad8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1bad0:	e0bffd17 	ldw	r2,-12(fp)
   1bad4:	00000706 	br	1baf4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1bad8:	e0bffd17 	ldw	r2,-12(fp)
   1badc:	10800017 	ldw	r2,0(r2)
   1bae0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1bae4:	e0fffd17 	ldw	r3,-12(fp)
   1bae8:	d0a01204 	addi	r2,gp,-32696
   1baec:	18bfcc1e 	bne	r3,r2,1ba20 <__alt_data_end+0xf801ba20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1baf0:	0005883a 	mov	r2,zero
}
   1baf4:	e037883a 	mov	sp,fp
   1baf8:	dfc00117 	ldw	ra,4(sp)
   1bafc:	df000017 	ldw	fp,0(sp)
   1bb00:	dec00204 	addi	sp,sp,8
   1bb04:	f800283a 	ret

0001bb08 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1bb08:	defffa04 	addi	sp,sp,-24
   1bb0c:	dfc00515 	stw	ra,20(sp)
   1bb10:	df000415 	stw	fp,16(sp)
   1bb14:	dc000315 	stw	r16,12(sp)
   1bb18:	df000404 	addi	fp,sp,16
   1bb1c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   1bb20:	00bffa04 	movi	r2,-24
   1bb24:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1bb28:	e03ffc15 	stw	zero,-16(fp)
   1bb2c:	00001d06 	br	1bba4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   1bb30:	040000b4 	movhi	r16,2
   1bb34:	84354304 	addi	r16,r16,-10996
   1bb38:	e0bffc17 	ldw	r2,-16(fp)
   1bb3c:	01400304 	movi	r5,12
   1bb40:	1009883a 	mov	r4,r2
   1bb44:	000c68c0 	call	c68c <__mulsi3>
   1bb48:	8085883a 	add	r2,r16,r2
   1bb4c:	10800017 	ldw	r2,0(r2)
   1bb50:	1000111e 	bne	r2,zero,1bb98 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   1bb54:	040000b4 	movhi	r16,2
   1bb58:	84354304 	addi	r16,r16,-10996
   1bb5c:	e0bffc17 	ldw	r2,-16(fp)
   1bb60:	01400304 	movi	r5,12
   1bb64:	1009883a 	mov	r4,r2
   1bb68:	000c68c0 	call	c68c <__mulsi3>
   1bb6c:	8085883a 	add	r2,r16,r2
   1bb70:	e0fffe17 	ldw	r3,-8(fp)
   1bb74:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1bb78:	d0e01617 	ldw	r3,-32680(gp)
   1bb7c:	e0bffc17 	ldw	r2,-16(fp)
   1bb80:	1880020e 	bge	r3,r2,1bb8c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   1bb84:	e0bffc17 	ldw	r2,-16(fp)
   1bb88:	d0a01615 	stw	r2,-32680(gp)
      }
      rc = i;
   1bb8c:	e0bffc17 	ldw	r2,-16(fp)
   1bb90:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1bb94:	00000606 	br	1bbb0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1bb98:	e0bffc17 	ldw	r2,-16(fp)
   1bb9c:	10800044 	addi	r2,r2,1
   1bba0:	e0bffc15 	stw	r2,-16(fp)
   1bba4:	e0bffc17 	ldw	r2,-16(fp)
   1bba8:	10800810 	cmplti	r2,r2,32
   1bbac:	103fe01e 	bne	r2,zero,1bb30 <__alt_data_end+0xf801bb30>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1bbb0:	e0bffd17 	ldw	r2,-12(fp)
}
   1bbb4:	e6ffff04 	addi	sp,fp,-4
   1bbb8:	dfc00217 	ldw	ra,8(sp)
   1bbbc:	df000117 	ldw	fp,4(sp)
   1bbc0:	dc000017 	ldw	r16,0(sp)
   1bbc4:	dec00304 	addi	sp,sp,12
   1bbc8:	f800283a 	ret

0001bbcc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1bbcc:	defffe04 	addi	sp,sp,-8
   1bbd0:	df000115 	stw	fp,4(sp)
   1bbd4:	df000104 	addi	fp,sp,4
   1bbd8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1bbdc:	e0bfff17 	ldw	r2,-4(fp)
   1bbe0:	10bffe84 	addi	r2,r2,-6
   1bbe4:	10c00428 	cmpgeui	r3,r2,16
   1bbe8:	18001a1e 	bne	r3,zero,1bc54 <alt_exception_cause_generated_bad_addr+0x88>
   1bbec:	100690ba 	slli	r3,r2,2
   1bbf0:	008000b4 	movhi	r2,2
   1bbf4:	10af0104 	addi	r2,r2,-17404
   1bbf8:	1885883a 	add	r2,r3,r2
   1bbfc:	10800017 	ldw	r2,0(r2)
   1bc00:	1000683a 	jmp	r2
   1bc04:	0001bc44 	movi	zero,1777
   1bc08:	0001bc44 	movi	zero,1777
   1bc0c:	0001bc54 	movui	zero,1777
   1bc10:	0001bc54 	movui	zero,1777
   1bc14:	0001bc54 	movui	zero,1777
   1bc18:	0001bc44 	movi	zero,1777
   1bc1c:	0001bc4c 	andi	zero,zero,1777
   1bc20:	0001bc54 	movui	zero,1777
   1bc24:	0001bc44 	movi	zero,1777
   1bc28:	0001bc44 	movi	zero,1777
   1bc2c:	0001bc54 	movui	zero,1777
   1bc30:	0001bc44 	movi	zero,1777
   1bc34:	0001bc4c 	andi	zero,zero,1777
   1bc38:	0001bc54 	movui	zero,1777
   1bc3c:	0001bc54 	movui	zero,1777
   1bc40:	0001bc44 	movi	zero,1777
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1bc44:	00800044 	movi	r2,1
   1bc48:	00000306 	br	1bc58 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1bc4c:	0005883a 	mov	r2,zero
   1bc50:	00000106 	br	1bc58 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1bc54:	0005883a 	mov	r2,zero
  }
}
   1bc58:	e037883a 	mov	sp,fp
   1bc5c:	df000017 	ldw	fp,0(sp)
   1bc60:	dec00104 	addi	sp,sp,4
   1bc64:	f800283a 	ret

0001bc68 <atexit>:
   1bc68:	200b883a 	mov	r5,r4
   1bc6c:	000f883a 	mov	r7,zero
   1bc70:	000d883a 	mov	r6,zero
   1bc74:	0009883a 	mov	r4,zero
   1bc78:	001bd301 	jmpi	1bd30 <__register_exitproc>

0001bc7c <exit>:
   1bc7c:	defffe04 	addi	sp,sp,-8
   1bc80:	000b883a 	mov	r5,zero
   1bc84:	dc000015 	stw	r16,0(sp)
   1bc88:	dfc00115 	stw	ra,4(sp)
   1bc8c:	2021883a 	mov	r16,r4
   1bc90:	001be480 	call	1be48 <__call_exitprocs>
   1bc94:	008000b4 	movhi	r2,2
   1bc98:	10b9c704 	addi	r2,r2,-6372
   1bc9c:	11000017 	ldw	r4,0(r2)
   1bca0:	20800f17 	ldw	r2,60(r4)
   1bca4:	10000126 	beq	r2,zero,1bcac <exit+0x30>
   1bca8:	103ee83a 	callr	r2
   1bcac:	8009883a 	mov	r4,r16
   1bcb0:	001bfc80 	call	1bfc8 <_exit>

0001bcb4 <memcmp>:
   1bcb4:	01c000c4 	movi	r7,3
   1bcb8:	3980192e 	bgeu	r7,r6,1bd20 <memcmp+0x6c>
   1bcbc:	2144b03a 	or	r2,r4,r5
   1bcc0:	11c4703a 	and	r2,r2,r7
   1bcc4:	10000f26 	beq	r2,zero,1bd04 <memcmp+0x50>
   1bcc8:	20800003 	ldbu	r2,0(r4)
   1bccc:	28c00003 	ldbu	r3,0(r5)
   1bcd0:	10c0151e 	bne	r2,r3,1bd28 <memcmp+0x74>
   1bcd4:	31bfff84 	addi	r6,r6,-2
   1bcd8:	01ffffc4 	movi	r7,-1
   1bcdc:	00000406 	br	1bcf0 <memcmp+0x3c>
   1bce0:	20800003 	ldbu	r2,0(r4)
   1bce4:	28c00003 	ldbu	r3,0(r5)
   1bce8:	31bfffc4 	addi	r6,r6,-1
   1bcec:	10c00e1e 	bne	r2,r3,1bd28 <memcmp+0x74>
   1bcf0:	21000044 	addi	r4,r4,1
   1bcf4:	29400044 	addi	r5,r5,1
   1bcf8:	31fff91e 	bne	r6,r7,1bce0 <__alt_data_end+0xf801bce0>
   1bcfc:	0005883a 	mov	r2,zero
   1bd00:	f800283a 	ret
   1bd04:	20c00017 	ldw	r3,0(r4)
   1bd08:	28800017 	ldw	r2,0(r5)
   1bd0c:	18bfee1e 	bne	r3,r2,1bcc8 <__alt_data_end+0xf801bcc8>
   1bd10:	31bfff04 	addi	r6,r6,-4
   1bd14:	21000104 	addi	r4,r4,4
   1bd18:	29400104 	addi	r5,r5,4
   1bd1c:	39bff936 	bltu	r7,r6,1bd04 <__alt_data_end+0xf801bd04>
   1bd20:	303fe91e 	bne	r6,zero,1bcc8 <__alt_data_end+0xf801bcc8>
   1bd24:	003ff506 	br	1bcfc <__alt_data_end+0xf801bcfc>
   1bd28:	10c5c83a 	sub	r2,r2,r3
   1bd2c:	f800283a 	ret

0001bd30 <__register_exitproc>:
   1bd30:	defffa04 	addi	sp,sp,-24
   1bd34:	dc000315 	stw	r16,12(sp)
   1bd38:	040000b4 	movhi	r16,2
   1bd3c:	8439c704 	addi	r16,r16,-6372
   1bd40:	80c00017 	ldw	r3,0(r16)
   1bd44:	dc400415 	stw	r17,16(sp)
   1bd48:	dfc00515 	stw	ra,20(sp)
   1bd4c:	18805217 	ldw	r2,328(r3)
   1bd50:	2023883a 	mov	r17,r4
   1bd54:	10003726 	beq	r2,zero,1be34 <__register_exitproc+0x104>
   1bd58:	10c00117 	ldw	r3,4(r2)
   1bd5c:	010007c4 	movi	r4,31
   1bd60:	20c00e16 	blt	r4,r3,1bd9c <__register_exitproc+0x6c>
   1bd64:	1a000044 	addi	r8,r3,1
   1bd68:	8800221e 	bne	r17,zero,1bdf4 <__register_exitproc+0xc4>
   1bd6c:	18c00084 	addi	r3,r3,2
   1bd70:	18c7883a 	add	r3,r3,r3
   1bd74:	18c7883a 	add	r3,r3,r3
   1bd78:	12000115 	stw	r8,4(r2)
   1bd7c:	10c7883a 	add	r3,r2,r3
   1bd80:	19400015 	stw	r5,0(r3)
   1bd84:	0005883a 	mov	r2,zero
   1bd88:	dfc00517 	ldw	ra,20(sp)
   1bd8c:	dc400417 	ldw	r17,16(sp)
   1bd90:	dc000317 	ldw	r16,12(sp)
   1bd94:	dec00604 	addi	sp,sp,24
   1bd98:	f800283a 	ret
   1bd9c:	00800074 	movhi	r2,1
   1bda0:	10b70d04 	addi	r2,r2,-9164
   1bda4:	10002626 	beq	r2,zero,1be40 <__register_exitproc+0x110>
   1bda8:	01006404 	movi	r4,400
   1bdac:	d9400015 	stw	r5,0(sp)
   1bdb0:	d9800115 	stw	r6,4(sp)
   1bdb4:	d9c00215 	stw	r7,8(sp)
   1bdb8:	000dc340 	call	dc34 <malloc>
   1bdbc:	d9400017 	ldw	r5,0(sp)
   1bdc0:	d9800117 	ldw	r6,4(sp)
   1bdc4:	d9c00217 	ldw	r7,8(sp)
   1bdc8:	10001d26 	beq	r2,zero,1be40 <__register_exitproc+0x110>
   1bdcc:	81000017 	ldw	r4,0(r16)
   1bdd0:	10000115 	stw	zero,4(r2)
   1bdd4:	02000044 	movi	r8,1
   1bdd8:	22405217 	ldw	r9,328(r4)
   1bddc:	0007883a 	mov	r3,zero
   1bde0:	12400015 	stw	r9,0(r2)
   1bde4:	20805215 	stw	r2,328(r4)
   1bde8:	10006215 	stw	zero,392(r2)
   1bdec:	10006315 	stw	zero,396(r2)
   1bdf0:	883fde26 	beq	r17,zero,1bd6c <__alt_data_end+0xf801bd6c>
   1bdf4:	18c9883a 	add	r4,r3,r3
   1bdf8:	2109883a 	add	r4,r4,r4
   1bdfc:	1109883a 	add	r4,r2,r4
   1be00:	21802215 	stw	r6,136(r4)
   1be04:	01800044 	movi	r6,1
   1be08:	12406217 	ldw	r9,392(r2)
   1be0c:	30cc983a 	sll	r6,r6,r3
   1be10:	4992b03a 	or	r9,r9,r6
   1be14:	12406215 	stw	r9,392(r2)
   1be18:	21c04215 	stw	r7,264(r4)
   1be1c:	01000084 	movi	r4,2
   1be20:	893fd21e 	bne	r17,r4,1bd6c <__alt_data_end+0xf801bd6c>
   1be24:	11006317 	ldw	r4,396(r2)
   1be28:	218cb03a 	or	r6,r4,r6
   1be2c:	11806315 	stw	r6,396(r2)
   1be30:	003fce06 	br	1bd6c <__alt_data_end+0xf801bd6c>
   1be34:	18805304 	addi	r2,r3,332
   1be38:	18805215 	stw	r2,328(r3)
   1be3c:	003fc606 	br	1bd58 <__alt_data_end+0xf801bd58>
   1be40:	00bfffc4 	movi	r2,-1
   1be44:	003fd006 	br	1bd88 <__alt_data_end+0xf801bd88>

0001be48 <__call_exitprocs>:
   1be48:	defff504 	addi	sp,sp,-44
   1be4c:	df000915 	stw	fp,36(sp)
   1be50:	dd400615 	stw	r21,24(sp)
   1be54:	dc800315 	stw	r18,12(sp)
   1be58:	dfc00a15 	stw	ra,40(sp)
   1be5c:	ddc00815 	stw	r23,32(sp)
   1be60:	dd800715 	stw	r22,28(sp)
   1be64:	dd000515 	stw	r20,20(sp)
   1be68:	dcc00415 	stw	r19,16(sp)
   1be6c:	dc400215 	stw	r17,8(sp)
   1be70:	dc000115 	stw	r16,4(sp)
   1be74:	d9000015 	stw	r4,0(sp)
   1be78:	2839883a 	mov	fp,r5
   1be7c:	04800044 	movi	r18,1
   1be80:	057fffc4 	movi	r21,-1
   1be84:	008000b4 	movhi	r2,2
   1be88:	10b9c704 	addi	r2,r2,-6372
   1be8c:	12000017 	ldw	r8,0(r2)
   1be90:	45005217 	ldw	r20,328(r8)
   1be94:	44c05204 	addi	r19,r8,328
   1be98:	a0001c26 	beq	r20,zero,1bf0c <__call_exitprocs+0xc4>
   1be9c:	a0800117 	ldw	r2,4(r20)
   1bea0:	15ffffc4 	addi	r23,r2,-1
   1bea4:	b8000d16 	blt	r23,zero,1bedc <__call_exitprocs+0x94>
   1bea8:	14000044 	addi	r16,r2,1
   1beac:	8421883a 	add	r16,r16,r16
   1beb0:	8421883a 	add	r16,r16,r16
   1beb4:	84402004 	addi	r17,r16,128
   1beb8:	a463883a 	add	r17,r20,r17
   1bebc:	a421883a 	add	r16,r20,r16
   1bec0:	e0001e26 	beq	fp,zero,1bf3c <__call_exitprocs+0xf4>
   1bec4:	80804017 	ldw	r2,256(r16)
   1bec8:	e0801c26 	beq	fp,r2,1bf3c <__call_exitprocs+0xf4>
   1becc:	bdffffc4 	addi	r23,r23,-1
   1bed0:	843fff04 	addi	r16,r16,-4
   1bed4:	8c7fff04 	addi	r17,r17,-4
   1bed8:	bd7ff91e 	bne	r23,r21,1bec0 <__alt_data_end+0xf801bec0>
   1bedc:	00800074 	movhi	r2,1
   1bee0:	10b71204 	addi	r2,r2,-9144
   1bee4:	10000926 	beq	r2,zero,1bf0c <__call_exitprocs+0xc4>
   1bee8:	a0800117 	ldw	r2,4(r20)
   1beec:	1000301e 	bne	r2,zero,1bfb0 <__call_exitprocs+0x168>
   1bef0:	a0800017 	ldw	r2,0(r20)
   1bef4:	10003226 	beq	r2,zero,1bfc0 <__call_exitprocs+0x178>
   1bef8:	a009883a 	mov	r4,r20
   1befc:	98800015 	stw	r2,0(r19)
   1bf00:	000dc480 	call	dc48 <free>
   1bf04:	9d000017 	ldw	r20,0(r19)
   1bf08:	a03fe41e 	bne	r20,zero,1be9c <__alt_data_end+0xf801be9c>
   1bf0c:	dfc00a17 	ldw	ra,40(sp)
   1bf10:	df000917 	ldw	fp,36(sp)
   1bf14:	ddc00817 	ldw	r23,32(sp)
   1bf18:	dd800717 	ldw	r22,28(sp)
   1bf1c:	dd400617 	ldw	r21,24(sp)
   1bf20:	dd000517 	ldw	r20,20(sp)
   1bf24:	dcc00417 	ldw	r19,16(sp)
   1bf28:	dc800317 	ldw	r18,12(sp)
   1bf2c:	dc400217 	ldw	r17,8(sp)
   1bf30:	dc000117 	ldw	r16,4(sp)
   1bf34:	dec00b04 	addi	sp,sp,44
   1bf38:	f800283a 	ret
   1bf3c:	a0800117 	ldw	r2,4(r20)
   1bf40:	80c00017 	ldw	r3,0(r16)
   1bf44:	10bfffc4 	addi	r2,r2,-1
   1bf48:	15c01426 	beq	r2,r23,1bf9c <__call_exitprocs+0x154>
   1bf4c:	80000015 	stw	zero,0(r16)
   1bf50:	183fde26 	beq	r3,zero,1becc <__alt_data_end+0xf801becc>
   1bf54:	95c8983a 	sll	r4,r18,r23
   1bf58:	a0806217 	ldw	r2,392(r20)
   1bf5c:	a5800117 	ldw	r22,4(r20)
   1bf60:	2084703a 	and	r2,r4,r2
   1bf64:	10000b26 	beq	r2,zero,1bf94 <__call_exitprocs+0x14c>
   1bf68:	a0806317 	ldw	r2,396(r20)
   1bf6c:	2088703a 	and	r4,r4,r2
   1bf70:	20000c1e 	bne	r4,zero,1bfa4 <__call_exitprocs+0x15c>
   1bf74:	89400017 	ldw	r5,0(r17)
   1bf78:	d9000017 	ldw	r4,0(sp)
   1bf7c:	183ee83a 	callr	r3
   1bf80:	a0800117 	ldw	r2,4(r20)
   1bf84:	15bfbf1e 	bne	r2,r22,1be84 <__alt_data_end+0xf801be84>
   1bf88:	98800017 	ldw	r2,0(r19)
   1bf8c:	153fcf26 	beq	r2,r20,1becc <__alt_data_end+0xf801becc>
   1bf90:	003fbc06 	br	1be84 <__alt_data_end+0xf801be84>
   1bf94:	183ee83a 	callr	r3
   1bf98:	003ff906 	br	1bf80 <__alt_data_end+0xf801bf80>
   1bf9c:	a5c00115 	stw	r23,4(r20)
   1bfa0:	003feb06 	br	1bf50 <__alt_data_end+0xf801bf50>
   1bfa4:	89000017 	ldw	r4,0(r17)
   1bfa8:	183ee83a 	callr	r3
   1bfac:	003ff406 	br	1bf80 <__alt_data_end+0xf801bf80>
   1bfb0:	a0800017 	ldw	r2,0(r20)
   1bfb4:	a027883a 	mov	r19,r20
   1bfb8:	1029883a 	mov	r20,r2
   1bfbc:	003fb606 	br	1be98 <__alt_data_end+0xf801be98>
   1bfc0:	0005883a 	mov	r2,zero
   1bfc4:	003ffb06 	br	1bfb4 <__alt_data_end+0xf801bfb4>

0001bfc8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1bfc8:	defffd04 	addi	sp,sp,-12
   1bfcc:	df000215 	stw	fp,8(sp)
   1bfd0:	df000204 	addi	fp,sp,8
   1bfd4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1bfd8:	0001883a 	nop
   1bfdc:	e0bfff17 	ldw	r2,-4(fp)
   1bfe0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1bfe4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1bfe8:	10000226 	beq	r2,zero,1bff4 <_exit+0x2c>
    ALT_SIM_FAIL();
   1bfec:	002af070 	cmpltui	zero,zero,43969
   1bff0:	00000106 	br	1bff8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1bff4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1bff8:	003fff06 	br	1bff8 <__alt_data_end+0xf801bff8>
