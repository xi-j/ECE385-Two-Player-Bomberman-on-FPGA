// Bomberman_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module Bomberman_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                                         //                                                       clk_0_clk.clk
		input  wire        sdram_pll_audio_pll_c0_clk,                                            //                                          sdram_pll_audio_pll_c0.clk
		input  wire        nios2_qsys_0_reset_reset_bridge_in_reset_reset,                        //                        nios2_qsys_0_reset_reset_bridge_in_reset.reset
		input  wire        sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset, // sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset.reset
		input  wire        sdram_reset_reset_bridge_in_reset_reset,                               //                               sdram_reset_reset_bridge_in_reset.reset
		input  wire [27:0] nios2_qsys_0_data_master_address,                                      //                                        nios2_qsys_0_data_master.address
		output wire        nios2_qsys_0_data_master_waitrequest,                                  //                                                                .waitrequest
		input  wire [3:0]  nios2_qsys_0_data_master_byteenable,                                   //                                                                .byteenable
		input  wire        nios2_qsys_0_data_master_read,                                         //                                                                .read
		output wire [31:0] nios2_qsys_0_data_master_readdata,                                     //                                                                .readdata
		input  wire        nios2_qsys_0_data_master_write,                                        //                                                                .write
		input  wire [31:0] nios2_qsys_0_data_master_writedata,                                    //                                                                .writedata
		input  wire        nios2_qsys_0_data_master_debugaccess,                                  //                                                                .debugaccess
		input  wire [27:0] nios2_qsys_0_instruction_master_address,                               //                                 nios2_qsys_0_instruction_master.address
		output wire        nios2_qsys_0_instruction_master_waitrequest,                           //                                                                .waitrequest
		input  wire        nios2_qsys_0_instruction_master_read,                                  //                                                                .read
		output wire [31:0] nios2_qsys_0_instruction_master_readdata,                              //                                                                .readdata
		output wire [1:0]  audio_back_vol_s1_address,                                             //                                               audio_back_vol_s1.address
		output wire        audio_back_vol_s1_write,                                               //                                                                .write
		input  wire [31:0] audio_back_vol_s1_readdata,                                            //                                                                .readdata
		output wire [31:0] audio_back_vol_s1_writedata,                                           //                                                                .writedata
		output wire        audio_back_vol_s1_chipselect,                                          //                                                                .chipselect
		output wire [1:0]  audio_bomb_active_s1_address,                                          //                                            audio_bomb_active_s1.address
		output wire        audio_bomb_active_s1_write,                                            //                                                                .write
		input  wire [31:0] audio_bomb_active_s1_readdata,                                         //                                                                .readdata
		output wire [31:0] audio_bomb_active_s1_writedata,                                        //                                                                .writedata
		output wire        audio_bomb_active_s1_chipselect,                                       //                                                                .chipselect
		output wire [1:0]  audio_bomb_vol_s1_address,                                             //                                               audio_bomb_vol_s1.address
		output wire        audio_bomb_vol_s1_write,                                               //                                                                .write
		input  wire [31:0] audio_bomb_vol_s1_readdata,                                            //                                                                .readdata
		output wire [31:0] audio_bomb_vol_s1_writedata,                                           //                                                                .writedata
		output wire        audio_bomb_vol_s1_chipselect,                                          //                                                                .chipselect
		output wire [1:0]  audio_INIT_s1_address,                                                 //                                                   audio_INIT_s1.address
		output wire        audio_INIT_s1_write,                                                   //                                                                .write
		input  wire [31:0] audio_INIT_s1_readdata,                                                //                                                                .readdata
		output wire [31:0] audio_INIT_s1_writedata,                                               //                                                                .writedata
		output wire        audio_INIT_s1_chipselect,                                              //                                                                .chipselect
		output wire [1:0]  audio_INIT_F_s1_address,                                               //                                                 audio_INIT_F_s1.address
		input  wire [31:0] audio_INIT_F_s1_readdata,                                              //                                                                .readdata
		output wire [1:0]  audio_select_s1_address,                                               //                                                 audio_select_s1.address
		output wire        audio_select_s1_write,                                                 //                                                                .write
		input  wire [31:0] audio_select_s1_readdata,                                              //                                                                .readdata
		output wire [31:0] audio_select_s1_writedata,                                             //                                                                .writedata
		output wire        audio_select_s1_chipselect,                                            //                                                                .chipselect
		output wire [4:0]  avalon_blitter_0_s1_address,                                           //                                             avalon_blitter_0_s1.address
		output wire        avalon_blitter_0_s1_write,                                             //                                                                .write
		output wire        avalon_blitter_0_s1_read,                                              //                                                                .read
		input  wire [31:0] avalon_blitter_0_s1_readdata,                                          //                                                                .readdata
		output wire [31:0] avalon_blitter_0_s1_writedata,                                         //                                                                .writedata
		output wire [3:0]  avalon_blitter_0_s1_byteenable,                                        //                                                                .byteenable
		output wire        avalon_blitter_0_s1_chipselect,                                        //                                                                .chipselect
		output wire [1:0]  Boot_Up_s1_address,                                                    //                                                      Boot_Up_s1.address
		input  wire [31:0] Boot_Up_s1_readdata,                                                   //                                                                .readdata
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,                                 //                                   jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,                                   //                                                                .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,                                    //                                                                .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,                                //                                                                .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,                               //                                                                .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,                             //                                                                .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,                              //                                                                .chipselect
		output wire [1:0]  LEDs_s1_address,                                                       //                                                         LEDs_s1.address
		output wire        LEDs_s1_write,                                                         //                                                                .write
		input  wire [31:0] LEDs_s1_readdata,                                                      //                                                                .readdata
		output wire [31:0] LEDs_s1_writedata,                                                     //                                                                .writedata
		output wire        LEDs_s1_chipselect,                                                    //                                                                .chipselect
		output wire [8:0]  nios2_qsys_0_debug_mem_slave_address,                                  //                                    nios2_qsys_0_debug_mem_slave.address
		output wire        nios2_qsys_0_debug_mem_slave_write,                                    //                                                                .write
		output wire        nios2_qsys_0_debug_mem_slave_read,                                     //                                                                .read
		input  wire [31:0] nios2_qsys_0_debug_mem_slave_readdata,                                 //                                                                .readdata
		output wire [31:0] nios2_qsys_0_debug_mem_slave_writedata,                                //                                                                .writedata
		output wire [3:0]  nios2_qsys_0_debug_mem_slave_byteenable,                               //                                                                .byteenable
		input  wire        nios2_qsys_0_debug_mem_slave_waitrequest,                              //                                                                .waitrequest
		output wire        nios2_qsys_0_debug_mem_slave_debugaccess,                              //                                                                .debugaccess
		output wire [1:0]  otg_hpi_address_s1_address,                                            //                                              otg_hpi_address_s1.address
		output wire        otg_hpi_address_s1_write,                                              //                                                                .write
		input  wire [31:0] otg_hpi_address_s1_readdata,                                           //                                                                .readdata
		output wire [31:0] otg_hpi_address_s1_writedata,                                          //                                                                .writedata
		output wire        otg_hpi_address_s1_chipselect,                                         //                                                                .chipselect
		output wire [1:0]  otg_hpi_cs_s1_address,                                                 //                                                   otg_hpi_cs_s1.address
		output wire        otg_hpi_cs_s1_write,                                                   //                                                                .write
		input  wire [31:0] otg_hpi_cs_s1_readdata,                                                //                                                                .readdata
		output wire [31:0] otg_hpi_cs_s1_writedata,                                               //                                                                .writedata
		output wire        otg_hpi_cs_s1_chipselect,                                              //                                                                .chipselect
		output wire [1:0]  otg_hpi_data_s1_address,                                               //                                                 otg_hpi_data_s1.address
		output wire        otg_hpi_data_s1_write,                                                 //                                                                .write
		input  wire [31:0] otg_hpi_data_s1_readdata,                                              //                                                                .readdata
		output wire [31:0] otg_hpi_data_s1_writedata,                                             //                                                                .writedata
		output wire        otg_hpi_data_s1_chipselect,                                            //                                                                .chipselect
		output wire [1:0]  otg_hpi_r_s1_address,                                                  //                                                    otg_hpi_r_s1.address
		output wire        otg_hpi_r_s1_write,                                                    //                                                                .write
		input  wire [31:0] otg_hpi_r_s1_readdata,                                                 //                                                                .readdata
		output wire [31:0] otg_hpi_r_s1_writedata,                                                //                                                                .writedata
		output wire        otg_hpi_r_s1_chipselect,                                               //                                                                .chipselect
		output wire [1:0]  otg_hpi_reset_s1_address,                                              //                                                otg_hpi_reset_s1.address
		output wire        otg_hpi_reset_s1_write,                                                //                                                                .write
		input  wire [31:0] otg_hpi_reset_s1_readdata,                                             //                                                                .readdata
		output wire [31:0] otg_hpi_reset_s1_writedata,                                            //                                                                .writedata
		output wire        otg_hpi_reset_s1_chipselect,                                           //                                                                .chipselect
		output wire [1:0]  otg_hpi_w_s1_address,                                                  //                                                    otg_hpi_w_s1.address
		output wire        otg_hpi_w_s1_write,                                                    //                                                                .write
		input  wire [31:0] otg_hpi_w_s1_readdata,                                                 //                                                                .readdata
		output wire [31:0] otg_hpi_w_s1_writedata,                                                //                                                                .writedata
		output wire        otg_hpi_w_s1_chipselect,                                               //                                                                .chipselect
		output wire [1:0]  player1Score0_s1_address,                                              //                                                player1Score0_s1.address
		output wire        player1Score0_s1_write,                                                //                                                                .write
		input  wire [31:0] player1Score0_s1_readdata,                                             //                                                                .readdata
		output wire [31:0] player1Score0_s1_writedata,                                            //                                                                .writedata
		output wire        player1Score0_s1_chipselect,                                           //                                                                .chipselect
		output wire [1:0]  player1Score1_s1_address,                                              //                                                player1Score1_s1.address
		output wire        player1Score1_s1_write,                                                //                                                                .write
		input  wire [31:0] player1Score1_s1_readdata,                                             //                                                                .readdata
		output wire [31:0] player1Score1_s1_writedata,                                            //                                                                .writedata
		output wire        player1Score1_s1_chipselect,                                           //                                                                .chipselect
		output wire [1:0]  player2Score0_s1_address,                                              //                                                player2Score0_s1.address
		output wire        player2Score0_s1_write,                                                //                                                                .write
		input  wire [31:0] player2Score0_s1_readdata,                                             //                                                                .readdata
		output wire [31:0] player2Score0_s1_writedata,                                            //                                                                .writedata
		output wire        player2Score0_s1_chipselect,                                           //                                                                .chipselect
		output wire [1:0]  player2Score1_s1_address,                                              //                                                player2Score1_s1.address
		output wire        player2Score1_s1_write,                                                //                                                                .write
		input  wire [31:0] player2Score1_s1_readdata,                                             //                                                                .readdata
		output wire [31:0] player2Score1_s1_writedata,                                            //                                                                .writedata
		output wire        player2Score1_s1_chipselect,                                           //                                                                .chipselect
		output wire [24:0] sdram_s1_address,                                                      //                                                        sdram_s1.address
		output wire        sdram_s1_write,                                                        //                                                                .write
		output wire        sdram_s1_read,                                                         //                                                                .read
		input  wire [31:0] sdram_s1_readdata,                                                     //                                                                .readdata
		output wire [31:0] sdram_s1_writedata,                                                    //                                                                .writedata
		output wire [3:0]  sdram_s1_byteenable,                                                   //                                                                .byteenable
		input  wire        sdram_s1_readdatavalid,                                                //                                                                .readdatavalid
		input  wire        sdram_s1_waitrequest,                                                  //                                                                .waitrequest
		output wire        sdram_s1_chipselect,                                                   //                                                                .chipselect
		output wire [1:0]  sdram_pll_audio_pll_pll_slave_address,                                 //                                   sdram_pll_audio_pll_pll_slave.address
		output wire        sdram_pll_audio_pll_pll_slave_write,                                   //                                                                .write
		output wire        sdram_pll_audio_pll_pll_slave_read,                                    //                                                                .read
		input  wire [31:0] sdram_pll_audio_pll_pll_slave_readdata,                                //                                                                .readdata
		output wire [31:0] sdram_pll_audio_pll_pll_slave_writedata,                               //                                                                .writedata
		output wire [0:0]  sysid_qsys_0_control_slave_address,                                    //                                      sysid_qsys_0_control_slave.address
		input  wire [31:0] sysid_qsys_0_control_slave_readdata,                                   //                                                                .readdata
		output wire [2:0]  timer_0_s1_address,                                                    //                                                      timer_0_s1.address
		output wire        timer_0_s1_write,                                                      //                                                                .write
		input  wire [15:0] timer_0_s1_readdata,                                                   //                                                                .readdata
		output wire [15:0] timer_0_s1_writedata,                                                  //                                                                .writedata
		output wire        timer_0_s1_chipselect,                                                 //                                                                .chipselect
		output wire [1:0]  timeScreen0_s1_address,                                                //                                                  timeScreen0_s1.address
		output wire        timeScreen0_s1_write,                                                  //                                                                .write
		input  wire [31:0] timeScreen0_s1_readdata,                                               //                                                                .readdata
		output wire [31:0] timeScreen0_s1_writedata,                                              //                                                                .writedata
		output wire        timeScreen0_s1_chipselect,                                             //                                                                .chipselect
		output wire [1:0]  timeScreen1_s1_address,                                                //                                                  timeScreen1_s1.address
		output wire        timeScreen1_s1_write,                                                  //                                                                .write
		input  wire [31:0] timeScreen1_s1_readdata,                                               //                                                                .readdata
		output wire [31:0] timeScreen1_s1_writedata,                                              //                                                                .writedata
		output wire        timeScreen1_s1_chipselect,                                             //                                                                .chipselect
		output wire [1:0]  timeScreen2_s1_address,                                                //                                                  timeScreen2_s1.address
		output wire        timeScreen2_s1_write,                                                  //                                                                .write
		input  wire [31:0] timeScreen2_s1_readdata,                                               //                                                                .readdata
		output wire [31:0] timeScreen2_s1_writedata,                                              //                                                                .writedata
		output wire        timeScreen2_s1_chipselect                                              //                                                                .chipselect
	);

	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_qsys_0_data_master_agent:av_waitrequest -> nios2_qsys_0_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata;             // nios2_qsys_0_data_master_agent:av_readdata -> nios2_qsys_0_data_master_translator:uav_readdata
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_qsys_0_data_master_translator:uav_debugaccess -> nios2_qsys_0_data_master_agent:av_debugaccess
	wire   [27:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_address;              // nios2_qsys_0_data_master_translator:uav_address -> nios2_qsys_0_data_master_agent:av_address
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_read;                 // nios2_qsys_0_data_master_translator:uav_read -> nios2_qsys_0_data_master_agent:av_read
	wire    [3:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_qsys_0_data_master_translator:uav_byteenable -> nios2_qsys_0_data_master_agent:av_byteenable
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_qsys_0_data_master_agent:av_readdatavalid -> nios2_qsys_0_data_master_translator:uav_readdatavalid
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock;                 // nios2_qsys_0_data_master_translator:uav_lock -> nios2_qsys_0_data_master_agent:av_lock
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_write;                // nios2_qsys_0_data_master_translator:uav_write -> nios2_qsys_0_data_master_agent:av_write
	wire   [31:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata;            // nios2_qsys_0_data_master_translator:uav_writedata -> nios2_qsys_0_data_master_agent:av_writedata
	wire    [2:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_qsys_0_data_master_translator:uav_burstcount -> nios2_qsys_0_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> nios2_qsys_0_data_master_agent:rp_valid
	wire  [107:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> nios2_qsys_0_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                  // nios2_qsys_0_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [27:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> nios2_qsys_0_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> nios2_qsys_0_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> nios2_qsys_0_data_master_agent:rp_endofpacket
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_qsys_0_instruction_master_agent:av_waitrequest -> nios2_qsys_0_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_qsys_0_instruction_master_agent:av_readdata -> nios2_qsys_0_instruction_master_translator:uav_readdata
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_qsys_0_instruction_master_translator:uav_debugaccess -> nios2_qsys_0_instruction_master_agent:av_debugaccess
	wire   [27:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address;       // nios2_qsys_0_instruction_master_translator:uav_address -> nios2_qsys_0_instruction_master_agent:av_address
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read;          // nios2_qsys_0_instruction_master_translator:uav_read -> nios2_qsys_0_instruction_master_agent:av_read
	wire    [3:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_qsys_0_instruction_master_translator:uav_byteenable -> nios2_qsys_0_instruction_master_agent:av_byteenable
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_qsys_0_instruction_master_agent:av_readdatavalid -> nios2_qsys_0_instruction_master_translator:uav_readdatavalid
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_qsys_0_instruction_master_translator:uav_lock -> nios2_qsys_0_instruction_master_agent:av_lock
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write;         // nios2_qsys_0_instruction_master_translator:uav_write -> nios2_qsys_0_instruction_master_agent:av_write
	wire   [31:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_qsys_0_instruction_master_translator:uav_writedata -> nios2_qsys_0_instruction_master_agent:av_writedata
	wire    [2:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_qsys_0_instruction_master_translator:uav_burstcount -> nios2_qsys_0_instruction_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> nios2_qsys_0_instruction_master_agent:rp_valid
	wire  [107:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> nios2_qsys_0_instruction_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                              // nios2_qsys_0_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [27:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> nios2_qsys_0_instruction_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> nios2_qsys_0_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> nios2_qsys_0_instruction_master_agent:rp_endofpacket
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                    // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                                 // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                                 // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [27:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                     // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                               // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                   // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                       // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                                // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [108:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                                // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                          // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [108:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [107:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                  // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [27:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                                       // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire          sysid_qsys_0_control_slave_agent_m0_waitrequest;                                    // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_0_control_slave_agent_m0_debugaccess;                                    // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire   [27:0] sysid_qsys_0_control_slave_agent_m0_address;                                        // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                                     // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire          sysid_qsys_0_control_slave_agent_m0_read;                                           // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire          sysid_qsys_0_control_slave_agent_m0_readdatavalid;                                  // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_0_control_slave_agent_m0_lock;                                           // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                                      // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire          sysid_qsys_0_control_slave_agent_m0_write;                                          // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                                     // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire          sysid_qsys_0_control_slave_agent_rf_source_valid;                                   // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire  [108:0] sysid_qsys_0_control_slave_agent_rf_source_data;                                    // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rf_source_ready;                                   // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire          sysid_qsys_0_control_slave_agent_rf_source_startofpacket;                           // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rf_source_endofpacket;                             // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;                                // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire  [108:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;                                 // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;                                // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;                        // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;                          // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire  [107:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                              // sysid_qsys_0_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [27:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire   [31:0] nios2_qsys_0_debug_mem_slave_agent_m0_readdata;                                     // nios2_qsys_0_debug_mem_slave_translator:uav_readdata -> nios2_qsys_0_debug_mem_slave_agent:m0_readdata
	wire          nios2_qsys_0_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_qsys_0_debug_mem_slave_translator:uav_waitrequest -> nios2_qsys_0_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_qsys_0_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_qsys_0_debug_mem_slave_agent:m0_debugaccess -> nios2_qsys_0_debug_mem_slave_translator:uav_debugaccess
	wire   [27:0] nios2_qsys_0_debug_mem_slave_agent_m0_address;                                      // nios2_qsys_0_debug_mem_slave_agent:m0_address -> nios2_qsys_0_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_qsys_0_debug_mem_slave_agent_m0_byteenable;                                   // nios2_qsys_0_debug_mem_slave_agent:m0_byteenable -> nios2_qsys_0_debug_mem_slave_translator:uav_byteenable
	wire          nios2_qsys_0_debug_mem_slave_agent_m0_read;                                         // nios2_qsys_0_debug_mem_slave_agent:m0_read -> nios2_qsys_0_debug_mem_slave_translator:uav_read
	wire          nios2_qsys_0_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_qsys_0_debug_mem_slave_translator:uav_readdatavalid -> nios2_qsys_0_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_qsys_0_debug_mem_slave_agent_m0_lock;                                         // nios2_qsys_0_debug_mem_slave_agent:m0_lock -> nios2_qsys_0_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_qsys_0_debug_mem_slave_agent_m0_writedata;                                    // nios2_qsys_0_debug_mem_slave_agent:m0_writedata -> nios2_qsys_0_debug_mem_slave_translator:uav_writedata
	wire          nios2_qsys_0_debug_mem_slave_agent_m0_write;                                        // nios2_qsys_0_debug_mem_slave_agent:m0_write -> nios2_qsys_0_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_qsys_0_debug_mem_slave_agent_m0_burstcount;                                   // nios2_qsys_0_debug_mem_slave_agent:m0_burstcount -> nios2_qsys_0_debug_mem_slave_translator:uav_burstcount
	wire          nios2_qsys_0_debug_mem_slave_agent_rf_source_valid;                                 // nios2_qsys_0_debug_mem_slave_agent:rf_source_valid -> nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [108:0] nios2_qsys_0_debug_mem_slave_agent_rf_source_data;                                  // nios2_qsys_0_debug_mem_slave_agent:rf_source_data -> nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_qsys_0_debug_mem_slave_agent_rf_source_ready;                                 // nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_qsys_0_debug_mem_slave_agent:rf_source_ready
	wire          nios2_qsys_0_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_qsys_0_debug_mem_slave_agent:rf_source_startofpacket -> nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_qsys_0_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_qsys_0_debug_mem_slave_agent:rf_source_endofpacket -> nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_qsys_0_debug_mem_slave_agent:rf_sink_valid
	wire  [108:0] nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_qsys_0_debug_mem_slave_agent:rf_sink_data
	wire          nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_qsys_0_debug_mem_slave_agent:rf_sink_ready -> nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_qsys_0_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_qsys_0_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> nios2_qsys_0_debug_mem_slave_agent:cp_valid
	wire  [107:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> nios2_qsys_0_debug_mem_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                              // nios2_qsys_0_debug_mem_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [27:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> nios2_qsys_0_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> nios2_qsys_0_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> nios2_qsys_0_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] sdram_pll_audio_pll_pll_slave_agent_m0_readdata;                                    // sdram_pll_audio_pll_pll_slave_translator:uav_readdata -> sdram_pll_audio_pll_pll_slave_agent:m0_readdata
	wire          sdram_pll_audio_pll_pll_slave_agent_m0_waitrequest;                                 // sdram_pll_audio_pll_pll_slave_translator:uav_waitrequest -> sdram_pll_audio_pll_pll_slave_agent:m0_waitrequest
	wire          sdram_pll_audio_pll_pll_slave_agent_m0_debugaccess;                                 // sdram_pll_audio_pll_pll_slave_agent:m0_debugaccess -> sdram_pll_audio_pll_pll_slave_translator:uav_debugaccess
	wire   [27:0] sdram_pll_audio_pll_pll_slave_agent_m0_address;                                     // sdram_pll_audio_pll_pll_slave_agent:m0_address -> sdram_pll_audio_pll_pll_slave_translator:uav_address
	wire    [3:0] sdram_pll_audio_pll_pll_slave_agent_m0_byteenable;                                  // sdram_pll_audio_pll_pll_slave_agent:m0_byteenable -> sdram_pll_audio_pll_pll_slave_translator:uav_byteenable
	wire          sdram_pll_audio_pll_pll_slave_agent_m0_read;                                        // sdram_pll_audio_pll_pll_slave_agent:m0_read -> sdram_pll_audio_pll_pll_slave_translator:uav_read
	wire          sdram_pll_audio_pll_pll_slave_agent_m0_readdatavalid;                               // sdram_pll_audio_pll_pll_slave_translator:uav_readdatavalid -> sdram_pll_audio_pll_pll_slave_agent:m0_readdatavalid
	wire          sdram_pll_audio_pll_pll_slave_agent_m0_lock;                                        // sdram_pll_audio_pll_pll_slave_agent:m0_lock -> sdram_pll_audio_pll_pll_slave_translator:uav_lock
	wire   [31:0] sdram_pll_audio_pll_pll_slave_agent_m0_writedata;                                   // sdram_pll_audio_pll_pll_slave_agent:m0_writedata -> sdram_pll_audio_pll_pll_slave_translator:uav_writedata
	wire          sdram_pll_audio_pll_pll_slave_agent_m0_write;                                       // sdram_pll_audio_pll_pll_slave_agent:m0_write -> sdram_pll_audio_pll_pll_slave_translator:uav_write
	wire    [2:0] sdram_pll_audio_pll_pll_slave_agent_m0_burstcount;                                  // sdram_pll_audio_pll_pll_slave_agent:m0_burstcount -> sdram_pll_audio_pll_pll_slave_translator:uav_burstcount
	wire          sdram_pll_audio_pll_pll_slave_agent_rf_source_valid;                                // sdram_pll_audio_pll_pll_slave_agent:rf_source_valid -> sdram_pll_audio_pll_pll_slave_agent_rsp_fifo:in_valid
	wire  [108:0] sdram_pll_audio_pll_pll_slave_agent_rf_source_data;                                 // sdram_pll_audio_pll_pll_slave_agent:rf_source_data -> sdram_pll_audio_pll_pll_slave_agent_rsp_fifo:in_data
	wire          sdram_pll_audio_pll_pll_slave_agent_rf_source_ready;                                // sdram_pll_audio_pll_pll_slave_agent_rsp_fifo:in_ready -> sdram_pll_audio_pll_pll_slave_agent:rf_source_ready
	wire          sdram_pll_audio_pll_pll_slave_agent_rf_source_startofpacket;                        // sdram_pll_audio_pll_pll_slave_agent:rf_source_startofpacket -> sdram_pll_audio_pll_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          sdram_pll_audio_pll_pll_slave_agent_rf_source_endofpacket;                          // sdram_pll_audio_pll_pll_slave_agent:rf_source_endofpacket -> sdram_pll_audio_pll_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          sdram_pll_audio_pll_pll_slave_agent_rsp_fifo_out_valid;                             // sdram_pll_audio_pll_pll_slave_agent_rsp_fifo:out_valid -> sdram_pll_audio_pll_pll_slave_agent:rf_sink_valid
	wire  [108:0] sdram_pll_audio_pll_pll_slave_agent_rsp_fifo_out_data;                              // sdram_pll_audio_pll_pll_slave_agent_rsp_fifo:out_data -> sdram_pll_audio_pll_pll_slave_agent:rf_sink_data
	wire          sdram_pll_audio_pll_pll_slave_agent_rsp_fifo_out_ready;                             // sdram_pll_audio_pll_pll_slave_agent:rf_sink_ready -> sdram_pll_audio_pll_pll_slave_agent_rsp_fifo:out_ready
	wire          sdram_pll_audio_pll_pll_slave_agent_rsp_fifo_out_startofpacket;                     // sdram_pll_audio_pll_pll_slave_agent_rsp_fifo:out_startofpacket -> sdram_pll_audio_pll_pll_slave_agent:rf_sink_startofpacket
	wire          sdram_pll_audio_pll_pll_slave_agent_rsp_fifo_out_endofpacket;                       // sdram_pll_audio_pll_pll_slave_agent_rsp_fifo:out_endofpacket -> sdram_pll_audio_pll_pll_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> sdram_pll_audio_pll_pll_slave_agent:cp_valid
	wire  [107:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> sdram_pll_audio_pll_pll_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                              // sdram_pll_audio_pll_pll_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [27:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> sdram_pll_audio_pll_pll_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> sdram_pll_audio_pll_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> sdram_pll_audio_pll_pll_slave_agent:cp_endofpacket
	wire   [31:0] sdram_s1_agent_m0_readdata;                                                         // sdram_s1_translator:uav_readdata -> sdram_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                      // sdram_s1_translator:uav_waitrequest -> sdram_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                      // sdram_s1_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire   [27:0] sdram_s1_agent_m0_address;                                                          // sdram_s1_agent:m0_address -> sdram_s1_translator:uav_address
	wire    [3:0] sdram_s1_agent_m0_byteenable;                                                       // sdram_s1_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                             // sdram_s1_agent:m0_read -> sdram_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                    // sdram_s1_translator:uav_readdatavalid -> sdram_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                             // sdram_s1_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire   [31:0] sdram_s1_agent_m0_writedata;                                                        // sdram_s1_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                            // sdram_s1_agent:m0_write -> sdram_s1_translator:uav_write
	wire    [2:0] sdram_s1_agent_m0_burstcount;                                                       // sdram_s1_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                     // sdram_s1_agent:rf_source_valid -> sdram_s1_agent_rsp_fifo:in_valid
	wire  [108:0] sdram_s1_agent_rf_source_data;                                                      // sdram_s1_agent:rf_source_data -> sdram_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                     // sdram_s1_agent_rsp_fifo:in_ready -> sdram_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                             // sdram_s1_agent:rf_source_startofpacket -> sdram_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                               // sdram_s1_agent:rf_source_endofpacket -> sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                  // sdram_s1_agent_rsp_fifo:out_valid -> sdram_s1_agent:rf_sink_valid
	wire  [108:0] sdram_s1_agent_rsp_fifo_out_data;                                                   // sdram_s1_agent_rsp_fifo:out_data -> sdram_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                  // sdram_s1_agent:rf_sink_ready -> sdram_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                          // sdram_s1_agent_rsp_fifo:out_startofpacket -> sdram_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                            // sdram_s1_agent_rsp_fifo:out_endofpacket -> sdram_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                                // sdram_s1_agent:rdata_fifo_src_valid -> sdram_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sdram_s1_agent_rdata_fifo_src_data;                                                 // sdram_s1_agent:rdata_fifo_src_data -> sdram_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                                // sdram_s1_agent_rdata_fifo:in_ready -> sdram_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> sdram_s1_agent:cp_valid
	wire  [107:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> sdram_s1_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                              // sdram_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [27:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> sdram_s1_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> sdram_s1_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> sdram_s1_agent:cp_endofpacket
	wire   [31:0] timer_0_s1_agent_m0_readdata;                                                       // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire          timer_0_s1_agent_m0_waitrequest;                                                    // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire          timer_0_s1_agent_m0_debugaccess;                                                    // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [27:0] timer_0_s1_agent_m0_address;                                                        // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire    [3:0] timer_0_s1_agent_m0_byteenable;                                                     // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire          timer_0_s1_agent_m0_read;                                                           // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire          timer_0_s1_agent_m0_readdatavalid;                                                  // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire          timer_0_s1_agent_m0_lock;                                                           // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire   [31:0] timer_0_s1_agent_m0_writedata;                                                      // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire          timer_0_s1_agent_m0_write;                                                          // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire    [2:0] timer_0_s1_agent_m0_burstcount;                                                     // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire          timer_0_s1_agent_rf_source_valid;                                                   // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [108:0] timer_0_s1_agent_rf_source_data;                                                    // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire          timer_0_s1_agent_rf_source_ready;                                                   // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire          timer_0_s1_agent_rf_source_startofpacket;                                           // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_0_s1_agent_rf_source_endofpacket;                                             // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_valid;                                                // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [108:0] timer_0_s1_agent_rsp_fifo_out_data;                                                 // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire          timer_0_s1_agent_rsp_fifo_out_ready;                                                // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire          timer_0_s1_agent_rsp_fifo_out_startofpacket;                                        // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_endofpacket;                                          // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> timer_0_s1_agent:cp_valid
	wire  [107:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> timer_0_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                              // timer_0_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [27:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> timer_0_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire   [31:0] avalon_blitter_0_s1_agent_m0_readdata;                                              // avalon_blitter_0_s1_translator:uav_readdata -> avalon_blitter_0_s1_agent:m0_readdata
	wire          avalon_blitter_0_s1_agent_m0_waitrequest;                                           // avalon_blitter_0_s1_translator:uav_waitrequest -> avalon_blitter_0_s1_agent:m0_waitrequest
	wire          avalon_blitter_0_s1_agent_m0_debugaccess;                                           // avalon_blitter_0_s1_agent:m0_debugaccess -> avalon_blitter_0_s1_translator:uav_debugaccess
	wire   [27:0] avalon_blitter_0_s1_agent_m0_address;                                               // avalon_blitter_0_s1_agent:m0_address -> avalon_blitter_0_s1_translator:uav_address
	wire    [3:0] avalon_blitter_0_s1_agent_m0_byteenable;                                            // avalon_blitter_0_s1_agent:m0_byteenable -> avalon_blitter_0_s1_translator:uav_byteenable
	wire          avalon_blitter_0_s1_agent_m0_read;                                                  // avalon_blitter_0_s1_agent:m0_read -> avalon_blitter_0_s1_translator:uav_read
	wire          avalon_blitter_0_s1_agent_m0_readdatavalid;                                         // avalon_blitter_0_s1_translator:uav_readdatavalid -> avalon_blitter_0_s1_agent:m0_readdatavalid
	wire          avalon_blitter_0_s1_agent_m0_lock;                                                  // avalon_blitter_0_s1_agent:m0_lock -> avalon_blitter_0_s1_translator:uav_lock
	wire   [31:0] avalon_blitter_0_s1_agent_m0_writedata;                                             // avalon_blitter_0_s1_agent:m0_writedata -> avalon_blitter_0_s1_translator:uav_writedata
	wire          avalon_blitter_0_s1_agent_m0_write;                                                 // avalon_blitter_0_s1_agent:m0_write -> avalon_blitter_0_s1_translator:uav_write
	wire    [2:0] avalon_blitter_0_s1_agent_m0_burstcount;                                            // avalon_blitter_0_s1_agent:m0_burstcount -> avalon_blitter_0_s1_translator:uav_burstcount
	wire          avalon_blitter_0_s1_agent_rf_source_valid;                                          // avalon_blitter_0_s1_agent:rf_source_valid -> avalon_blitter_0_s1_agent_rsp_fifo:in_valid
	wire  [108:0] avalon_blitter_0_s1_agent_rf_source_data;                                           // avalon_blitter_0_s1_agent:rf_source_data -> avalon_blitter_0_s1_agent_rsp_fifo:in_data
	wire          avalon_blitter_0_s1_agent_rf_source_ready;                                          // avalon_blitter_0_s1_agent_rsp_fifo:in_ready -> avalon_blitter_0_s1_agent:rf_source_ready
	wire          avalon_blitter_0_s1_agent_rf_source_startofpacket;                                  // avalon_blitter_0_s1_agent:rf_source_startofpacket -> avalon_blitter_0_s1_agent_rsp_fifo:in_startofpacket
	wire          avalon_blitter_0_s1_agent_rf_source_endofpacket;                                    // avalon_blitter_0_s1_agent:rf_source_endofpacket -> avalon_blitter_0_s1_agent_rsp_fifo:in_endofpacket
	wire          avalon_blitter_0_s1_agent_rsp_fifo_out_valid;                                       // avalon_blitter_0_s1_agent_rsp_fifo:out_valid -> avalon_blitter_0_s1_agent:rf_sink_valid
	wire  [108:0] avalon_blitter_0_s1_agent_rsp_fifo_out_data;                                        // avalon_blitter_0_s1_agent_rsp_fifo:out_data -> avalon_blitter_0_s1_agent:rf_sink_data
	wire          avalon_blitter_0_s1_agent_rsp_fifo_out_ready;                                       // avalon_blitter_0_s1_agent:rf_sink_ready -> avalon_blitter_0_s1_agent_rsp_fifo:out_ready
	wire          avalon_blitter_0_s1_agent_rsp_fifo_out_startofpacket;                               // avalon_blitter_0_s1_agent_rsp_fifo:out_startofpacket -> avalon_blitter_0_s1_agent:rf_sink_startofpacket
	wire          avalon_blitter_0_s1_agent_rsp_fifo_out_endofpacket;                                 // avalon_blitter_0_s1_agent_rsp_fifo:out_endofpacket -> avalon_blitter_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> avalon_blitter_0_s1_agent:cp_valid
	wire  [107:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> avalon_blitter_0_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                              // avalon_blitter_0_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [27:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> avalon_blitter_0_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> avalon_blitter_0_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> avalon_blitter_0_s1_agent:cp_endofpacket
	wire   [31:0] otg_hpi_address_s1_agent_m0_readdata;                                               // otg_hpi_address_s1_translator:uav_readdata -> otg_hpi_address_s1_agent:m0_readdata
	wire          otg_hpi_address_s1_agent_m0_waitrequest;                                            // otg_hpi_address_s1_translator:uav_waitrequest -> otg_hpi_address_s1_agent:m0_waitrequest
	wire          otg_hpi_address_s1_agent_m0_debugaccess;                                            // otg_hpi_address_s1_agent:m0_debugaccess -> otg_hpi_address_s1_translator:uav_debugaccess
	wire   [27:0] otg_hpi_address_s1_agent_m0_address;                                                // otg_hpi_address_s1_agent:m0_address -> otg_hpi_address_s1_translator:uav_address
	wire    [3:0] otg_hpi_address_s1_agent_m0_byteenable;                                             // otg_hpi_address_s1_agent:m0_byteenable -> otg_hpi_address_s1_translator:uav_byteenable
	wire          otg_hpi_address_s1_agent_m0_read;                                                   // otg_hpi_address_s1_agent:m0_read -> otg_hpi_address_s1_translator:uav_read
	wire          otg_hpi_address_s1_agent_m0_readdatavalid;                                          // otg_hpi_address_s1_translator:uav_readdatavalid -> otg_hpi_address_s1_agent:m0_readdatavalid
	wire          otg_hpi_address_s1_agent_m0_lock;                                                   // otg_hpi_address_s1_agent:m0_lock -> otg_hpi_address_s1_translator:uav_lock
	wire   [31:0] otg_hpi_address_s1_agent_m0_writedata;                                              // otg_hpi_address_s1_agent:m0_writedata -> otg_hpi_address_s1_translator:uav_writedata
	wire          otg_hpi_address_s1_agent_m0_write;                                                  // otg_hpi_address_s1_agent:m0_write -> otg_hpi_address_s1_translator:uav_write
	wire    [2:0] otg_hpi_address_s1_agent_m0_burstcount;                                             // otg_hpi_address_s1_agent:m0_burstcount -> otg_hpi_address_s1_translator:uav_burstcount
	wire          otg_hpi_address_s1_agent_rf_source_valid;                                           // otg_hpi_address_s1_agent:rf_source_valid -> otg_hpi_address_s1_agent_rsp_fifo:in_valid
	wire  [108:0] otg_hpi_address_s1_agent_rf_source_data;                                            // otg_hpi_address_s1_agent:rf_source_data -> otg_hpi_address_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_address_s1_agent_rf_source_ready;                                           // otg_hpi_address_s1_agent_rsp_fifo:in_ready -> otg_hpi_address_s1_agent:rf_source_ready
	wire          otg_hpi_address_s1_agent_rf_source_startofpacket;                                   // otg_hpi_address_s1_agent:rf_source_startofpacket -> otg_hpi_address_s1_agent_rsp_fifo:in_startofpacket
	wire          otg_hpi_address_s1_agent_rf_source_endofpacket;                                     // otg_hpi_address_s1_agent:rf_source_endofpacket -> otg_hpi_address_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_address_s1_agent_rsp_fifo_out_valid;                                        // otg_hpi_address_s1_agent_rsp_fifo:out_valid -> otg_hpi_address_s1_agent:rf_sink_valid
	wire  [108:0] otg_hpi_address_s1_agent_rsp_fifo_out_data;                                         // otg_hpi_address_s1_agent_rsp_fifo:out_data -> otg_hpi_address_s1_agent:rf_sink_data
	wire          otg_hpi_address_s1_agent_rsp_fifo_out_ready;                                        // otg_hpi_address_s1_agent:rf_sink_ready -> otg_hpi_address_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_address_s1_agent_rsp_fifo_out_startofpacket;                                // otg_hpi_address_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_address_s1_agent:rf_sink_startofpacket
	wire          otg_hpi_address_s1_agent_rsp_fifo_out_endofpacket;                                  // otg_hpi_address_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_address_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> otg_hpi_address_s1_agent:cp_valid
	wire  [107:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> otg_hpi_address_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                              // otg_hpi_address_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [27:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> otg_hpi_address_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> otg_hpi_address_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> otg_hpi_address_s1_agent:cp_endofpacket
	wire   [31:0] otg_hpi_data_s1_agent_m0_readdata;                                                  // otg_hpi_data_s1_translator:uav_readdata -> otg_hpi_data_s1_agent:m0_readdata
	wire          otg_hpi_data_s1_agent_m0_waitrequest;                                               // otg_hpi_data_s1_translator:uav_waitrequest -> otg_hpi_data_s1_agent:m0_waitrequest
	wire          otg_hpi_data_s1_agent_m0_debugaccess;                                               // otg_hpi_data_s1_agent:m0_debugaccess -> otg_hpi_data_s1_translator:uav_debugaccess
	wire   [27:0] otg_hpi_data_s1_agent_m0_address;                                                   // otg_hpi_data_s1_agent:m0_address -> otg_hpi_data_s1_translator:uav_address
	wire    [3:0] otg_hpi_data_s1_agent_m0_byteenable;                                                // otg_hpi_data_s1_agent:m0_byteenable -> otg_hpi_data_s1_translator:uav_byteenable
	wire          otg_hpi_data_s1_agent_m0_read;                                                      // otg_hpi_data_s1_agent:m0_read -> otg_hpi_data_s1_translator:uav_read
	wire          otg_hpi_data_s1_agent_m0_readdatavalid;                                             // otg_hpi_data_s1_translator:uav_readdatavalid -> otg_hpi_data_s1_agent:m0_readdatavalid
	wire          otg_hpi_data_s1_agent_m0_lock;                                                      // otg_hpi_data_s1_agent:m0_lock -> otg_hpi_data_s1_translator:uav_lock
	wire   [31:0] otg_hpi_data_s1_agent_m0_writedata;                                                 // otg_hpi_data_s1_agent:m0_writedata -> otg_hpi_data_s1_translator:uav_writedata
	wire          otg_hpi_data_s1_agent_m0_write;                                                     // otg_hpi_data_s1_agent:m0_write -> otg_hpi_data_s1_translator:uav_write
	wire    [2:0] otg_hpi_data_s1_agent_m0_burstcount;                                                // otg_hpi_data_s1_agent:m0_burstcount -> otg_hpi_data_s1_translator:uav_burstcount
	wire          otg_hpi_data_s1_agent_rf_source_valid;                                              // otg_hpi_data_s1_agent:rf_source_valid -> otg_hpi_data_s1_agent_rsp_fifo:in_valid
	wire  [108:0] otg_hpi_data_s1_agent_rf_source_data;                                               // otg_hpi_data_s1_agent:rf_source_data -> otg_hpi_data_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_data_s1_agent_rf_source_ready;                                              // otg_hpi_data_s1_agent_rsp_fifo:in_ready -> otg_hpi_data_s1_agent:rf_source_ready
	wire          otg_hpi_data_s1_agent_rf_source_startofpacket;                                      // otg_hpi_data_s1_agent:rf_source_startofpacket -> otg_hpi_data_s1_agent_rsp_fifo:in_startofpacket
	wire          otg_hpi_data_s1_agent_rf_source_endofpacket;                                        // otg_hpi_data_s1_agent:rf_source_endofpacket -> otg_hpi_data_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_data_s1_agent_rsp_fifo_out_valid;                                           // otg_hpi_data_s1_agent_rsp_fifo:out_valid -> otg_hpi_data_s1_agent:rf_sink_valid
	wire  [108:0] otg_hpi_data_s1_agent_rsp_fifo_out_data;                                            // otg_hpi_data_s1_agent_rsp_fifo:out_data -> otg_hpi_data_s1_agent:rf_sink_data
	wire          otg_hpi_data_s1_agent_rsp_fifo_out_ready;                                           // otg_hpi_data_s1_agent:rf_sink_ready -> otg_hpi_data_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_data_s1_agent_rsp_fifo_out_startofpacket;                                   // otg_hpi_data_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_data_s1_agent:rf_sink_startofpacket
	wire          otg_hpi_data_s1_agent_rsp_fifo_out_endofpacket;                                     // otg_hpi_data_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_data_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                              // cmd_mux_008:src_valid -> otg_hpi_data_s1_agent:cp_valid
	wire  [107:0] cmd_mux_008_src_data;                                                               // cmd_mux_008:src_data -> otg_hpi_data_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                              // otg_hpi_data_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [27:0] cmd_mux_008_src_channel;                                                            // cmd_mux_008:src_channel -> otg_hpi_data_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                      // cmd_mux_008:src_startofpacket -> otg_hpi_data_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                        // cmd_mux_008:src_endofpacket -> otg_hpi_data_s1_agent:cp_endofpacket
	wire   [31:0] otg_hpi_r_s1_agent_m0_readdata;                                                     // otg_hpi_r_s1_translator:uav_readdata -> otg_hpi_r_s1_agent:m0_readdata
	wire          otg_hpi_r_s1_agent_m0_waitrequest;                                                  // otg_hpi_r_s1_translator:uav_waitrequest -> otg_hpi_r_s1_agent:m0_waitrequest
	wire          otg_hpi_r_s1_agent_m0_debugaccess;                                                  // otg_hpi_r_s1_agent:m0_debugaccess -> otg_hpi_r_s1_translator:uav_debugaccess
	wire   [27:0] otg_hpi_r_s1_agent_m0_address;                                                      // otg_hpi_r_s1_agent:m0_address -> otg_hpi_r_s1_translator:uav_address
	wire    [3:0] otg_hpi_r_s1_agent_m0_byteenable;                                                   // otg_hpi_r_s1_agent:m0_byteenable -> otg_hpi_r_s1_translator:uav_byteenable
	wire          otg_hpi_r_s1_agent_m0_read;                                                         // otg_hpi_r_s1_agent:m0_read -> otg_hpi_r_s1_translator:uav_read
	wire          otg_hpi_r_s1_agent_m0_readdatavalid;                                                // otg_hpi_r_s1_translator:uav_readdatavalid -> otg_hpi_r_s1_agent:m0_readdatavalid
	wire          otg_hpi_r_s1_agent_m0_lock;                                                         // otg_hpi_r_s1_agent:m0_lock -> otg_hpi_r_s1_translator:uav_lock
	wire   [31:0] otg_hpi_r_s1_agent_m0_writedata;                                                    // otg_hpi_r_s1_agent:m0_writedata -> otg_hpi_r_s1_translator:uav_writedata
	wire          otg_hpi_r_s1_agent_m0_write;                                                        // otg_hpi_r_s1_agent:m0_write -> otg_hpi_r_s1_translator:uav_write
	wire    [2:0] otg_hpi_r_s1_agent_m0_burstcount;                                                   // otg_hpi_r_s1_agent:m0_burstcount -> otg_hpi_r_s1_translator:uav_burstcount
	wire          otg_hpi_r_s1_agent_rf_source_valid;                                                 // otg_hpi_r_s1_agent:rf_source_valid -> otg_hpi_r_s1_agent_rsp_fifo:in_valid
	wire  [108:0] otg_hpi_r_s1_agent_rf_source_data;                                                  // otg_hpi_r_s1_agent:rf_source_data -> otg_hpi_r_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_r_s1_agent_rf_source_ready;                                                 // otg_hpi_r_s1_agent_rsp_fifo:in_ready -> otg_hpi_r_s1_agent:rf_source_ready
	wire          otg_hpi_r_s1_agent_rf_source_startofpacket;                                         // otg_hpi_r_s1_agent:rf_source_startofpacket -> otg_hpi_r_s1_agent_rsp_fifo:in_startofpacket
	wire          otg_hpi_r_s1_agent_rf_source_endofpacket;                                           // otg_hpi_r_s1_agent:rf_source_endofpacket -> otg_hpi_r_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_r_s1_agent_rsp_fifo_out_valid;                                              // otg_hpi_r_s1_agent_rsp_fifo:out_valid -> otg_hpi_r_s1_agent:rf_sink_valid
	wire  [108:0] otg_hpi_r_s1_agent_rsp_fifo_out_data;                                               // otg_hpi_r_s1_agent_rsp_fifo:out_data -> otg_hpi_r_s1_agent:rf_sink_data
	wire          otg_hpi_r_s1_agent_rsp_fifo_out_ready;                                              // otg_hpi_r_s1_agent:rf_sink_ready -> otg_hpi_r_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_r_s1_agent_rsp_fifo_out_startofpacket;                                      // otg_hpi_r_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_r_s1_agent:rf_sink_startofpacket
	wire          otg_hpi_r_s1_agent_rsp_fifo_out_endofpacket;                                        // otg_hpi_r_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_r_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                              // cmd_mux_009:src_valid -> otg_hpi_r_s1_agent:cp_valid
	wire  [107:0] cmd_mux_009_src_data;                                                               // cmd_mux_009:src_data -> otg_hpi_r_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                              // otg_hpi_r_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [27:0] cmd_mux_009_src_channel;                                                            // cmd_mux_009:src_channel -> otg_hpi_r_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                      // cmd_mux_009:src_startofpacket -> otg_hpi_r_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                        // cmd_mux_009:src_endofpacket -> otg_hpi_r_s1_agent:cp_endofpacket
	wire   [31:0] otg_hpi_w_s1_agent_m0_readdata;                                                     // otg_hpi_w_s1_translator:uav_readdata -> otg_hpi_w_s1_agent:m0_readdata
	wire          otg_hpi_w_s1_agent_m0_waitrequest;                                                  // otg_hpi_w_s1_translator:uav_waitrequest -> otg_hpi_w_s1_agent:m0_waitrequest
	wire          otg_hpi_w_s1_agent_m0_debugaccess;                                                  // otg_hpi_w_s1_agent:m0_debugaccess -> otg_hpi_w_s1_translator:uav_debugaccess
	wire   [27:0] otg_hpi_w_s1_agent_m0_address;                                                      // otg_hpi_w_s1_agent:m0_address -> otg_hpi_w_s1_translator:uav_address
	wire    [3:0] otg_hpi_w_s1_agent_m0_byteenable;                                                   // otg_hpi_w_s1_agent:m0_byteenable -> otg_hpi_w_s1_translator:uav_byteenable
	wire          otg_hpi_w_s1_agent_m0_read;                                                         // otg_hpi_w_s1_agent:m0_read -> otg_hpi_w_s1_translator:uav_read
	wire          otg_hpi_w_s1_agent_m0_readdatavalid;                                                // otg_hpi_w_s1_translator:uav_readdatavalid -> otg_hpi_w_s1_agent:m0_readdatavalid
	wire          otg_hpi_w_s1_agent_m0_lock;                                                         // otg_hpi_w_s1_agent:m0_lock -> otg_hpi_w_s1_translator:uav_lock
	wire   [31:0] otg_hpi_w_s1_agent_m0_writedata;                                                    // otg_hpi_w_s1_agent:m0_writedata -> otg_hpi_w_s1_translator:uav_writedata
	wire          otg_hpi_w_s1_agent_m0_write;                                                        // otg_hpi_w_s1_agent:m0_write -> otg_hpi_w_s1_translator:uav_write
	wire    [2:0] otg_hpi_w_s1_agent_m0_burstcount;                                                   // otg_hpi_w_s1_agent:m0_burstcount -> otg_hpi_w_s1_translator:uav_burstcount
	wire          otg_hpi_w_s1_agent_rf_source_valid;                                                 // otg_hpi_w_s1_agent:rf_source_valid -> otg_hpi_w_s1_agent_rsp_fifo:in_valid
	wire  [108:0] otg_hpi_w_s1_agent_rf_source_data;                                                  // otg_hpi_w_s1_agent:rf_source_data -> otg_hpi_w_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_w_s1_agent_rf_source_ready;                                                 // otg_hpi_w_s1_agent_rsp_fifo:in_ready -> otg_hpi_w_s1_agent:rf_source_ready
	wire          otg_hpi_w_s1_agent_rf_source_startofpacket;                                         // otg_hpi_w_s1_agent:rf_source_startofpacket -> otg_hpi_w_s1_agent_rsp_fifo:in_startofpacket
	wire          otg_hpi_w_s1_agent_rf_source_endofpacket;                                           // otg_hpi_w_s1_agent:rf_source_endofpacket -> otg_hpi_w_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_w_s1_agent_rsp_fifo_out_valid;                                              // otg_hpi_w_s1_agent_rsp_fifo:out_valid -> otg_hpi_w_s1_agent:rf_sink_valid
	wire  [108:0] otg_hpi_w_s1_agent_rsp_fifo_out_data;                                               // otg_hpi_w_s1_agent_rsp_fifo:out_data -> otg_hpi_w_s1_agent:rf_sink_data
	wire          otg_hpi_w_s1_agent_rsp_fifo_out_ready;                                              // otg_hpi_w_s1_agent:rf_sink_ready -> otg_hpi_w_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_w_s1_agent_rsp_fifo_out_startofpacket;                                      // otg_hpi_w_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_w_s1_agent:rf_sink_startofpacket
	wire          otg_hpi_w_s1_agent_rsp_fifo_out_endofpacket;                                        // otg_hpi_w_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_w_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                              // cmd_mux_010:src_valid -> otg_hpi_w_s1_agent:cp_valid
	wire  [107:0] cmd_mux_010_src_data;                                                               // cmd_mux_010:src_data -> otg_hpi_w_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                              // otg_hpi_w_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [27:0] cmd_mux_010_src_channel;                                                            // cmd_mux_010:src_channel -> otg_hpi_w_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                      // cmd_mux_010:src_startofpacket -> otg_hpi_w_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                        // cmd_mux_010:src_endofpacket -> otg_hpi_w_s1_agent:cp_endofpacket
	wire   [31:0] otg_hpi_cs_s1_agent_m0_readdata;                                                    // otg_hpi_cs_s1_translator:uav_readdata -> otg_hpi_cs_s1_agent:m0_readdata
	wire          otg_hpi_cs_s1_agent_m0_waitrequest;                                                 // otg_hpi_cs_s1_translator:uav_waitrequest -> otg_hpi_cs_s1_agent:m0_waitrequest
	wire          otg_hpi_cs_s1_agent_m0_debugaccess;                                                 // otg_hpi_cs_s1_agent:m0_debugaccess -> otg_hpi_cs_s1_translator:uav_debugaccess
	wire   [27:0] otg_hpi_cs_s1_agent_m0_address;                                                     // otg_hpi_cs_s1_agent:m0_address -> otg_hpi_cs_s1_translator:uav_address
	wire    [3:0] otg_hpi_cs_s1_agent_m0_byteenable;                                                  // otg_hpi_cs_s1_agent:m0_byteenable -> otg_hpi_cs_s1_translator:uav_byteenable
	wire          otg_hpi_cs_s1_agent_m0_read;                                                        // otg_hpi_cs_s1_agent:m0_read -> otg_hpi_cs_s1_translator:uav_read
	wire          otg_hpi_cs_s1_agent_m0_readdatavalid;                                               // otg_hpi_cs_s1_translator:uav_readdatavalid -> otg_hpi_cs_s1_agent:m0_readdatavalid
	wire          otg_hpi_cs_s1_agent_m0_lock;                                                        // otg_hpi_cs_s1_agent:m0_lock -> otg_hpi_cs_s1_translator:uav_lock
	wire   [31:0] otg_hpi_cs_s1_agent_m0_writedata;                                                   // otg_hpi_cs_s1_agent:m0_writedata -> otg_hpi_cs_s1_translator:uav_writedata
	wire          otg_hpi_cs_s1_agent_m0_write;                                                       // otg_hpi_cs_s1_agent:m0_write -> otg_hpi_cs_s1_translator:uav_write
	wire    [2:0] otg_hpi_cs_s1_agent_m0_burstcount;                                                  // otg_hpi_cs_s1_agent:m0_burstcount -> otg_hpi_cs_s1_translator:uav_burstcount
	wire          otg_hpi_cs_s1_agent_rf_source_valid;                                                // otg_hpi_cs_s1_agent:rf_source_valid -> otg_hpi_cs_s1_agent_rsp_fifo:in_valid
	wire  [108:0] otg_hpi_cs_s1_agent_rf_source_data;                                                 // otg_hpi_cs_s1_agent:rf_source_data -> otg_hpi_cs_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_cs_s1_agent_rf_source_ready;                                                // otg_hpi_cs_s1_agent_rsp_fifo:in_ready -> otg_hpi_cs_s1_agent:rf_source_ready
	wire          otg_hpi_cs_s1_agent_rf_source_startofpacket;                                        // otg_hpi_cs_s1_agent:rf_source_startofpacket -> otg_hpi_cs_s1_agent_rsp_fifo:in_startofpacket
	wire          otg_hpi_cs_s1_agent_rf_source_endofpacket;                                          // otg_hpi_cs_s1_agent:rf_source_endofpacket -> otg_hpi_cs_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_cs_s1_agent_rsp_fifo_out_valid;                                             // otg_hpi_cs_s1_agent_rsp_fifo:out_valid -> otg_hpi_cs_s1_agent:rf_sink_valid
	wire  [108:0] otg_hpi_cs_s1_agent_rsp_fifo_out_data;                                              // otg_hpi_cs_s1_agent_rsp_fifo:out_data -> otg_hpi_cs_s1_agent:rf_sink_data
	wire          otg_hpi_cs_s1_agent_rsp_fifo_out_ready;                                             // otg_hpi_cs_s1_agent:rf_sink_ready -> otg_hpi_cs_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_cs_s1_agent_rsp_fifo_out_startofpacket;                                     // otg_hpi_cs_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_cs_s1_agent:rf_sink_startofpacket
	wire          otg_hpi_cs_s1_agent_rsp_fifo_out_endofpacket;                                       // otg_hpi_cs_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_cs_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                              // cmd_mux_011:src_valid -> otg_hpi_cs_s1_agent:cp_valid
	wire  [107:0] cmd_mux_011_src_data;                                                               // cmd_mux_011:src_data -> otg_hpi_cs_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                              // otg_hpi_cs_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [27:0] cmd_mux_011_src_channel;                                                            // cmd_mux_011:src_channel -> otg_hpi_cs_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                      // cmd_mux_011:src_startofpacket -> otg_hpi_cs_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                        // cmd_mux_011:src_endofpacket -> otg_hpi_cs_s1_agent:cp_endofpacket
	wire   [31:0] otg_hpi_reset_s1_agent_m0_readdata;                                                 // otg_hpi_reset_s1_translator:uav_readdata -> otg_hpi_reset_s1_agent:m0_readdata
	wire          otg_hpi_reset_s1_agent_m0_waitrequest;                                              // otg_hpi_reset_s1_translator:uav_waitrequest -> otg_hpi_reset_s1_agent:m0_waitrequest
	wire          otg_hpi_reset_s1_agent_m0_debugaccess;                                              // otg_hpi_reset_s1_agent:m0_debugaccess -> otg_hpi_reset_s1_translator:uav_debugaccess
	wire   [27:0] otg_hpi_reset_s1_agent_m0_address;                                                  // otg_hpi_reset_s1_agent:m0_address -> otg_hpi_reset_s1_translator:uav_address
	wire    [3:0] otg_hpi_reset_s1_agent_m0_byteenable;                                               // otg_hpi_reset_s1_agent:m0_byteenable -> otg_hpi_reset_s1_translator:uav_byteenable
	wire          otg_hpi_reset_s1_agent_m0_read;                                                     // otg_hpi_reset_s1_agent:m0_read -> otg_hpi_reset_s1_translator:uav_read
	wire          otg_hpi_reset_s1_agent_m0_readdatavalid;                                            // otg_hpi_reset_s1_translator:uav_readdatavalid -> otg_hpi_reset_s1_agent:m0_readdatavalid
	wire          otg_hpi_reset_s1_agent_m0_lock;                                                     // otg_hpi_reset_s1_agent:m0_lock -> otg_hpi_reset_s1_translator:uav_lock
	wire   [31:0] otg_hpi_reset_s1_agent_m0_writedata;                                                // otg_hpi_reset_s1_agent:m0_writedata -> otg_hpi_reset_s1_translator:uav_writedata
	wire          otg_hpi_reset_s1_agent_m0_write;                                                    // otg_hpi_reset_s1_agent:m0_write -> otg_hpi_reset_s1_translator:uav_write
	wire    [2:0] otg_hpi_reset_s1_agent_m0_burstcount;                                               // otg_hpi_reset_s1_agent:m0_burstcount -> otg_hpi_reset_s1_translator:uav_burstcount
	wire          otg_hpi_reset_s1_agent_rf_source_valid;                                             // otg_hpi_reset_s1_agent:rf_source_valid -> otg_hpi_reset_s1_agent_rsp_fifo:in_valid
	wire  [108:0] otg_hpi_reset_s1_agent_rf_source_data;                                              // otg_hpi_reset_s1_agent:rf_source_data -> otg_hpi_reset_s1_agent_rsp_fifo:in_data
	wire          otg_hpi_reset_s1_agent_rf_source_ready;                                             // otg_hpi_reset_s1_agent_rsp_fifo:in_ready -> otg_hpi_reset_s1_agent:rf_source_ready
	wire          otg_hpi_reset_s1_agent_rf_source_startofpacket;                                     // otg_hpi_reset_s1_agent:rf_source_startofpacket -> otg_hpi_reset_s1_agent_rsp_fifo:in_startofpacket
	wire          otg_hpi_reset_s1_agent_rf_source_endofpacket;                                       // otg_hpi_reset_s1_agent:rf_source_endofpacket -> otg_hpi_reset_s1_agent_rsp_fifo:in_endofpacket
	wire          otg_hpi_reset_s1_agent_rsp_fifo_out_valid;                                          // otg_hpi_reset_s1_agent_rsp_fifo:out_valid -> otg_hpi_reset_s1_agent:rf_sink_valid
	wire  [108:0] otg_hpi_reset_s1_agent_rsp_fifo_out_data;                                           // otg_hpi_reset_s1_agent_rsp_fifo:out_data -> otg_hpi_reset_s1_agent:rf_sink_data
	wire          otg_hpi_reset_s1_agent_rsp_fifo_out_ready;                                          // otg_hpi_reset_s1_agent:rf_sink_ready -> otg_hpi_reset_s1_agent_rsp_fifo:out_ready
	wire          otg_hpi_reset_s1_agent_rsp_fifo_out_startofpacket;                                  // otg_hpi_reset_s1_agent_rsp_fifo:out_startofpacket -> otg_hpi_reset_s1_agent:rf_sink_startofpacket
	wire          otg_hpi_reset_s1_agent_rsp_fifo_out_endofpacket;                                    // otg_hpi_reset_s1_agent_rsp_fifo:out_endofpacket -> otg_hpi_reset_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                              // cmd_mux_012:src_valid -> otg_hpi_reset_s1_agent:cp_valid
	wire  [107:0] cmd_mux_012_src_data;                                                               // cmd_mux_012:src_data -> otg_hpi_reset_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                              // otg_hpi_reset_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [27:0] cmd_mux_012_src_channel;                                                            // cmd_mux_012:src_channel -> otg_hpi_reset_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                      // cmd_mux_012:src_startofpacket -> otg_hpi_reset_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                        // cmd_mux_012:src_endofpacket -> otg_hpi_reset_s1_agent:cp_endofpacket
	wire   [31:0] audio_init_s1_agent_m0_readdata;                                                    // audio_INIT_s1_translator:uav_readdata -> audio_INIT_s1_agent:m0_readdata
	wire          audio_init_s1_agent_m0_waitrequest;                                                 // audio_INIT_s1_translator:uav_waitrequest -> audio_INIT_s1_agent:m0_waitrequest
	wire          audio_init_s1_agent_m0_debugaccess;                                                 // audio_INIT_s1_agent:m0_debugaccess -> audio_INIT_s1_translator:uav_debugaccess
	wire   [27:0] audio_init_s1_agent_m0_address;                                                     // audio_INIT_s1_agent:m0_address -> audio_INIT_s1_translator:uav_address
	wire    [3:0] audio_init_s1_agent_m0_byteenable;                                                  // audio_INIT_s1_agent:m0_byteenable -> audio_INIT_s1_translator:uav_byteenable
	wire          audio_init_s1_agent_m0_read;                                                        // audio_INIT_s1_agent:m0_read -> audio_INIT_s1_translator:uav_read
	wire          audio_init_s1_agent_m0_readdatavalid;                                               // audio_INIT_s1_translator:uav_readdatavalid -> audio_INIT_s1_agent:m0_readdatavalid
	wire          audio_init_s1_agent_m0_lock;                                                        // audio_INIT_s1_agent:m0_lock -> audio_INIT_s1_translator:uav_lock
	wire   [31:0] audio_init_s1_agent_m0_writedata;                                                   // audio_INIT_s1_agent:m0_writedata -> audio_INIT_s1_translator:uav_writedata
	wire          audio_init_s1_agent_m0_write;                                                       // audio_INIT_s1_agent:m0_write -> audio_INIT_s1_translator:uav_write
	wire    [2:0] audio_init_s1_agent_m0_burstcount;                                                  // audio_INIT_s1_agent:m0_burstcount -> audio_INIT_s1_translator:uav_burstcount
	wire          audio_init_s1_agent_rf_source_valid;                                                // audio_INIT_s1_agent:rf_source_valid -> audio_INIT_s1_agent_rsp_fifo:in_valid
	wire  [108:0] audio_init_s1_agent_rf_source_data;                                                 // audio_INIT_s1_agent:rf_source_data -> audio_INIT_s1_agent_rsp_fifo:in_data
	wire          audio_init_s1_agent_rf_source_ready;                                                // audio_INIT_s1_agent_rsp_fifo:in_ready -> audio_INIT_s1_agent:rf_source_ready
	wire          audio_init_s1_agent_rf_source_startofpacket;                                        // audio_INIT_s1_agent:rf_source_startofpacket -> audio_INIT_s1_agent_rsp_fifo:in_startofpacket
	wire          audio_init_s1_agent_rf_source_endofpacket;                                          // audio_INIT_s1_agent:rf_source_endofpacket -> audio_INIT_s1_agent_rsp_fifo:in_endofpacket
	wire          audio_init_s1_agent_rsp_fifo_out_valid;                                             // audio_INIT_s1_agent_rsp_fifo:out_valid -> audio_INIT_s1_agent:rf_sink_valid
	wire  [108:0] audio_init_s1_agent_rsp_fifo_out_data;                                              // audio_INIT_s1_agent_rsp_fifo:out_data -> audio_INIT_s1_agent:rf_sink_data
	wire          audio_init_s1_agent_rsp_fifo_out_ready;                                             // audio_INIT_s1_agent:rf_sink_ready -> audio_INIT_s1_agent_rsp_fifo:out_ready
	wire          audio_init_s1_agent_rsp_fifo_out_startofpacket;                                     // audio_INIT_s1_agent_rsp_fifo:out_startofpacket -> audio_INIT_s1_agent:rf_sink_startofpacket
	wire          audio_init_s1_agent_rsp_fifo_out_endofpacket;                                       // audio_INIT_s1_agent_rsp_fifo:out_endofpacket -> audio_INIT_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                              // cmd_mux_013:src_valid -> audio_INIT_s1_agent:cp_valid
	wire  [107:0] cmd_mux_013_src_data;                                                               // cmd_mux_013:src_data -> audio_INIT_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                              // audio_INIT_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [27:0] cmd_mux_013_src_channel;                                                            // cmd_mux_013:src_channel -> audio_INIT_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                      // cmd_mux_013:src_startofpacket -> audio_INIT_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                        // cmd_mux_013:src_endofpacket -> audio_INIT_s1_agent:cp_endofpacket
	wire   [31:0] audio_init_f_s1_agent_m0_readdata;                                                  // audio_INIT_F_s1_translator:uav_readdata -> audio_INIT_F_s1_agent:m0_readdata
	wire          audio_init_f_s1_agent_m0_waitrequest;                                               // audio_INIT_F_s1_translator:uav_waitrequest -> audio_INIT_F_s1_agent:m0_waitrequest
	wire          audio_init_f_s1_agent_m0_debugaccess;                                               // audio_INIT_F_s1_agent:m0_debugaccess -> audio_INIT_F_s1_translator:uav_debugaccess
	wire   [27:0] audio_init_f_s1_agent_m0_address;                                                   // audio_INIT_F_s1_agent:m0_address -> audio_INIT_F_s1_translator:uav_address
	wire    [3:0] audio_init_f_s1_agent_m0_byteenable;                                                // audio_INIT_F_s1_agent:m0_byteenable -> audio_INIT_F_s1_translator:uav_byteenable
	wire          audio_init_f_s1_agent_m0_read;                                                      // audio_INIT_F_s1_agent:m0_read -> audio_INIT_F_s1_translator:uav_read
	wire          audio_init_f_s1_agent_m0_readdatavalid;                                             // audio_INIT_F_s1_translator:uav_readdatavalid -> audio_INIT_F_s1_agent:m0_readdatavalid
	wire          audio_init_f_s1_agent_m0_lock;                                                      // audio_INIT_F_s1_agent:m0_lock -> audio_INIT_F_s1_translator:uav_lock
	wire   [31:0] audio_init_f_s1_agent_m0_writedata;                                                 // audio_INIT_F_s1_agent:m0_writedata -> audio_INIT_F_s1_translator:uav_writedata
	wire          audio_init_f_s1_agent_m0_write;                                                     // audio_INIT_F_s1_agent:m0_write -> audio_INIT_F_s1_translator:uav_write
	wire    [2:0] audio_init_f_s1_agent_m0_burstcount;                                                // audio_INIT_F_s1_agent:m0_burstcount -> audio_INIT_F_s1_translator:uav_burstcount
	wire          audio_init_f_s1_agent_rf_source_valid;                                              // audio_INIT_F_s1_agent:rf_source_valid -> audio_INIT_F_s1_agent_rsp_fifo:in_valid
	wire  [108:0] audio_init_f_s1_agent_rf_source_data;                                               // audio_INIT_F_s1_agent:rf_source_data -> audio_INIT_F_s1_agent_rsp_fifo:in_data
	wire          audio_init_f_s1_agent_rf_source_ready;                                              // audio_INIT_F_s1_agent_rsp_fifo:in_ready -> audio_INIT_F_s1_agent:rf_source_ready
	wire          audio_init_f_s1_agent_rf_source_startofpacket;                                      // audio_INIT_F_s1_agent:rf_source_startofpacket -> audio_INIT_F_s1_agent_rsp_fifo:in_startofpacket
	wire          audio_init_f_s1_agent_rf_source_endofpacket;                                        // audio_INIT_F_s1_agent:rf_source_endofpacket -> audio_INIT_F_s1_agent_rsp_fifo:in_endofpacket
	wire          audio_init_f_s1_agent_rsp_fifo_out_valid;                                           // audio_INIT_F_s1_agent_rsp_fifo:out_valid -> audio_INIT_F_s1_agent:rf_sink_valid
	wire  [108:0] audio_init_f_s1_agent_rsp_fifo_out_data;                                            // audio_INIT_F_s1_agent_rsp_fifo:out_data -> audio_INIT_F_s1_agent:rf_sink_data
	wire          audio_init_f_s1_agent_rsp_fifo_out_ready;                                           // audio_INIT_F_s1_agent:rf_sink_ready -> audio_INIT_F_s1_agent_rsp_fifo:out_ready
	wire          audio_init_f_s1_agent_rsp_fifo_out_startofpacket;                                   // audio_INIT_F_s1_agent_rsp_fifo:out_startofpacket -> audio_INIT_F_s1_agent:rf_sink_startofpacket
	wire          audio_init_f_s1_agent_rsp_fifo_out_endofpacket;                                     // audio_INIT_F_s1_agent_rsp_fifo:out_endofpacket -> audio_INIT_F_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                              // cmd_mux_014:src_valid -> audio_INIT_F_s1_agent:cp_valid
	wire  [107:0] cmd_mux_014_src_data;                                                               // cmd_mux_014:src_data -> audio_INIT_F_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                              // audio_INIT_F_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [27:0] cmd_mux_014_src_channel;                                                            // cmd_mux_014:src_channel -> audio_INIT_F_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                      // cmd_mux_014:src_startofpacket -> audio_INIT_F_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                        // cmd_mux_014:src_endofpacket -> audio_INIT_F_s1_agent:cp_endofpacket
	wire   [31:0] audio_back_vol_s1_agent_m0_readdata;                                                // audio_back_vol_s1_translator:uav_readdata -> audio_back_vol_s1_agent:m0_readdata
	wire          audio_back_vol_s1_agent_m0_waitrequest;                                             // audio_back_vol_s1_translator:uav_waitrequest -> audio_back_vol_s1_agent:m0_waitrequest
	wire          audio_back_vol_s1_agent_m0_debugaccess;                                             // audio_back_vol_s1_agent:m0_debugaccess -> audio_back_vol_s1_translator:uav_debugaccess
	wire   [27:0] audio_back_vol_s1_agent_m0_address;                                                 // audio_back_vol_s1_agent:m0_address -> audio_back_vol_s1_translator:uav_address
	wire    [3:0] audio_back_vol_s1_agent_m0_byteenable;                                              // audio_back_vol_s1_agent:m0_byteenable -> audio_back_vol_s1_translator:uav_byteenable
	wire          audio_back_vol_s1_agent_m0_read;                                                    // audio_back_vol_s1_agent:m0_read -> audio_back_vol_s1_translator:uav_read
	wire          audio_back_vol_s1_agent_m0_readdatavalid;                                           // audio_back_vol_s1_translator:uav_readdatavalid -> audio_back_vol_s1_agent:m0_readdatavalid
	wire          audio_back_vol_s1_agent_m0_lock;                                                    // audio_back_vol_s1_agent:m0_lock -> audio_back_vol_s1_translator:uav_lock
	wire   [31:0] audio_back_vol_s1_agent_m0_writedata;                                               // audio_back_vol_s1_agent:m0_writedata -> audio_back_vol_s1_translator:uav_writedata
	wire          audio_back_vol_s1_agent_m0_write;                                                   // audio_back_vol_s1_agent:m0_write -> audio_back_vol_s1_translator:uav_write
	wire    [2:0] audio_back_vol_s1_agent_m0_burstcount;                                              // audio_back_vol_s1_agent:m0_burstcount -> audio_back_vol_s1_translator:uav_burstcount
	wire          audio_back_vol_s1_agent_rf_source_valid;                                            // audio_back_vol_s1_agent:rf_source_valid -> audio_back_vol_s1_agent_rsp_fifo:in_valid
	wire  [108:0] audio_back_vol_s1_agent_rf_source_data;                                             // audio_back_vol_s1_agent:rf_source_data -> audio_back_vol_s1_agent_rsp_fifo:in_data
	wire          audio_back_vol_s1_agent_rf_source_ready;                                            // audio_back_vol_s1_agent_rsp_fifo:in_ready -> audio_back_vol_s1_agent:rf_source_ready
	wire          audio_back_vol_s1_agent_rf_source_startofpacket;                                    // audio_back_vol_s1_agent:rf_source_startofpacket -> audio_back_vol_s1_agent_rsp_fifo:in_startofpacket
	wire          audio_back_vol_s1_agent_rf_source_endofpacket;                                      // audio_back_vol_s1_agent:rf_source_endofpacket -> audio_back_vol_s1_agent_rsp_fifo:in_endofpacket
	wire          audio_back_vol_s1_agent_rsp_fifo_out_valid;                                         // audio_back_vol_s1_agent_rsp_fifo:out_valid -> audio_back_vol_s1_agent:rf_sink_valid
	wire  [108:0] audio_back_vol_s1_agent_rsp_fifo_out_data;                                          // audio_back_vol_s1_agent_rsp_fifo:out_data -> audio_back_vol_s1_agent:rf_sink_data
	wire          audio_back_vol_s1_agent_rsp_fifo_out_ready;                                         // audio_back_vol_s1_agent:rf_sink_ready -> audio_back_vol_s1_agent_rsp_fifo:out_ready
	wire          audio_back_vol_s1_agent_rsp_fifo_out_startofpacket;                                 // audio_back_vol_s1_agent_rsp_fifo:out_startofpacket -> audio_back_vol_s1_agent:rf_sink_startofpacket
	wire          audio_back_vol_s1_agent_rsp_fifo_out_endofpacket;                                   // audio_back_vol_s1_agent_rsp_fifo:out_endofpacket -> audio_back_vol_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                              // cmd_mux_015:src_valid -> audio_back_vol_s1_agent:cp_valid
	wire  [107:0] cmd_mux_015_src_data;                                                               // cmd_mux_015:src_data -> audio_back_vol_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                              // audio_back_vol_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [27:0] cmd_mux_015_src_channel;                                                            // cmd_mux_015:src_channel -> audio_back_vol_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                      // cmd_mux_015:src_startofpacket -> audio_back_vol_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                        // cmd_mux_015:src_endofpacket -> audio_back_vol_s1_agent:cp_endofpacket
	wire   [31:0] audio_bomb_vol_s1_agent_m0_readdata;                                                // audio_bomb_vol_s1_translator:uav_readdata -> audio_bomb_vol_s1_agent:m0_readdata
	wire          audio_bomb_vol_s1_agent_m0_waitrequest;                                             // audio_bomb_vol_s1_translator:uav_waitrequest -> audio_bomb_vol_s1_agent:m0_waitrequest
	wire          audio_bomb_vol_s1_agent_m0_debugaccess;                                             // audio_bomb_vol_s1_agent:m0_debugaccess -> audio_bomb_vol_s1_translator:uav_debugaccess
	wire   [27:0] audio_bomb_vol_s1_agent_m0_address;                                                 // audio_bomb_vol_s1_agent:m0_address -> audio_bomb_vol_s1_translator:uav_address
	wire    [3:0] audio_bomb_vol_s1_agent_m0_byteenable;                                              // audio_bomb_vol_s1_agent:m0_byteenable -> audio_bomb_vol_s1_translator:uav_byteenable
	wire          audio_bomb_vol_s1_agent_m0_read;                                                    // audio_bomb_vol_s1_agent:m0_read -> audio_bomb_vol_s1_translator:uav_read
	wire          audio_bomb_vol_s1_agent_m0_readdatavalid;                                           // audio_bomb_vol_s1_translator:uav_readdatavalid -> audio_bomb_vol_s1_agent:m0_readdatavalid
	wire          audio_bomb_vol_s1_agent_m0_lock;                                                    // audio_bomb_vol_s1_agent:m0_lock -> audio_bomb_vol_s1_translator:uav_lock
	wire   [31:0] audio_bomb_vol_s1_agent_m0_writedata;                                               // audio_bomb_vol_s1_agent:m0_writedata -> audio_bomb_vol_s1_translator:uav_writedata
	wire          audio_bomb_vol_s1_agent_m0_write;                                                   // audio_bomb_vol_s1_agent:m0_write -> audio_bomb_vol_s1_translator:uav_write
	wire    [2:0] audio_bomb_vol_s1_agent_m0_burstcount;                                              // audio_bomb_vol_s1_agent:m0_burstcount -> audio_bomb_vol_s1_translator:uav_burstcount
	wire          audio_bomb_vol_s1_agent_rf_source_valid;                                            // audio_bomb_vol_s1_agent:rf_source_valid -> audio_bomb_vol_s1_agent_rsp_fifo:in_valid
	wire  [108:0] audio_bomb_vol_s1_agent_rf_source_data;                                             // audio_bomb_vol_s1_agent:rf_source_data -> audio_bomb_vol_s1_agent_rsp_fifo:in_data
	wire          audio_bomb_vol_s1_agent_rf_source_ready;                                            // audio_bomb_vol_s1_agent_rsp_fifo:in_ready -> audio_bomb_vol_s1_agent:rf_source_ready
	wire          audio_bomb_vol_s1_agent_rf_source_startofpacket;                                    // audio_bomb_vol_s1_agent:rf_source_startofpacket -> audio_bomb_vol_s1_agent_rsp_fifo:in_startofpacket
	wire          audio_bomb_vol_s1_agent_rf_source_endofpacket;                                      // audio_bomb_vol_s1_agent:rf_source_endofpacket -> audio_bomb_vol_s1_agent_rsp_fifo:in_endofpacket
	wire          audio_bomb_vol_s1_agent_rsp_fifo_out_valid;                                         // audio_bomb_vol_s1_agent_rsp_fifo:out_valid -> audio_bomb_vol_s1_agent:rf_sink_valid
	wire  [108:0] audio_bomb_vol_s1_agent_rsp_fifo_out_data;                                          // audio_bomb_vol_s1_agent_rsp_fifo:out_data -> audio_bomb_vol_s1_agent:rf_sink_data
	wire          audio_bomb_vol_s1_agent_rsp_fifo_out_ready;                                         // audio_bomb_vol_s1_agent:rf_sink_ready -> audio_bomb_vol_s1_agent_rsp_fifo:out_ready
	wire          audio_bomb_vol_s1_agent_rsp_fifo_out_startofpacket;                                 // audio_bomb_vol_s1_agent_rsp_fifo:out_startofpacket -> audio_bomb_vol_s1_agent:rf_sink_startofpacket
	wire          audio_bomb_vol_s1_agent_rsp_fifo_out_endofpacket;                                   // audio_bomb_vol_s1_agent_rsp_fifo:out_endofpacket -> audio_bomb_vol_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                              // cmd_mux_016:src_valid -> audio_bomb_vol_s1_agent:cp_valid
	wire  [107:0] cmd_mux_016_src_data;                                                               // cmd_mux_016:src_data -> audio_bomb_vol_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                              // audio_bomb_vol_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [27:0] cmd_mux_016_src_channel;                                                            // cmd_mux_016:src_channel -> audio_bomb_vol_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                      // cmd_mux_016:src_startofpacket -> audio_bomb_vol_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                        // cmd_mux_016:src_endofpacket -> audio_bomb_vol_s1_agent:cp_endofpacket
	wire   [31:0] audio_bomb_active_s1_agent_m0_readdata;                                             // audio_bomb_active_s1_translator:uav_readdata -> audio_bomb_active_s1_agent:m0_readdata
	wire          audio_bomb_active_s1_agent_m0_waitrequest;                                          // audio_bomb_active_s1_translator:uav_waitrequest -> audio_bomb_active_s1_agent:m0_waitrequest
	wire          audio_bomb_active_s1_agent_m0_debugaccess;                                          // audio_bomb_active_s1_agent:m0_debugaccess -> audio_bomb_active_s1_translator:uav_debugaccess
	wire   [27:0] audio_bomb_active_s1_agent_m0_address;                                              // audio_bomb_active_s1_agent:m0_address -> audio_bomb_active_s1_translator:uav_address
	wire    [3:0] audio_bomb_active_s1_agent_m0_byteenable;                                           // audio_bomb_active_s1_agent:m0_byteenable -> audio_bomb_active_s1_translator:uav_byteenable
	wire          audio_bomb_active_s1_agent_m0_read;                                                 // audio_bomb_active_s1_agent:m0_read -> audio_bomb_active_s1_translator:uav_read
	wire          audio_bomb_active_s1_agent_m0_readdatavalid;                                        // audio_bomb_active_s1_translator:uav_readdatavalid -> audio_bomb_active_s1_agent:m0_readdatavalid
	wire          audio_bomb_active_s1_agent_m0_lock;                                                 // audio_bomb_active_s1_agent:m0_lock -> audio_bomb_active_s1_translator:uav_lock
	wire   [31:0] audio_bomb_active_s1_agent_m0_writedata;                                            // audio_bomb_active_s1_agent:m0_writedata -> audio_bomb_active_s1_translator:uav_writedata
	wire          audio_bomb_active_s1_agent_m0_write;                                                // audio_bomb_active_s1_agent:m0_write -> audio_bomb_active_s1_translator:uav_write
	wire    [2:0] audio_bomb_active_s1_agent_m0_burstcount;                                           // audio_bomb_active_s1_agent:m0_burstcount -> audio_bomb_active_s1_translator:uav_burstcount
	wire          audio_bomb_active_s1_agent_rf_source_valid;                                         // audio_bomb_active_s1_agent:rf_source_valid -> audio_bomb_active_s1_agent_rsp_fifo:in_valid
	wire  [108:0] audio_bomb_active_s1_agent_rf_source_data;                                          // audio_bomb_active_s1_agent:rf_source_data -> audio_bomb_active_s1_agent_rsp_fifo:in_data
	wire          audio_bomb_active_s1_agent_rf_source_ready;                                         // audio_bomb_active_s1_agent_rsp_fifo:in_ready -> audio_bomb_active_s1_agent:rf_source_ready
	wire          audio_bomb_active_s1_agent_rf_source_startofpacket;                                 // audio_bomb_active_s1_agent:rf_source_startofpacket -> audio_bomb_active_s1_agent_rsp_fifo:in_startofpacket
	wire          audio_bomb_active_s1_agent_rf_source_endofpacket;                                   // audio_bomb_active_s1_agent:rf_source_endofpacket -> audio_bomb_active_s1_agent_rsp_fifo:in_endofpacket
	wire          audio_bomb_active_s1_agent_rsp_fifo_out_valid;                                      // audio_bomb_active_s1_agent_rsp_fifo:out_valid -> audio_bomb_active_s1_agent:rf_sink_valid
	wire  [108:0] audio_bomb_active_s1_agent_rsp_fifo_out_data;                                       // audio_bomb_active_s1_agent_rsp_fifo:out_data -> audio_bomb_active_s1_agent:rf_sink_data
	wire          audio_bomb_active_s1_agent_rsp_fifo_out_ready;                                      // audio_bomb_active_s1_agent:rf_sink_ready -> audio_bomb_active_s1_agent_rsp_fifo:out_ready
	wire          audio_bomb_active_s1_agent_rsp_fifo_out_startofpacket;                              // audio_bomb_active_s1_agent_rsp_fifo:out_startofpacket -> audio_bomb_active_s1_agent:rf_sink_startofpacket
	wire          audio_bomb_active_s1_agent_rsp_fifo_out_endofpacket;                                // audio_bomb_active_s1_agent_rsp_fifo:out_endofpacket -> audio_bomb_active_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                              // cmd_mux_017:src_valid -> audio_bomb_active_s1_agent:cp_valid
	wire  [107:0] cmd_mux_017_src_data;                                                               // cmd_mux_017:src_data -> audio_bomb_active_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                              // audio_bomb_active_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [27:0] cmd_mux_017_src_channel;                                                            // cmd_mux_017:src_channel -> audio_bomb_active_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                      // cmd_mux_017:src_startofpacket -> audio_bomb_active_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                        // cmd_mux_017:src_endofpacket -> audio_bomb_active_s1_agent:cp_endofpacket
	wire   [31:0] leds_s1_agent_m0_readdata;                                                          // LEDs_s1_translator:uav_readdata -> LEDs_s1_agent:m0_readdata
	wire          leds_s1_agent_m0_waitrequest;                                                       // LEDs_s1_translator:uav_waitrequest -> LEDs_s1_agent:m0_waitrequest
	wire          leds_s1_agent_m0_debugaccess;                                                       // LEDs_s1_agent:m0_debugaccess -> LEDs_s1_translator:uav_debugaccess
	wire   [27:0] leds_s1_agent_m0_address;                                                           // LEDs_s1_agent:m0_address -> LEDs_s1_translator:uav_address
	wire    [3:0] leds_s1_agent_m0_byteenable;                                                        // LEDs_s1_agent:m0_byteenable -> LEDs_s1_translator:uav_byteenable
	wire          leds_s1_agent_m0_read;                                                              // LEDs_s1_agent:m0_read -> LEDs_s1_translator:uav_read
	wire          leds_s1_agent_m0_readdatavalid;                                                     // LEDs_s1_translator:uav_readdatavalid -> LEDs_s1_agent:m0_readdatavalid
	wire          leds_s1_agent_m0_lock;                                                              // LEDs_s1_agent:m0_lock -> LEDs_s1_translator:uav_lock
	wire   [31:0] leds_s1_agent_m0_writedata;                                                         // LEDs_s1_agent:m0_writedata -> LEDs_s1_translator:uav_writedata
	wire          leds_s1_agent_m0_write;                                                             // LEDs_s1_agent:m0_write -> LEDs_s1_translator:uav_write
	wire    [2:0] leds_s1_agent_m0_burstcount;                                                        // LEDs_s1_agent:m0_burstcount -> LEDs_s1_translator:uav_burstcount
	wire          leds_s1_agent_rf_source_valid;                                                      // LEDs_s1_agent:rf_source_valid -> LEDs_s1_agent_rsp_fifo:in_valid
	wire  [108:0] leds_s1_agent_rf_source_data;                                                       // LEDs_s1_agent:rf_source_data -> LEDs_s1_agent_rsp_fifo:in_data
	wire          leds_s1_agent_rf_source_ready;                                                      // LEDs_s1_agent_rsp_fifo:in_ready -> LEDs_s1_agent:rf_source_ready
	wire          leds_s1_agent_rf_source_startofpacket;                                              // LEDs_s1_agent:rf_source_startofpacket -> LEDs_s1_agent_rsp_fifo:in_startofpacket
	wire          leds_s1_agent_rf_source_endofpacket;                                                // LEDs_s1_agent:rf_source_endofpacket -> LEDs_s1_agent_rsp_fifo:in_endofpacket
	wire          leds_s1_agent_rsp_fifo_out_valid;                                                   // LEDs_s1_agent_rsp_fifo:out_valid -> LEDs_s1_agent:rf_sink_valid
	wire  [108:0] leds_s1_agent_rsp_fifo_out_data;                                                    // LEDs_s1_agent_rsp_fifo:out_data -> LEDs_s1_agent:rf_sink_data
	wire          leds_s1_agent_rsp_fifo_out_ready;                                                   // LEDs_s1_agent:rf_sink_ready -> LEDs_s1_agent_rsp_fifo:out_ready
	wire          leds_s1_agent_rsp_fifo_out_startofpacket;                                           // LEDs_s1_agent_rsp_fifo:out_startofpacket -> LEDs_s1_agent:rf_sink_startofpacket
	wire          leds_s1_agent_rsp_fifo_out_endofpacket;                                             // LEDs_s1_agent_rsp_fifo:out_endofpacket -> LEDs_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                              // cmd_mux_018:src_valid -> LEDs_s1_agent:cp_valid
	wire  [107:0] cmd_mux_018_src_data;                                                               // cmd_mux_018:src_data -> LEDs_s1_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                              // LEDs_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [27:0] cmd_mux_018_src_channel;                                                            // cmd_mux_018:src_channel -> LEDs_s1_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                      // cmd_mux_018:src_startofpacket -> LEDs_s1_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                        // cmd_mux_018:src_endofpacket -> LEDs_s1_agent:cp_endofpacket
	wire   [31:0] player2score0_s1_agent_m0_readdata;                                                 // player2Score0_s1_translator:uav_readdata -> player2Score0_s1_agent:m0_readdata
	wire          player2score0_s1_agent_m0_waitrequest;                                              // player2Score0_s1_translator:uav_waitrequest -> player2Score0_s1_agent:m0_waitrequest
	wire          player2score0_s1_agent_m0_debugaccess;                                              // player2Score0_s1_agent:m0_debugaccess -> player2Score0_s1_translator:uav_debugaccess
	wire   [27:0] player2score0_s1_agent_m0_address;                                                  // player2Score0_s1_agent:m0_address -> player2Score0_s1_translator:uav_address
	wire    [3:0] player2score0_s1_agent_m0_byteenable;                                               // player2Score0_s1_agent:m0_byteenable -> player2Score0_s1_translator:uav_byteenable
	wire          player2score0_s1_agent_m0_read;                                                     // player2Score0_s1_agent:m0_read -> player2Score0_s1_translator:uav_read
	wire          player2score0_s1_agent_m0_readdatavalid;                                            // player2Score0_s1_translator:uav_readdatavalid -> player2Score0_s1_agent:m0_readdatavalid
	wire          player2score0_s1_agent_m0_lock;                                                     // player2Score0_s1_agent:m0_lock -> player2Score0_s1_translator:uav_lock
	wire   [31:0] player2score0_s1_agent_m0_writedata;                                                // player2Score0_s1_agent:m0_writedata -> player2Score0_s1_translator:uav_writedata
	wire          player2score0_s1_agent_m0_write;                                                    // player2Score0_s1_agent:m0_write -> player2Score0_s1_translator:uav_write
	wire    [2:0] player2score0_s1_agent_m0_burstcount;                                               // player2Score0_s1_agent:m0_burstcount -> player2Score0_s1_translator:uav_burstcount
	wire          player2score0_s1_agent_rf_source_valid;                                             // player2Score0_s1_agent:rf_source_valid -> player2Score0_s1_agent_rsp_fifo:in_valid
	wire  [108:0] player2score0_s1_agent_rf_source_data;                                              // player2Score0_s1_agent:rf_source_data -> player2Score0_s1_agent_rsp_fifo:in_data
	wire          player2score0_s1_agent_rf_source_ready;                                             // player2Score0_s1_agent_rsp_fifo:in_ready -> player2Score0_s1_agent:rf_source_ready
	wire          player2score0_s1_agent_rf_source_startofpacket;                                     // player2Score0_s1_agent:rf_source_startofpacket -> player2Score0_s1_agent_rsp_fifo:in_startofpacket
	wire          player2score0_s1_agent_rf_source_endofpacket;                                       // player2Score0_s1_agent:rf_source_endofpacket -> player2Score0_s1_agent_rsp_fifo:in_endofpacket
	wire          player2score0_s1_agent_rsp_fifo_out_valid;                                          // player2Score0_s1_agent_rsp_fifo:out_valid -> player2Score0_s1_agent:rf_sink_valid
	wire  [108:0] player2score0_s1_agent_rsp_fifo_out_data;                                           // player2Score0_s1_agent_rsp_fifo:out_data -> player2Score0_s1_agent:rf_sink_data
	wire          player2score0_s1_agent_rsp_fifo_out_ready;                                          // player2Score0_s1_agent:rf_sink_ready -> player2Score0_s1_agent_rsp_fifo:out_ready
	wire          player2score0_s1_agent_rsp_fifo_out_startofpacket;                                  // player2Score0_s1_agent_rsp_fifo:out_startofpacket -> player2Score0_s1_agent:rf_sink_startofpacket
	wire          player2score0_s1_agent_rsp_fifo_out_endofpacket;                                    // player2Score0_s1_agent_rsp_fifo:out_endofpacket -> player2Score0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_019_src_valid;                                                              // cmd_mux_019:src_valid -> player2Score0_s1_agent:cp_valid
	wire  [107:0] cmd_mux_019_src_data;                                                               // cmd_mux_019:src_data -> player2Score0_s1_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                              // player2Score0_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [27:0] cmd_mux_019_src_channel;                                                            // cmd_mux_019:src_channel -> player2Score0_s1_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                      // cmd_mux_019:src_startofpacket -> player2Score0_s1_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                        // cmd_mux_019:src_endofpacket -> player2Score0_s1_agent:cp_endofpacket
	wire   [31:0] player2score1_s1_agent_m0_readdata;                                                 // player2Score1_s1_translator:uav_readdata -> player2Score1_s1_agent:m0_readdata
	wire          player2score1_s1_agent_m0_waitrequest;                                              // player2Score1_s1_translator:uav_waitrequest -> player2Score1_s1_agent:m0_waitrequest
	wire          player2score1_s1_agent_m0_debugaccess;                                              // player2Score1_s1_agent:m0_debugaccess -> player2Score1_s1_translator:uav_debugaccess
	wire   [27:0] player2score1_s1_agent_m0_address;                                                  // player2Score1_s1_agent:m0_address -> player2Score1_s1_translator:uav_address
	wire    [3:0] player2score1_s1_agent_m0_byteenable;                                               // player2Score1_s1_agent:m0_byteenable -> player2Score1_s1_translator:uav_byteenable
	wire          player2score1_s1_agent_m0_read;                                                     // player2Score1_s1_agent:m0_read -> player2Score1_s1_translator:uav_read
	wire          player2score1_s1_agent_m0_readdatavalid;                                            // player2Score1_s1_translator:uav_readdatavalid -> player2Score1_s1_agent:m0_readdatavalid
	wire          player2score1_s1_agent_m0_lock;                                                     // player2Score1_s1_agent:m0_lock -> player2Score1_s1_translator:uav_lock
	wire   [31:0] player2score1_s1_agent_m0_writedata;                                                // player2Score1_s1_agent:m0_writedata -> player2Score1_s1_translator:uav_writedata
	wire          player2score1_s1_agent_m0_write;                                                    // player2Score1_s1_agent:m0_write -> player2Score1_s1_translator:uav_write
	wire    [2:0] player2score1_s1_agent_m0_burstcount;                                               // player2Score1_s1_agent:m0_burstcount -> player2Score1_s1_translator:uav_burstcount
	wire          player2score1_s1_agent_rf_source_valid;                                             // player2Score1_s1_agent:rf_source_valid -> player2Score1_s1_agent_rsp_fifo:in_valid
	wire  [108:0] player2score1_s1_agent_rf_source_data;                                              // player2Score1_s1_agent:rf_source_data -> player2Score1_s1_agent_rsp_fifo:in_data
	wire          player2score1_s1_agent_rf_source_ready;                                             // player2Score1_s1_agent_rsp_fifo:in_ready -> player2Score1_s1_agent:rf_source_ready
	wire          player2score1_s1_agent_rf_source_startofpacket;                                     // player2Score1_s1_agent:rf_source_startofpacket -> player2Score1_s1_agent_rsp_fifo:in_startofpacket
	wire          player2score1_s1_agent_rf_source_endofpacket;                                       // player2Score1_s1_agent:rf_source_endofpacket -> player2Score1_s1_agent_rsp_fifo:in_endofpacket
	wire          player2score1_s1_agent_rsp_fifo_out_valid;                                          // player2Score1_s1_agent_rsp_fifo:out_valid -> player2Score1_s1_agent:rf_sink_valid
	wire  [108:0] player2score1_s1_agent_rsp_fifo_out_data;                                           // player2Score1_s1_agent_rsp_fifo:out_data -> player2Score1_s1_agent:rf_sink_data
	wire          player2score1_s1_agent_rsp_fifo_out_ready;                                          // player2Score1_s1_agent:rf_sink_ready -> player2Score1_s1_agent_rsp_fifo:out_ready
	wire          player2score1_s1_agent_rsp_fifo_out_startofpacket;                                  // player2Score1_s1_agent_rsp_fifo:out_startofpacket -> player2Score1_s1_agent:rf_sink_startofpacket
	wire          player2score1_s1_agent_rsp_fifo_out_endofpacket;                                    // player2Score1_s1_agent_rsp_fifo:out_endofpacket -> player2Score1_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_020_src_valid;                                                              // cmd_mux_020:src_valid -> player2Score1_s1_agent:cp_valid
	wire  [107:0] cmd_mux_020_src_data;                                                               // cmd_mux_020:src_data -> player2Score1_s1_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                              // player2Score1_s1_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [27:0] cmd_mux_020_src_channel;                                                            // cmd_mux_020:src_channel -> player2Score1_s1_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                      // cmd_mux_020:src_startofpacket -> player2Score1_s1_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                        // cmd_mux_020:src_endofpacket -> player2Score1_s1_agent:cp_endofpacket
	wire   [31:0] player1score0_s1_agent_m0_readdata;                                                 // player1Score0_s1_translator:uav_readdata -> player1Score0_s1_agent:m0_readdata
	wire          player1score0_s1_agent_m0_waitrequest;                                              // player1Score0_s1_translator:uav_waitrequest -> player1Score0_s1_agent:m0_waitrequest
	wire          player1score0_s1_agent_m0_debugaccess;                                              // player1Score0_s1_agent:m0_debugaccess -> player1Score0_s1_translator:uav_debugaccess
	wire   [27:0] player1score0_s1_agent_m0_address;                                                  // player1Score0_s1_agent:m0_address -> player1Score0_s1_translator:uav_address
	wire    [3:0] player1score0_s1_agent_m0_byteenable;                                               // player1Score0_s1_agent:m0_byteenable -> player1Score0_s1_translator:uav_byteenable
	wire          player1score0_s1_agent_m0_read;                                                     // player1Score0_s1_agent:m0_read -> player1Score0_s1_translator:uav_read
	wire          player1score0_s1_agent_m0_readdatavalid;                                            // player1Score0_s1_translator:uav_readdatavalid -> player1Score0_s1_agent:m0_readdatavalid
	wire          player1score0_s1_agent_m0_lock;                                                     // player1Score0_s1_agent:m0_lock -> player1Score0_s1_translator:uav_lock
	wire   [31:0] player1score0_s1_agent_m0_writedata;                                                // player1Score0_s1_agent:m0_writedata -> player1Score0_s1_translator:uav_writedata
	wire          player1score0_s1_agent_m0_write;                                                    // player1Score0_s1_agent:m0_write -> player1Score0_s1_translator:uav_write
	wire    [2:0] player1score0_s1_agent_m0_burstcount;                                               // player1Score0_s1_agent:m0_burstcount -> player1Score0_s1_translator:uav_burstcount
	wire          player1score0_s1_agent_rf_source_valid;                                             // player1Score0_s1_agent:rf_source_valid -> player1Score0_s1_agent_rsp_fifo:in_valid
	wire  [108:0] player1score0_s1_agent_rf_source_data;                                              // player1Score0_s1_agent:rf_source_data -> player1Score0_s1_agent_rsp_fifo:in_data
	wire          player1score0_s1_agent_rf_source_ready;                                             // player1Score0_s1_agent_rsp_fifo:in_ready -> player1Score0_s1_agent:rf_source_ready
	wire          player1score0_s1_agent_rf_source_startofpacket;                                     // player1Score0_s1_agent:rf_source_startofpacket -> player1Score0_s1_agent_rsp_fifo:in_startofpacket
	wire          player1score0_s1_agent_rf_source_endofpacket;                                       // player1Score0_s1_agent:rf_source_endofpacket -> player1Score0_s1_agent_rsp_fifo:in_endofpacket
	wire          player1score0_s1_agent_rsp_fifo_out_valid;                                          // player1Score0_s1_agent_rsp_fifo:out_valid -> player1Score0_s1_agent:rf_sink_valid
	wire  [108:0] player1score0_s1_agent_rsp_fifo_out_data;                                           // player1Score0_s1_agent_rsp_fifo:out_data -> player1Score0_s1_agent:rf_sink_data
	wire          player1score0_s1_agent_rsp_fifo_out_ready;                                          // player1Score0_s1_agent:rf_sink_ready -> player1Score0_s1_agent_rsp_fifo:out_ready
	wire          player1score0_s1_agent_rsp_fifo_out_startofpacket;                                  // player1Score0_s1_agent_rsp_fifo:out_startofpacket -> player1Score0_s1_agent:rf_sink_startofpacket
	wire          player1score0_s1_agent_rsp_fifo_out_endofpacket;                                    // player1Score0_s1_agent_rsp_fifo:out_endofpacket -> player1Score0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_021_src_valid;                                                              // cmd_mux_021:src_valid -> player1Score0_s1_agent:cp_valid
	wire  [107:0] cmd_mux_021_src_data;                                                               // cmd_mux_021:src_data -> player1Score0_s1_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                              // player1Score0_s1_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [27:0] cmd_mux_021_src_channel;                                                            // cmd_mux_021:src_channel -> player1Score0_s1_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                                      // cmd_mux_021:src_startofpacket -> player1Score0_s1_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                        // cmd_mux_021:src_endofpacket -> player1Score0_s1_agent:cp_endofpacket
	wire   [31:0] player1score1_s1_agent_m0_readdata;                                                 // player1Score1_s1_translator:uav_readdata -> player1Score1_s1_agent:m0_readdata
	wire          player1score1_s1_agent_m0_waitrequest;                                              // player1Score1_s1_translator:uav_waitrequest -> player1Score1_s1_agent:m0_waitrequest
	wire          player1score1_s1_agent_m0_debugaccess;                                              // player1Score1_s1_agent:m0_debugaccess -> player1Score1_s1_translator:uav_debugaccess
	wire   [27:0] player1score1_s1_agent_m0_address;                                                  // player1Score1_s1_agent:m0_address -> player1Score1_s1_translator:uav_address
	wire    [3:0] player1score1_s1_agent_m0_byteenable;                                               // player1Score1_s1_agent:m0_byteenable -> player1Score1_s1_translator:uav_byteenable
	wire          player1score1_s1_agent_m0_read;                                                     // player1Score1_s1_agent:m0_read -> player1Score1_s1_translator:uav_read
	wire          player1score1_s1_agent_m0_readdatavalid;                                            // player1Score1_s1_translator:uav_readdatavalid -> player1Score1_s1_agent:m0_readdatavalid
	wire          player1score1_s1_agent_m0_lock;                                                     // player1Score1_s1_agent:m0_lock -> player1Score1_s1_translator:uav_lock
	wire   [31:0] player1score1_s1_agent_m0_writedata;                                                // player1Score1_s1_agent:m0_writedata -> player1Score1_s1_translator:uav_writedata
	wire          player1score1_s1_agent_m0_write;                                                    // player1Score1_s1_agent:m0_write -> player1Score1_s1_translator:uav_write
	wire    [2:0] player1score1_s1_agent_m0_burstcount;                                               // player1Score1_s1_agent:m0_burstcount -> player1Score1_s1_translator:uav_burstcount
	wire          player1score1_s1_agent_rf_source_valid;                                             // player1Score1_s1_agent:rf_source_valid -> player1Score1_s1_agent_rsp_fifo:in_valid
	wire  [108:0] player1score1_s1_agent_rf_source_data;                                              // player1Score1_s1_agent:rf_source_data -> player1Score1_s1_agent_rsp_fifo:in_data
	wire          player1score1_s1_agent_rf_source_ready;                                             // player1Score1_s1_agent_rsp_fifo:in_ready -> player1Score1_s1_agent:rf_source_ready
	wire          player1score1_s1_agent_rf_source_startofpacket;                                     // player1Score1_s1_agent:rf_source_startofpacket -> player1Score1_s1_agent_rsp_fifo:in_startofpacket
	wire          player1score1_s1_agent_rf_source_endofpacket;                                       // player1Score1_s1_agent:rf_source_endofpacket -> player1Score1_s1_agent_rsp_fifo:in_endofpacket
	wire          player1score1_s1_agent_rsp_fifo_out_valid;                                          // player1Score1_s1_agent_rsp_fifo:out_valid -> player1Score1_s1_agent:rf_sink_valid
	wire  [108:0] player1score1_s1_agent_rsp_fifo_out_data;                                           // player1Score1_s1_agent_rsp_fifo:out_data -> player1Score1_s1_agent:rf_sink_data
	wire          player1score1_s1_agent_rsp_fifo_out_ready;                                          // player1Score1_s1_agent:rf_sink_ready -> player1Score1_s1_agent_rsp_fifo:out_ready
	wire          player1score1_s1_agent_rsp_fifo_out_startofpacket;                                  // player1Score1_s1_agent_rsp_fifo:out_startofpacket -> player1Score1_s1_agent:rf_sink_startofpacket
	wire          player1score1_s1_agent_rsp_fifo_out_endofpacket;                                    // player1Score1_s1_agent_rsp_fifo:out_endofpacket -> player1Score1_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_022_src_valid;                                                              // cmd_mux_022:src_valid -> player1Score1_s1_agent:cp_valid
	wire  [107:0] cmd_mux_022_src_data;                                                               // cmd_mux_022:src_data -> player1Score1_s1_agent:cp_data
	wire          cmd_mux_022_src_ready;                                                              // player1Score1_s1_agent:cp_ready -> cmd_mux_022:src_ready
	wire   [27:0] cmd_mux_022_src_channel;                                                            // cmd_mux_022:src_channel -> player1Score1_s1_agent:cp_channel
	wire          cmd_mux_022_src_startofpacket;                                                      // cmd_mux_022:src_startofpacket -> player1Score1_s1_agent:cp_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                        // cmd_mux_022:src_endofpacket -> player1Score1_s1_agent:cp_endofpacket
	wire   [31:0] timescreen1_s1_agent_m0_readdata;                                                   // timeScreen1_s1_translator:uav_readdata -> timeScreen1_s1_agent:m0_readdata
	wire          timescreen1_s1_agent_m0_waitrequest;                                                // timeScreen1_s1_translator:uav_waitrequest -> timeScreen1_s1_agent:m0_waitrequest
	wire          timescreen1_s1_agent_m0_debugaccess;                                                // timeScreen1_s1_agent:m0_debugaccess -> timeScreen1_s1_translator:uav_debugaccess
	wire   [27:0] timescreen1_s1_agent_m0_address;                                                    // timeScreen1_s1_agent:m0_address -> timeScreen1_s1_translator:uav_address
	wire    [3:0] timescreen1_s1_agent_m0_byteenable;                                                 // timeScreen1_s1_agent:m0_byteenable -> timeScreen1_s1_translator:uav_byteenable
	wire          timescreen1_s1_agent_m0_read;                                                       // timeScreen1_s1_agent:m0_read -> timeScreen1_s1_translator:uav_read
	wire          timescreen1_s1_agent_m0_readdatavalid;                                              // timeScreen1_s1_translator:uav_readdatavalid -> timeScreen1_s1_agent:m0_readdatavalid
	wire          timescreen1_s1_agent_m0_lock;                                                       // timeScreen1_s1_agent:m0_lock -> timeScreen1_s1_translator:uav_lock
	wire   [31:0] timescreen1_s1_agent_m0_writedata;                                                  // timeScreen1_s1_agent:m0_writedata -> timeScreen1_s1_translator:uav_writedata
	wire          timescreen1_s1_agent_m0_write;                                                      // timeScreen1_s1_agent:m0_write -> timeScreen1_s1_translator:uav_write
	wire    [2:0] timescreen1_s1_agent_m0_burstcount;                                                 // timeScreen1_s1_agent:m0_burstcount -> timeScreen1_s1_translator:uav_burstcount
	wire          timescreen1_s1_agent_rf_source_valid;                                               // timeScreen1_s1_agent:rf_source_valid -> timeScreen1_s1_agent_rsp_fifo:in_valid
	wire  [108:0] timescreen1_s1_agent_rf_source_data;                                                // timeScreen1_s1_agent:rf_source_data -> timeScreen1_s1_agent_rsp_fifo:in_data
	wire          timescreen1_s1_agent_rf_source_ready;                                               // timeScreen1_s1_agent_rsp_fifo:in_ready -> timeScreen1_s1_agent:rf_source_ready
	wire          timescreen1_s1_agent_rf_source_startofpacket;                                       // timeScreen1_s1_agent:rf_source_startofpacket -> timeScreen1_s1_agent_rsp_fifo:in_startofpacket
	wire          timescreen1_s1_agent_rf_source_endofpacket;                                         // timeScreen1_s1_agent:rf_source_endofpacket -> timeScreen1_s1_agent_rsp_fifo:in_endofpacket
	wire          timescreen1_s1_agent_rsp_fifo_out_valid;                                            // timeScreen1_s1_agent_rsp_fifo:out_valid -> timeScreen1_s1_agent:rf_sink_valid
	wire  [108:0] timescreen1_s1_agent_rsp_fifo_out_data;                                             // timeScreen1_s1_agent_rsp_fifo:out_data -> timeScreen1_s1_agent:rf_sink_data
	wire          timescreen1_s1_agent_rsp_fifo_out_ready;                                            // timeScreen1_s1_agent:rf_sink_ready -> timeScreen1_s1_agent_rsp_fifo:out_ready
	wire          timescreen1_s1_agent_rsp_fifo_out_startofpacket;                                    // timeScreen1_s1_agent_rsp_fifo:out_startofpacket -> timeScreen1_s1_agent:rf_sink_startofpacket
	wire          timescreen1_s1_agent_rsp_fifo_out_endofpacket;                                      // timeScreen1_s1_agent_rsp_fifo:out_endofpacket -> timeScreen1_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_023_src_valid;                                                              // cmd_mux_023:src_valid -> timeScreen1_s1_agent:cp_valid
	wire  [107:0] cmd_mux_023_src_data;                                                               // cmd_mux_023:src_data -> timeScreen1_s1_agent:cp_data
	wire          cmd_mux_023_src_ready;                                                              // timeScreen1_s1_agent:cp_ready -> cmd_mux_023:src_ready
	wire   [27:0] cmd_mux_023_src_channel;                                                            // cmd_mux_023:src_channel -> timeScreen1_s1_agent:cp_channel
	wire          cmd_mux_023_src_startofpacket;                                                      // cmd_mux_023:src_startofpacket -> timeScreen1_s1_agent:cp_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                        // cmd_mux_023:src_endofpacket -> timeScreen1_s1_agent:cp_endofpacket
	wire   [31:0] timescreen2_s1_agent_m0_readdata;                                                   // timeScreen2_s1_translator:uav_readdata -> timeScreen2_s1_agent:m0_readdata
	wire          timescreen2_s1_agent_m0_waitrequest;                                                // timeScreen2_s1_translator:uav_waitrequest -> timeScreen2_s1_agent:m0_waitrequest
	wire          timescreen2_s1_agent_m0_debugaccess;                                                // timeScreen2_s1_agent:m0_debugaccess -> timeScreen2_s1_translator:uav_debugaccess
	wire   [27:0] timescreen2_s1_agent_m0_address;                                                    // timeScreen2_s1_agent:m0_address -> timeScreen2_s1_translator:uav_address
	wire    [3:0] timescreen2_s1_agent_m0_byteenable;                                                 // timeScreen2_s1_agent:m0_byteenable -> timeScreen2_s1_translator:uav_byteenable
	wire          timescreen2_s1_agent_m0_read;                                                       // timeScreen2_s1_agent:m0_read -> timeScreen2_s1_translator:uav_read
	wire          timescreen2_s1_agent_m0_readdatavalid;                                              // timeScreen2_s1_translator:uav_readdatavalid -> timeScreen2_s1_agent:m0_readdatavalid
	wire          timescreen2_s1_agent_m0_lock;                                                       // timeScreen2_s1_agent:m0_lock -> timeScreen2_s1_translator:uav_lock
	wire   [31:0] timescreen2_s1_agent_m0_writedata;                                                  // timeScreen2_s1_agent:m0_writedata -> timeScreen2_s1_translator:uav_writedata
	wire          timescreen2_s1_agent_m0_write;                                                      // timeScreen2_s1_agent:m0_write -> timeScreen2_s1_translator:uav_write
	wire    [2:0] timescreen2_s1_agent_m0_burstcount;                                                 // timeScreen2_s1_agent:m0_burstcount -> timeScreen2_s1_translator:uav_burstcount
	wire          timescreen2_s1_agent_rf_source_valid;                                               // timeScreen2_s1_agent:rf_source_valid -> timeScreen2_s1_agent_rsp_fifo:in_valid
	wire  [108:0] timescreen2_s1_agent_rf_source_data;                                                // timeScreen2_s1_agent:rf_source_data -> timeScreen2_s1_agent_rsp_fifo:in_data
	wire          timescreen2_s1_agent_rf_source_ready;                                               // timeScreen2_s1_agent_rsp_fifo:in_ready -> timeScreen2_s1_agent:rf_source_ready
	wire          timescreen2_s1_agent_rf_source_startofpacket;                                       // timeScreen2_s1_agent:rf_source_startofpacket -> timeScreen2_s1_agent_rsp_fifo:in_startofpacket
	wire          timescreen2_s1_agent_rf_source_endofpacket;                                         // timeScreen2_s1_agent:rf_source_endofpacket -> timeScreen2_s1_agent_rsp_fifo:in_endofpacket
	wire          timescreen2_s1_agent_rsp_fifo_out_valid;                                            // timeScreen2_s1_agent_rsp_fifo:out_valid -> timeScreen2_s1_agent:rf_sink_valid
	wire  [108:0] timescreen2_s1_agent_rsp_fifo_out_data;                                             // timeScreen2_s1_agent_rsp_fifo:out_data -> timeScreen2_s1_agent:rf_sink_data
	wire          timescreen2_s1_agent_rsp_fifo_out_ready;                                            // timeScreen2_s1_agent:rf_sink_ready -> timeScreen2_s1_agent_rsp_fifo:out_ready
	wire          timescreen2_s1_agent_rsp_fifo_out_startofpacket;                                    // timeScreen2_s1_agent_rsp_fifo:out_startofpacket -> timeScreen2_s1_agent:rf_sink_startofpacket
	wire          timescreen2_s1_agent_rsp_fifo_out_endofpacket;                                      // timeScreen2_s1_agent_rsp_fifo:out_endofpacket -> timeScreen2_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_024_src_valid;                                                              // cmd_mux_024:src_valid -> timeScreen2_s1_agent:cp_valid
	wire  [107:0] cmd_mux_024_src_data;                                                               // cmd_mux_024:src_data -> timeScreen2_s1_agent:cp_data
	wire          cmd_mux_024_src_ready;                                                              // timeScreen2_s1_agent:cp_ready -> cmd_mux_024:src_ready
	wire   [27:0] cmd_mux_024_src_channel;                                                            // cmd_mux_024:src_channel -> timeScreen2_s1_agent:cp_channel
	wire          cmd_mux_024_src_startofpacket;                                                      // cmd_mux_024:src_startofpacket -> timeScreen2_s1_agent:cp_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                        // cmd_mux_024:src_endofpacket -> timeScreen2_s1_agent:cp_endofpacket
	wire   [31:0] timescreen0_s1_agent_m0_readdata;                                                   // timeScreen0_s1_translator:uav_readdata -> timeScreen0_s1_agent:m0_readdata
	wire          timescreen0_s1_agent_m0_waitrequest;                                                // timeScreen0_s1_translator:uav_waitrequest -> timeScreen0_s1_agent:m0_waitrequest
	wire          timescreen0_s1_agent_m0_debugaccess;                                                // timeScreen0_s1_agent:m0_debugaccess -> timeScreen0_s1_translator:uav_debugaccess
	wire   [27:0] timescreen0_s1_agent_m0_address;                                                    // timeScreen0_s1_agent:m0_address -> timeScreen0_s1_translator:uav_address
	wire    [3:0] timescreen0_s1_agent_m0_byteenable;                                                 // timeScreen0_s1_agent:m0_byteenable -> timeScreen0_s1_translator:uav_byteenable
	wire          timescreen0_s1_agent_m0_read;                                                       // timeScreen0_s1_agent:m0_read -> timeScreen0_s1_translator:uav_read
	wire          timescreen0_s1_agent_m0_readdatavalid;                                              // timeScreen0_s1_translator:uav_readdatavalid -> timeScreen0_s1_agent:m0_readdatavalid
	wire          timescreen0_s1_agent_m0_lock;                                                       // timeScreen0_s1_agent:m0_lock -> timeScreen0_s1_translator:uav_lock
	wire   [31:0] timescreen0_s1_agent_m0_writedata;                                                  // timeScreen0_s1_agent:m0_writedata -> timeScreen0_s1_translator:uav_writedata
	wire          timescreen0_s1_agent_m0_write;                                                      // timeScreen0_s1_agent:m0_write -> timeScreen0_s1_translator:uav_write
	wire    [2:0] timescreen0_s1_agent_m0_burstcount;                                                 // timeScreen0_s1_agent:m0_burstcount -> timeScreen0_s1_translator:uav_burstcount
	wire          timescreen0_s1_agent_rf_source_valid;                                               // timeScreen0_s1_agent:rf_source_valid -> timeScreen0_s1_agent_rsp_fifo:in_valid
	wire  [108:0] timescreen0_s1_agent_rf_source_data;                                                // timeScreen0_s1_agent:rf_source_data -> timeScreen0_s1_agent_rsp_fifo:in_data
	wire          timescreen0_s1_agent_rf_source_ready;                                               // timeScreen0_s1_agent_rsp_fifo:in_ready -> timeScreen0_s1_agent:rf_source_ready
	wire          timescreen0_s1_agent_rf_source_startofpacket;                                       // timeScreen0_s1_agent:rf_source_startofpacket -> timeScreen0_s1_agent_rsp_fifo:in_startofpacket
	wire          timescreen0_s1_agent_rf_source_endofpacket;                                         // timeScreen0_s1_agent:rf_source_endofpacket -> timeScreen0_s1_agent_rsp_fifo:in_endofpacket
	wire          timescreen0_s1_agent_rsp_fifo_out_valid;                                            // timeScreen0_s1_agent_rsp_fifo:out_valid -> timeScreen0_s1_agent:rf_sink_valid
	wire  [108:0] timescreen0_s1_agent_rsp_fifo_out_data;                                             // timeScreen0_s1_agent_rsp_fifo:out_data -> timeScreen0_s1_agent:rf_sink_data
	wire          timescreen0_s1_agent_rsp_fifo_out_ready;                                            // timeScreen0_s1_agent:rf_sink_ready -> timeScreen0_s1_agent_rsp_fifo:out_ready
	wire          timescreen0_s1_agent_rsp_fifo_out_startofpacket;                                    // timeScreen0_s1_agent_rsp_fifo:out_startofpacket -> timeScreen0_s1_agent:rf_sink_startofpacket
	wire          timescreen0_s1_agent_rsp_fifo_out_endofpacket;                                      // timeScreen0_s1_agent_rsp_fifo:out_endofpacket -> timeScreen0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_025_src_valid;                                                              // cmd_mux_025:src_valid -> timeScreen0_s1_agent:cp_valid
	wire  [107:0] cmd_mux_025_src_data;                                                               // cmd_mux_025:src_data -> timeScreen0_s1_agent:cp_data
	wire          cmd_mux_025_src_ready;                                                              // timeScreen0_s1_agent:cp_ready -> cmd_mux_025:src_ready
	wire   [27:0] cmd_mux_025_src_channel;                                                            // cmd_mux_025:src_channel -> timeScreen0_s1_agent:cp_channel
	wire          cmd_mux_025_src_startofpacket;                                                      // cmd_mux_025:src_startofpacket -> timeScreen0_s1_agent:cp_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                        // cmd_mux_025:src_endofpacket -> timeScreen0_s1_agent:cp_endofpacket
	wire   [31:0] audio_select_s1_agent_m0_readdata;                                                  // audio_select_s1_translator:uav_readdata -> audio_select_s1_agent:m0_readdata
	wire          audio_select_s1_agent_m0_waitrequest;                                               // audio_select_s1_translator:uav_waitrequest -> audio_select_s1_agent:m0_waitrequest
	wire          audio_select_s1_agent_m0_debugaccess;                                               // audio_select_s1_agent:m0_debugaccess -> audio_select_s1_translator:uav_debugaccess
	wire   [27:0] audio_select_s1_agent_m0_address;                                                   // audio_select_s1_agent:m0_address -> audio_select_s1_translator:uav_address
	wire    [3:0] audio_select_s1_agent_m0_byteenable;                                                // audio_select_s1_agent:m0_byteenable -> audio_select_s1_translator:uav_byteenable
	wire          audio_select_s1_agent_m0_read;                                                      // audio_select_s1_agent:m0_read -> audio_select_s1_translator:uav_read
	wire          audio_select_s1_agent_m0_readdatavalid;                                             // audio_select_s1_translator:uav_readdatavalid -> audio_select_s1_agent:m0_readdatavalid
	wire          audio_select_s1_agent_m0_lock;                                                      // audio_select_s1_agent:m0_lock -> audio_select_s1_translator:uav_lock
	wire   [31:0] audio_select_s1_agent_m0_writedata;                                                 // audio_select_s1_agent:m0_writedata -> audio_select_s1_translator:uav_writedata
	wire          audio_select_s1_agent_m0_write;                                                     // audio_select_s1_agent:m0_write -> audio_select_s1_translator:uav_write
	wire    [2:0] audio_select_s1_agent_m0_burstcount;                                                // audio_select_s1_agent:m0_burstcount -> audio_select_s1_translator:uav_burstcount
	wire          audio_select_s1_agent_rf_source_valid;                                              // audio_select_s1_agent:rf_source_valid -> audio_select_s1_agent_rsp_fifo:in_valid
	wire  [108:0] audio_select_s1_agent_rf_source_data;                                               // audio_select_s1_agent:rf_source_data -> audio_select_s1_agent_rsp_fifo:in_data
	wire          audio_select_s1_agent_rf_source_ready;                                              // audio_select_s1_agent_rsp_fifo:in_ready -> audio_select_s1_agent:rf_source_ready
	wire          audio_select_s1_agent_rf_source_startofpacket;                                      // audio_select_s1_agent:rf_source_startofpacket -> audio_select_s1_agent_rsp_fifo:in_startofpacket
	wire          audio_select_s1_agent_rf_source_endofpacket;                                        // audio_select_s1_agent:rf_source_endofpacket -> audio_select_s1_agent_rsp_fifo:in_endofpacket
	wire          audio_select_s1_agent_rsp_fifo_out_valid;                                           // audio_select_s1_agent_rsp_fifo:out_valid -> audio_select_s1_agent:rf_sink_valid
	wire  [108:0] audio_select_s1_agent_rsp_fifo_out_data;                                            // audio_select_s1_agent_rsp_fifo:out_data -> audio_select_s1_agent:rf_sink_data
	wire          audio_select_s1_agent_rsp_fifo_out_ready;                                           // audio_select_s1_agent:rf_sink_ready -> audio_select_s1_agent_rsp_fifo:out_ready
	wire          audio_select_s1_agent_rsp_fifo_out_startofpacket;                                   // audio_select_s1_agent_rsp_fifo:out_startofpacket -> audio_select_s1_agent:rf_sink_startofpacket
	wire          audio_select_s1_agent_rsp_fifo_out_endofpacket;                                     // audio_select_s1_agent_rsp_fifo:out_endofpacket -> audio_select_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_026_src_valid;                                                              // cmd_mux_026:src_valid -> audio_select_s1_agent:cp_valid
	wire  [107:0] cmd_mux_026_src_data;                                                               // cmd_mux_026:src_data -> audio_select_s1_agent:cp_data
	wire          cmd_mux_026_src_ready;                                                              // audio_select_s1_agent:cp_ready -> cmd_mux_026:src_ready
	wire   [27:0] cmd_mux_026_src_channel;                                                            // cmd_mux_026:src_channel -> audio_select_s1_agent:cp_channel
	wire          cmd_mux_026_src_startofpacket;                                                      // cmd_mux_026:src_startofpacket -> audio_select_s1_agent:cp_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                        // cmd_mux_026:src_endofpacket -> audio_select_s1_agent:cp_endofpacket
	wire   [31:0] boot_up_s1_agent_m0_readdata;                                                       // Boot_Up_s1_translator:uav_readdata -> Boot_Up_s1_agent:m0_readdata
	wire          boot_up_s1_agent_m0_waitrequest;                                                    // Boot_Up_s1_translator:uav_waitrequest -> Boot_Up_s1_agent:m0_waitrequest
	wire          boot_up_s1_agent_m0_debugaccess;                                                    // Boot_Up_s1_agent:m0_debugaccess -> Boot_Up_s1_translator:uav_debugaccess
	wire   [27:0] boot_up_s1_agent_m0_address;                                                        // Boot_Up_s1_agent:m0_address -> Boot_Up_s1_translator:uav_address
	wire    [3:0] boot_up_s1_agent_m0_byteenable;                                                     // Boot_Up_s1_agent:m0_byteenable -> Boot_Up_s1_translator:uav_byteenable
	wire          boot_up_s1_agent_m0_read;                                                           // Boot_Up_s1_agent:m0_read -> Boot_Up_s1_translator:uav_read
	wire          boot_up_s1_agent_m0_readdatavalid;                                                  // Boot_Up_s1_translator:uav_readdatavalid -> Boot_Up_s1_agent:m0_readdatavalid
	wire          boot_up_s1_agent_m0_lock;                                                           // Boot_Up_s1_agent:m0_lock -> Boot_Up_s1_translator:uav_lock
	wire   [31:0] boot_up_s1_agent_m0_writedata;                                                      // Boot_Up_s1_agent:m0_writedata -> Boot_Up_s1_translator:uav_writedata
	wire          boot_up_s1_agent_m0_write;                                                          // Boot_Up_s1_agent:m0_write -> Boot_Up_s1_translator:uav_write
	wire    [2:0] boot_up_s1_agent_m0_burstcount;                                                     // Boot_Up_s1_agent:m0_burstcount -> Boot_Up_s1_translator:uav_burstcount
	wire          boot_up_s1_agent_rf_source_valid;                                                   // Boot_Up_s1_agent:rf_source_valid -> Boot_Up_s1_agent_rsp_fifo:in_valid
	wire  [108:0] boot_up_s1_agent_rf_source_data;                                                    // Boot_Up_s1_agent:rf_source_data -> Boot_Up_s1_agent_rsp_fifo:in_data
	wire          boot_up_s1_agent_rf_source_ready;                                                   // Boot_Up_s1_agent_rsp_fifo:in_ready -> Boot_Up_s1_agent:rf_source_ready
	wire          boot_up_s1_agent_rf_source_startofpacket;                                           // Boot_Up_s1_agent:rf_source_startofpacket -> Boot_Up_s1_agent_rsp_fifo:in_startofpacket
	wire          boot_up_s1_agent_rf_source_endofpacket;                                             // Boot_Up_s1_agent:rf_source_endofpacket -> Boot_Up_s1_agent_rsp_fifo:in_endofpacket
	wire          boot_up_s1_agent_rsp_fifo_out_valid;                                                // Boot_Up_s1_agent_rsp_fifo:out_valid -> Boot_Up_s1_agent:rf_sink_valid
	wire  [108:0] boot_up_s1_agent_rsp_fifo_out_data;                                                 // Boot_Up_s1_agent_rsp_fifo:out_data -> Boot_Up_s1_agent:rf_sink_data
	wire          boot_up_s1_agent_rsp_fifo_out_ready;                                                // Boot_Up_s1_agent:rf_sink_ready -> Boot_Up_s1_agent_rsp_fifo:out_ready
	wire          boot_up_s1_agent_rsp_fifo_out_startofpacket;                                        // Boot_Up_s1_agent_rsp_fifo:out_startofpacket -> Boot_Up_s1_agent:rf_sink_startofpacket
	wire          boot_up_s1_agent_rsp_fifo_out_endofpacket;                                          // Boot_Up_s1_agent_rsp_fifo:out_endofpacket -> Boot_Up_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_027_src_valid;                                                              // cmd_mux_027:src_valid -> Boot_Up_s1_agent:cp_valid
	wire  [107:0] cmd_mux_027_src_data;                                                               // cmd_mux_027:src_data -> Boot_Up_s1_agent:cp_data
	wire          cmd_mux_027_src_ready;                                                              // Boot_Up_s1_agent:cp_ready -> cmd_mux_027:src_ready
	wire   [27:0] cmd_mux_027_src_channel;                                                            // cmd_mux_027:src_channel -> Boot_Up_s1_agent:cp_channel
	wire          cmd_mux_027_src_startofpacket;                                                      // cmd_mux_027:src_startofpacket -> Boot_Up_s1_agent:cp_startofpacket
	wire          cmd_mux_027_src_endofpacket;                                                        // cmd_mux_027:src_endofpacket -> Boot_Up_s1_agent:cp_endofpacket
	wire          nios2_qsys_0_data_master_agent_cp_valid;                                            // nios2_qsys_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [107:0] nios2_qsys_0_data_master_agent_cp_data;                                             // nios2_qsys_0_data_master_agent:cp_data -> router:sink_data
	wire          nios2_qsys_0_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_qsys_0_data_master_agent:cp_ready
	wire          nios2_qsys_0_data_master_agent_cp_startofpacket;                                    // nios2_qsys_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_qsys_0_data_master_agent_cp_endofpacket;                                      // nios2_qsys_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [107:0] router_src_data;                                                                    // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                   // cmd_demux:sink_ready -> router:src_ready
	wire   [27:0] router_src_channel;                                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios2_qsys_0_instruction_master_agent_cp_valid;                                     // nios2_qsys_0_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [107:0] nios2_qsys_0_instruction_master_agent_cp_data;                                      // nios2_qsys_0_instruction_master_agent:cp_data -> router_001:sink_data
	wire          nios2_qsys_0_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_qsys_0_instruction_master_agent:cp_ready
	wire          nios2_qsys_0_instruction_master_agent_cp_startofpacket;                             // nios2_qsys_0_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_qsys_0_instruction_master_agent_cp_endofpacket;                               // nios2_qsys_0_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [107:0] router_001_src_data;                                                                // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                               // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [27:0] router_001_src_channel;                                                             // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                       // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [107:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                        // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                       // router_002:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                               // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                                 // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> rsp_demux:sink_valid
	wire  [107:0] router_002_src_data;                                                                // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                               // rsp_demux:sink_ready -> router_002:src_ready
	wire   [27:0] router_002_src_channel;                                                             // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_valid;                                          // sysid_qsys_0_control_slave_agent:rp_valid -> router_003:sink_valid
	wire  [107:0] sysid_qsys_0_control_slave_agent_rp_data;                                           // sysid_qsys_0_control_slave_agent:rp_data -> router_003:sink_data
	wire          sysid_qsys_0_control_slave_agent_rp_ready;                                          // router_003:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire          sysid_qsys_0_control_slave_agent_rp_startofpacket;                                  // sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_endofpacket;                                    // sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [107:0] router_003_src_data;                                                                // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                               // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [27:0] router_003_src_channel;                                                             // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          nios2_qsys_0_debug_mem_slave_agent_rp_valid;                                        // nios2_qsys_0_debug_mem_slave_agent:rp_valid -> router_004:sink_valid
	wire  [107:0] nios2_qsys_0_debug_mem_slave_agent_rp_data;                                         // nios2_qsys_0_debug_mem_slave_agent:rp_data -> router_004:sink_data
	wire          nios2_qsys_0_debug_mem_slave_agent_rp_ready;                                        // router_004:sink_ready -> nios2_qsys_0_debug_mem_slave_agent:rp_ready
	wire          nios2_qsys_0_debug_mem_slave_agent_rp_startofpacket;                                // nios2_qsys_0_debug_mem_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          nios2_qsys_0_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_qsys_0_debug_mem_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [107:0] router_004_src_data;                                                                // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                               // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [27:0] router_004_src_channel;                                                             // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          sdram_pll_audio_pll_pll_slave_agent_rp_valid;                                       // sdram_pll_audio_pll_pll_slave_agent:rp_valid -> router_005:sink_valid
	wire  [107:0] sdram_pll_audio_pll_pll_slave_agent_rp_data;                                        // sdram_pll_audio_pll_pll_slave_agent:rp_data -> router_005:sink_data
	wire          sdram_pll_audio_pll_pll_slave_agent_rp_ready;                                       // router_005:sink_ready -> sdram_pll_audio_pll_pll_slave_agent:rp_ready
	wire          sdram_pll_audio_pll_pll_slave_agent_rp_startofpacket;                               // sdram_pll_audio_pll_pll_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          sdram_pll_audio_pll_pll_slave_agent_rp_endofpacket;                                 // sdram_pll_audio_pll_pll_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                               // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [107:0] router_005_src_data;                                                                // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                               // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [27:0] router_005_src_channel;                                                             // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                            // sdram_s1_agent:rp_valid -> router_006:sink_valid
	wire  [107:0] sdram_s1_agent_rp_data;                                                             // sdram_s1_agent:rp_data -> router_006:sink_data
	wire          sdram_s1_agent_rp_ready;                                                            // router_006:sink_ready -> sdram_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                    // sdram_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                      // sdram_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                               // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [107:0] router_006_src_data;                                                                // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                               // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [27:0] router_006_src_channel;                                                             // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          timer_0_s1_agent_rp_valid;                                                          // timer_0_s1_agent:rp_valid -> router_007:sink_valid
	wire  [107:0] timer_0_s1_agent_rp_data;                                                           // timer_0_s1_agent:rp_data -> router_007:sink_data
	wire          timer_0_s1_agent_rp_ready;                                                          // router_007:sink_ready -> timer_0_s1_agent:rp_ready
	wire          timer_0_s1_agent_rp_startofpacket;                                                  // timer_0_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          timer_0_s1_agent_rp_endofpacket;                                                    // timer_0_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                               // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [107:0] router_007_src_data;                                                                // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                               // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [27:0] router_007_src_channel;                                                             // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          avalon_blitter_0_s1_agent_rp_valid;                                                 // avalon_blitter_0_s1_agent:rp_valid -> router_008:sink_valid
	wire  [107:0] avalon_blitter_0_s1_agent_rp_data;                                                  // avalon_blitter_0_s1_agent:rp_data -> router_008:sink_data
	wire          avalon_blitter_0_s1_agent_rp_ready;                                                 // router_008:sink_ready -> avalon_blitter_0_s1_agent:rp_ready
	wire          avalon_blitter_0_s1_agent_rp_startofpacket;                                         // avalon_blitter_0_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          avalon_blitter_0_s1_agent_rp_endofpacket;                                           // avalon_blitter_0_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                               // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [107:0] router_008_src_data;                                                                // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                               // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [27:0] router_008_src_channel;                                                             // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          otg_hpi_address_s1_agent_rp_valid;                                                  // otg_hpi_address_s1_agent:rp_valid -> router_009:sink_valid
	wire  [107:0] otg_hpi_address_s1_agent_rp_data;                                                   // otg_hpi_address_s1_agent:rp_data -> router_009:sink_data
	wire          otg_hpi_address_s1_agent_rp_ready;                                                  // router_009:sink_ready -> otg_hpi_address_s1_agent:rp_ready
	wire          otg_hpi_address_s1_agent_rp_startofpacket;                                          // otg_hpi_address_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          otg_hpi_address_s1_agent_rp_endofpacket;                                            // otg_hpi_address_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                               // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [107:0] router_009_src_data;                                                                // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                               // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [27:0] router_009_src_channel;                                                             // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          otg_hpi_data_s1_agent_rp_valid;                                                     // otg_hpi_data_s1_agent:rp_valid -> router_010:sink_valid
	wire  [107:0] otg_hpi_data_s1_agent_rp_data;                                                      // otg_hpi_data_s1_agent:rp_data -> router_010:sink_data
	wire          otg_hpi_data_s1_agent_rp_ready;                                                     // router_010:sink_ready -> otg_hpi_data_s1_agent:rp_ready
	wire          otg_hpi_data_s1_agent_rp_startofpacket;                                             // otg_hpi_data_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          otg_hpi_data_s1_agent_rp_endofpacket;                                               // otg_hpi_data_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                               // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [107:0] router_010_src_data;                                                                // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                               // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [27:0] router_010_src_channel;                                                             // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          otg_hpi_r_s1_agent_rp_valid;                                                        // otg_hpi_r_s1_agent:rp_valid -> router_011:sink_valid
	wire  [107:0] otg_hpi_r_s1_agent_rp_data;                                                         // otg_hpi_r_s1_agent:rp_data -> router_011:sink_data
	wire          otg_hpi_r_s1_agent_rp_ready;                                                        // router_011:sink_ready -> otg_hpi_r_s1_agent:rp_ready
	wire          otg_hpi_r_s1_agent_rp_startofpacket;                                                // otg_hpi_r_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          otg_hpi_r_s1_agent_rp_endofpacket;                                                  // otg_hpi_r_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                               // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [107:0] router_011_src_data;                                                                // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                               // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [27:0] router_011_src_channel;                                                             // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                                       // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                         // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          otg_hpi_w_s1_agent_rp_valid;                                                        // otg_hpi_w_s1_agent:rp_valid -> router_012:sink_valid
	wire  [107:0] otg_hpi_w_s1_agent_rp_data;                                                         // otg_hpi_w_s1_agent:rp_data -> router_012:sink_data
	wire          otg_hpi_w_s1_agent_rp_ready;                                                        // router_012:sink_ready -> otg_hpi_w_s1_agent:rp_ready
	wire          otg_hpi_w_s1_agent_rp_startofpacket;                                                // otg_hpi_w_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          otg_hpi_w_s1_agent_rp_endofpacket;                                                  // otg_hpi_w_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                               // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [107:0] router_012_src_data;                                                                // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                               // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [27:0] router_012_src_channel;                                                             // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                                       // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                         // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          otg_hpi_cs_s1_agent_rp_valid;                                                       // otg_hpi_cs_s1_agent:rp_valid -> router_013:sink_valid
	wire  [107:0] otg_hpi_cs_s1_agent_rp_data;                                                        // otg_hpi_cs_s1_agent:rp_data -> router_013:sink_data
	wire          otg_hpi_cs_s1_agent_rp_ready;                                                       // router_013:sink_ready -> otg_hpi_cs_s1_agent:rp_ready
	wire          otg_hpi_cs_s1_agent_rp_startofpacket;                                               // otg_hpi_cs_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          otg_hpi_cs_s1_agent_rp_endofpacket;                                                 // otg_hpi_cs_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                               // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [107:0] router_013_src_data;                                                                // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                                               // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [27:0] router_013_src_channel;                                                             // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                                       // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                                         // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          otg_hpi_reset_s1_agent_rp_valid;                                                    // otg_hpi_reset_s1_agent:rp_valid -> router_014:sink_valid
	wire  [107:0] otg_hpi_reset_s1_agent_rp_data;                                                     // otg_hpi_reset_s1_agent:rp_data -> router_014:sink_data
	wire          otg_hpi_reset_s1_agent_rp_ready;                                                    // router_014:sink_ready -> otg_hpi_reset_s1_agent:rp_ready
	wire          otg_hpi_reset_s1_agent_rp_startofpacket;                                            // otg_hpi_reset_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          otg_hpi_reset_s1_agent_rp_endofpacket;                                              // otg_hpi_reset_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                               // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [107:0] router_014_src_data;                                                                // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                               // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [27:0] router_014_src_channel;                                                             // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                                       // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                                         // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          audio_init_s1_agent_rp_valid;                                                       // audio_INIT_s1_agent:rp_valid -> router_015:sink_valid
	wire  [107:0] audio_init_s1_agent_rp_data;                                                        // audio_INIT_s1_agent:rp_data -> router_015:sink_data
	wire          audio_init_s1_agent_rp_ready;                                                       // router_015:sink_ready -> audio_INIT_s1_agent:rp_ready
	wire          audio_init_s1_agent_rp_startofpacket;                                               // audio_INIT_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          audio_init_s1_agent_rp_endofpacket;                                                 // audio_INIT_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                               // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [107:0] router_015_src_data;                                                                // router_015:src_data -> rsp_demux_013:sink_data
	wire          router_015_src_ready;                                                               // rsp_demux_013:sink_ready -> router_015:src_ready
	wire   [27:0] router_015_src_channel;                                                             // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_startofpacket;                                                       // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_015_src_endofpacket;                                                         // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          audio_init_f_s1_agent_rp_valid;                                                     // audio_INIT_F_s1_agent:rp_valid -> router_016:sink_valid
	wire  [107:0] audio_init_f_s1_agent_rp_data;                                                      // audio_INIT_F_s1_agent:rp_data -> router_016:sink_data
	wire          audio_init_f_s1_agent_rp_ready;                                                     // router_016:sink_ready -> audio_INIT_F_s1_agent:rp_ready
	wire          audio_init_f_s1_agent_rp_startofpacket;                                             // audio_INIT_F_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          audio_init_f_s1_agent_rp_endofpacket;                                               // audio_INIT_F_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                               // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [107:0] router_016_src_data;                                                                // router_016:src_data -> rsp_demux_014:sink_data
	wire          router_016_src_ready;                                                               // rsp_demux_014:sink_ready -> router_016:src_ready
	wire   [27:0] router_016_src_channel;                                                             // router_016:src_channel -> rsp_demux_014:sink_channel
	wire          router_016_src_startofpacket;                                                       // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_016_src_endofpacket;                                                         // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          audio_back_vol_s1_agent_rp_valid;                                                   // audio_back_vol_s1_agent:rp_valid -> router_017:sink_valid
	wire  [107:0] audio_back_vol_s1_agent_rp_data;                                                    // audio_back_vol_s1_agent:rp_data -> router_017:sink_data
	wire          audio_back_vol_s1_agent_rp_ready;                                                   // router_017:sink_ready -> audio_back_vol_s1_agent:rp_ready
	wire          audio_back_vol_s1_agent_rp_startofpacket;                                           // audio_back_vol_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          audio_back_vol_s1_agent_rp_endofpacket;                                             // audio_back_vol_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                               // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [107:0] router_017_src_data;                                                                // router_017:src_data -> rsp_demux_015:sink_data
	wire          router_017_src_ready;                                                               // rsp_demux_015:sink_ready -> router_017:src_ready
	wire   [27:0] router_017_src_channel;                                                             // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_startofpacket;                                                       // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_017_src_endofpacket;                                                         // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          audio_bomb_vol_s1_agent_rp_valid;                                                   // audio_bomb_vol_s1_agent:rp_valid -> router_018:sink_valid
	wire  [107:0] audio_bomb_vol_s1_agent_rp_data;                                                    // audio_bomb_vol_s1_agent:rp_data -> router_018:sink_data
	wire          audio_bomb_vol_s1_agent_rp_ready;                                                   // router_018:sink_ready -> audio_bomb_vol_s1_agent:rp_ready
	wire          audio_bomb_vol_s1_agent_rp_startofpacket;                                           // audio_bomb_vol_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          audio_bomb_vol_s1_agent_rp_endofpacket;                                             // audio_bomb_vol_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                               // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [107:0] router_018_src_data;                                                                // router_018:src_data -> rsp_demux_016:sink_data
	wire          router_018_src_ready;                                                               // rsp_demux_016:sink_ready -> router_018:src_ready
	wire   [27:0] router_018_src_channel;                                                             // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_startofpacket;                                                       // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_018_src_endofpacket;                                                         // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          audio_bomb_active_s1_agent_rp_valid;                                                // audio_bomb_active_s1_agent:rp_valid -> router_019:sink_valid
	wire  [107:0] audio_bomb_active_s1_agent_rp_data;                                                 // audio_bomb_active_s1_agent:rp_data -> router_019:sink_data
	wire          audio_bomb_active_s1_agent_rp_ready;                                                // router_019:sink_ready -> audio_bomb_active_s1_agent:rp_ready
	wire          audio_bomb_active_s1_agent_rp_startofpacket;                                        // audio_bomb_active_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          audio_bomb_active_s1_agent_rp_endofpacket;                                          // audio_bomb_active_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                               // router_019:src_valid -> rsp_demux_017:sink_valid
	wire  [107:0] router_019_src_data;                                                                // router_019:src_data -> rsp_demux_017:sink_data
	wire          router_019_src_ready;                                                               // rsp_demux_017:sink_ready -> router_019:src_ready
	wire   [27:0] router_019_src_channel;                                                             // router_019:src_channel -> rsp_demux_017:sink_channel
	wire          router_019_src_startofpacket;                                                       // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_019_src_endofpacket;                                                         // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          leds_s1_agent_rp_valid;                                                             // LEDs_s1_agent:rp_valid -> router_020:sink_valid
	wire  [107:0] leds_s1_agent_rp_data;                                                              // LEDs_s1_agent:rp_data -> router_020:sink_data
	wire          leds_s1_agent_rp_ready;                                                             // router_020:sink_ready -> LEDs_s1_agent:rp_ready
	wire          leds_s1_agent_rp_startofpacket;                                                     // LEDs_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          leds_s1_agent_rp_endofpacket;                                                       // LEDs_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                               // router_020:src_valid -> rsp_demux_018:sink_valid
	wire  [107:0] router_020_src_data;                                                                // router_020:src_data -> rsp_demux_018:sink_data
	wire          router_020_src_ready;                                                               // rsp_demux_018:sink_ready -> router_020:src_ready
	wire   [27:0] router_020_src_channel;                                                             // router_020:src_channel -> rsp_demux_018:sink_channel
	wire          router_020_src_startofpacket;                                                       // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_020_src_endofpacket;                                                         // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          player2score0_s1_agent_rp_valid;                                                    // player2Score0_s1_agent:rp_valid -> router_021:sink_valid
	wire  [107:0] player2score0_s1_agent_rp_data;                                                     // player2Score0_s1_agent:rp_data -> router_021:sink_data
	wire          player2score0_s1_agent_rp_ready;                                                    // router_021:sink_ready -> player2Score0_s1_agent:rp_ready
	wire          player2score0_s1_agent_rp_startofpacket;                                            // player2Score0_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          player2score0_s1_agent_rp_endofpacket;                                              // player2Score0_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                               // router_021:src_valid -> rsp_demux_019:sink_valid
	wire  [107:0] router_021_src_data;                                                                // router_021:src_data -> rsp_demux_019:sink_data
	wire          router_021_src_ready;                                                               // rsp_demux_019:sink_ready -> router_021:src_ready
	wire   [27:0] router_021_src_channel;                                                             // router_021:src_channel -> rsp_demux_019:sink_channel
	wire          router_021_src_startofpacket;                                                       // router_021:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_021_src_endofpacket;                                                         // router_021:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          player2score1_s1_agent_rp_valid;                                                    // player2Score1_s1_agent:rp_valid -> router_022:sink_valid
	wire  [107:0] player2score1_s1_agent_rp_data;                                                     // player2Score1_s1_agent:rp_data -> router_022:sink_data
	wire          player2score1_s1_agent_rp_ready;                                                    // router_022:sink_ready -> player2Score1_s1_agent:rp_ready
	wire          player2score1_s1_agent_rp_startofpacket;                                            // player2Score1_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          player2score1_s1_agent_rp_endofpacket;                                              // player2Score1_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                               // router_022:src_valid -> rsp_demux_020:sink_valid
	wire  [107:0] router_022_src_data;                                                                // router_022:src_data -> rsp_demux_020:sink_data
	wire          router_022_src_ready;                                                               // rsp_demux_020:sink_ready -> router_022:src_ready
	wire   [27:0] router_022_src_channel;                                                             // router_022:src_channel -> rsp_demux_020:sink_channel
	wire          router_022_src_startofpacket;                                                       // router_022:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_022_src_endofpacket;                                                         // router_022:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          player1score0_s1_agent_rp_valid;                                                    // player1Score0_s1_agent:rp_valid -> router_023:sink_valid
	wire  [107:0] player1score0_s1_agent_rp_data;                                                     // player1Score0_s1_agent:rp_data -> router_023:sink_data
	wire          player1score0_s1_agent_rp_ready;                                                    // router_023:sink_ready -> player1Score0_s1_agent:rp_ready
	wire          player1score0_s1_agent_rp_startofpacket;                                            // player1Score0_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          player1score0_s1_agent_rp_endofpacket;                                              // player1Score0_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                               // router_023:src_valid -> rsp_demux_021:sink_valid
	wire  [107:0] router_023_src_data;                                                                // router_023:src_data -> rsp_demux_021:sink_data
	wire          router_023_src_ready;                                                               // rsp_demux_021:sink_ready -> router_023:src_ready
	wire   [27:0] router_023_src_channel;                                                             // router_023:src_channel -> rsp_demux_021:sink_channel
	wire          router_023_src_startofpacket;                                                       // router_023:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_023_src_endofpacket;                                                         // router_023:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          player1score1_s1_agent_rp_valid;                                                    // player1Score1_s1_agent:rp_valid -> router_024:sink_valid
	wire  [107:0] player1score1_s1_agent_rp_data;                                                     // player1Score1_s1_agent:rp_data -> router_024:sink_data
	wire          player1score1_s1_agent_rp_ready;                                                    // router_024:sink_ready -> player1Score1_s1_agent:rp_ready
	wire          player1score1_s1_agent_rp_startofpacket;                                            // player1Score1_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          player1score1_s1_agent_rp_endofpacket;                                              // player1Score1_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                               // router_024:src_valid -> rsp_demux_022:sink_valid
	wire  [107:0] router_024_src_data;                                                                // router_024:src_data -> rsp_demux_022:sink_data
	wire          router_024_src_ready;                                                               // rsp_demux_022:sink_ready -> router_024:src_ready
	wire   [27:0] router_024_src_channel;                                                             // router_024:src_channel -> rsp_demux_022:sink_channel
	wire          router_024_src_startofpacket;                                                       // router_024:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_024_src_endofpacket;                                                         // router_024:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          timescreen1_s1_agent_rp_valid;                                                      // timeScreen1_s1_agent:rp_valid -> router_025:sink_valid
	wire  [107:0] timescreen1_s1_agent_rp_data;                                                       // timeScreen1_s1_agent:rp_data -> router_025:sink_data
	wire          timescreen1_s1_agent_rp_ready;                                                      // router_025:sink_ready -> timeScreen1_s1_agent:rp_ready
	wire          timescreen1_s1_agent_rp_startofpacket;                                              // timeScreen1_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          timescreen1_s1_agent_rp_endofpacket;                                                // timeScreen1_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                               // router_025:src_valid -> rsp_demux_023:sink_valid
	wire  [107:0] router_025_src_data;                                                                // router_025:src_data -> rsp_demux_023:sink_data
	wire          router_025_src_ready;                                                               // rsp_demux_023:sink_ready -> router_025:src_ready
	wire   [27:0] router_025_src_channel;                                                             // router_025:src_channel -> rsp_demux_023:sink_channel
	wire          router_025_src_startofpacket;                                                       // router_025:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_025_src_endofpacket;                                                         // router_025:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          timescreen2_s1_agent_rp_valid;                                                      // timeScreen2_s1_agent:rp_valid -> router_026:sink_valid
	wire  [107:0] timescreen2_s1_agent_rp_data;                                                       // timeScreen2_s1_agent:rp_data -> router_026:sink_data
	wire          timescreen2_s1_agent_rp_ready;                                                      // router_026:sink_ready -> timeScreen2_s1_agent:rp_ready
	wire          timescreen2_s1_agent_rp_startofpacket;                                              // timeScreen2_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          timescreen2_s1_agent_rp_endofpacket;                                                // timeScreen2_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                               // router_026:src_valid -> rsp_demux_024:sink_valid
	wire  [107:0] router_026_src_data;                                                                // router_026:src_data -> rsp_demux_024:sink_data
	wire          router_026_src_ready;                                                               // rsp_demux_024:sink_ready -> router_026:src_ready
	wire   [27:0] router_026_src_channel;                                                             // router_026:src_channel -> rsp_demux_024:sink_channel
	wire          router_026_src_startofpacket;                                                       // router_026:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_026_src_endofpacket;                                                         // router_026:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          timescreen0_s1_agent_rp_valid;                                                      // timeScreen0_s1_agent:rp_valid -> router_027:sink_valid
	wire  [107:0] timescreen0_s1_agent_rp_data;                                                       // timeScreen0_s1_agent:rp_data -> router_027:sink_data
	wire          timescreen0_s1_agent_rp_ready;                                                      // router_027:sink_ready -> timeScreen0_s1_agent:rp_ready
	wire          timescreen0_s1_agent_rp_startofpacket;                                              // timeScreen0_s1_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          timescreen0_s1_agent_rp_endofpacket;                                                // timeScreen0_s1_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                               // router_027:src_valid -> rsp_demux_025:sink_valid
	wire  [107:0] router_027_src_data;                                                                // router_027:src_data -> rsp_demux_025:sink_data
	wire          router_027_src_ready;                                                               // rsp_demux_025:sink_ready -> router_027:src_ready
	wire   [27:0] router_027_src_channel;                                                             // router_027:src_channel -> rsp_demux_025:sink_channel
	wire          router_027_src_startofpacket;                                                       // router_027:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_027_src_endofpacket;                                                         // router_027:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          audio_select_s1_agent_rp_valid;                                                     // audio_select_s1_agent:rp_valid -> router_028:sink_valid
	wire  [107:0] audio_select_s1_agent_rp_data;                                                      // audio_select_s1_agent:rp_data -> router_028:sink_data
	wire          audio_select_s1_agent_rp_ready;                                                     // router_028:sink_ready -> audio_select_s1_agent:rp_ready
	wire          audio_select_s1_agent_rp_startofpacket;                                             // audio_select_s1_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          audio_select_s1_agent_rp_endofpacket;                                               // audio_select_s1_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                               // router_028:src_valid -> rsp_demux_026:sink_valid
	wire  [107:0] router_028_src_data;                                                                // router_028:src_data -> rsp_demux_026:sink_data
	wire          router_028_src_ready;                                                               // rsp_demux_026:sink_ready -> router_028:src_ready
	wire   [27:0] router_028_src_channel;                                                             // router_028:src_channel -> rsp_demux_026:sink_channel
	wire          router_028_src_startofpacket;                                                       // router_028:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_028_src_endofpacket;                                                         // router_028:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          boot_up_s1_agent_rp_valid;                                                          // Boot_Up_s1_agent:rp_valid -> router_029:sink_valid
	wire  [107:0] boot_up_s1_agent_rp_data;                                                           // Boot_Up_s1_agent:rp_data -> router_029:sink_data
	wire          boot_up_s1_agent_rp_ready;                                                          // router_029:sink_ready -> Boot_Up_s1_agent:rp_ready
	wire          boot_up_s1_agent_rp_startofpacket;                                                  // Boot_Up_s1_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire          boot_up_s1_agent_rp_endofpacket;                                                    // Boot_Up_s1_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          router_029_src_valid;                                                               // router_029:src_valid -> rsp_demux_027:sink_valid
	wire  [107:0] router_029_src_data;                                                                // router_029:src_data -> rsp_demux_027:sink_data
	wire          router_029_src_ready;                                                               // rsp_demux_027:sink_ready -> router_029:src_ready
	wire   [27:0] router_029_src_channel;                                                             // router_029:src_channel -> rsp_demux_027:sink_channel
	wire          router_029_src_startofpacket;                                                       // router_029:src_startofpacket -> rsp_demux_027:sink_startofpacket
	wire          router_029_src_endofpacket;                                                         // router_029:src_endofpacket -> rsp_demux_027:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [107:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [27:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [107:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [27:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [107:0] cmd_demux_src2_data;                                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [27:0] cmd_demux_src2_channel;                                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [107:0] cmd_demux_src3_data;                                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [27:0] cmd_demux_src3_channel;                                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                               // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [107:0] cmd_demux_src5_data;                                                                // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                               // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [27:0] cmd_demux_src5_channel;                                                             // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                       // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                         // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                               // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [107:0] cmd_demux_src6_data;                                                                // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                               // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [27:0] cmd_demux_src6_channel;                                                             // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                       // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                         // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                               // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [107:0] cmd_demux_src7_data;                                                                // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                               // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [27:0] cmd_demux_src7_channel;                                                             // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                       // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                         // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                               // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [107:0] cmd_demux_src8_data;                                                                // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                               // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [27:0] cmd_demux_src8_channel;                                                             // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                       // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                         // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                               // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [107:0] cmd_demux_src9_data;                                                                // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                               // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [27:0] cmd_demux_src9_channel;                                                             // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                       // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                         // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                              // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [107:0] cmd_demux_src10_data;                                                               // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                              // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [27:0] cmd_demux_src10_channel;                                                            // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                      // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                        // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                              // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [107:0] cmd_demux_src11_data;                                                               // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                              // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [27:0] cmd_demux_src11_channel;                                                            // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                      // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                        // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                              // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [107:0] cmd_demux_src12_data;                                                               // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                              // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [27:0] cmd_demux_src12_channel;                                                            // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                      // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                        // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                              // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [107:0] cmd_demux_src13_data;                                                               // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                              // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [27:0] cmd_demux_src13_channel;                                                            // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                      // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                        // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                              // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [107:0] cmd_demux_src14_data;                                                               // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                              // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [27:0] cmd_demux_src14_channel;                                                            // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                      // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                        // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                              // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [107:0] cmd_demux_src15_data;                                                               // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                              // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [27:0] cmd_demux_src15_channel;                                                            // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                      // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                        // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                              // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [107:0] cmd_demux_src16_data;                                                               // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                              // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [27:0] cmd_demux_src16_channel;                                                            // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                                      // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                        // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                              // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [107:0] cmd_demux_src17_data;                                                               // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                              // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [27:0] cmd_demux_src17_channel;                                                            // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                                      // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                        // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                              // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [107:0] cmd_demux_src18_data;                                                               // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                              // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [27:0] cmd_demux_src18_channel;                                                            // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                                      // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                        // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                              // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [107:0] cmd_demux_src19_data;                                                               // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                              // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [27:0] cmd_demux_src19_channel;                                                            // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                                      // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                                        // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                              // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [107:0] cmd_demux_src20_data;                                                               // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                              // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [27:0] cmd_demux_src20_channel;                                                            // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                                      // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                                        // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                                              // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire  [107:0] cmd_demux_src21_data;                                                               // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_src21_ready;                                                              // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire   [27:0] cmd_demux_src21_channel;                                                            // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_src21_startofpacket;                                                      // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_src21_endofpacket;                                                        // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_src22_valid;                                                              // cmd_demux:src22_valid -> cmd_mux_022:sink0_valid
	wire  [107:0] cmd_demux_src22_data;                                                               // cmd_demux:src22_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_src22_ready;                                                              // cmd_mux_022:sink0_ready -> cmd_demux:src22_ready
	wire   [27:0] cmd_demux_src22_channel;                                                            // cmd_demux:src22_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_src22_startofpacket;                                                      // cmd_demux:src22_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_src22_endofpacket;                                                        // cmd_demux:src22_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_src23_valid;                                                              // cmd_demux:src23_valid -> cmd_mux_023:sink0_valid
	wire  [107:0] cmd_demux_src23_data;                                                               // cmd_demux:src23_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_src23_ready;                                                              // cmd_mux_023:sink0_ready -> cmd_demux:src23_ready
	wire   [27:0] cmd_demux_src23_channel;                                                            // cmd_demux:src23_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_src23_startofpacket;                                                      // cmd_demux:src23_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_src23_endofpacket;                                                        // cmd_demux:src23_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_src24_valid;                                                              // cmd_demux:src24_valid -> cmd_mux_024:sink0_valid
	wire  [107:0] cmd_demux_src24_data;                                                               // cmd_demux:src24_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_src24_ready;                                                              // cmd_mux_024:sink0_ready -> cmd_demux:src24_ready
	wire   [27:0] cmd_demux_src24_channel;                                                            // cmd_demux:src24_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_src24_startofpacket;                                                      // cmd_demux:src24_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_src24_endofpacket;                                                        // cmd_demux:src24_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_src25_valid;                                                              // cmd_demux:src25_valid -> cmd_mux_025:sink0_valid
	wire  [107:0] cmd_demux_src25_data;                                                               // cmd_demux:src25_data -> cmd_mux_025:sink0_data
	wire          cmd_demux_src25_ready;                                                              // cmd_mux_025:sink0_ready -> cmd_demux:src25_ready
	wire   [27:0] cmd_demux_src25_channel;                                                            // cmd_demux:src25_channel -> cmd_mux_025:sink0_channel
	wire          cmd_demux_src25_startofpacket;                                                      // cmd_demux:src25_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          cmd_demux_src25_endofpacket;                                                        // cmd_demux:src25_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_src26_valid;                                                              // cmd_demux:src26_valid -> cmd_mux_026:sink0_valid
	wire  [107:0] cmd_demux_src26_data;                                                               // cmd_demux:src26_data -> cmd_mux_026:sink0_data
	wire          cmd_demux_src26_ready;                                                              // cmd_mux_026:sink0_ready -> cmd_demux:src26_ready
	wire   [27:0] cmd_demux_src26_channel;                                                            // cmd_demux:src26_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_src26_startofpacket;                                                      // cmd_demux:src26_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          cmd_demux_src26_endofpacket;                                                        // cmd_demux:src26_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_src27_valid;                                                              // cmd_demux:src27_valid -> cmd_mux_027:sink0_valid
	wire  [107:0] cmd_demux_src27_data;                                                               // cmd_demux:src27_data -> cmd_mux_027:sink0_data
	wire          cmd_demux_src27_ready;                                                              // cmd_mux_027:sink0_ready -> cmd_demux:src27_ready
	wire   [27:0] cmd_demux_src27_channel;                                                            // cmd_demux:src27_channel -> cmd_mux_027:sink0_channel
	wire          cmd_demux_src27_startofpacket;                                                      // cmd_demux:src27_startofpacket -> cmd_mux_027:sink0_startofpacket
	wire          cmd_demux_src27_endofpacket;                                                        // cmd_demux:src27_endofpacket -> cmd_mux_027:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux_001:sink1_valid
	wire  [107:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src0_ready;                                                           // cmd_mux_001:sink1_ready -> cmd_demux_001:src0_ready
	wire   [27:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                           // cmd_demux_001:src1_valid -> cmd_mux_002:sink1_valid
	wire  [107:0] cmd_demux_001_src1_data;                                                            // cmd_demux_001:src1_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src1_ready;                                                           // cmd_mux_002:sink1_ready -> cmd_demux_001:src1_ready
	wire   [27:0] cmd_demux_001_src1_channel;                                                         // cmd_demux_001:src1_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                   // cmd_demux_001:src1_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                     // cmd_demux_001:src1_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                           // cmd_demux_001:src2_valid -> cmd_mux_003:sink1_valid
	wire  [107:0] cmd_demux_001_src2_data;                                                            // cmd_demux_001:src2_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src2_ready;                                                           // cmd_mux_003:sink1_ready -> cmd_demux_001:src2_ready
	wire   [27:0] cmd_demux_001_src2_channel;                                                         // cmd_demux_001:src2_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                   // cmd_demux_001:src2_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                     // cmd_demux_001:src2_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                           // cmd_demux_001:src4_valid -> cmd_mux_005:sink1_valid
	wire  [107:0] cmd_demux_001_src4_data;                                                            // cmd_demux_001:src4_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src4_ready;                                                           // cmd_mux_005:sink1_ready -> cmd_demux_001:src4_ready
	wire   [27:0] cmd_demux_001_src4_channel;                                                         // cmd_demux_001:src4_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                                   // cmd_demux_001:src4_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                     // cmd_demux_001:src4_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                           // cmd_demux_001:src5_valid -> cmd_mux_018:sink1_valid
	wire  [107:0] cmd_demux_001_src5_data;                                                            // cmd_demux_001:src5_data -> cmd_mux_018:sink1_data
	wire          cmd_demux_001_src5_ready;                                                           // cmd_mux_018:sink1_ready -> cmd_demux_001:src5_ready
	wire   [27:0] cmd_demux_001_src5_channel;                                                         // cmd_demux_001:src5_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                                   // cmd_demux_001:src5_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                     // cmd_demux_001:src5_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                           // cmd_demux_001:src6_valid -> cmd_mux_019:sink1_valid
	wire  [107:0] cmd_demux_001_src6_data;                                                            // cmd_demux_001:src6_data -> cmd_mux_019:sink1_data
	wire          cmd_demux_001_src6_ready;                                                           // cmd_mux_019:sink1_ready -> cmd_demux_001:src6_ready
	wire   [27:0] cmd_demux_001_src6_channel;                                                         // cmd_demux_001:src6_channel -> cmd_mux_019:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                                   // cmd_demux_001:src6_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                     // cmd_demux_001:src6_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                           // cmd_demux_001:src7_valid -> cmd_mux_020:sink1_valid
	wire  [107:0] cmd_demux_001_src7_data;                                                            // cmd_demux_001:src7_data -> cmd_mux_020:sink1_data
	wire          cmd_demux_001_src7_ready;                                                           // cmd_mux_020:sink1_ready -> cmd_demux_001:src7_ready
	wire   [27:0] cmd_demux_001_src7_channel;                                                         // cmd_demux_001:src7_channel -> cmd_mux_020:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                                   // cmd_demux_001:src7_startofpacket -> cmd_mux_020:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                     // cmd_demux_001:src7_endofpacket -> cmd_mux_020:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                                           // cmd_demux_001:src8_valid -> cmd_mux_021:sink1_valid
	wire  [107:0] cmd_demux_001_src8_data;                                                            // cmd_demux_001:src8_data -> cmd_mux_021:sink1_data
	wire          cmd_demux_001_src8_ready;                                                           // cmd_mux_021:sink1_ready -> cmd_demux_001:src8_ready
	wire   [27:0] cmd_demux_001_src8_channel;                                                         // cmd_demux_001:src8_channel -> cmd_mux_021:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                                   // cmd_demux_001:src8_startofpacket -> cmd_mux_021:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                     // cmd_demux_001:src8_endofpacket -> cmd_mux_021:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                                           // cmd_demux_001:src9_valid -> cmd_mux_022:sink1_valid
	wire  [107:0] cmd_demux_001_src9_data;                                                            // cmd_demux_001:src9_data -> cmd_mux_022:sink1_data
	wire          cmd_demux_001_src9_ready;                                                           // cmd_mux_022:sink1_ready -> cmd_demux_001:src9_ready
	wire   [27:0] cmd_demux_001_src9_channel;                                                         // cmd_demux_001:src9_channel -> cmd_mux_022:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                                                   // cmd_demux_001:src9_startofpacket -> cmd_mux_022:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                     // cmd_demux_001:src9_endofpacket -> cmd_mux_022:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                                          // cmd_demux_001:src10_valid -> cmd_mux_023:sink1_valid
	wire  [107:0] cmd_demux_001_src10_data;                                                           // cmd_demux_001:src10_data -> cmd_mux_023:sink1_data
	wire          cmd_demux_001_src10_ready;                                                          // cmd_mux_023:sink1_ready -> cmd_demux_001:src10_ready
	wire   [27:0] cmd_demux_001_src10_channel;                                                        // cmd_demux_001:src10_channel -> cmd_mux_023:sink1_channel
	wire          cmd_demux_001_src10_startofpacket;                                                  // cmd_demux_001:src10_startofpacket -> cmd_mux_023:sink1_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                    // cmd_demux_001:src10_endofpacket -> cmd_mux_023:sink1_endofpacket
	wire          cmd_demux_001_src11_valid;                                                          // cmd_demux_001:src11_valid -> cmd_mux_024:sink1_valid
	wire  [107:0] cmd_demux_001_src11_data;                                                           // cmd_demux_001:src11_data -> cmd_mux_024:sink1_data
	wire          cmd_demux_001_src11_ready;                                                          // cmd_mux_024:sink1_ready -> cmd_demux_001:src11_ready
	wire   [27:0] cmd_demux_001_src11_channel;                                                        // cmd_demux_001:src11_channel -> cmd_mux_024:sink1_channel
	wire          cmd_demux_001_src11_startofpacket;                                                  // cmd_demux_001:src11_startofpacket -> cmd_mux_024:sink1_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                                    // cmd_demux_001:src11_endofpacket -> cmd_mux_024:sink1_endofpacket
	wire          cmd_demux_001_src12_valid;                                                          // cmd_demux_001:src12_valid -> cmd_mux_025:sink1_valid
	wire  [107:0] cmd_demux_001_src12_data;                                                           // cmd_demux_001:src12_data -> cmd_mux_025:sink1_data
	wire          cmd_demux_001_src12_ready;                                                          // cmd_mux_025:sink1_ready -> cmd_demux_001:src12_ready
	wire   [27:0] cmd_demux_001_src12_channel;                                                        // cmd_demux_001:src12_channel -> cmd_mux_025:sink1_channel
	wire          cmd_demux_001_src12_startofpacket;                                                  // cmd_demux_001:src12_startofpacket -> cmd_mux_025:sink1_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                                    // cmd_demux_001:src12_endofpacket -> cmd_mux_025:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [107:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [27:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [107:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [27:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                           // rsp_demux_001:src1_valid -> rsp_mux_001:sink0_valid
	wire  [107:0] rsp_demux_001_src1_data;                                                            // rsp_demux_001:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_001_src1_ready;                                                           // rsp_mux_001:sink0_ready -> rsp_demux_001:src1_ready
	wire   [27:0] rsp_demux_001_src1_channel;                                                         // rsp_demux_001:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_001_src1_startofpacket;                                                   // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                     // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [107:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [27:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                           // rsp_demux_002:src1_valid -> rsp_mux_001:sink1_valid
	wire  [107:0] rsp_demux_002_src1_data;                                                            // rsp_demux_002:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_002_src1_ready;                                                           // rsp_mux_001:sink1_ready -> rsp_demux_002:src1_ready
	wire   [27:0] rsp_demux_002_src1_channel;                                                         // rsp_demux_002:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_002_src1_startofpacket;                                                   // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                     // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [107:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [27:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                           // rsp_demux_003:src1_valid -> rsp_mux_001:sink2_valid
	wire  [107:0] rsp_demux_003_src1_data;                                                            // rsp_demux_003:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_003_src1_ready;                                                           // rsp_mux_001:sink2_ready -> rsp_demux_003:src1_ready
	wire   [27:0] rsp_demux_003_src1_channel;                                                         // rsp_demux_003:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_003_src1_startofpacket;                                                   // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                     // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [107:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                           // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [27:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                           // rsp_demux_005:src1_valid -> rsp_mux_001:sink4_valid
	wire  [107:0] rsp_demux_005_src1_data;                                                            // rsp_demux_005:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_005_src1_ready;                                                           // rsp_mux_001:sink4_ready -> rsp_demux_005:src1_ready
	wire   [27:0] rsp_demux_005_src1_channel;                                                         // rsp_demux_005:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_005_src1_startofpacket;                                                   // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                     // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [107:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                           // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [27:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [107:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                           // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [27:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                           // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [107:0] rsp_demux_008_src0_data;                                                            // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                           // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [27:0] rsp_demux_008_src0_channel;                                                         // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                   // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                     // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                           // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [107:0] rsp_demux_009_src0_data;                                                            // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                           // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [27:0] rsp_demux_009_src0_channel;                                                         // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                   // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                     // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                           // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [107:0] rsp_demux_010_src0_data;                                                            // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                           // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [27:0] rsp_demux_010_src0_channel;                                                         // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                   // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                     // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                           // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [107:0] rsp_demux_011_src0_data;                                                            // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                           // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [27:0] rsp_demux_011_src0_channel;                                                         // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                   // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                     // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                           // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [107:0] rsp_demux_012_src0_data;                                                            // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                           // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [27:0] rsp_demux_012_src0_channel;                                                         // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                   // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                     // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                           // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [107:0] rsp_demux_013_src0_data;                                                            // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                           // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [27:0] rsp_demux_013_src0_channel;                                                         // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                   // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                     // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                           // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [107:0] rsp_demux_014_src0_data;                                                            // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                           // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [27:0] rsp_demux_014_src0_channel;                                                         // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                   // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                     // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                           // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [107:0] rsp_demux_015_src0_data;                                                            // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                           // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [27:0] rsp_demux_015_src0_channel;                                                         // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                   // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                     // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                           // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [107:0] rsp_demux_016_src0_data;                                                            // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                           // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [27:0] rsp_demux_016_src0_channel;                                                         // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                   // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                     // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                           // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [107:0] rsp_demux_017_src0_data;                                                            // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                           // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [27:0] rsp_demux_017_src0_channel;                                                         // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                   // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                     // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                           // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [107:0] rsp_demux_018_src0_data;                                                            // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                                           // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [27:0] rsp_demux_018_src0_channel;                                                         // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                   // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                     // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_018_src1_valid;                                                           // rsp_demux_018:src1_valid -> rsp_mux_001:sink5_valid
	wire  [107:0] rsp_demux_018_src1_data;                                                            // rsp_demux_018:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_018_src1_ready;                                                           // rsp_mux_001:sink5_ready -> rsp_demux_018:src1_ready
	wire   [27:0] rsp_demux_018_src1_channel;                                                         // rsp_demux_018:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_018_src1_startofpacket;                                                   // rsp_demux_018:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                                     // rsp_demux_018:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_019_src0_valid;                                                           // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [107:0] rsp_demux_019_src0_data;                                                            // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                                           // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [27:0] rsp_demux_019_src0_channel;                                                         // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                   // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                     // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_019_src1_valid;                                                           // rsp_demux_019:src1_valid -> rsp_mux_001:sink6_valid
	wire  [107:0] rsp_demux_019_src1_data;                                                            // rsp_demux_019:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_019_src1_ready;                                                           // rsp_mux_001:sink6_ready -> rsp_demux_019:src1_ready
	wire   [27:0] rsp_demux_019_src1_channel;                                                         // rsp_demux_019:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_019_src1_startofpacket;                                                   // rsp_demux_019:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                                                     // rsp_demux_019:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_020_src0_valid;                                                           // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [107:0] rsp_demux_020_src0_data;                                                            // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                           // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [27:0] rsp_demux_020_src0_channel;                                                         // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                   // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                     // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_020_src1_valid;                                                           // rsp_demux_020:src1_valid -> rsp_mux_001:sink7_valid
	wire  [107:0] rsp_demux_020_src1_data;                                                            // rsp_demux_020:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_020_src1_ready;                                                           // rsp_mux_001:sink7_ready -> rsp_demux_020:src1_ready
	wire   [27:0] rsp_demux_020_src1_channel;                                                         // rsp_demux_020:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_020_src1_startofpacket;                                                   // rsp_demux_020:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_020_src1_endofpacket;                                                     // rsp_demux_020:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_021_src0_valid;                                                           // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire  [107:0] rsp_demux_021_src0_data;                                                            // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire          rsp_demux_021_src0_ready;                                                           // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire   [27:0] rsp_demux_021_src0_channel;                                                         // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                                   // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                     // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire          rsp_demux_021_src1_valid;                                                           // rsp_demux_021:src1_valid -> rsp_mux_001:sink8_valid
	wire  [107:0] rsp_demux_021_src1_data;                                                            // rsp_demux_021:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_021_src1_ready;                                                           // rsp_mux_001:sink8_ready -> rsp_demux_021:src1_ready
	wire   [27:0] rsp_demux_021_src1_channel;                                                         // rsp_demux_021:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_021_src1_startofpacket;                                                   // rsp_demux_021:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_021_src1_endofpacket;                                                     // rsp_demux_021:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_022_src0_valid;                                                           // rsp_demux_022:src0_valid -> rsp_mux:sink22_valid
	wire  [107:0] rsp_demux_022_src0_data;                                                            // rsp_demux_022:src0_data -> rsp_mux:sink22_data
	wire          rsp_demux_022_src0_ready;                                                           // rsp_mux:sink22_ready -> rsp_demux_022:src0_ready
	wire   [27:0] rsp_demux_022_src0_channel;                                                         // rsp_demux_022:src0_channel -> rsp_mux:sink22_channel
	wire          rsp_demux_022_src0_startofpacket;                                                   // rsp_demux_022:src0_startofpacket -> rsp_mux:sink22_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                     // rsp_demux_022:src0_endofpacket -> rsp_mux:sink22_endofpacket
	wire          rsp_demux_022_src1_valid;                                                           // rsp_demux_022:src1_valid -> rsp_mux_001:sink9_valid
	wire  [107:0] rsp_demux_022_src1_data;                                                            // rsp_demux_022:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_022_src1_ready;                                                           // rsp_mux_001:sink9_ready -> rsp_demux_022:src1_ready
	wire   [27:0] rsp_demux_022_src1_channel;                                                         // rsp_demux_022:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_022_src1_startofpacket;                                                   // rsp_demux_022:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_022_src1_endofpacket;                                                     // rsp_demux_022:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_023_src0_valid;                                                           // rsp_demux_023:src0_valid -> rsp_mux:sink23_valid
	wire  [107:0] rsp_demux_023_src0_data;                                                            // rsp_demux_023:src0_data -> rsp_mux:sink23_data
	wire          rsp_demux_023_src0_ready;                                                           // rsp_mux:sink23_ready -> rsp_demux_023:src0_ready
	wire   [27:0] rsp_demux_023_src0_channel;                                                         // rsp_demux_023:src0_channel -> rsp_mux:sink23_channel
	wire          rsp_demux_023_src0_startofpacket;                                                   // rsp_demux_023:src0_startofpacket -> rsp_mux:sink23_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                     // rsp_demux_023:src0_endofpacket -> rsp_mux:sink23_endofpacket
	wire          rsp_demux_023_src1_valid;                                                           // rsp_demux_023:src1_valid -> rsp_mux_001:sink10_valid
	wire  [107:0] rsp_demux_023_src1_data;                                                            // rsp_demux_023:src1_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_023_src1_ready;                                                           // rsp_mux_001:sink10_ready -> rsp_demux_023:src1_ready
	wire   [27:0] rsp_demux_023_src1_channel;                                                         // rsp_demux_023:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_023_src1_startofpacket;                                                   // rsp_demux_023:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_023_src1_endofpacket;                                                     // rsp_demux_023:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_024_src0_valid;                                                           // rsp_demux_024:src0_valid -> rsp_mux:sink24_valid
	wire  [107:0] rsp_demux_024_src0_data;                                                            // rsp_demux_024:src0_data -> rsp_mux:sink24_data
	wire          rsp_demux_024_src0_ready;                                                           // rsp_mux:sink24_ready -> rsp_demux_024:src0_ready
	wire   [27:0] rsp_demux_024_src0_channel;                                                         // rsp_demux_024:src0_channel -> rsp_mux:sink24_channel
	wire          rsp_demux_024_src0_startofpacket;                                                   // rsp_demux_024:src0_startofpacket -> rsp_mux:sink24_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                     // rsp_demux_024:src0_endofpacket -> rsp_mux:sink24_endofpacket
	wire          rsp_demux_024_src1_valid;                                                           // rsp_demux_024:src1_valid -> rsp_mux_001:sink11_valid
	wire  [107:0] rsp_demux_024_src1_data;                                                            // rsp_demux_024:src1_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_024_src1_ready;                                                           // rsp_mux_001:sink11_ready -> rsp_demux_024:src1_ready
	wire   [27:0] rsp_demux_024_src1_channel;                                                         // rsp_demux_024:src1_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_024_src1_startofpacket;                                                   // rsp_demux_024:src1_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_024_src1_endofpacket;                                                     // rsp_demux_024:src1_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_025_src0_valid;                                                           // rsp_demux_025:src0_valid -> rsp_mux:sink25_valid
	wire  [107:0] rsp_demux_025_src0_data;                                                            // rsp_demux_025:src0_data -> rsp_mux:sink25_data
	wire          rsp_demux_025_src0_ready;                                                           // rsp_mux:sink25_ready -> rsp_demux_025:src0_ready
	wire   [27:0] rsp_demux_025_src0_channel;                                                         // rsp_demux_025:src0_channel -> rsp_mux:sink25_channel
	wire          rsp_demux_025_src0_startofpacket;                                                   // rsp_demux_025:src0_startofpacket -> rsp_mux:sink25_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                                     // rsp_demux_025:src0_endofpacket -> rsp_mux:sink25_endofpacket
	wire          rsp_demux_025_src1_valid;                                                           // rsp_demux_025:src1_valid -> rsp_mux_001:sink12_valid
	wire  [107:0] rsp_demux_025_src1_data;                                                            // rsp_demux_025:src1_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_025_src1_ready;                                                           // rsp_mux_001:sink12_ready -> rsp_demux_025:src1_ready
	wire   [27:0] rsp_demux_025_src1_channel;                                                         // rsp_demux_025:src1_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_025_src1_startofpacket;                                                   // rsp_demux_025:src1_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_025_src1_endofpacket;                                                     // rsp_demux_025:src1_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_026_src0_valid;                                                           // rsp_demux_026:src0_valid -> rsp_mux:sink26_valid
	wire  [107:0] rsp_demux_026_src0_data;                                                            // rsp_demux_026:src0_data -> rsp_mux:sink26_data
	wire          rsp_demux_026_src0_ready;                                                           // rsp_mux:sink26_ready -> rsp_demux_026:src0_ready
	wire   [27:0] rsp_demux_026_src0_channel;                                                         // rsp_demux_026:src0_channel -> rsp_mux:sink26_channel
	wire          rsp_demux_026_src0_startofpacket;                                                   // rsp_demux_026:src0_startofpacket -> rsp_mux:sink26_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                                     // rsp_demux_026:src0_endofpacket -> rsp_mux:sink26_endofpacket
	wire          rsp_demux_027_src0_valid;                                                           // rsp_demux_027:src0_valid -> rsp_mux:sink27_valid
	wire  [107:0] rsp_demux_027_src0_data;                                                            // rsp_demux_027:src0_data -> rsp_mux:sink27_data
	wire          rsp_demux_027_src0_ready;                                                           // rsp_mux:sink27_ready -> rsp_demux_027:src0_ready
	wire   [27:0] rsp_demux_027_src0_channel;                                                         // rsp_demux_027:src0_channel -> rsp_mux:sink27_channel
	wire          rsp_demux_027_src0_startofpacket;                                                   // rsp_demux_027:src0_startofpacket -> rsp_mux:sink27_startofpacket
	wire          rsp_demux_027_src0_endofpacket;                                                     // rsp_demux_027:src0_endofpacket -> rsp_mux:sink27_endofpacket
	wire          cmd_demux_src4_valid;                                                               // cmd_demux:src4_valid -> crosser:in_valid
	wire  [107:0] cmd_demux_src4_data;                                                                // cmd_demux:src4_data -> crosser:in_data
	wire          cmd_demux_src4_ready;                                                               // crosser:in_ready -> cmd_demux:src4_ready
	wire   [27:0] cmd_demux_src4_channel;                                                             // cmd_demux:src4_channel -> crosser:in_channel
	wire          cmd_demux_src4_startofpacket;                                                       // cmd_demux:src4_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                         // cmd_demux:src4_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                  // crosser:out_valid -> cmd_mux_004:sink0_valid
	wire  [107:0] crosser_out_data;                                                                   // crosser:out_data -> cmd_mux_004:sink0_data
	wire          crosser_out_ready;                                                                  // cmd_mux_004:sink0_ready -> crosser:out_ready
	wire   [27:0] crosser_out_channel;                                                                // crosser:out_channel -> cmd_mux_004:sink0_channel
	wire          crosser_out_startofpacket;                                                          // crosser:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                            // crosser:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                           // cmd_demux_001:src3_valid -> crosser_001:in_valid
	wire  [107:0] cmd_demux_001_src3_data;                                                            // cmd_demux_001:src3_data -> crosser_001:in_data
	wire          cmd_demux_001_src3_ready;                                                           // crosser_001:in_ready -> cmd_demux_001:src3_ready
	wire   [27:0] cmd_demux_001_src3_channel;                                                         // cmd_demux_001:src3_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                                   // cmd_demux_001:src3_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                     // cmd_demux_001:src3_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                              // crosser_001:out_valid -> cmd_mux_004:sink1_valid
	wire  [107:0] crosser_001_out_data;                                                               // crosser_001:out_data -> cmd_mux_004:sink1_data
	wire          crosser_001_out_ready;                                                              // cmd_mux_004:sink1_ready -> crosser_001:out_ready
	wire   [27:0] crosser_001_out_channel;                                                            // crosser_001:out_channel -> cmd_mux_004:sink1_channel
	wire          crosser_001_out_startofpacket;                                                      // crosser_001:out_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                                        // crosser_001:out_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> crosser_002:in_valid
	wire  [107:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> crosser_002:in_data
	wire          rsp_demux_004_src0_ready;                                                           // crosser_002:in_ready -> rsp_demux_004:src0_ready
	wire   [27:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> crosser_002:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> crosser_002:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                              // crosser_002:out_valid -> rsp_mux:sink4_valid
	wire  [107:0] crosser_002_out_data;                                                               // crosser_002:out_data -> rsp_mux:sink4_data
	wire          crosser_002_out_ready;                                                              // rsp_mux:sink4_ready -> crosser_002:out_ready
	wire   [27:0] crosser_002_out_channel;                                                            // crosser_002:out_channel -> rsp_mux:sink4_channel
	wire          crosser_002_out_startofpacket;                                                      // crosser_002:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          crosser_002_out_endofpacket;                                                        // crosser_002:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                           // rsp_demux_004:src1_valid -> crosser_003:in_valid
	wire  [107:0] rsp_demux_004_src1_data;                                                            // rsp_demux_004:src1_data -> crosser_003:in_data
	wire          rsp_demux_004_src1_ready;                                                           // crosser_003:in_ready -> rsp_demux_004:src1_ready
	wire   [27:0] rsp_demux_004_src1_channel;                                                         // rsp_demux_004:src1_channel -> crosser_003:in_channel
	wire          rsp_demux_004_src1_startofpacket;                                                   // rsp_demux_004:src1_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                     // rsp_demux_004:src1_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                              // crosser_003:out_valid -> rsp_mux_001:sink3_valid
	wire  [107:0] crosser_003_out_data;                                                               // crosser_003:out_data -> rsp_mux_001:sink3_data
	wire          crosser_003_out_ready;                                                              // rsp_mux_001:sink3_ready -> crosser_003:out_ready
	wire   [27:0] crosser_003_out_channel;                                                            // crosser_003:out_channel -> rsp_mux_001:sink3_channel
	wire          crosser_003_out_startofpacket;                                                      // crosser_003:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          crosser_003_out_endofpacket;                                                        // crosser_003:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                      // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;                              // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;                               // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_001:in_0_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                  // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_error
	wire          nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_qsys_0_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_qsys_0_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_002:in_0_ready -> nios2_qsys_0_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                  // avalon_st_adapter_002:out_0_valid -> nios2_qsys_0_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                   // avalon_st_adapter_002:out_0_data -> nios2_qsys_0_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                  // nios2_qsys_0_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                  // avalon_st_adapter_002:out_0_error -> nios2_qsys_0_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          sdram_pll_audio_pll_pll_slave_agent_rdata_fifo_src_valid;                           // sdram_pll_audio_pll_pll_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] sdram_pll_audio_pll_pll_slave_agent_rdata_fifo_src_data;                            // sdram_pll_audio_pll_pll_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          sdram_pll_audio_pll_pll_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter_003:in_0_ready -> sdram_pll_audio_pll_pll_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                  // avalon_st_adapter_003:out_0_valid -> sdram_pll_audio_pll_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                   // avalon_st_adapter_003:out_0_data -> sdram_pll_audio_pll_pll_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                  // sdram_pll_audio_pll_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                  // avalon_st_adapter_003:out_0_error -> sdram_pll_audio_pll_pll_slave_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                                // sdram_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] sdram_s1_agent_rdata_fifo_out_data;                                                 // sdram_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                                // avalon_st_adapter_004:in_0_ready -> sdram_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                  // avalon_st_adapter_004:out_0_valid -> sdram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                   // avalon_st_adapter_004:out_0_data -> sdram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                  // sdram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                  // avalon_st_adapter_004:out_0_error -> sdram_s1_agent:rdata_fifo_sink_error
	wire          timer_0_s1_agent_rdata_fifo_src_valid;                                              // timer_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                               // timer_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          timer_0_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_005:in_0_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                  // avalon_st_adapter_005:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                   // avalon_st_adapter_005:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                  // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                  // avalon_st_adapter_005:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error
	wire          avalon_blitter_0_s1_agent_rdata_fifo_src_valid;                                     // avalon_blitter_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] avalon_blitter_0_s1_agent_rdata_fifo_src_data;                                      // avalon_blitter_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          avalon_blitter_0_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_006:in_0_ready -> avalon_blitter_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                  // avalon_st_adapter_006:out_0_valid -> avalon_blitter_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                   // avalon_st_adapter_006:out_0_data -> avalon_blitter_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                  // avalon_blitter_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                  // avalon_st_adapter_006:out_0_error -> avalon_blitter_0_s1_agent:rdata_fifo_sink_error
	wire          otg_hpi_address_s1_agent_rdata_fifo_src_valid;                                      // otg_hpi_address_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] otg_hpi_address_s1_agent_rdata_fifo_src_data;                                       // otg_hpi_address_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          otg_hpi_address_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_007:in_0_ready -> otg_hpi_address_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                  // avalon_st_adapter_007:out_0_valid -> otg_hpi_address_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                   // avalon_st_adapter_007:out_0_data -> otg_hpi_address_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                  // otg_hpi_address_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                  // avalon_st_adapter_007:out_0_error -> otg_hpi_address_s1_agent:rdata_fifo_sink_error
	wire          otg_hpi_data_s1_agent_rdata_fifo_src_valid;                                         // otg_hpi_data_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] otg_hpi_data_s1_agent_rdata_fifo_src_data;                                          // otg_hpi_data_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          otg_hpi_data_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_008:in_0_ready -> otg_hpi_data_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                  // avalon_st_adapter_008:out_0_valid -> otg_hpi_data_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                   // avalon_st_adapter_008:out_0_data -> otg_hpi_data_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                  // otg_hpi_data_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                  // avalon_st_adapter_008:out_0_error -> otg_hpi_data_s1_agent:rdata_fifo_sink_error
	wire          otg_hpi_r_s1_agent_rdata_fifo_src_valid;                                            // otg_hpi_r_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] otg_hpi_r_s1_agent_rdata_fifo_src_data;                                             // otg_hpi_r_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          otg_hpi_r_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_009:in_0_ready -> otg_hpi_r_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                  // avalon_st_adapter_009:out_0_valid -> otg_hpi_r_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                   // avalon_st_adapter_009:out_0_data -> otg_hpi_r_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                  // otg_hpi_r_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                  // avalon_st_adapter_009:out_0_error -> otg_hpi_r_s1_agent:rdata_fifo_sink_error
	wire          otg_hpi_w_s1_agent_rdata_fifo_src_valid;                                            // otg_hpi_w_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] otg_hpi_w_s1_agent_rdata_fifo_src_data;                                             // otg_hpi_w_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          otg_hpi_w_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_010:in_0_ready -> otg_hpi_w_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                  // avalon_st_adapter_010:out_0_valid -> otg_hpi_w_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                   // avalon_st_adapter_010:out_0_data -> otg_hpi_w_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                  // otg_hpi_w_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                  // avalon_st_adapter_010:out_0_error -> otg_hpi_w_s1_agent:rdata_fifo_sink_error
	wire          otg_hpi_cs_s1_agent_rdata_fifo_src_valid;                                           // otg_hpi_cs_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] otg_hpi_cs_s1_agent_rdata_fifo_src_data;                                            // otg_hpi_cs_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          otg_hpi_cs_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_011:in_0_ready -> otg_hpi_cs_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                  // avalon_st_adapter_011:out_0_valid -> otg_hpi_cs_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                   // avalon_st_adapter_011:out_0_data -> otg_hpi_cs_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                  // otg_hpi_cs_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                  // avalon_st_adapter_011:out_0_error -> otg_hpi_cs_s1_agent:rdata_fifo_sink_error
	wire          otg_hpi_reset_s1_agent_rdata_fifo_src_valid;                                        // otg_hpi_reset_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] otg_hpi_reset_s1_agent_rdata_fifo_src_data;                                         // otg_hpi_reset_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          otg_hpi_reset_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_012:in_0_ready -> otg_hpi_reset_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                  // avalon_st_adapter_012:out_0_valid -> otg_hpi_reset_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                   // avalon_st_adapter_012:out_0_data -> otg_hpi_reset_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                  // otg_hpi_reset_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                  // avalon_st_adapter_012:out_0_error -> otg_hpi_reset_s1_agent:rdata_fifo_sink_error
	wire          audio_init_s1_agent_rdata_fifo_src_valid;                                           // audio_INIT_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] audio_init_s1_agent_rdata_fifo_src_data;                                            // audio_INIT_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          audio_init_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_013:in_0_ready -> audio_INIT_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                  // avalon_st_adapter_013:out_0_valid -> audio_INIT_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                   // avalon_st_adapter_013:out_0_data -> audio_INIT_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                  // audio_INIT_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                  // avalon_st_adapter_013:out_0_error -> audio_INIT_s1_agent:rdata_fifo_sink_error
	wire          audio_init_f_s1_agent_rdata_fifo_src_valid;                                         // audio_INIT_F_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] audio_init_f_s1_agent_rdata_fifo_src_data;                                          // audio_INIT_F_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          audio_init_f_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_014:in_0_ready -> audio_INIT_F_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                  // avalon_st_adapter_014:out_0_valid -> audio_INIT_F_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                   // avalon_st_adapter_014:out_0_data -> audio_INIT_F_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                  // audio_INIT_F_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                  // avalon_st_adapter_014:out_0_error -> audio_INIT_F_s1_agent:rdata_fifo_sink_error
	wire          audio_back_vol_s1_agent_rdata_fifo_src_valid;                                       // audio_back_vol_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] audio_back_vol_s1_agent_rdata_fifo_src_data;                                        // audio_back_vol_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          audio_back_vol_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_015:in_0_ready -> audio_back_vol_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                  // avalon_st_adapter_015:out_0_valid -> audio_back_vol_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                   // avalon_st_adapter_015:out_0_data -> audio_back_vol_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                  // audio_back_vol_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                  // avalon_st_adapter_015:out_0_error -> audio_back_vol_s1_agent:rdata_fifo_sink_error
	wire          audio_bomb_vol_s1_agent_rdata_fifo_src_valid;                                       // audio_bomb_vol_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] audio_bomb_vol_s1_agent_rdata_fifo_src_data;                                        // audio_bomb_vol_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          audio_bomb_vol_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_016:in_0_ready -> audio_bomb_vol_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                  // avalon_st_adapter_016:out_0_valid -> audio_bomb_vol_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                   // avalon_st_adapter_016:out_0_data -> audio_bomb_vol_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                  // audio_bomb_vol_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                  // avalon_st_adapter_016:out_0_error -> audio_bomb_vol_s1_agent:rdata_fifo_sink_error
	wire          audio_bomb_active_s1_agent_rdata_fifo_src_valid;                                    // audio_bomb_active_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] audio_bomb_active_s1_agent_rdata_fifo_src_data;                                     // audio_bomb_active_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          audio_bomb_active_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_017:in_0_ready -> audio_bomb_active_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                  // avalon_st_adapter_017:out_0_valid -> audio_bomb_active_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                   // avalon_st_adapter_017:out_0_data -> audio_bomb_active_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                  // audio_bomb_active_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                  // avalon_st_adapter_017:out_0_error -> audio_bomb_active_s1_agent:rdata_fifo_sink_error
	wire          leds_s1_agent_rdata_fifo_src_valid;                                                 // LEDs_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_src_data;                                                  // LEDs_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          leds_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_018:in_0_ready -> LEDs_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                  // avalon_st_adapter_018:out_0_valid -> LEDs_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                   // avalon_st_adapter_018:out_0_data -> LEDs_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                  // LEDs_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                  // avalon_st_adapter_018:out_0_error -> LEDs_s1_agent:rdata_fifo_sink_error
	wire          player2score0_s1_agent_rdata_fifo_src_valid;                                        // player2Score0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] player2score0_s1_agent_rdata_fifo_src_data;                                         // player2Score0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire          player2score0_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_019:in_0_ready -> player2Score0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                  // avalon_st_adapter_019:out_0_valid -> player2Score0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                   // avalon_st_adapter_019:out_0_data -> player2Score0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                  // player2Score0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                  // avalon_st_adapter_019:out_0_error -> player2Score0_s1_agent:rdata_fifo_sink_error
	wire          player2score1_s1_agent_rdata_fifo_src_valid;                                        // player2Score1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] player2score1_s1_agent_rdata_fifo_src_data;                                         // player2Score1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_020:in_0_data
	wire          player2score1_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_020:in_0_ready -> player2Score1_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                  // avalon_st_adapter_020:out_0_valid -> player2Score1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                   // avalon_st_adapter_020:out_0_data -> player2Score1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                  // player2Score1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                  // avalon_st_adapter_020:out_0_error -> player2Score1_s1_agent:rdata_fifo_sink_error
	wire          player1score0_s1_agent_rdata_fifo_src_valid;                                        // player1Score0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] player1score0_s1_agent_rdata_fifo_src_data;                                         // player1Score0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_021:in_0_data
	wire          player1score0_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_021:in_0_ready -> player1Score0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_021_out_0_valid;                                                  // avalon_st_adapter_021:out_0_valid -> player1Score0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                                   // avalon_st_adapter_021:out_0_data -> player1Score0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                                  // player1Score0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                                  // avalon_st_adapter_021:out_0_error -> player1Score0_s1_agent:rdata_fifo_sink_error
	wire          player1score1_s1_agent_rdata_fifo_src_valid;                                        // player1Score1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] player1score1_s1_agent_rdata_fifo_src_data;                                         // player1Score1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_022:in_0_data
	wire          player1score1_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_022:in_0_ready -> player1Score1_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_022_out_0_valid;                                                  // avalon_st_adapter_022:out_0_valid -> player1Score1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                                   // avalon_st_adapter_022:out_0_data -> player1Score1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                                  // player1Score1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                                  // avalon_st_adapter_022:out_0_error -> player1Score1_s1_agent:rdata_fifo_sink_error
	wire          timescreen1_s1_agent_rdata_fifo_src_valid;                                          // timeScreen1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] timescreen1_s1_agent_rdata_fifo_src_data;                                           // timeScreen1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_023:in_0_data
	wire          timescreen1_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_023:in_0_ready -> timeScreen1_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_023_out_0_valid;                                                  // avalon_st_adapter_023:out_0_valid -> timeScreen1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                                   // avalon_st_adapter_023:out_0_data -> timeScreen1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                                  // timeScreen1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                                  // avalon_st_adapter_023:out_0_error -> timeScreen1_s1_agent:rdata_fifo_sink_error
	wire          timescreen2_s1_agent_rdata_fifo_src_valid;                                          // timeScreen2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_024:in_0_valid
	wire   [33:0] timescreen2_s1_agent_rdata_fifo_src_data;                                           // timeScreen2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_024:in_0_data
	wire          timescreen2_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_024:in_0_ready -> timeScreen2_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_024_out_0_valid;                                                  // avalon_st_adapter_024:out_0_valid -> timeScreen2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_024_out_0_data;                                                   // avalon_st_adapter_024:out_0_data -> timeScreen2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_024_out_0_ready;                                                  // timeScreen2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire    [0:0] avalon_st_adapter_024_out_0_error;                                                  // avalon_st_adapter_024:out_0_error -> timeScreen2_s1_agent:rdata_fifo_sink_error
	wire          timescreen0_s1_agent_rdata_fifo_src_valid;                                          // timeScreen0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_025:in_0_valid
	wire   [33:0] timescreen0_s1_agent_rdata_fifo_src_data;                                           // timeScreen0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_025:in_0_data
	wire          timescreen0_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_025:in_0_ready -> timeScreen0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_025_out_0_valid;                                                  // avalon_st_adapter_025:out_0_valid -> timeScreen0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_025_out_0_data;                                                   // avalon_st_adapter_025:out_0_data -> timeScreen0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_025_out_0_ready;                                                  // timeScreen0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_025:out_0_ready
	wire    [0:0] avalon_st_adapter_025_out_0_error;                                                  // avalon_st_adapter_025:out_0_error -> timeScreen0_s1_agent:rdata_fifo_sink_error
	wire          audio_select_s1_agent_rdata_fifo_src_valid;                                         // audio_select_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_026:in_0_valid
	wire   [33:0] audio_select_s1_agent_rdata_fifo_src_data;                                          // audio_select_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_026:in_0_data
	wire          audio_select_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_026:in_0_ready -> audio_select_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_026_out_0_valid;                                                  // avalon_st_adapter_026:out_0_valid -> audio_select_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_026_out_0_data;                                                   // avalon_st_adapter_026:out_0_data -> audio_select_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_026_out_0_ready;                                                  // audio_select_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_026:out_0_ready
	wire    [0:0] avalon_st_adapter_026_out_0_error;                                                  // avalon_st_adapter_026:out_0_error -> audio_select_s1_agent:rdata_fifo_sink_error
	wire          boot_up_s1_agent_rdata_fifo_src_valid;                                              // Boot_Up_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_027:in_0_valid
	wire   [33:0] boot_up_s1_agent_rdata_fifo_src_data;                                               // Boot_Up_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_027:in_0_data
	wire          boot_up_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_027:in_0_ready -> Boot_Up_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_027_out_0_valid;                                                  // avalon_st_adapter_027:out_0_valid -> Boot_Up_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_027_out_0_data;                                                   // avalon_st_adapter_027:out_0_data -> Boot_Up_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_027_out_0_ready;                                                  // Boot_Up_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_027:out_0_ready
	wire    [0:0] avalon_st_adapter_027_out_0_error;                                                  // avalon_st_adapter_027:out_0_error -> Boot_Up_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_qsys_0_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                               //                       clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_qsys_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_qsys_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_qsys_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_qsys_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_qsys_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_qsys_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_qsys_0_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_qsys_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_qsys_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_qsys_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_qsys_0_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                      //                       clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_qsys_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_qsys_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_qsys_0_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_qsys_0_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_readdatavalid       (),                                                                                   //               (terminated)
		.av_write               (1'b0),                                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sysid_qsys_0_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_0_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_0_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_0_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_0_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_0_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_0_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_0_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_0_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_0_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_0_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_0_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_0_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_qsys_0_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_qsys_0_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_qsys_0_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_qsys_0_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_qsys_0_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_qsys_0_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_qsys_0_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_qsys_0_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_qsys_0_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_qsys_0_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_qsys_0_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_qsys_0_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_qsys_0_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_qsys_0_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_qsys_0_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_qsys_0_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_qsys_0_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_qsys_0_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_qsys_0_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_qsys_0_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_pll_audio_pll_pll_slave_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_pll_audio_pll_pll_slave_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_pll_audio_pll_pll_slave_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (sdram_pll_audio_pll_pll_slave_agent_m0_read),                           //                         .read
		.uav_write              (sdram_pll_audio_pll_pll_slave_agent_m0_write),                          //                         .write
		.uav_waitrequest        (sdram_pll_audio_pll_pll_slave_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (sdram_pll_audio_pll_pll_slave_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (sdram_pll_audio_pll_pll_slave_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (sdram_pll_audio_pll_pll_slave_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (sdram_pll_audio_pll_pll_slave_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (sdram_pll_audio_pll_pll_slave_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (sdram_pll_audio_pll_pll_slave_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (sdram_pll_audio_pll_pll_slave_address),                                 //      avalon_anti_slave_0.address
		.av_write               (sdram_pll_audio_pll_pll_slave_write),                                   //                         .write
		.av_read                (sdram_pll_audio_pll_pll_slave_read),                                    //                         .read
		.av_readdata            (sdram_pll_audio_pll_pll_slave_readdata),                                //                         .readdata
		.av_writedata           (sdram_pll_audio_pll_pll_slave_writedata),                               //                         .writedata
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_chipselect          (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (sdram_pll_audio_pll_c0_clk),              //                      clk.clk
		.reset                  (sdram_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                  //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (sdram_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (sdram_s1_write),                          //                         .write
		.av_read                (sdram_s1_read),                           //                         .read
		.av_readdata            (sdram_s1_readdata),                       //                         .readdata
		.av_writedata           (sdram_s1_writedata),                      //                         .writedata
		.av_byteenable          (sdram_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid       (sdram_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (sdram_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect          (sdram_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                       //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (timer_0_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                               //                         .write
		.av_readdata            (timer_0_s1_readdata),                            //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                           //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) avalon_blitter_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (avalon_blitter_0_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (avalon_blitter_0_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (avalon_blitter_0_s1_agent_m0_read),              //                         .read
		.uav_write              (avalon_blitter_0_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (avalon_blitter_0_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (avalon_blitter_0_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (avalon_blitter_0_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (avalon_blitter_0_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (avalon_blitter_0_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (avalon_blitter_0_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (avalon_blitter_0_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (avalon_blitter_0_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (avalon_blitter_0_s1_write),                      //                         .write
		.av_read                (avalon_blitter_0_s1_read),                       //                         .read
		.av_readdata            (avalon_blitter_0_s1_readdata),                   //                         .readdata
		.av_writedata           (avalon_blitter_0_s1_writedata),                  //                         .writedata
		.av_byteenable          (avalon_blitter_0_s1_byteenable),                 //                         .byteenable
		.av_chipselect          (avalon_blitter_0_s1_chipselect),                 //                         .chipselect
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_address_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (otg_hpi_address_s1_agent_m0_address),                                   // avalon_universal_slave_0.address
		.uav_burstcount         (otg_hpi_address_s1_agent_m0_burstcount),                                //                         .burstcount
		.uav_read               (otg_hpi_address_s1_agent_m0_read),                                      //                         .read
		.uav_write              (otg_hpi_address_s1_agent_m0_write),                                     //                         .write
		.uav_waitrequest        (otg_hpi_address_s1_agent_m0_waitrequest),                               //                         .waitrequest
		.uav_readdatavalid      (otg_hpi_address_s1_agent_m0_readdatavalid),                             //                         .readdatavalid
		.uav_byteenable         (otg_hpi_address_s1_agent_m0_byteenable),                                //                         .byteenable
		.uav_readdata           (otg_hpi_address_s1_agent_m0_readdata),                                  //                         .readdata
		.uav_writedata          (otg_hpi_address_s1_agent_m0_writedata),                                 //                         .writedata
		.uav_lock               (otg_hpi_address_s1_agent_m0_lock),                                      //                         .lock
		.uav_debugaccess        (otg_hpi_address_s1_agent_m0_debugaccess),                               //                         .debugaccess
		.av_address             (otg_hpi_address_s1_address),                                            //      avalon_anti_slave_0.address
		.av_write               (otg_hpi_address_s1_write),                                              //                         .write
		.av_readdata            (otg_hpi_address_s1_readdata),                                           //                         .readdata
		.av_writedata           (otg_hpi_address_s1_writedata),                                          //                         .writedata
		.av_chipselect          (otg_hpi_address_s1_chipselect),                                         //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_data_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (otg_hpi_data_s1_agent_m0_address),                                      // avalon_universal_slave_0.address
		.uav_burstcount         (otg_hpi_data_s1_agent_m0_burstcount),                                   //                         .burstcount
		.uav_read               (otg_hpi_data_s1_agent_m0_read),                                         //                         .read
		.uav_write              (otg_hpi_data_s1_agent_m0_write),                                        //                         .write
		.uav_waitrequest        (otg_hpi_data_s1_agent_m0_waitrequest),                                  //                         .waitrequest
		.uav_readdatavalid      (otg_hpi_data_s1_agent_m0_readdatavalid),                                //                         .readdatavalid
		.uav_byteenable         (otg_hpi_data_s1_agent_m0_byteenable),                                   //                         .byteenable
		.uav_readdata           (otg_hpi_data_s1_agent_m0_readdata),                                     //                         .readdata
		.uav_writedata          (otg_hpi_data_s1_agent_m0_writedata),                                    //                         .writedata
		.uav_lock               (otg_hpi_data_s1_agent_m0_lock),                                         //                         .lock
		.uav_debugaccess        (otg_hpi_data_s1_agent_m0_debugaccess),                                  //                         .debugaccess
		.av_address             (otg_hpi_data_s1_address),                                               //      avalon_anti_slave_0.address
		.av_write               (otg_hpi_data_s1_write),                                                 //                         .write
		.av_readdata            (otg_hpi_data_s1_readdata),                                              //                         .readdata
		.av_writedata           (otg_hpi_data_s1_writedata),                                             //                         .writedata
		.av_chipselect          (otg_hpi_data_s1_chipselect),                                            //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_r_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (otg_hpi_r_s1_agent_m0_address),                                         // avalon_universal_slave_0.address
		.uav_burstcount         (otg_hpi_r_s1_agent_m0_burstcount),                                      //                         .burstcount
		.uav_read               (otg_hpi_r_s1_agent_m0_read),                                            //                         .read
		.uav_write              (otg_hpi_r_s1_agent_m0_write),                                           //                         .write
		.uav_waitrequest        (otg_hpi_r_s1_agent_m0_waitrequest),                                     //                         .waitrequest
		.uav_readdatavalid      (otg_hpi_r_s1_agent_m0_readdatavalid),                                   //                         .readdatavalid
		.uav_byteenable         (otg_hpi_r_s1_agent_m0_byteenable),                                      //                         .byteenable
		.uav_readdata           (otg_hpi_r_s1_agent_m0_readdata),                                        //                         .readdata
		.uav_writedata          (otg_hpi_r_s1_agent_m0_writedata),                                       //                         .writedata
		.uav_lock               (otg_hpi_r_s1_agent_m0_lock),                                            //                         .lock
		.uav_debugaccess        (otg_hpi_r_s1_agent_m0_debugaccess),                                     //                         .debugaccess
		.av_address             (otg_hpi_r_s1_address),                                                  //      avalon_anti_slave_0.address
		.av_write               (otg_hpi_r_s1_write),                                                    //                         .write
		.av_readdata            (otg_hpi_r_s1_readdata),                                                 //                         .readdata
		.av_writedata           (otg_hpi_r_s1_writedata),                                                //                         .writedata
		.av_chipselect          (otg_hpi_r_s1_chipselect),                                               //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_w_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (otg_hpi_w_s1_agent_m0_address),                                         // avalon_universal_slave_0.address
		.uav_burstcount         (otg_hpi_w_s1_agent_m0_burstcount),                                      //                         .burstcount
		.uav_read               (otg_hpi_w_s1_agent_m0_read),                                            //                         .read
		.uav_write              (otg_hpi_w_s1_agent_m0_write),                                           //                         .write
		.uav_waitrequest        (otg_hpi_w_s1_agent_m0_waitrequest),                                     //                         .waitrequest
		.uav_readdatavalid      (otg_hpi_w_s1_agent_m0_readdatavalid),                                   //                         .readdatavalid
		.uav_byteenable         (otg_hpi_w_s1_agent_m0_byteenable),                                      //                         .byteenable
		.uav_readdata           (otg_hpi_w_s1_agent_m0_readdata),                                        //                         .readdata
		.uav_writedata          (otg_hpi_w_s1_agent_m0_writedata),                                       //                         .writedata
		.uav_lock               (otg_hpi_w_s1_agent_m0_lock),                                            //                         .lock
		.uav_debugaccess        (otg_hpi_w_s1_agent_m0_debugaccess),                                     //                         .debugaccess
		.av_address             (otg_hpi_w_s1_address),                                                  //      avalon_anti_slave_0.address
		.av_write               (otg_hpi_w_s1_write),                                                    //                         .write
		.av_readdata            (otg_hpi_w_s1_readdata),                                                 //                         .readdata
		.av_writedata           (otg_hpi_w_s1_writedata),                                                //                         .writedata
		.av_chipselect          (otg_hpi_w_s1_chipselect),                                               //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_cs_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (otg_hpi_cs_s1_agent_m0_address),                                        // avalon_universal_slave_0.address
		.uav_burstcount         (otg_hpi_cs_s1_agent_m0_burstcount),                                     //                         .burstcount
		.uav_read               (otg_hpi_cs_s1_agent_m0_read),                                           //                         .read
		.uav_write              (otg_hpi_cs_s1_agent_m0_write),                                          //                         .write
		.uav_waitrequest        (otg_hpi_cs_s1_agent_m0_waitrequest),                                    //                         .waitrequest
		.uav_readdatavalid      (otg_hpi_cs_s1_agent_m0_readdatavalid),                                  //                         .readdatavalid
		.uav_byteenable         (otg_hpi_cs_s1_agent_m0_byteenable),                                     //                         .byteenable
		.uav_readdata           (otg_hpi_cs_s1_agent_m0_readdata),                                       //                         .readdata
		.uav_writedata          (otg_hpi_cs_s1_agent_m0_writedata),                                      //                         .writedata
		.uav_lock               (otg_hpi_cs_s1_agent_m0_lock),                                           //                         .lock
		.uav_debugaccess        (otg_hpi_cs_s1_agent_m0_debugaccess),                                    //                         .debugaccess
		.av_address             (otg_hpi_cs_s1_address),                                                 //      avalon_anti_slave_0.address
		.av_write               (otg_hpi_cs_s1_write),                                                   //                         .write
		.av_readdata            (otg_hpi_cs_s1_readdata),                                                //                         .readdata
		.av_writedata           (otg_hpi_cs_s1_writedata),                                               //                         .writedata
		.av_chipselect          (otg_hpi_cs_s1_chipselect),                                              //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) otg_hpi_reset_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (otg_hpi_reset_s1_agent_m0_address),                                     // avalon_universal_slave_0.address
		.uav_burstcount         (otg_hpi_reset_s1_agent_m0_burstcount),                                  //                         .burstcount
		.uav_read               (otg_hpi_reset_s1_agent_m0_read),                                        //                         .read
		.uav_write              (otg_hpi_reset_s1_agent_m0_write),                                       //                         .write
		.uav_waitrequest        (otg_hpi_reset_s1_agent_m0_waitrequest),                                 //                         .waitrequest
		.uav_readdatavalid      (otg_hpi_reset_s1_agent_m0_readdatavalid),                               //                         .readdatavalid
		.uav_byteenable         (otg_hpi_reset_s1_agent_m0_byteenable),                                  //                         .byteenable
		.uav_readdata           (otg_hpi_reset_s1_agent_m0_readdata),                                    //                         .readdata
		.uav_writedata          (otg_hpi_reset_s1_agent_m0_writedata),                                   //                         .writedata
		.uav_lock               (otg_hpi_reset_s1_agent_m0_lock),                                        //                         .lock
		.uav_debugaccess        (otg_hpi_reset_s1_agent_m0_debugaccess),                                 //                         .debugaccess
		.av_address             (otg_hpi_reset_s1_address),                                              //      avalon_anti_slave_0.address
		.av_write               (otg_hpi_reset_s1_write),                                                //                         .write
		.av_readdata            (otg_hpi_reset_s1_readdata),                                             //                         .readdata
		.av_writedata           (otg_hpi_reset_s1_writedata),                                            //                         .writedata
		.av_chipselect          (otg_hpi_reset_s1_chipselect),                                           //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_init_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (audio_init_s1_agent_m0_address),                                        // avalon_universal_slave_0.address
		.uav_burstcount         (audio_init_s1_agent_m0_burstcount),                                     //                         .burstcount
		.uav_read               (audio_init_s1_agent_m0_read),                                           //                         .read
		.uav_write              (audio_init_s1_agent_m0_write),                                          //                         .write
		.uav_waitrequest        (audio_init_s1_agent_m0_waitrequest),                                    //                         .waitrequest
		.uav_readdatavalid      (audio_init_s1_agent_m0_readdatavalid),                                  //                         .readdatavalid
		.uav_byteenable         (audio_init_s1_agent_m0_byteenable),                                     //                         .byteenable
		.uav_readdata           (audio_init_s1_agent_m0_readdata),                                       //                         .readdata
		.uav_writedata          (audio_init_s1_agent_m0_writedata),                                      //                         .writedata
		.uav_lock               (audio_init_s1_agent_m0_lock),                                           //                         .lock
		.uav_debugaccess        (audio_init_s1_agent_m0_debugaccess),                                    //                         .debugaccess
		.av_address             (audio_INIT_s1_address),                                                 //      avalon_anti_slave_0.address
		.av_write               (audio_INIT_s1_write),                                                   //                         .write
		.av_readdata            (audio_INIT_s1_readdata),                                                //                         .readdata
		.av_writedata           (audio_INIT_s1_writedata),                                               //                         .writedata
		.av_chipselect          (audio_INIT_s1_chipselect),                                              //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_init_f_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (audio_init_f_s1_agent_m0_address),                                      // avalon_universal_slave_0.address
		.uav_burstcount         (audio_init_f_s1_agent_m0_burstcount),                                   //                         .burstcount
		.uav_read               (audio_init_f_s1_agent_m0_read),                                         //                         .read
		.uav_write              (audio_init_f_s1_agent_m0_write),                                        //                         .write
		.uav_waitrequest        (audio_init_f_s1_agent_m0_waitrequest),                                  //                         .waitrequest
		.uav_readdatavalid      (audio_init_f_s1_agent_m0_readdatavalid),                                //                         .readdatavalid
		.uav_byteenable         (audio_init_f_s1_agent_m0_byteenable),                                   //                         .byteenable
		.uav_readdata           (audio_init_f_s1_agent_m0_readdata),                                     //                         .readdata
		.uav_writedata          (audio_init_f_s1_agent_m0_writedata),                                    //                         .writedata
		.uav_lock               (audio_init_f_s1_agent_m0_lock),                                         //                         .lock
		.uav_debugaccess        (audio_init_f_s1_agent_m0_debugaccess),                                  //                         .debugaccess
		.av_address             (audio_INIT_F_s1_address),                                               //      avalon_anti_slave_0.address
		.av_readdata            (audio_INIT_F_s1_readdata),                                              //                         .readdata
		.av_write               (),                                                                      //              (terminated)
		.av_read                (),                                                                      //              (terminated)
		.av_writedata           (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_chipselect          (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_back_vol_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (audio_back_vol_s1_agent_m0_address),                                    // avalon_universal_slave_0.address
		.uav_burstcount         (audio_back_vol_s1_agent_m0_burstcount),                                 //                         .burstcount
		.uav_read               (audio_back_vol_s1_agent_m0_read),                                       //                         .read
		.uav_write              (audio_back_vol_s1_agent_m0_write),                                      //                         .write
		.uav_waitrequest        (audio_back_vol_s1_agent_m0_waitrequest),                                //                         .waitrequest
		.uav_readdatavalid      (audio_back_vol_s1_agent_m0_readdatavalid),                              //                         .readdatavalid
		.uav_byteenable         (audio_back_vol_s1_agent_m0_byteenable),                                 //                         .byteenable
		.uav_readdata           (audio_back_vol_s1_agent_m0_readdata),                                   //                         .readdata
		.uav_writedata          (audio_back_vol_s1_agent_m0_writedata),                                  //                         .writedata
		.uav_lock               (audio_back_vol_s1_agent_m0_lock),                                       //                         .lock
		.uav_debugaccess        (audio_back_vol_s1_agent_m0_debugaccess),                                //                         .debugaccess
		.av_address             (audio_back_vol_s1_address),                                             //      avalon_anti_slave_0.address
		.av_write               (audio_back_vol_s1_write),                                               //                         .write
		.av_readdata            (audio_back_vol_s1_readdata),                                            //                         .readdata
		.av_writedata           (audio_back_vol_s1_writedata),                                           //                         .writedata
		.av_chipselect          (audio_back_vol_s1_chipselect),                                          //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_bomb_vol_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (audio_bomb_vol_s1_agent_m0_address),                                    // avalon_universal_slave_0.address
		.uav_burstcount         (audio_bomb_vol_s1_agent_m0_burstcount),                                 //                         .burstcount
		.uav_read               (audio_bomb_vol_s1_agent_m0_read),                                       //                         .read
		.uav_write              (audio_bomb_vol_s1_agent_m0_write),                                      //                         .write
		.uav_waitrequest        (audio_bomb_vol_s1_agent_m0_waitrequest),                                //                         .waitrequest
		.uav_readdatavalid      (audio_bomb_vol_s1_agent_m0_readdatavalid),                              //                         .readdatavalid
		.uav_byteenable         (audio_bomb_vol_s1_agent_m0_byteenable),                                 //                         .byteenable
		.uav_readdata           (audio_bomb_vol_s1_agent_m0_readdata),                                   //                         .readdata
		.uav_writedata          (audio_bomb_vol_s1_agent_m0_writedata),                                  //                         .writedata
		.uav_lock               (audio_bomb_vol_s1_agent_m0_lock),                                       //                         .lock
		.uav_debugaccess        (audio_bomb_vol_s1_agent_m0_debugaccess),                                //                         .debugaccess
		.av_address             (audio_bomb_vol_s1_address),                                             //      avalon_anti_slave_0.address
		.av_write               (audio_bomb_vol_s1_write),                                               //                         .write
		.av_readdata            (audio_bomb_vol_s1_readdata),                                            //                         .readdata
		.av_writedata           (audio_bomb_vol_s1_writedata),                                           //                         .writedata
		.av_chipselect          (audio_bomb_vol_s1_chipselect),                                          //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_bomb_active_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (audio_bomb_active_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (audio_bomb_active_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (audio_bomb_active_s1_agent_m0_read),                                    //                         .read
		.uav_write              (audio_bomb_active_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (audio_bomb_active_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (audio_bomb_active_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (audio_bomb_active_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (audio_bomb_active_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (audio_bomb_active_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (audio_bomb_active_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (audio_bomb_active_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (audio_bomb_active_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (audio_bomb_active_s1_write),                                            //                         .write
		.av_readdata            (audio_bomb_active_s1_readdata),                                         //                         .readdata
		.av_writedata           (audio_bomb_active_s1_writedata),                                        //                         .writedata
		.av_chipselect          (audio_bomb_active_s1_chipselect),                                       //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (leds_s1_agent_m0_address),                                              // avalon_universal_slave_0.address
		.uav_burstcount         (leds_s1_agent_m0_burstcount),                                           //                         .burstcount
		.uav_read               (leds_s1_agent_m0_read),                                                 //                         .read
		.uav_write              (leds_s1_agent_m0_write),                                                //                         .write
		.uav_waitrequest        (leds_s1_agent_m0_waitrequest),                                          //                         .waitrequest
		.uav_readdatavalid      (leds_s1_agent_m0_readdatavalid),                                        //                         .readdatavalid
		.uav_byteenable         (leds_s1_agent_m0_byteenable),                                           //                         .byteenable
		.uav_readdata           (leds_s1_agent_m0_readdata),                                             //                         .readdata
		.uav_writedata          (leds_s1_agent_m0_writedata),                                            //                         .writedata
		.uav_lock               (leds_s1_agent_m0_lock),                                                 //                         .lock
		.uav_debugaccess        (leds_s1_agent_m0_debugaccess),                                          //                         .debugaccess
		.av_address             (LEDs_s1_address),                                                       //      avalon_anti_slave_0.address
		.av_write               (LEDs_s1_write),                                                         //                         .write
		.av_readdata            (LEDs_s1_readdata),                                                      //                         .readdata
		.av_writedata           (LEDs_s1_writedata),                                                     //                         .writedata
		.av_chipselect          (LEDs_s1_chipselect),                                                    //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) player2score0_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (player2score0_s1_agent_m0_address),                                     // avalon_universal_slave_0.address
		.uav_burstcount         (player2score0_s1_agent_m0_burstcount),                                  //                         .burstcount
		.uav_read               (player2score0_s1_agent_m0_read),                                        //                         .read
		.uav_write              (player2score0_s1_agent_m0_write),                                       //                         .write
		.uav_waitrequest        (player2score0_s1_agent_m0_waitrequest),                                 //                         .waitrequest
		.uav_readdatavalid      (player2score0_s1_agent_m0_readdatavalid),                               //                         .readdatavalid
		.uav_byteenable         (player2score0_s1_agent_m0_byteenable),                                  //                         .byteenable
		.uav_readdata           (player2score0_s1_agent_m0_readdata),                                    //                         .readdata
		.uav_writedata          (player2score0_s1_agent_m0_writedata),                                   //                         .writedata
		.uav_lock               (player2score0_s1_agent_m0_lock),                                        //                         .lock
		.uav_debugaccess        (player2score0_s1_agent_m0_debugaccess),                                 //                         .debugaccess
		.av_address             (player2Score0_s1_address),                                              //      avalon_anti_slave_0.address
		.av_write               (player2Score0_s1_write),                                                //                         .write
		.av_readdata            (player2Score0_s1_readdata),                                             //                         .readdata
		.av_writedata           (player2Score0_s1_writedata),                                            //                         .writedata
		.av_chipselect          (player2Score0_s1_chipselect),                                           //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) player2score1_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (player2score1_s1_agent_m0_address),                                     // avalon_universal_slave_0.address
		.uav_burstcount         (player2score1_s1_agent_m0_burstcount),                                  //                         .burstcount
		.uav_read               (player2score1_s1_agent_m0_read),                                        //                         .read
		.uav_write              (player2score1_s1_agent_m0_write),                                       //                         .write
		.uav_waitrequest        (player2score1_s1_agent_m0_waitrequest),                                 //                         .waitrequest
		.uav_readdatavalid      (player2score1_s1_agent_m0_readdatavalid),                               //                         .readdatavalid
		.uav_byteenable         (player2score1_s1_agent_m0_byteenable),                                  //                         .byteenable
		.uav_readdata           (player2score1_s1_agent_m0_readdata),                                    //                         .readdata
		.uav_writedata          (player2score1_s1_agent_m0_writedata),                                   //                         .writedata
		.uav_lock               (player2score1_s1_agent_m0_lock),                                        //                         .lock
		.uav_debugaccess        (player2score1_s1_agent_m0_debugaccess),                                 //                         .debugaccess
		.av_address             (player2Score1_s1_address),                                              //      avalon_anti_slave_0.address
		.av_write               (player2Score1_s1_write),                                                //                         .write
		.av_readdata            (player2Score1_s1_readdata),                                             //                         .readdata
		.av_writedata           (player2Score1_s1_writedata),                                            //                         .writedata
		.av_chipselect          (player2Score1_s1_chipselect),                                           //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) player1score0_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (player1score0_s1_agent_m0_address),                                     // avalon_universal_slave_0.address
		.uav_burstcount         (player1score0_s1_agent_m0_burstcount),                                  //                         .burstcount
		.uav_read               (player1score0_s1_agent_m0_read),                                        //                         .read
		.uav_write              (player1score0_s1_agent_m0_write),                                       //                         .write
		.uav_waitrequest        (player1score0_s1_agent_m0_waitrequest),                                 //                         .waitrequest
		.uav_readdatavalid      (player1score0_s1_agent_m0_readdatavalid),                               //                         .readdatavalid
		.uav_byteenable         (player1score0_s1_agent_m0_byteenable),                                  //                         .byteenable
		.uav_readdata           (player1score0_s1_agent_m0_readdata),                                    //                         .readdata
		.uav_writedata          (player1score0_s1_agent_m0_writedata),                                   //                         .writedata
		.uav_lock               (player1score0_s1_agent_m0_lock),                                        //                         .lock
		.uav_debugaccess        (player1score0_s1_agent_m0_debugaccess),                                 //                         .debugaccess
		.av_address             (player1Score0_s1_address),                                              //      avalon_anti_slave_0.address
		.av_write               (player1Score0_s1_write),                                                //                         .write
		.av_readdata            (player1Score0_s1_readdata),                                             //                         .readdata
		.av_writedata           (player1Score0_s1_writedata),                                            //                         .writedata
		.av_chipselect          (player1Score0_s1_chipselect),                                           //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) player1score1_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (player1score1_s1_agent_m0_address),                                     // avalon_universal_slave_0.address
		.uav_burstcount         (player1score1_s1_agent_m0_burstcount),                                  //                         .burstcount
		.uav_read               (player1score1_s1_agent_m0_read),                                        //                         .read
		.uav_write              (player1score1_s1_agent_m0_write),                                       //                         .write
		.uav_waitrequest        (player1score1_s1_agent_m0_waitrequest),                                 //                         .waitrequest
		.uav_readdatavalid      (player1score1_s1_agent_m0_readdatavalid),                               //                         .readdatavalid
		.uav_byteenable         (player1score1_s1_agent_m0_byteenable),                                  //                         .byteenable
		.uav_readdata           (player1score1_s1_agent_m0_readdata),                                    //                         .readdata
		.uav_writedata          (player1score1_s1_agent_m0_writedata),                                   //                         .writedata
		.uav_lock               (player1score1_s1_agent_m0_lock),                                        //                         .lock
		.uav_debugaccess        (player1score1_s1_agent_m0_debugaccess),                                 //                         .debugaccess
		.av_address             (player1Score1_s1_address),                                              //      avalon_anti_slave_0.address
		.av_write               (player1Score1_s1_write),                                                //                         .write
		.av_readdata            (player1Score1_s1_readdata),                                             //                         .readdata
		.av_writedata           (player1Score1_s1_writedata),                                            //                         .writedata
		.av_chipselect          (player1Score1_s1_chipselect),                                           //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timescreen1_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timescreen1_s1_agent_m0_address),                                       // avalon_universal_slave_0.address
		.uav_burstcount         (timescreen1_s1_agent_m0_burstcount),                                    //                         .burstcount
		.uav_read               (timescreen1_s1_agent_m0_read),                                          //                         .read
		.uav_write              (timescreen1_s1_agent_m0_write),                                         //                         .write
		.uav_waitrequest        (timescreen1_s1_agent_m0_waitrequest),                                   //                         .waitrequest
		.uav_readdatavalid      (timescreen1_s1_agent_m0_readdatavalid),                                 //                         .readdatavalid
		.uav_byteenable         (timescreen1_s1_agent_m0_byteenable),                                    //                         .byteenable
		.uav_readdata           (timescreen1_s1_agent_m0_readdata),                                      //                         .readdata
		.uav_writedata          (timescreen1_s1_agent_m0_writedata),                                     //                         .writedata
		.uav_lock               (timescreen1_s1_agent_m0_lock),                                          //                         .lock
		.uav_debugaccess        (timescreen1_s1_agent_m0_debugaccess),                                   //                         .debugaccess
		.av_address             (timeScreen1_s1_address),                                                //      avalon_anti_slave_0.address
		.av_write               (timeScreen1_s1_write),                                                  //                         .write
		.av_readdata            (timeScreen1_s1_readdata),                                               //                         .readdata
		.av_writedata           (timeScreen1_s1_writedata),                                              //                         .writedata
		.av_chipselect          (timeScreen1_s1_chipselect),                                             //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timescreen2_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timescreen2_s1_agent_m0_address),                                       // avalon_universal_slave_0.address
		.uav_burstcount         (timescreen2_s1_agent_m0_burstcount),                                    //                         .burstcount
		.uav_read               (timescreen2_s1_agent_m0_read),                                          //                         .read
		.uav_write              (timescreen2_s1_agent_m0_write),                                         //                         .write
		.uav_waitrequest        (timescreen2_s1_agent_m0_waitrequest),                                   //                         .waitrequest
		.uav_readdatavalid      (timescreen2_s1_agent_m0_readdatavalid),                                 //                         .readdatavalid
		.uav_byteenable         (timescreen2_s1_agent_m0_byteenable),                                    //                         .byteenable
		.uav_readdata           (timescreen2_s1_agent_m0_readdata),                                      //                         .readdata
		.uav_writedata          (timescreen2_s1_agent_m0_writedata),                                     //                         .writedata
		.uav_lock               (timescreen2_s1_agent_m0_lock),                                          //                         .lock
		.uav_debugaccess        (timescreen2_s1_agent_m0_debugaccess),                                   //                         .debugaccess
		.av_address             (timeScreen2_s1_address),                                                //      avalon_anti_slave_0.address
		.av_write               (timeScreen2_s1_write),                                                  //                         .write
		.av_readdata            (timeScreen2_s1_readdata),                                               //                         .readdata
		.av_writedata           (timeScreen2_s1_writedata),                                              //                         .writedata
		.av_chipselect          (timeScreen2_s1_chipselect),                                             //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timescreen0_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timescreen0_s1_agent_m0_address),                                       // avalon_universal_slave_0.address
		.uav_burstcount         (timescreen0_s1_agent_m0_burstcount),                                    //                         .burstcount
		.uav_read               (timescreen0_s1_agent_m0_read),                                          //                         .read
		.uav_write              (timescreen0_s1_agent_m0_write),                                         //                         .write
		.uav_waitrequest        (timescreen0_s1_agent_m0_waitrequest),                                   //                         .waitrequest
		.uav_readdatavalid      (timescreen0_s1_agent_m0_readdatavalid),                                 //                         .readdatavalid
		.uav_byteenable         (timescreen0_s1_agent_m0_byteenable),                                    //                         .byteenable
		.uav_readdata           (timescreen0_s1_agent_m0_readdata),                                      //                         .readdata
		.uav_writedata          (timescreen0_s1_agent_m0_writedata),                                     //                         .writedata
		.uav_lock               (timescreen0_s1_agent_m0_lock),                                          //                         .lock
		.uav_debugaccess        (timescreen0_s1_agent_m0_debugaccess),                                   //                         .debugaccess
		.av_address             (timeScreen0_s1_address),                                                //      avalon_anti_slave_0.address
		.av_write               (timeScreen0_s1_write),                                                  //                         .write
		.av_readdata            (timeScreen0_s1_readdata),                                               //                         .readdata
		.av_writedata           (timeScreen0_s1_writedata),                                              //                         .writedata
		.av_chipselect          (timeScreen0_s1_chipselect),                                             //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_select_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (audio_select_s1_agent_m0_address),                                      // avalon_universal_slave_0.address
		.uav_burstcount         (audio_select_s1_agent_m0_burstcount),                                   //                         .burstcount
		.uav_read               (audio_select_s1_agent_m0_read),                                         //                         .read
		.uav_write              (audio_select_s1_agent_m0_write),                                        //                         .write
		.uav_waitrequest        (audio_select_s1_agent_m0_waitrequest),                                  //                         .waitrequest
		.uav_readdatavalid      (audio_select_s1_agent_m0_readdatavalid),                                //                         .readdatavalid
		.uav_byteenable         (audio_select_s1_agent_m0_byteenable),                                   //                         .byteenable
		.uav_readdata           (audio_select_s1_agent_m0_readdata),                                     //                         .readdata
		.uav_writedata          (audio_select_s1_agent_m0_writedata),                                    //                         .writedata
		.uav_lock               (audio_select_s1_agent_m0_lock),                                         //                         .lock
		.uav_debugaccess        (audio_select_s1_agent_m0_debugaccess),                                  //                         .debugaccess
		.av_address             (audio_select_s1_address),                                               //      avalon_anti_slave_0.address
		.av_write               (audio_select_s1_write),                                                 //                         .write
		.av_readdata            (audio_select_s1_readdata),                                              //                         .readdata
		.av_writedata           (audio_select_s1_writedata),                                             //                         .writedata
		.av_chipselect          (audio_select_s1_chipselect),                                            //                         .chipselect
		.av_read                (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) boot_up_s1_translator (
		.clk                    (clk_0_clk_clk),                                                         //                      clk.clk
		.reset                  (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (boot_up_s1_agent_m0_address),                                           // avalon_universal_slave_0.address
		.uav_burstcount         (boot_up_s1_agent_m0_burstcount),                                        //                         .burstcount
		.uav_read               (boot_up_s1_agent_m0_read),                                              //                         .read
		.uav_write              (boot_up_s1_agent_m0_write),                                             //                         .write
		.uav_waitrequest        (boot_up_s1_agent_m0_waitrequest),                                       //                         .waitrequest
		.uav_readdatavalid      (boot_up_s1_agent_m0_readdatavalid),                                     //                         .readdatavalid
		.uav_byteenable         (boot_up_s1_agent_m0_byteenable),                                        //                         .byteenable
		.uav_readdata           (boot_up_s1_agent_m0_readdata),                                          //                         .readdata
		.uav_writedata          (boot_up_s1_agent_m0_writedata),                                         //                         .writedata
		.uav_lock               (boot_up_s1_agent_m0_lock),                                              //                         .lock
		.uav_debugaccess        (boot_up_s1_agent_m0_debugaccess),                                       //                         .debugaccess
		.av_address             (Boot_Up_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata            (Boot_Up_s1_readdata),                                                   //                         .readdata
		.av_write               (),                                                                      //              (terminated)
		.av_read                (),                                                                      //              (terminated)
		.av_writedata           (),                                                                      //              (terminated)
		.av_begintransfer       (),                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                      //              (terminated)
		.av_burstcount          (),                                                                      //              (terminated)
		.av_byteenable          (),                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                      //              (terminated)
		.av_lock                (),                                                                      //              (terminated)
		.av_chipselect          (),                                                                      //              (terminated)
		.av_clken               (),                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                  //              (terminated)
		.av_debugaccess         (),                                                                      //              (terminated)
		.av_outputenable        (),                                                                      //              (terminated)
		.uav_response           (),                                                                      //              (terminated)
		.av_response            (2'b00),                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (28),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_0_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                               //       clk.clk
		.reset                 (nios2_qsys_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_qsys_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_qsys_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_qsys_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_qsys_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_qsys_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_qsys_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_qsys_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                           //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (28),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_0_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                 (nios2_qsys_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_qsys_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_qsys_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_qsys_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_qsys_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_qsys_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                     //                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_qsys_0_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_qsys_0_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_qsys_0_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_qsys_0_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_qsys_0_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_qsys_0_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_qsys_0_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_qsys_0_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_qsys_0_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_qsys_0_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_qsys_0_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_qsys_0_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_qsys_0_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_qsys_0_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_qsys_0_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_qsys_0_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_qsys_0_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                       //                .channel
		.rf_sink_ready           (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_qsys_0_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_qsys_0_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_qsys_0_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_qsys_0_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_qsys_0_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_qsys_0_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_qsys_0_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_qsys_0_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_qsys_0_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_qsys_0_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_qsys_0_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_pll_audio_pll_pll_slave_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sdram_pll_audio_pll_pll_slave_agent_m0_address),                        //              m0.address
		.m0_burstcount           (sdram_pll_audio_pll_pll_slave_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (sdram_pll_audio_pll_pll_slave_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (sdram_pll_audio_pll_pll_slave_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (sdram_pll_audio_pll_pll_slave_agent_m0_lock),                           //                .lock
		.m0_readdata             (sdram_pll_audio_pll_pll_slave_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (sdram_pll_audio_pll_pll_slave_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (sdram_pll_audio_pll_pll_slave_agent_m0_read),                           //                .read
		.m0_waitrequest          (sdram_pll_audio_pll_pll_slave_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (sdram_pll_audio_pll_pll_slave_agent_m0_writedata),                      //                .writedata
		.m0_write                (sdram_pll_audio_pll_pll_slave_agent_m0_write),                          //                .write
		.rp_endofpacket          (sdram_pll_audio_pll_pll_slave_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (sdram_pll_audio_pll_pll_slave_agent_rp_ready),                          //                .ready
		.rp_valid                (sdram_pll_audio_pll_pll_slave_agent_rp_valid),                          //                .valid
		.rp_data                 (sdram_pll_audio_pll_pll_slave_agent_rp_data),                           //                .data
		.rp_startofpacket        (sdram_pll_audio_pll_pll_slave_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                               //                .channel
		.rf_sink_ready           (sdram_pll_audio_pll_pll_slave_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (sdram_pll_audio_pll_pll_slave_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (sdram_pll_audio_pll_pll_slave_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (sdram_pll_audio_pll_pll_slave_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (sdram_pll_audio_pll_pll_slave_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (sdram_pll_audio_pll_pll_slave_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (sdram_pll_audio_pll_pll_slave_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (sdram_pll_audio_pll_pll_slave_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (sdram_pll_audio_pll_pll_slave_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (sdram_pll_audio_pll_pll_slave_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (sdram_pll_audio_pll_pll_slave_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_pll_audio_pll_pll_slave_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (sdram_pll_audio_pll_pll_slave_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_pll_audio_pll_pll_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_pll_audio_pll_pll_slave_agent_rf_source_data),                    //        in.data
		.in_valid          (sdram_pll_audio_pll_pll_slave_agent_rf_source_valid),                   //          .valid
		.in_ready          (sdram_pll_audio_pll_pll_slave_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (sdram_pll_audio_pll_pll_slave_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (sdram_pll_audio_pll_pll_slave_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (sdram_pll_audio_pll_pll_slave_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (sdram_pll_audio_pll_pll_slave_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (sdram_pll_audio_pll_pll_slave_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (sdram_pll_audio_pll_pll_slave_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (sdram_pll_audio_pll_pll_slave_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (sdram_pll_audio_pll_c0_clk),                //             clk.clk
		.reset                   (sdram_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_004_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                   //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),         //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (sdram_pll_audio_pll_c0_clk),                //       clk.clk
		.reset             (sdram_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (sdram_pll_audio_pll_c0_clk),              //       clk.clk
		.reset             (sdram_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_005_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                        //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),              //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),                //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) avalon_blitter_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (avalon_blitter_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (avalon_blitter_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (avalon_blitter_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (avalon_blitter_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (avalon_blitter_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (avalon_blitter_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (avalon_blitter_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (avalon_blitter_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (avalon_blitter_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (avalon_blitter_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (avalon_blitter_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (avalon_blitter_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (avalon_blitter_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (avalon_blitter_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (avalon_blitter_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (avalon_blitter_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                              //                .channel
		.rf_sink_ready           (avalon_blitter_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (avalon_blitter_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (avalon_blitter_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (avalon_blitter_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (avalon_blitter_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (avalon_blitter_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (avalon_blitter_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (avalon_blitter_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (avalon_blitter_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (avalon_blitter_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (avalon_blitter_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (avalon_blitter_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (avalon_blitter_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avalon_blitter_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (avalon_blitter_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (avalon_blitter_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (avalon_blitter_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (avalon_blitter_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (avalon_blitter_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (avalon_blitter_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (avalon_blitter_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (avalon_blitter_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (avalon_blitter_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (avalon_blitter_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) otg_hpi_address_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (otg_hpi_address_s1_agent_m0_address),                                   //              m0.address
		.m0_burstcount           (otg_hpi_address_s1_agent_m0_burstcount),                                //                .burstcount
		.m0_byteenable           (otg_hpi_address_s1_agent_m0_byteenable),                                //                .byteenable
		.m0_debugaccess          (otg_hpi_address_s1_agent_m0_debugaccess),                               //                .debugaccess
		.m0_lock                 (otg_hpi_address_s1_agent_m0_lock),                                      //                .lock
		.m0_readdata             (otg_hpi_address_s1_agent_m0_readdata),                                  //                .readdata
		.m0_readdatavalid        (otg_hpi_address_s1_agent_m0_readdatavalid),                             //                .readdatavalid
		.m0_read                 (otg_hpi_address_s1_agent_m0_read),                                      //                .read
		.m0_waitrequest          (otg_hpi_address_s1_agent_m0_waitrequest),                               //                .waitrequest
		.m0_writedata            (otg_hpi_address_s1_agent_m0_writedata),                                 //                .writedata
		.m0_write                (otg_hpi_address_s1_agent_m0_write),                                     //                .write
		.rp_endofpacket          (otg_hpi_address_s1_agent_rp_endofpacket),                               //              rp.endofpacket
		.rp_ready                (otg_hpi_address_s1_agent_rp_ready),                                     //                .ready
		.rp_valid                (otg_hpi_address_s1_agent_rp_valid),                                     //                .valid
		.rp_data                 (otg_hpi_address_s1_agent_rp_data),                                      //                .data
		.rp_startofpacket        (otg_hpi_address_s1_agent_rp_startofpacket),                             //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                               //                .channel
		.rf_sink_ready           (otg_hpi_address_s1_agent_rsp_fifo_out_ready),                           //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_address_s1_agent_rsp_fifo_out_valid),                           //                .valid
		.rf_sink_startofpacket   (otg_hpi_address_s1_agent_rsp_fifo_out_startofpacket),                   //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_address_s1_agent_rsp_fifo_out_endofpacket),                     //                .endofpacket
		.rf_sink_data            (otg_hpi_address_s1_agent_rsp_fifo_out_data),                            //                .data
		.rf_source_ready         (otg_hpi_address_s1_agent_rf_source_ready),                              //       rf_source.ready
		.rf_source_valid         (otg_hpi_address_s1_agent_rf_source_valid),                              //                .valid
		.rf_source_startofpacket (otg_hpi_address_s1_agent_rf_source_startofpacket),                      //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_address_s1_agent_rf_source_endofpacket),                        //                .endofpacket
		.rf_source_data          (otg_hpi_address_s1_agent_rf_source_data),                               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (otg_hpi_address_s1_agent_rdata_fifo_src_ready),                         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_address_s1_agent_rdata_fifo_src_valid),                         //                .valid
		.rdata_fifo_src_data     (otg_hpi_address_s1_agent_rdata_fifo_src_data),                          //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_address_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (otg_hpi_address_s1_agent_rf_source_data),                               //        in.data
		.in_valid          (otg_hpi_address_s1_agent_rf_source_valid),                              //          .valid
		.in_ready          (otg_hpi_address_s1_agent_rf_source_ready),                              //          .ready
		.in_startofpacket  (otg_hpi_address_s1_agent_rf_source_startofpacket),                      //          .startofpacket
		.in_endofpacket    (otg_hpi_address_s1_agent_rf_source_endofpacket),                        //          .endofpacket
		.out_data          (otg_hpi_address_s1_agent_rsp_fifo_out_data),                            //       out.data
		.out_valid         (otg_hpi_address_s1_agent_rsp_fifo_out_valid),                           //          .valid
		.out_ready         (otg_hpi_address_s1_agent_rsp_fifo_out_ready),                           //          .ready
		.out_startofpacket (otg_hpi_address_s1_agent_rsp_fifo_out_startofpacket),                   //          .startofpacket
		.out_endofpacket   (otg_hpi_address_s1_agent_rsp_fifo_out_endofpacket),                     //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) otg_hpi_data_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (otg_hpi_data_s1_agent_m0_address),                                      //              m0.address
		.m0_burstcount           (otg_hpi_data_s1_agent_m0_burstcount),                                   //                .burstcount
		.m0_byteenable           (otg_hpi_data_s1_agent_m0_byteenable),                                   //                .byteenable
		.m0_debugaccess          (otg_hpi_data_s1_agent_m0_debugaccess),                                  //                .debugaccess
		.m0_lock                 (otg_hpi_data_s1_agent_m0_lock),                                         //                .lock
		.m0_readdata             (otg_hpi_data_s1_agent_m0_readdata),                                     //                .readdata
		.m0_readdatavalid        (otg_hpi_data_s1_agent_m0_readdatavalid),                                //                .readdatavalid
		.m0_read                 (otg_hpi_data_s1_agent_m0_read),                                         //                .read
		.m0_waitrequest          (otg_hpi_data_s1_agent_m0_waitrequest),                                  //                .waitrequest
		.m0_writedata            (otg_hpi_data_s1_agent_m0_writedata),                                    //                .writedata
		.m0_write                (otg_hpi_data_s1_agent_m0_write),                                        //                .write
		.rp_endofpacket          (otg_hpi_data_s1_agent_rp_endofpacket),                                  //              rp.endofpacket
		.rp_ready                (otg_hpi_data_s1_agent_rp_ready),                                        //                .ready
		.rp_valid                (otg_hpi_data_s1_agent_rp_valid),                                        //                .valid
		.rp_data                 (otg_hpi_data_s1_agent_rp_data),                                         //                .data
		.rp_startofpacket        (otg_hpi_data_s1_agent_rp_startofpacket),                                //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                               //                .channel
		.rf_sink_ready           (otg_hpi_data_s1_agent_rsp_fifo_out_ready),                              //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_data_s1_agent_rsp_fifo_out_valid),                              //                .valid
		.rf_sink_startofpacket   (otg_hpi_data_s1_agent_rsp_fifo_out_startofpacket),                      //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_data_s1_agent_rsp_fifo_out_endofpacket),                        //                .endofpacket
		.rf_sink_data            (otg_hpi_data_s1_agent_rsp_fifo_out_data),                               //                .data
		.rf_source_ready         (otg_hpi_data_s1_agent_rf_source_ready),                                 //       rf_source.ready
		.rf_source_valid         (otg_hpi_data_s1_agent_rf_source_valid),                                 //                .valid
		.rf_source_startofpacket (otg_hpi_data_s1_agent_rf_source_startofpacket),                         //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_data_s1_agent_rf_source_endofpacket),                           //                .endofpacket
		.rf_source_data          (otg_hpi_data_s1_agent_rf_source_data),                                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (otg_hpi_data_s1_agent_rdata_fifo_src_ready),                            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_data_s1_agent_rdata_fifo_src_valid),                            //                .valid
		.rdata_fifo_src_data     (otg_hpi_data_s1_agent_rdata_fifo_src_data),                             //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_data_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (otg_hpi_data_s1_agent_rf_source_data),                                  //        in.data
		.in_valid          (otg_hpi_data_s1_agent_rf_source_valid),                                 //          .valid
		.in_ready          (otg_hpi_data_s1_agent_rf_source_ready),                                 //          .ready
		.in_startofpacket  (otg_hpi_data_s1_agent_rf_source_startofpacket),                         //          .startofpacket
		.in_endofpacket    (otg_hpi_data_s1_agent_rf_source_endofpacket),                           //          .endofpacket
		.out_data          (otg_hpi_data_s1_agent_rsp_fifo_out_data),                               //       out.data
		.out_valid         (otg_hpi_data_s1_agent_rsp_fifo_out_valid),                              //          .valid
		.out_ready         (otg_hpi_data_s1_agent_rsp_fifo_out_ready),                              //          .ready
		.out_startofpacket (otg_hpi_data_s1_agent_rsp_fifo_out_startofpacket),                      //          .startofpacket
		.out_endofpacket   (otg_hpi_data_s1_agent_rsp_fifo_out_endofpacket),                        //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) otg_hpi_r_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (otg_hpi_r_s1_agent_m0_address),                                         //              m0.address
		.m0_burstcount           (otg_hpi_r_s1_agent_m0_burstcount),                                      //                .burstcount
		.m0_byteenable           (otg_hpi_r_s1_agent_m0_byteenable),                                      //                .byteenable
		.m0_debugaccess          (otg_hpi_r_s1_agent_m0_debugaccess),                                     //                .debugaccess
		.m0_lock                 (otg_hpi_r_s1_agent_m0_lock),                                            //                .lock
		.m0_readdata             (otg_hpi_r_s1_agent_m0_readdata),                                        //                .readdata
		.m0_readdatavalid        (otg_hpi_r_s1_agent_m0_readdatavalid),                                   //                .readdatavalid
		.m0_read                 (otg_hpi_r_s1_agent_m0_read),                                            //                .read
		.m0_waitrequest          (otg_hpi_r_s1_agent_m0_waitrequest),                                     //                .waitrequest
		.m0_writedata            (otg_hpi_r_s1_agent_m0_writedata),                                       //                .writedata
		.m0_write                (otg_hpi_r_s1_agent_m0_write),                                           //                .write
		.rp_endofpacket          (otg_hpi_r_s1_agent_rp_endofpacket),                                     //              rp.endofpacket
		.rp_ready                (otg_hpi_r_s1_agent_rp_ready),                                           //                .ready
		.rp_valid                (otg_hpi_r_s1_agent_rp_valid),                                           //                .valid
		.rp_data                 (otg_hpi_r_s1_agent_rp_data),                                            //                .data
		.rp_startofpacket        (otg_hpi_r_s1_agent_rp_startofpacket),                                   //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                               //                .channel
		.rf_sink_ready           (otg_hpi_r_s1_agent_rsp_fifo_out_ready),                                 //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_r_s1_agent_rsp_fifo_out_valid),                                 //                .valid
		.rf_sink_startofpacket   (otg_hpi_r_s1_agent_rsp_fifo_out_startofpacket),                         //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_r_s1_agent_rsp_fifo_out_endofpacket),                           //                .endofpacket
		.rf_sink_data            (otg_hpi_r_s1_agent_rsp_fifo_out_data),                                  //                .data
		.rf_source_ready         (otg_hpi_r_s1_agent_rf_source_ready),                                    //       rf_source.ready
		.rf_source_valid         (otg_hpi_r_s1_agent_rf_source_valid),                                    //                .valid
		.rf_source_startofpacket (otg_hpi_r_s1_agent_rf_source_startofpacket),                            //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_r_s1_agent_rf_source_endofpacket),                              //                .endofpacket
		.rf_source_data          (otg_hpi_r_s1_agent_rf_source_data),                                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (otg_hpi_r_s1_agent_rdata_fifo_src_ready),                               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_r_s1_agent_rdata_fifo_src_valid),                               //                .valid
		.rdata_fifo_src_data     (otg_hpi_r_s1_agent_rdata_fifo_src_data),                                //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_r_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (otg_hpi_r_s1_agent_rf_source_data),                                     //        in.data
		.in_valid          (otg_hpi_r_s1_agent_rf_source_valid),                                    //          .valid
		.in_ready          (otg_hpi_r_s1_agent_rf_source_ready),                                    //          .ready
		.in_startofpacket  (otg_hpi_r_s1_agent_rf_source_startofpacket),                            //          .startofpacket
		.in_endofpacket    (otg_hpi_r_s1_agent_rf_source_endofpacket),                              //          .endofpacket
		.out_data          (otg_hpi_r_s1_agent_rsp_fifo_out_data),                                  //       out.data
		.out_valid         (otg_hpi_r_s1_agent_rsp_fifo_out_valid),                                 //          .valid
		.out_ready         (otg_hpi_r_s1_agent_rsp_fifo_out_ready),                                 //          .ready
		.out_startofpacket (otg_hpi_r_s1_agent_rsp_fifo_out_startofpacket),                         //          .startofpacket
		.out_endofpacket   (otg_hpi_r_s1_agent_rsp_fifo_out_endofpacket),                           //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) otg_hpi_w_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (otg_hpi_w_s1_agent_m0_address),                                         //              m0.address
		.m0_burstcount           (otg_hpi_w_s1_agent_m0_burstcount),                                      //                .burstcount
		.m0_byteenable           (otg_hpi_w_s1_agent_m0_byteenable),                                      //                .byteenable
		.m0_debugaccess          (otg_hpi_w_s1_agent_m0_debugaccess),                                     //                .debugaccess
		.m0_lock                 (otg_hpi_w_s1_agent_m0_lock),                                            //                .lock
		.m0_readdata             (otg_hpi_w_s1_agent_m0_readdata),                                        //                .readdata
		.m0_readdatavalid        (otg_hpi_w_s1_agent_m0_readdatavalid),                                   //                .readdatavalid
		.m0_read                 (otg_hpi_w_s1_agent_m0_read),                                            //                .read
		.m0_waitrequest          (otg_hpi_w_s1_agent_m0_waitrequest),                                     //                .waitrequest
		.m0_writedata            (otg_hpi_w_s1_agent_m0_writedata),                                       //                .writedata
		.m0_write                (otg_hpi_w_s1_agent_m0_write),                                           //                .write
		.rp_endofpacket          (otg_hpi_w_s1_agent_rp_endofpacket),                                     //              rp.endofpacket
		.rp_ready                (otg_hpi_w_s1_agent_rp_ready),                                           //                .ready
		.rp_valid                (otg_hpi_w_s1_agent_rp_valid),                                           //                .valid
		.rp_data                 (otg_hpi_w_s1_agent_rp_data),                                            //                .data
		.rp_startofpacket        (otg_hpi_w_s1_agent_rp_startofpacket),                                   //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                               //                .channel
		.rf_sink_ready           (otg_hpi_w_s1_agent_rsp_fifo_out_ready),                                 //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_w_s1_agent_rsp_fifo_out_valid),                                 //                .valid
		.rf_sink_startofpacket   (otg_hpi_w_s1_agent_rsp_fifo_out_startofpacket),                         //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_w_s1_agent_rsp_fifo_out_endofpacket),                           //                .endofpacket
		.rf_sink_data            (otg_hpi_w_s1_agent_rsp_fifo_out_data),                                  //                .data
		.rf_source_ready         (otg_hpi_w_s1_agent_rf_source_ready),                                    //       rf_source.ready
		.rf_source_valid         (otg_hpi_w_s1_agent_rf_source_valid),                                    //                .valid
		.rf_source_startofpacket (otg_hpi_w_s1_agent_rf_source_startofpacket),                            //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_w_s1_agent_rf_source_endofpacket),                              //                .endofpacket
		.rf_source_data          (otg_hpi_w_s1_agent_rf_source_data),                                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (otg_hpi_w_s1_agent_rdata_fifo_src_ready),                               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_w_s1_agent_rdata_fifo_src_valid),                               //                .valid
		.rdata_fifo_src_data     (otg_hpi_w_s1_agent_rdata_fifo_src_data),                                //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_w_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (otg_hpi_w_s1_agent_rf_source_data),                                     //        in.data
		.in_valid          (otg_hpi_w_s1_agent_rf_source_valid),                                    //          .valid
		.in_ready          (otg_hpi_w_s1_agent_rf_source_ready),                                    //          .ready
		.in_startofpacket  (otg_hpi_w_s1_agent_rf_source_startofpacket),                            //          .startofpacket
		.in_endofpacket    (otg_hpi_w_s1_agent_rf_source_endofpacket),                              //          .endofpacket
		.out_data          (otg_hpi_w_s1_agent_rsp_fifo_out_data),                                  //       out.data
		.out_valid         (otg_hpi_w_s1_agent_rsp_fifo_out_valid),                                 //          .valid
		.out_ready         (otg_hpi_w_s1_agent_rsp_fifo_out_ready),                                 //          .ready
		.out_startofpacket (otg_hpi_w_s1_agent_rsp_fifo_out_startofpacket),                         //          .startofpacket
		.out_endofpacket   (otg_hpi_w_s1_agent_rsp_fifo_out_endofpacket),                           //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) otg_hpi_cs_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (otg_hpi_cs_s1_agent_m0_address),                                        //              m0.address
		.m0_burstcount           (otg_hpi_cs_s1_agent_m0_burstcount),                                     //                .burstcount
		.m0_byteenable           (otg_hpi_cs_s1_agent_m0_byteenable),                                     //                .byteenable
		.m0_debugaccess          (otg_hpi_cs_s1_agent_m0_debugaccess),                                    //                .debugaccess
		.m0_lock                 (otg_hpi_cs_s1_agent_m0_lock),                                           //                .lock
		.m0_readdata             (otg_hpi_cs_s1_agent_m0_readdata),                                       //                .readdata
		.m0_readdatavalid        (otg_hpi_cs_s1_agent_m0_readdatavalid),                                  //                .readdatavalid
		.m0_read                 (otg_hpi_cs_s1_agent_m0_read),                                           //                .read
		.m0_waitrequest          (otg_hpi_cs_s1_agent_m0_waitrequest),                                    //                .waitrequest
		.m0_writedata            (otg_hpi_cs_s1_agent_m0_writedata),                                      //                .writedata
		.m0_write                (otg_hpi_cs_s1_agent_m0_write),                                          //                .write
		.rp_endofpacket          (otg_hpi_cs_s1_agent_rp_endofpacket),                                    //              rp.endofpacket
		.rp_ready                (otg_hpi_cs_s1_agent_rp_ready),                                          //                .ready
		.rp_valid                (otg_hpi_cs_s1_agent_rp_valid),                                          //                .valid
		.rp_data                 (otg_hpi_cs_s1_agent_rp_data),                                           //                .data
		.rp_startofpacket        (otg_hpi_cs_s1_agent_rp_startofpacket),                                  //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                                               //                .channel
		.rf_sink_ready           (otg_hpi_cs_s1_agent_rsp_fifo_out_ready),                                //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_cs_s1_agent_rsp_fifo_out_valid),                                //                .valid
		.rf_sink_startofpacket   (otg_hpi_cs_s1_agent_rsp_fifo_out_startofpacket),                        //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_cs_s1_agent_rsp_fifo_out_endofpacket),                          //                .endofpacket
		.rf_sink_data            (otg_hpi_cs_s1_agent_rsp_fifo_out_data),                                 //                .data
		.rf_source_ready         (otg_hpi_cs_s1_agent_rf_source_ready),                                   //       rf_source.ready
		.rf_source_valid         (otg_hpi_cs_s1_agent_rf_source_valid),                                   //                .valid
		.rf_source_startofpacket (otg_hpi_cs_s1_agent_rf_source_startofpacket),                           //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_cs_s1_agent_rf_source_endofpacket),                             //                .endofpacket
		.rf_source_data          (otg_hpi_cs_s1_agent_rf_source_data),                                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (otg_hpi_cs_s1_agent_rdata_fifo_src_ready),                              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_cs_s1_agent_rdata_fifo_src_valid),                              //                .valid
		.rdata_fifo_src_data     (otg_hpi_cs_s1_agent_rdata_fifo_src_data),                               //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_cs_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (otg_hpi_cs_s1_agent_rf_source_data),                                    //        in.data
		.in_valid          (otg_hpi_cs_s1_agent_rf_source_valid),                                   //          .valid
		.in_ready          (otg_hpi_cs_s1_agent_rf_source_ready),                                   //          .ready
		.in_startofpacket  (otg_hpi_cs_s1_agent_rf_source_startofpacket),                           //          .startofpacket
		.in_endofpacket    (otg_hpi_cs_s1_agent_rf_source_endofpacket),                             //          .endofpacket
		.out_data          (otg_hpi_cs_s1_agent_rsp_fifo_out_data),                                 //       out.data
		.out_valid         (otg_hpi_cs_s1_agent_rsp_fifo_out_valid),                                //          .valid
		.out_ready         (otg_hpi_cs_s1_agent_rsp_fifo_out_ready),                                //          .ready
		.out_startofpacket (otg_hpi_cs_s1_agent_rsp_fifo_out_startofpacket),                        //          .startofpacket
		.out_endofpacket   (otg_hpi_cs_s1_agent_rsp_fifo_out_endofpacket),                          //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) otg_hpi_reset_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (otg_hpi_reset_s1_agent_m0_address),                                     //              m0.address
		.m0_burstcount           (otg_hpi_reset_s1_agent_m0_burstcount),                                  //                .burstcount
		.m0_byteenable           (otg_hpi_reset_s1_agent_m0_byteenable),                                  //                .byteenable
		.m0_debugaccess          (otg_hpi_reset_s1_agent_m0_debugaccess),                                 //                .debugaccess
		.m0_lock                 (otg_hpi_reset_s1_agent_m0_lock),                                        //                .lock
		.m0_readdata             (otg_hpi_reset_s1_agent_m0_readdata),                                    //                .readdata
		.m0_readdatavalid        (otg_hpi_reset_s1_agent_m0_readdatavalid),                               //                .readdatavalid
		.m0_read                 (otg_hpi_reset_s1_agent_m0_read),                                        //                .read
		.m0_waitrequest          (otg_hpi_reset_s1_agent_m0_waitrequest),                                 //                .waitrequest
		.m0_writedata            (otg_hpi_reset_s1_agent_m0_writedata),                                   //                .writedata
		.m0_write                (otg_hpi_reset_s1_agent_m0_write),                                       //                .write
		.rp_endofpacket          (otg_hpi_reset_s1_agent_rp_endofpacket),                                 //              rp.endofpacket
		.rp_ready                (otg_hpi_reset_s1_agent_rp_ready),                                       //                .ready
		.rp_valid                (otg_hpi_reset_s1_agent_rp_valid),                                       //                .valid
		.rp_data                 (otg_hpi_reset_s1_agent_rp_data),                                        //                .data
		.rp_startofpacket        (otg_hpi_reset_s1_agent_rp_startofpacket),                               //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                                               //                .channel
		.rf_sink_ready           (otg_hpi_reset_s1_agent_rsp_fifo_out_ready),                             //         rf_sink.ready
		.rf_sink_valid           (otg_hpi_reset_s1_agent_rsp_fifo_out_valid),                             //                .valid
		.rf_sink_startofpacket   (otg_hpi_reset_s1_agent_rsp_fifo_out_startofpacket),                     //                .startofpacket
		.rf_sink_endofpacket     (otg_hpi_reset_s1_agent_rsp_fifo_out_endofpacket),                       //                .endofpacket
		.rf_sink_data            (otg_hpi_reset_s1_agent_rsp_fifo_out_data),                              //                .data
		.rf_source_ready         (otg_hpi_reset_s1_agent_rf_source_ready),                                //       rf_source.ready
		.rf_source_valid         (otg_hpi_reset_s1_agent_rf_source_valid),                                //                .valid
		.rf_source_startofpacket (otg_hpi_reset_s1_agent_rf_source_startofpacket),                        //                .startofpacket
		.rf_source_endofpacket   (otg_hpi_reset_s1_agent_rf_source_endofpacket),                          //                .endofpacket
		.rf_source_data          (otg_hpi_reset_s1_agent_rf_source_data),                                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (otg_hpi_reset_s1_agent_rdata_fifo_src_ready),                           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (otg_hpi_reset_s1_agent_rdata_fifo_src_valid),                           //                .valid
		.rdata_fifo_src_data     (otg_hpi_reset_s1_agent_rdata_fifo_src_data),                            //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) otg_hpi_reset_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (otg_hpi_reset_s1_agent_rf_source_data),                                 //        in.data
		.in_valid          (otg_hpi_reset_s1_agent_rf_source_valid),                                //          .valid
		.in_ready          (otg_hpi_reset_s1_agent_rf_source_ready),                                //          .ready
		.in_startofpacket  (otg_hpi_reset_s1_agent_rf_source_startofpacket),                        //          .startofpacket
		.in_endofpacket    (otg_hpi_reset_s1_agent_rf_source_endofpacket),                          //          .endofpacket
		.out_data          (otg_hpi_reset_s1_agent_rsp_fifo_out_data),                              //       out.data
		.out_valid         (otg_hpi_reset_s1_agent_rsp_fifo_out_valid),                             //          .valid
		.out_ready         (otg_hpi_reset_s1_agent_rsp_fifo_out_ready),                             //          .ready
		.out_startofpacket (otg_hpi_reset_s1_agent_rsp_fifo_out_startofpacket),                     //          .startofpacket
		.out_endofpacket   (otg_hpi_reset_s1_agent_rsp_fifo_out_endofpacket),                       //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) audio_init_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (audio_init_s1_agent_m0_address),                                        //              m0.address
		.m0_burstcount           (audio_init_s1_agent_m0_burstcount),                                     //                .burstcount
		.m0_byteenable           (audio_init_s1_agent_m0_byteenable),                                     //                .byteenable
		.m0_debugaccess          (audio_init_s1_agent_m0_debugaccess),                                    //                .debugaccess
		.m0_lock                 (audio_init_s1_agent_m0_lock),                                           //                .lock
		.m0_readdata             (audio_init_s1_agent_m0_readdata),                                       //                .readdata
		.m0_readdatavalid        (audio_init_s1_agent_m0_readdatavalid),                                  //                .readdatavalid
		.m0_read                 (audio_init_s1_agent_m0_read),                                           //                .read
		.m0_waitrequest          (audio_init_s1_agent_m0_waitrequest),                                    //                .waitrequest
		.m0_writedata            (audio_init_s1_agent_m0_writedata),                                      //                .writedata
		.m0_write                (audio_init_s1_agent_m0_write),                                          //                .write
		.rp_endofpacket          (audio_init_s1_agent_rp_endofpacket),                                    //              rp.endofpacket
		.rp_ready                (audio_init_s1_agent_rp_ready),                                          //                .ready
		.rp_valid                (audio_init_s1_agent_rp_valid),                                          //                .valid
		.rp_data                 (audio_init_s1_agent_rp_data),                                           //                .data
		.rp_startofpacket        (audio_init_s1_agent_rp_startofpacket),                                  //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                                               //                .channel
		.rf_sink_ready           (audio_init_s1_agent_rsp_fifo_out_ready),                                //         rf_sink.ready
		.rf_sink_valid           (audio_init_s1_agent_rsp_fifo_out_valid),                                //                .valid
		.rf_sink_startofpacket   (audio_init_s1_agent_rsp_fifo_out_startofpacket),                        //                .startofpacket
		.rf_sink_endofpacket     (audio_init_s1_agent_rsp_fifo_out_endofpacket),                          //                .endofpacket
		.rf_sink_data            (audio_init_s1_agent_rsp_fifo_out_data),                                 //                .data
		.rf_source_ready         (audio_init_s1_agent_rf_source_ready),                                   //       rf_source.ready
		.rf_source_valid         (audio_init_s1_agent_rf_source_valid),                                   //                .valid
		.rf_source_startofpacket (audio_init_s1_agent_rf_source_startofpacket),                           //                .startofpacket
		.rf_source_endofpacket   (audio_init_s1_agent_rf_source_endofpacket),                             //                .endofpacket
		.rf_source_data          (audio_init_s1_agent_rf_source_data),                                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (audio_init_s1_agent_rdata_fifo_src_ready),                              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_init_s1_agent_rdata_fifo_src_valid),                              //                .valid
		.rdata_fifo_src_data     (audio_init_s1_agent_rdata_fifo_src_data),                               //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_init_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (audio_init_s1_agent_rf_source_data),                                    //        in.data
		.in_valid          (audio_init_s1_agent_rf_source_valid),                                   //          .valid
		.in_ready          (audio_init_s1_agent_rf_source_ready),                                   //          .ready
		.in_startofpacket  (audio_init_s1_agent_rf_source_startofpacket),                           //          .startofpacket
		.in_endofpacket    (audio_init_s1_agent_rf_source_endofpacket),                             //          .endofpacket
		.out_data          (audio_init_s1_agent_rsp_fifo_out_data),                                 //       out.data
		.out_valid         (audio_init_s1_agent_rsp_fifo_out_valid),                                //          .valid
		.out_ready         (audio_init_s1_agent_rsp_fifo_out_ready),                                //          .ready
		.out_startofpacket (audio_init_s1_agent_rsp_fifo_out_startofpacket),                        //          .startofpacket
		.out_endofpacket   (audio_init_s1_agent_rsp_fifo_out_endofpacket),                          //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) audio_init_f_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (audio_init_f_s1_agent_m0_address),                                      //              m0.address
		.m0_burstcount           (audio_init_f_s1_agent_m0_burstcount),                                   //                .burstcount
		.m0_byteenable           (audio_init_f_s1_agent_m0_byteenable),                                   //                .byteenable
		.m0_debugaccess          (audio_init_f_s1_agent_m0_debugaccess),                                  //                .debugaccess
		.m0_lock                 (audio_init_f_s1_agent_m0_lock),                                         //                .lock
		.m0_readdata             (audio_init_f_s1_agent_m0_readdata),                                     //                .readdata
		.m0_readdatavalid        (audio_init_f_s1_agent_m0_readdatavalid),                                //                .readdatavalid
		.m0_read                 (audio_init_f_s1_agent_m0_read),                                         //                .read
		.m0_waitrequest          (audio_init_f_s1_agent_m0_waitrequest),                                  //                .waitrequest
		.m0_writedata            (audio_init_f_s1_agent_m0_writedata),                                    //                .writedata
		.m0_write                (audio_init_f_s1_agent_m0_write),                                        //                .write
		.rp_endofpacket          (audio_init_f_s1_agent_rp_endofpacket),                                  //              rp.endofpacket
		.rp_ready                (audio_init_f_s1_agent_rp_ready),                                        //                .ready
		.rp_valid                (audio_init_f_s1_agent_rp_valid),                                        //                .valid
		.rp_data                 (audio_init_f_s1_agent_rp_data),                                         //                .data
		.rp_startofpacket        (audio_init_f_s1_agent_rp_startofpacket),                                //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_014_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                                               //                .channel
		.rf_sink_ready           (audio_init_f_s1_agent_rsp_fifo_out_ready),                              //         rf_sink.ready
		.rf_sink_valid           (audio_init_f_s1_agent_rsp_fifo_out_valid),                              //                .valid
		.rf_sink_startofpacket   (audio_init_f_s1_agent_rsp_fifo_out_startofpacket),                      //                .startofpacket
		.rf_sink_endofpacket     (audio_init_f_s1_agent_rsp_fifo_out_endofpacket),                        //                .endofpacket
		.rf_sink_data            (audio_init_f_s1_agent_rsp_fifo_out_data),                               //                .data
		.rf_source_ready         (audio_init_f_s1_agent_rf_source_ready),                                 //       rf_source.ready
		.rf_source_valid         (audio_init_f_s1_agent_rf_source_valid),                                 //                .valid
		.rf_source_startofpacket (audio_init_f_s1_agent_rf_source_startofpacket),                         //                .startofpacket
		.rf_source_endofpacket   (audio_init_f_s1_agent_rf_source_endofpacket),                           //                .endofpacket
		.rf_source_data          (audio_init_f_s1_agent_rf_source_data),                                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (audio_init_f_s1_agent_rdata_fifo_src_ready),                            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_init_f_s1_agent_rdata_fifo_src_valid),                            //                .valid
		.rdata_fifo_src_data     (audio_init_f_s1_agent_rdata_fifo_src_data),                             //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_init_f_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (audio_init_f_s1_agent_rf_source_data),                                  //        in.data
		.in_valid          (audio_init_f_s1_agent_rf_source_valid),                                 //          .valid
		.in_ready          (audio_init_f_s1_agent_rf_source_ready),                                 //          .ready
		.in_startofpacket  (audio_init_f_s1_agent_rf_source_startofpacket),                         //          .startofpacket
		.in_endofpacket    (audio_init_f_s1_agent_rf_source_endofpacket),                           //          .endofpacket
		.out_data          (audio_init_f_s1_agent_rsp_fifo_out_data),                               //       out.data
		.out_valid         (audio_init_f_s1_agent_rsp_fifo_out_valid),                              //          .valid
		.out_ready         (audio_init_f_s1_agent_rsp_fifo_out_ready),                              //          .ready
		.out_startofpacket (audio_init_f_s1_agent_rsp_fifo_out_startofpacket),                      //          .startofpacket
		.out_endofpacket   (audio_init_f_s1_agent_rsp_fifo_out_endofpacket),                        //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) audio_back_vol_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (audio_back_vol_s1_agent_m0_address),                                    //              m0.address
		.m0_burstcount           (audio_back_vol_s1_agent_m0_burstcount),                                 //                .burstcount
		.m0_byteenable           (audio_back_vol_s1_agent_m0_byteenable),                                 //                .byteenable
		.m0_debugaccess          (audio_back_vol_s1_agent_m0_debugaccess),                                //                .debugaccess
		.m0_lock                 (audio_back_vol_s1_agent_m0_lock),                                       //                .lock
		.m0_readdata             (audio_back_vol_s1_agent_m0_readdata),                                   //                .readdata
		.m0_readdatavalid        (audio_back_vol_s1_agent_m0_readdatavalid),                              //                .readdatavalid
		.m0_read                 (audio_back_vol_s1_agent_m0_read),                                       //                .read
		.m0_waitrequest          (audio_back_vol_s1_agent_m0_waitrequest),                                //                .waitrequest
		.m0_writedata            (audio_back_vol_s1_agent_m0_writedata),                                  //                .writedata
		.m0_write                (audio_back_vol_s1_agent_m0_write),                                      //                .write
		.rp_endofpacket          (audio_back_vol_s1_agent_rp_endofpacket),                                //              rp.endofpacket
		.rp_ready                (audio_back_vol_s1_agent_rp_ready),                                      //                .ready
		.rp_valid                (audio_back_vol_s1_agent_rp_valid),                                      //                .valid
		.rp_data                 (audio_back_vol_s1_agent_rp_data),                                       //                .data
		.rp_startofpacket        (audio_back_vol_s1_agent_rp_startofpacket),                              //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_015_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                                               //                .channel
		.rf_sink_ready           (audio_back_vol_s1_agent_rsp_fifo_out_ready),                            //         rf_sink.ready
		.rf_sink_valid           (audio_back_vol_s1_agent_rsp_fifo_out_valid),                            //                .valid
		.rf_sink_startofpacket   (audio_back_vol_s1_agent_rsp_fifo_out_startofpacket),                    //                .startofpacket
		.rf_sink_endofpacket     (audio_back_vol_s1_agent_rsp_fifo_out_endofpacket),                      //                .endofpacket
		.rf_sink_data            (audio_back_vol_s1_agent_rsp_fifo_out_data),                             //                .data
		.rf_source_ready         (audio_back_vol_s1_agent_rf_source_ready),                               //       rf_source.ready
		.rf_source_valid         (audio_back_vol_s1_agent_rf_source_valid),                               //                .valid
		.rf_source_startofpacket (audio_back_vol_s1_agent_rf_source_startofpacket),                       //                .startofpacket
		.rf_source_endofpacket   (audio_back_vol_s1_agent_rf_source_endofpacket),                         //                .endofpacket
		.rf_source_data          (audio_back_vol_s1_agent_rf_source_data),                                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (audio_back_vol_s1_agent_rdata_fifo_src_ready),                          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_back_vol_s1_agent_rdata_fifo_src_valid),                          //                .valid
		.rdata_fifo_src_data     (audio_back_vol_s1_agent_rdata_fifo_src_data),                           //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_back_vol_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (audio_back_vol_s1_agent_rf_source_data),                                //        in.data
		.in_valid          (audio_back_vol_s1_agent_rf_source_valid),                               //          .valid
		.in_ready          (audio_back_vol_s1_agent_rf_source_ready),                               //          .ready
		.in_startofpacket  (audio_back_vol_s1_agent_rf_source_startofpacket),                       //          .startofpacket
		.in_endofpacket    (audio_back_vol_s1_agent_rf_source_endofpacket),                         //          .endofpacket
		.out_data          (audio_back_vol_s1_agent_rsp_fifo_out_data),                             //       out.data
		.out_valid         (audio_back_vol_s1_agent_rsp_fifo_out_valid),                            //          .valid
		.out_ready         (audio_back_vol_s1_agent_rsp_fifo_out_ready),                            //          .ready
		.out_startofpacket (audio_back_vol_s1_agent_rsp_fifo_out_startofpacket),                    //          .startofpacket
		.out_endofpacket   (audio_back_vol_s1_agent_rsp_fifo_out_endofpacket),                      //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) audio_bomb_vol_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (audio_bomb_vol_s1_agent_m0_address),                                    //              m0.address
		.m0_burstcount           (audio_bomb_vol_s1_agent_m0_burstcount),                                 //                .burstcount
		.m0_byteenable           (audio_bomb_vol_s1_agent_m0_byteenable),                                 //                .byteenable
		.m0_debugaccess          (audio_bomb_vol_s1_agent_m0_debugaccess),                                //                .debugaccess
		.m0_lock                 (audio_bomb_vol_s1_agent_m0_lock),                                       //                .lock
		.m0_readdata             (audio_bomb_vol_s1_agent_m0_readdata),                                   //                .readdata
		.m0_readdatavalid        (audio_bomb_vol_s1_agent_m0_readdatavalid),                              //                .readdatavalid
		.m0_read                 (audio_bomb_vol_s1_agent_m0_read),                                       //                .read
		.m0_waitrequest          (audio_bomb_vol_s1_agent_m0_waitrequest),                                //                .waitrequest
		.m0_writedata            (audio_bomb_vol_s1_agent_m0_writedata),                                  //                .writedata
		.m0_write                (audio_bomb_vol_s1_agent_m0_write),                                      //                .write
		.rp_endofpacket          (audio_bomb_vol_s1_agent_rp_endofpacket),                                //              rp.endofpacket
		.rp_ready                (audio_bomb_vol_s1_agent_rp_ready),                                      //                .ready
		.rp_valid                (audio_bomb_vol_s1_agent_rp_valid),                                      //                .valid
		.rp_data                 (audio_bomb_vol_s1_agent_rp_data),                                       //                .data
		.rp_startofpacket        (audio_bomb_vol_s1_agent_rp_startofpacket),                              //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_016_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                                               //                .channel
		.rf_sink_ready           (audio_bomb_vol_s1_agent_rsp_fifo_out_ready),                            //         rf_sink.ready
		.rf_sink_valid           (audio_bomb_vol_s1_agent_rsp_fifo_out_valid),                            //                .valid
		.rf_sink_startofpacket   (audio_bomb_vol_s1_agent_rsp_fifo_out_startofpacket),                    //                .startofpacket
		.rf_sink_endofpacket     (audio_bomb_vol_s1_agent_rsp_fifo_out_endofpacket),                      //                .endofpacket
		.rf_sink_data            (audio_bomb_vol_s1_agent_rsp_fifo_out_data),                             //                .data
		.rf_source_ready         (audio_bomb_vol_s1_agent_rf_source_ready),                               //       rf_source.ready
		.rf_source_valid         (audio_bomb_vol_s1_agent_rf_source_valid),                               //                .valid
		.rf_source_startofpacket (audio_bomb_vol_s1_agent_rf_source_startofpacket),                       //                .startofpacket
		.rf_source_endofpacket   (audio_bomb_vol_s1_agent_rf_source_endofpacket),                         //                .endofpacket
		.rf_source_data          (audio_bomb_vol_s1_agent_rf_source_data),                                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (audio_bomb_vol_s1_agent_rdata_fifo_src_ready),                          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_bomb_vol_s1_agent_rdata_fifo_src_valid),                          //                .valid
		.rdata_fifo_src_data     (audio_bomb_vol_s1_agent_rdata_fifo_src_data),                           //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_bomb_vol_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (audio_bomb_vol_s1_agent_rf_source_data),                                //        in.data
		.in_valid          (audio_bomb_vol_s1_agent_rf_source_valid),                               //          .valid
		.in_ready          (audio_bomb_vol_s1_agent_rf_source_ready),                               //          .ready
		.in_startofpacket  (audio_bomb_vol_s1_agent_rf_source_startofpacket),                       //          .startofpacket
		.in_endofpacket    (audio_bomb_vol_s1_agent_rf_source_endofpacket),                         //          .endofpacket
		.out_data          (audio_bomb_vol_s1_agent_rsp_fifo_out_data),                             //       out.data
		.out_valid         (audio_bomb_vol_s1_agent_rsp_fifo_out_valid),                            //          .valid
		.out_ready         (audio_bomb_vol_s1_agent_rsp_fifo_out_ready),                            //          .ready
		.out_startofpacket (audio_bomb_vol_s1_agent_rsp_fifo_out_startofpacket),                    //          .startofpacket
		.out_endofpacket   (audio_bomb_vol_s1_agent_rsp_fifo_out_endofpacket),                      //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) audio_bomb_active_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (audio_bomb_active_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (audio_bomb_active_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (audio_bomb_active_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (audio_bomb_active_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (audio_bomb_active_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (audio_bomb_active_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (audio_bomb_active_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (audio_bomb_active_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (audio_bomb_active_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (audio_bomb_active_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (audio_bomb_active_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (audio_bomb_active_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (audio_bomb_active_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (audio_bomb_active_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (audio_bomb_active_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (audio_bomb_active_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_017_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                                               //                .channel
		.rf_sink_ready           (audio_bomb_active_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (audio_bomb_active_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (audio_bomb_active_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (audio_bomb_active_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (audio_bomb_active_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (audio_bomb_active_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (audio_bomb_active_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (audio_bomb_active_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (audio_bomb_active_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (audio_bomb_active_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (audio_bomb_active_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_bomb_active_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (audio_bomb_active_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_bomb_active_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (audio_bomb_active_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (audio_bomb_active_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (audio_bomb_active_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (audio_bomb_active_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (audio_bomb_active_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (audio_bomb_active_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (audio_bomb_active_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (audio_bomb_active_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (audio_bomb_active_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (audio_bomb_active_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) leds_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (leds_s1_agent_m0_address),                                              //              m0.address
		.m0_burstcount           (leds_s1_agent_m0_burstcount),                                           //                .burstcount
		.m0_byteenable           (leds_s1_agent_m0_byteenable),                                           //                .byteenable
		.m0_debugaccess          (leds_s1_agent_m0_debugaccess),                                          //                .debugaccess
		.m0_lock                 (leds_s1_agent_m0_lock),                                                 //                .lock
		.m0_readdata             (leds_s1_agent_m0_readdata),                                             //                .readdata
		.m0_readdatavalid        (leds_s1_agent_m0_readdatavalid),                                        //                .readdatavalid
		.m0_read                 (leds_s1_agent_m0_read),                                                 //                .read
		.m0_waitrequest          (leds_s1_agent_m0_waitrequest),                                          //                .waitrequest
		.m0_writedata            (leds_s1_agent_m0_writedata),                                            //                .writedata
		.m0_write                (leds_s1_agent_m0_write),                                                //                .write
		.rp_endofpacket          (leds_s1_agent_rp_endofpacket),                                          //              rp.endofpacket
		.rp_ready                (leds_s1_agent_rp_ready),                                                //                .ready
		.rp_valid                (leds_s1_agent_rp_valid),                                                //                .valid
		.rp_data                 (leds_s1_agent_rp_data),                                                 //                .data
		.rp_startofpacket        (leds_s1_agent_rp_startofpacket),                                        //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_018_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                                               //                .channel
		.rf_sink_ready           (leds_s1_agent_rsp_fifo_out_ready),                                      //         rf_sink.ready
		.rf_sink_valid           (leds_s1_agent_rsp_fifo_out_valid),                                      //                .valid
		.rf_sink_startofpacket   (leds_s1_agent_rsp_fifo_out_startofpacket),                              //                .startofpacket
		.rf_sink_endofpacket     (leds_s1_agent_rsp_fifo_out_endofpacket),                                //                .endofpacket
		.rf_sink_data            (leds_s1_agent_rsp_fifo_out_data),                                       //                .data
		.rf_source_ready         (leds_s1_agent_rf_source_ready),                                         //       rf_source.ready
		.rf_source_valid         (leds_s1_agent_rf_source_valid),                                         //                .valid
		.rf_source_startofpacket (leds_s1_agent_rf_source_startofpacket),                                 //                .startofpacket
		.rf_source_endofpacket   (leds_s1_agent_rf_source_endofpacket),                                   //                .endofpacket
		.rf_source_data          (leds_s1_agent_rf_source_data),                                          //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (leds_s1_agent_rdata_fifo_src_ready),                                    //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_s1_agent_rdata_fifo_src_valid),                                    //                .valid
		.rdata_fifo_src_data     (leds_s1_agent_rdata_fifo_src_data),                                     //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rf_source_data),                                          //        in.data
		.in_valid          (leds_s1_agent_rf_source_valid),                                         //          .valid
		.in_ready          (leds_s1_agent_rf_source_ready),                                         //          .ready
		.in_startofpacket  (leds_s1_agent_rf_source_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (leds_s1_agent_rf_source_endofpacket),                                   //          .endofpacket
		.out_data          (leds_s1_agent_rsp_fifo_out_data),                                       //       out.data
		.out_valid         (leds_s1_agent_rsp_fifo_out_valid),                                      //          .valid
		.out_ready         (leds_s1_agent_rsp_fifo_out_ready),                                      //          .ready
		.out_startofpacket (leds_s1_agent_rsp_fifo_out_startofpacket),                              //          .startofpacket
		.out_endofpacket   (leds_s1_agent_rsp_fifo_out_endofpacket),                                //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) player2score0_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (player2score0_s1_agent_m0_address),                                     //              m0.address
		.m0_burstcount           (player2score0_s1_agent_m0_burstcount),                                  //                .burstcount
		.m0_byteenable           (player2score0_s1_agent_m0_byteenable),                                  //                .byteenable
		.m0_debugaccess          (player2score0_s1_agent_m0_debugaccess),                                 //                .debugaccess
		.m0_lock                 (player2score0_s1_agent_m0_lock),                                        //                .lock
		.m0_readdata             (player2score0_s1_agent_m0_readdata),                                    //                .readdata
		.m0_readdatavalid        (player2score0_s1_agent_m0_readdatavalid),                               //                .readdatavalid
		.m0_read                 (player2score0_s1_agent_m0_read),                                        //                .read
		.m0_waitrequest          (player2score0_s1_agent_m0_waitrequest),                                 //                .waitrequest
		.m0_writedata            (player2score0_s1_agent_m0_writedata),                                   //                .writedata
		.m0_write                (player2score0_s1_agent_m0_write),                                       //                .write
		.rp_endofpacket          (player2score0_s1_agent_rp_endofpacket),                                 //              rp.endofpacket
		.rp_ready                (player2score0_s1_agent_rp_ready),                                       //                .ready
		.rp_valid                (player2score0_s1_agent_rp_valid),                                       //                .valid
		.rp_data                 (player2score0_s1_agent_rp_data),                                        //                .data
		.rp_startofpacket        (player2score0_s1_agent_rp_startofpacket),                               //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_019_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                                               //                .channel
		.rf_sink_ready           (player2score0_s1_agent_rsp_fifo_out_ready),                             //         rf_sink.ready
		.rf_sink_valid           (player2score0_s1_agent_rsp_fifo_out_valid),                             //                .valid
		.rf_sink_startofpacket   (player2score0_s1_agent_rsp_fifo_out_startofpacket),                     //                .startofpacket
		.rf_sink_endofpacket     (player2score0_s1_agent_rsp_fifo_out_endofpacket),                       //                .endofpacket
		.rf_sink_data            (player2score0_s1_agent_rsp_fifo_out_data),                              //                .data
		.rf_source_ready         (player2score0_s1_agent_rf_source_ready),                                //       rf_source.ready
		.rf_source_valid         (player2score0_s1_agent_rf_source_valid),                                //                .valid
		.rf_source_startofpacket (player2score0_s1_agent_rf_source_startofpacket),                        //                .startofpacket
		.rf_source_endofpacket   (player2score0_s1_agent_rf_source_endofpacket),                          //                .endofpacket
		.rf_source_data          (player2score0_s1_agent_rf_source_data),                                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (player2score0_s1_agent_rdata_fifo_src_ready),                           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (player2score0_s1_agent_rdata_fifo_src_valid),                           //                .valid
		.rdata_fifo_src_data     (player2score0_s1_agent_rdata_fifo_src_data),                            //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) player2score0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (player2score0_s1_agent_rf_source_data),                                 //        in.data
		.in_valid          (player2score0_s1_agent_rf_source_valid),                                //          .valid
		.in_ready          (player2score0_s1_agent_rf_source_ready),                                //          .ready
		.in_startofpacket  (player2score0_s1_agent_rf_source_startofpacket),                        //          .startofpacket
		.in_endofpacket    (player2score0_s1_agent_rf_source_endofpacket),                          //          .endofpacket
		.out_data          (player2score0_s1_agent_rsp_fifo_out_data),                              //       out.data
		.out_valid         (player2score0_s1_agent_rsp_fifo_out_valid),                             //          .valid
		.out_ready         (player2score0_s1_agent_rsp_fifo_out_ready),                             //          .ready
		.out_startofpacket (player2score0_s1_agent_rsp_fifo_out_startofpacket),                     //          .startofpacket
		.out_endofpacket   (player2score0_s1_agent_rsp_fifo_out_endofpacket),                       //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) player2score1_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (player2score1_s1_agent_m0_address),                                     //              m0.address
		.m0_burstcount           (player2score1_s1_agent_m0_burstcount),                                  //                .burstcount
		.m0_byteenable           (player2score1_s1_agent_m0_byteenable),                                  //                .byteenable
		.m0_debugaccess          (player2score1_s1_agent_m0_debugaccess),                                 //                .debugaccess
		.m0_lock                 (player2score1_s1_agent_m0_lock),                                        //                .lock
		.m0_readdata             (player2score1_s1_agent_m0_readdata),                                    //                .readdata
		.m0_readdatavalid        (player2score1_s1_agent_m0_readdatavalid),                               //                .readdatavalid
		.m0_read                 (player2score1_s1_agent_m0_read),                                        //                .read
		.m0_waitrequest          (player2score1_s1_agent_m0_waitrequest),                                 //                .waitrequest
		.m0_writedata            (player2score1_s1_agent_m0_writedata),                                   //                .writedata
		.m0_write                (player2score1_s1_agent_m0_write),                                       //                .write
		.rp_endofpacket          (player2score1_s1_agent_rp_endofpacket),                                 //              rp.endofpacket
		.rp_ready                (player2score1_s1_agent_rp_ready),                                       //                .ready
		.rp_valid                (player2score1_s1_agent_rp_valid),                                       //                .valid
		.rp_data                 (player2score1_s1_agent_rp_data),                                        //                .data
		.rp_startofpacket        (player2score1_s1_agent_rp_startofpacket),                               //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_020_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                                               //                .channel
		.rf_sink_ready           (player2score1_s1_agent_rsp_fifo_out_ready),                             //         rf_sink.ready
		.rf_sink_valid           (player2score1_s1_agent_rsp_fifo_out_valid),                             //                .valid
		.rf_sink_startofpacket   (player2score1_s1_agent_rsp_fifo_out_startofpacket),                     //                .startofpacket
		.rf_sink_endofpacket     (player2score1_s1_agent_rsp_fifo_out_endofpacket),                       //                .endofpacket
		.rf_sink_data            (player2score1_s1_agent_rsp_fifo_out_data),                              //                .data
		.rf_source_ready         (player2score1_s1_agent_rf_source_ready),                                //       rf_source.ready
		.rf_source_valid         (player2score1_s1_agent_rf_source_valid),                                //                .valid
		.rf_source_startofpacket (player2score1_s1_agent_rf_source_startofpacket),                        //                .startofpacket
		.rf_source_endofpacket   (player2score1_s1_agent_rf_source_endofpacket),                          //                .endofpacket
		.rf_source_data          (player2score1_s1_agent_rf_source_data),                                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (player2score1_s1_agent_rdata_fifo_src_ready),                           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (player2score1_s1_agent_rdata_fifo_src_valid),                           //                .valid
		.rdata_fifo_src_data     (player2score1_s1_agent_rdata_fifo_src_data),                            //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) player2score1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (player2score1_s1_agent_rf_source_data),                                 //        in.data
		.in_valid          (player2score1_s1_agent_rf_source_valid),                                //          .valid
		.in_ready          (player2score1_s1_agent_rf_source_ready),                                //          .ready
		.in_startofpacket  (player2score1_s1_agent_rf_source_startofpacket),                        //          .startofpacket
		.in_endofpacket    (player2score1_s1_agent_rf_source_endofpacket),                          //          .endofpacket
		.out_data          (player2score1_s1_agent_rsp_fifo_out_data),                              //       out.data
		.out_valid         (player2score1_s1_agent_rsp_fifo_out_valid),                             //          .valid
		.out_ready         (player2score1_s1_agent_rsp_fifo_out_ready),                             //          .ready
		.out_startofpacket (player2score1_s1_agent_rsp_fifo_out_startofpacket),                     //          .startofpacket
		.out_endofpacket   (player2score1_s1_agent_rsp_fifo_out_endofpacket),                       //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) player1score0_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (player1score0_s1_agent_m0_address),                                     //              m0.address
		.m0_burstcount           (player1score0_s1_agent_m0_burstcount),                                  //                .burstcount
		.m0_byteenable           (player1score0_s1_agent_m0_byteenable),                                  //                .byteenable
		.m0_debugaccess          (player1score0_s1_agent_m0_debugaccess),                                 //                .debugaccess
		.m0_lock                 (player1score0_s1_agent_m0_lock),                                        //                .lock
		.m0_readdata             (player1score0_s1_agent_m0_readdata),                                    //                .readdata
		.m0_readdatavalid        (player1score0_s1_agent_m0_readdatavalid),                               //                .readdatavalid
		.m0_read                 (player1score0_s1_agent_m0_read),                                        //                .read
		.m0_waitrequest          (player1score0_s1_agent_m0_waitrequest),                                 //                .waitrequest
		.m0_writedata            (player1score0_s1_agent_m0_writedata),                                   //                .writedata
		.m0_write                (player1score0_s1_agent_m0_write),                                       //                .write
		.rp_endofpacket          (player1score0_s1_agent_rp_endofpacket),                                 //              rp.endofpacket
		.rp_ready                (player1score0_s1_agent_rp_ready),                                       //                .ready
		.rp_valid                (player1score0_s1_agent_rp_valid),                                       //                .valid
		.rp_data                 (player1score0_s1_agent_rp_data),                                        //                .data
		.rp_startofpacket        (player1score0_s1_agent_rp_startofpacket),                               //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_021_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                                               //                .channel
		.rf_sink_ready           (player1score0_s1_agent_rsp_fifo_out_ready),                             //         rf_sink.ready
		.rf_sink_valid           (player1score0_s1_agent_rsp_fifo_out_valid),                             //                .valid
		.rf_sink_startofpacket   (player1score0_s1_agent_rsp_fifo_out_startofpacket),                     //                .startofpacket
		.rf_sink_endofpacket     (player1score0_s1_agent_rsp_fifo_out_endofpacket),                       //                .endofpacket
		.rf_sink_data            (player1score0_s1_agent_rsp_fifo_out_data),                              //                .data
		.rf_source_ready         (player1score0_s1_agent_rf_source_ready),                                //       rf_source.ready
		.rf_source_valid         (player1score0_s1_agent_rf_source_valid),                                //                .valid
		.rf_source_startofpacket (player1score0_s1_agent_rf_source_startofpacket),                        //                .startofpacket
		.rf_source_endofpacket   (player1score0_s1_agent_rf_source_endofpacket),                          //                .endofpacket
		.rf_source_data          (player1score0_s1_agent_rf_source_data),                                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (player1score0_s1_agent_rdata_fifo_src_ready),                           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (player1score0_s1_agent_rdata_fifo_src_valid),                           //                .valid
		.rdata_fifo_src_data     (player1score0_s1_agent_rdata_fifo_src_data),                            //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) player1score0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (player1score0_s1_agent_rf_source_data),                                 //        in.data
		.in_valid          (player1score0_s1_agent_rf_source_valid),                                //          .valid
		.in_ready          (player1score0_s1_agent_rf_source_ready),                                //          .ready
		.in_startofpacket  (player1score0_s1_agent_rf_source_startofpacket),                        //          .startofpacket
		.in_endofpacket    (player1score0_s1_agent_rf_source_endofpacket),                          //          .endofpacket
		.out_data          (player1score0_s1_agent_rsp_fifo_out_data),                              //       out.data
		.out_valid         (player1score0_s1_agent_rsp_fifo_out_valid),                             //          .valid
		.out_ready         (player1score0_s1_agent_rsp_fifo_out_ready),                             //          .ready
		.out_startofpacket (player1score0_s1_agent_rsp_fifo_out_startofpacket),                     //          .startofpacket
		.out_endofpacket   (player1score0_s1_agent_rsp_fifo_out_endofpacket),                       //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) player1score1_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (player1score1_s1_agent_m0_address),                                     //              m0.address
		.m0_burstcount           (player1score1_s1_agent_m0_burstcount),                                  //                .burstcount
		.m0_byteenable           (player1score1_s1_agent_m0_byteenable),                                  //                .byteenable
		.m0_debugaccess          (player1score1_s1_agent_m0_debugaccess),                                 //                .debugaccess
		.m0_lock                 (player1score1_s1_agent_m0_lock),                                        //                .lock
		.m0_readdata             (player1score1_s1_agent_m0_readdata),                                    //                .readdata
		.m0_readdatavalid        (player1score1_s1_agent_m0_readdatavalid),                               //                .readdatavalid
		.m0_read                 (player1score1_s1_agent_m0_read),                                        //                .read
		.m0_waitrequest          (player1score1_s1_agent_m0_waitrequest),                                 //                .waitrequest
		.m0_writedata            (player1score1_s1_agent_m0_writedata),                                   //                .writedata
		.m0_write                (player1score1_s1_agent_m0_write),                                       //                .write
		.rp_endofpacket          (player1score1_s1_agent_rp_endofpacket),                                 //              rp.endofpacket
		.rp_ready                (player1score1_s1_agent_rp_ready),                                       //                .ready
		.rp_valid                (player1score1_s1_agent_rp_valid),                                       //                .valid
		.rp_data                 (player1score1_s1_agent_rp_data),                                        //                .data
		.rp_startofpacket        (player1score1_s1_agent_rp_startofpacket),                               //                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_022_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                                               //                .channel
		.rf_sink_ready           (player1score1_s1_agent_rsp_fifo_out_ready),                             //         rf_sink.ready
		.rf_sink_valid           (player1score1_s1_agent_rsp_fifo_out_valid),                             //                .valid
		.rf_sink_startofpacket   (player1score1_s1_agent_rsp_fifo_out_startofpacket),                     //                .startofpacket
		.rf_sink_endofpacket     (player1score1_s1_agent_rsp_fifo_out_endofpacket),                       //                .endofpacket
		.rf_sink_data            (player1score1_s1_agent_rsp_fifo_out_data),                              //                .data
		.rf_source_ready         (player1score1_s1_agent_rf_source_ready),                                //       rf_source.ready
		.rf_source_valid         (player1score1_s1_agent_rf_source_valid),                                //                .valid
		.rf_source_startofpacket (player1score1_s1_agent_rf_source_startofpacket),                        //                .startofpacket
		.rf_source_endofpacket   (player1score1_s1_agent_rf_source_endofpacket),                          //                .endofpacket
		.rf_source_data          (player1score1_s1_agent_rf_source_data),                                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (player1score1_s1_agent_rdata_fifo_src_ready),                           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (player1score1_s1_agent_rdata_fifo_src_valid),                           //                .valid
		.rdata_fifo_src_data     (player1score1_s1_agent_rdata_fifo_src_data),                            //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) player1score1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (player1score1_s1_agent_rf_source_data),                                 //        in.data
		.in_valid          (player1score1_s1_agent_rf_source_valid),                                //          .valid
		.in_ready          (player1score1_s1_agent_rf_source_ready),                                //          .ready
		.in_startofpacket  (player1score1_s1_agent_rf_source_startofpacket),                        //          .startofpacket
		.in_endofpacket    (player1score1_s1_agent_rf_source_endofpacket),                          //          .endofpacket
		.out_data          (player1score1_s1_agent_rsp_fifo_out_data),                              //       out.data
		.out_valid         (player1score1_s1_agent_rsp_fifo_out_valid),                             //          .valid
		.out_ready         (player1score1_s1_agent_rsp_fifo_out_ready),                             //          .ready
		.out_startofpacket (player1score1_s1_agent_rsp_fifo_out_startofpacket),                     //          .startofpacket
		.out_endofpacket   (player1score1_s1_agent_rsp_fifo_out_endofpacket),                       //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timescreen1_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timescreen1_s1_agent_m0_address),                                       //              m0.address
		.m0_burstcount           (timescreen1_s1_agent_m0_burstcount),                                    //                .burstcount
		.m0_byteenable           (timescreen1_s1_agent_m0_byteenable),                                    //                .byteenable
		.m0_debugaccess          (timescreen1_s1_agent_m0_debugaccess),                                   //                .debugaccess
		.m0_lock                 (timescreen1_s1_agent_m0_lock),                                          //                .lock
		.m0_readdata             (timescreen1_s1_agent_m0_readdata),                                      //                .readdata
		.m0_readdatavalid        (timescreen1_s1_agent_m0_readdatavalid),                                 //                .readdatavalid
		.m0_read                 (timescreen1_s1_agent_m0_read),                                          //                .read
		.m0_waitrequest          (timescreen1_s1_agent_m0_waitrequest),                                   //                .waitrequest
		.m0_writedata            (timescreen1_s1_agent_m0_writedata),                                     //                .writedata
		.m0_write                (timescreen1_s1_agent_m0_write),                                         //                .write
		.rp_endofpacket          (timescreen1_s1_agent_rp_endofpacket),                                   //              rp.endofpacket
		.rp_ready                (timescreen1_s1_agent_rp_ready),                                         //                .ready
		.rp_valid                (timescreen1_s1_agent_rp_valid),                                         //                .valid
		.rp_data                 (timescreen1_s1_agent_rp_data),                                          //                .data
		.rp_startofpacket        (timescreen1_s1_agent_rp_startofpacket),                                 //                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_023_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                                               //                .channel
		.rf_sink_ready           (timescreen1_s1_agent_rsp_fifo_out_ready),                               //         rf_sink.ready
		.rf_sink_valid           (timescreen1_s1_agent_rsp_fifo_out_valid),                               //                .valid
		.rf_sink_startofpacket   (timescreen1_s1_agent_rsp_fifo_out_startofpacket),                       //                .startofpacket
		.rf_sink_endofpacket     (timescreen1_s1_agent_rsp_fifo_out_endofpacket),                         //                .endofpacket
		.rf_sink_data            (timescreen1_s1_agent_rsp_fifo_out_data),                                //                .data
		.rf_source_ready         (timescreen1_s1_agent_rf_source_ready),                                  //       rf_source.ready
		.rf_source_valid         (timescreen1_s1_agent_rf_source_valid),                                  //                .valid
		.rf_source_startofpacket (timescreen1_s1_agent_rf_source_startofpacket),                          //                .startofpacket
		.rf_source_endofpacket   (timescreen1_s1_agent_rf_source_endofpacket),                            //                .endofpacket
		.rf_source_data          (timescreen1_s1_agent_rf_source_data),                                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (timescreen1_s1_agent_rdata_fifo_src_ready),                             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timescreen1_s1_agent_rdata_fifo_src_valid),                             //                .valid
		.rdata_fifo_src_data     (timescreen1_s1_agent_rdata_fifo_src_data),                              //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timescreen1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timescreen1_s1_agent_rf_source_data),                                   //        in.data
		.in_valid          (timescreen1_s1_agent_rf_source_valid),                                  //          .valid
		.in_ready          (timescreen1_s1_agent_rf_source_ready),                                  //          .ready
		.in_startofpacket  (timescreen1_s1_agent_rf_source_startofpacket),                          //          .startofpacket
		.in_endofpacket    (timescreen1_s1_agent_rf_source_endofpacket),                            //          .endofpacket
		.out_data          (timescreen1_s1_agent_rsp_fifo_out_data),                                //       out.data
		.out_valid         (timescreen1_s1_agent_rsp_fifo_out_valid),                               //          .valid
		.out_ready         (timescreen1_s1_agent_rsp_fifo_out_ready),                               //          .ready
		.out_startofpacket (timescreen1_s1_agent_rsp_fifo_out_startofpacket),                       //          .startofpacket
		.out_endofpacket   (timescreen1_s1_agent_rsp_fifo_out_endofpacket),                         //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timescreen2_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timescreen2_s1_agent_m0_address),                                       //              m0.address
		.m0_burstcount           (timescreen2_s1_agent_m0_burstcount),                                    //                .burstcount
		.m0_byteenable           (timescreen2_s1_agent_m0_byteenable),                                    //                .byteenable
		.m0_debugaccess          (timescreen2_s1_agent_m0_debugaccess),                                   //                .debugaccess
		.m0_lock                 (timescreen2_s1_agent_m0_lock),                                          //                .lock
		.m0_readdata             (timescreen2_s1_agent_m0_readdata),                                      //                .readdata
		.m0_readdatavalid        (timescreen2_s1_agent_m0_readdatavalid),                                 //                .readdatavalid
		.m0_read                 (timescreen2_s1_agent_m0_read),                                          //                .read
		.m0_waitrequest          (timescreen2_s1_agent_m0_waitrequest),                                   //                .waitrequest
		.m0_writedata            (timescreen2_s1_agent_m0_writedata),                                     //                .writedata
		.m0_write                (timescreen2_s1_agent_m0_write),                                         //                .write
		.rp_endofpacket          (timescreen2_s1_agent_rp_endofpacket),                                   //              rp.endofpacket
		.rp_ready                (timescreen2_s1_agent_rp_ready),                                         //                .ready
		.rp_valid                (timescreen2_s1_agent_rp_valid),                                         //                .valid
		.rp_data                 (timescreen2_s1_agent_rp_data),                                          //                .data
		.rp_startofpacket        (timescreen2_s1_agent_rp_startofpacket),                                 //                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_024_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                                               //                .channel
		.rf_sink_ready           (timescreen2_s1_agent_rsp_fifo_out_ready),                               //         rf_sink.ready
		.rf_sink_valid           (timescreen2_s1_agent_rsp_fifo_out_valid),                               //                .valid
		.rf_sink_startofpacket   (timescreen2_s1_agent_rsp_fifo_out_startofpacket),                       //                .startofpacket
		.rf_sink_endofpacket     (timescreen2_s1_agent_rsp_fifo_out_endofpacket),                         //                .endofpacket
		.rf_sink_data            (timescreen2_s1_agent_rsp_fifo_out_data),                                //                .data
		.rf_source_ready         (timescreen2_s1_agent_rf_source_ready),                                  //       rf_source.ready
		.rf_source_valid         (timescreen2_s1_agent_rf_source_valid),                                  //                .valid
		.rf_source_startofpacket (timescreen2_s1_agent_rf_source_startofpacket),                          //                .startofpacket
		.rf_source_endofpacket   (timescreen2_s1_agent_rf_source_endofpacket),                            //                .endofpacket
		.rf_source_data          (timescreen2_s1_agent_rf_source_data),                                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (timescreen2_s1_agent_rdata_fifo_src_ready),                             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timescreen2_s1_agent_rdata_fifo_src_valid),                             //                .valid
		.rdata_fifo_src_data     (timescreen2_s1_agent_rdata_fifo_src_data),                              //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timescreen2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timescreen2_s1_agent_rf_source_data),                                   //        in.data
		.in_valid          (timescreen2_s1_agent_rf_source_valid),                                  //          .valid
		.in_ready          (timescreen2_s1_agent_rf_source_ready),                                  //          .ready
		.in_startofpacket  (timescreen2_s1_agent_rf_source_startofpacket),                          //          .startofpacket
		.in_endofpacket    (timescreen2_s1_agent_rf_source_endofpacket),                            //          .endofpacket
		.out_data          (timescreen2_s1_agent_rsp_fifo_out_data),                                //       out.data
		.out_valid         (timescreen2_s1_agent_rsp_fifo_out_valid),                               //          .valid
		.out_ready         (timescreen2_s1_agent_rsp_fifo_out_ready),                               //          .ready
		.out_startofpacket (timescreen2_s1_agent_rsp_fifo_out_startofpacket),                       //          .startofpacket
		.out_endofpacket   (timescreen2_s1_agent_rsp_fifo_out_endofpacket),                         //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timescreen0_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timescreen0_s1_agent_m0_address),                                       //              m0.address
		.m0_burstcount           (timescreen0_s1_agent_m0_burstcount),                                    //                .burstcount
		.m0_byteenable           (timescreen0_s1_agent_m0_byteenable),                                    //                .byteenable
		.m0_debugaccess          (timescreen0_s1_agent_m0_debugaccess),                                   //                .debugaccess
		.m0_lock                 (timescreen0_s1_agent_m0_lock),                                          //                .lock
		.m0_readdata             (timescreen0_s1_agent_m0_readdata),                                      //                .readdata
		.m0_readdatavalid        (timescreen0_s1_agent_m0_readdatavalid),                                 //                .readdatavalid
		.m0_read                 (timescreen0_s1_agent_m0_read),                                          //                .read
		.m0_waitrequest          (timescreen0_s1_agent_m0_waitrequest),                                   //                .waitrequest
		.m0_writedata            (timescreen0_s1_agent_m0_writedata),                                     //                .writedata
		.m0_write                (timescreen0_s1_agent_m0_write),                                         //                .write
		.rp_endofpacket          (timescreen0_s1_agent_rp_endofpacket),                                   //              rp.endofpacket
		.rp_ready                (timescreen0_s1_agent_rp_ready),                                         //                .ready
		.rp_valid                (timescreen0_s1_agent_rp_valid),                                         //                .valid
		.rp_data                 (timescreen0_s1_agent_rp_data),                                          //                .data
		.rp_startofpacket        (timescreen0_s1_agent_rp_startofpacket),                                 //                .startofpacket
		.cp_ready                (cmd_mux_025_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_025_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_025_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_025_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_025_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_025_src_channel),                                               //                .channel
		.rf_sink_ready           (timescreen0_s1_agent_rsp_fifo_out_ready),                               //         rf_sink.ready
		.rf_sink_valid           (timescreen0_s1_agent_rsp_fifo_out_valid),                               //                .valid
		.rf_sink_startofpacket   (timescreen0_s1_agent_rsp_fifo_out_startofpacket),                       //                .startofpacket
		.rf_sink_endofpacket     (timescreen0_s1_agent_rsp_fifo_out_endofpacket),                         //                .endofpacket
		.rf_sink_data            (timescreen0_s1_agent_rsp_fifo_out_data),                                //                .data
		.rf_source_ready         (timescreen0_s1_agent_rf_source_ready),                                  //       rf_source.ready
		.rf_source_valid         (timescreen0_s1_agent_rf_source_valid),                                  //                .valid
		.rf_source_startofpacket (timescreen0_s1_agent_rf_source_startofpacket),                          //                .startofpacket
		.rf_source_endofpacket   (timescreen0_s1_agent_rf_source_endofpacket),                            //                .endofpacket
		.rf_source_data          (timescreen0_s1_agent_rf_source_data),                                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_025_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_025_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_025_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_025_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (timescreen0_s1_agent_rdata_fifo_src_ready),                             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timescreen0_s1_agent_rdata_fifo_src_valid),                             //                .valid
		.rdata_fifo_src_data     (timescreen0_s1_agent_rdata_fifo_src_data),                              //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timescreen0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timescreen0_s1_agent_rf_source_data),                                   //        in.data
		.in_valid          (timescreen0_s1_agent_rf_source_valid),                                  //          .valid
		.in_ready          (timescreen0_s1_agent_rf_source_ready),                                  //          .ready
		.in_startofpacket  (timescreen0_s1_agent_rf_source_startofpacket),                          //          .startofpacket
		.in_endofpacket    (timescreen0_s1_agent_rf_source_endofpacket),                            //          .endofpacket
		.out_data          (timescreen0_s1_agent_rsp_fifo_out_data),                                //       out.data
		.out_valid         (timescreen0_s1_agent_rsp_fifo_out_valid),                               //          .valid
		.out_ready         (timescreen0_s1_agent_rsp_fifo_out_ready),                               //          .ready
		.out_startofpacket (timescreen0_s1_agent_rsp_fifo_out_startofpacket),                       //          .startofpacket
		.out_endofpacket   (timescreen0_s1_agent_rsp_fifo_out_endofpacket),                         //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) audio_select_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (audio_select_s1_agent_m0_address),                                      //              m0.address
		.m0_burstcount           (audio_select_s1_agent_m0_burstcount),                                   //                .burstcount
		.m0_byteenable           (audio_select_s1_agent_m0_byteenable),                                   //                .byteenable
		.m0_debugaccess          (audio_select_s1_agent_m0_debugaccess),                                  //                .debugaccess
		.m0_lock                 (audio_select_s1_agent_m0_lock),                                         //                .lock
		.m0_readdata             (audio_select_s1_agent_m0_readdata),                                     //                .readdata
		.m0_readdatavalid        (audio_select_s1_agent_m0_readdatavalid),                                //                .readdatavalid
		.m0_read                 (audio_select_s1_agent_m0_read),                                         //                .read
		.m0_waitrequest          (audio_select_s1_agent_m0_waitrequest),                                  //                .waitrequest
		.m0_writedata            (audio_select_s1_agent_m0_writedata),                                    //                .writedata
		.m0_write                (audio_select_s1_agent_m0_write),                                        //                .write
		.rp_endofpacket          (audio_select_s1_agent_rp_endofpacket),                                  //              rp.endofpacket
		.rp_ready                (audio_select_s1_agent_rp_ready),                                        //                .ready
		.rp_valid                (audio_select_s1_agent_rp_valid),                                        //                .valid
		.rp_data                 (audio_select_s1_agent_rp_data),                                         //                .data
		.rp_startofpacket        (audio_select_s1_agent_rp_startofpacket),                                //                .startofpacket
		.cp_ready                (cmd_mux_026_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_026_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_026_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_026_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_026_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_026_src_channel),                                               //                .channel
		.rf_sink_ready           (audio_select_s1_agent_rsp_fifo_out_ready),                              //         rf_sink.ready
		.rf_sink_valid           (audio_select_s1_agent_rsp_fifo_out_valid),                              //                .valid
		.rf_sink_startofpacket   (audio_select_s1_agent_rsp_fifo_out_startofpacket),                      //                .startofpacket
		.rf_sink_endofpacket     (audio_select_s1_agent_rsp_fifo_out_endofpacket),                        //                .endofpacket
		.rf_sink_data            (audio_select_s1_agent_rsp_fifo_out_data),                               //                .data
		.rf_source_ready         (audio_select_s1_agent_rf_source_ready),                                 //       rf_source.ready
		.rf_source_valid         (audio_select_s1_agent_rf_source_valid),                                 //                .valid
		.rf_source_startofpacket (audio_select_s1_agent_rf_source_startofpacket),                         //                .startofpacket
		.rf_source_endofpacket   (audio_select_s1_agent_rf_source_endofpacket),                           //                .endofpacket
		.rf_source_data          (audio_select_s1_agent_rf_source_data),                                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_026_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_026_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_026_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_026_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (audio_select_s1_agent_rdata_fifo_src_ready),                            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_select_s1_agent_rdata_fifo_src_valid),                            //                .valid
		.rdata_fifo_src_data     (audio_select_s1_agent_rdata_fifo_src_data),                             //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_select_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (audio_select_s1_agent_rf_source_data),                                  //        in.data
		.in_valid          (audio_select_s1_agent_rf_source_valid),                                 //          .valid
		.in_ready          (audio_select_s1_agent_rf_source_ready),                                 //          .ready
		.in_startofpacket  (audio_select_s1_agent_rf_source_startofpacket),                         //          .startofpacket
		.in_endofpacket    (audio_select_s1_agent_rf_source_endofpacket),                           //          .endofpacket
		.out_data          (audio_select_s1_agent_rsp_fifo_out_data),                               //       out.data
		.out_valid         (audio_select_s1_agent_rsp_fifo_out_valid),                              //          .valid
		.out_ready         (audio_select_s1_agent_rsp_fifo_out_ready),                              //          .ready
		.out_startofpacket (audio_select_s1_agent_rsp_fifo_out_startofpacket),                      //          .startofpacket
		.out_endofpacket   (audio_select_s1_agent_rsp_fifo_out_endofpacket),                        //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (28),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) boot_up_s1_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (boot_up_s1_agent_m0_address),                                           //              m0.address
		.m0_burstcount           (boot_up_s1_agent_m0_burstcount),                                        //                .burstcount
		.m0_byteenable           (boot_up_s1_agent_m0_byteenable),                                        //                .byteenable
		.m0_debugaccess          (boot_up_s1_agent_m0_debugaccess),                                       //                .debugaccess
		.m0_lock                 (boot_up_s1_agent_m0_lock),                                              //                .lock
		.m0_readdata             (boot_up_s1_agent_m0_readdata),                                          //                .readdata
		.m0_readdatavalid        (boot_up_s1_agent_m0_readdatavalid),                                     //                .readdatavalid
		.m0_read                 (boot_up_s1_agent_m0_read),                                              //                .read
		.m0_waitrequest          (boot_up_s1_agent_m0_waitrequest),                                       //                .waitrequest
		.m0_writedata            (boot_up_s1_agent_m0_writedata),                                         //                .writedata
		.m0_write                (boot_up_s1_agent_m0_write),                                             //                .write
		.rp_endofpacket          (boot_up_s1_agent_rp_endofpacket),                                       //              rp.endofpacket
		.rp_ready                (boot_up_s1_agent_rp_ready),                                             //                .ready
		.rp_valid                (boot_up_s1_agent_rp_valid),                                             //                .valid
		.rp_data                 (boot_up_s1_agent_rp_data),                                              //                .data
		.rp_startofpacket        (boot_up_s1_agent_rp_startofpacket),                                     //                .startofpacket
		.cp_ready                (cmd_mux_027_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_027_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_027_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_027_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_027_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_027_src_channel),                                               //                .channel
		.rf_sink_ready           (boot_up_s1_agent_rsp_fifo_out_ready),                                   //         rf_sink.ready
		.rf_sink_valid           (boot_up_s1_agent_rsp_fifo_out_valid),                                   //                .valid
		.rf_sink_startofpacket   (boot_up_s1_agent_rsp_fifo_out_startofpacket),                           //                .startofpacket
		.rf_sink_endofpacket     (boot_up_s1_agent_rsp_fifo_out_endofpacket),                             //                .endofpacket
		.rf_sink_data            (boot_up_s1_agent_rsp_fifo_out_data),                                    //                .data
		.rf_source_ready         (boot_up_s1_agent_rf_source_ready),                                      //       rf_source.ready
		.rf_source_valid         (boot_up_s1_agent_rf_source_valid),                                      //                .valid
		.rf_source_startofpacket (boot_up_s1_agent_rf_source_startofpacket),                              //                .startofpacket
		.rf_source_endofpacket   (boot_up_s1_agent_rf_source_endofpacket),                                //                .endofpacket
		.rf_source_data          (boot_up_s1_agent_rf_source_data),                                       //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_027_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_027_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_027_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_027_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (boot_up_s1_agent_rdata_fifo_src_ready),                                 //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (boot_up_s1_agent_rdata_fifo_src_valid),                                 //                .valid
		.rdata_fifo_src_data     (boot_up_s1_agent_rdata_fifo_src_data),                                  //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) boot_up_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                         //       clk.clk
		.reset             (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (boot_up_s1_agent_rf_source_data),                                       //        in.data
		.in_valid          (boot_up_s1_agent_rf_source_valid),                                      //          .valid
		.in_ready          (boot_up_s1_agent_rf_source_ready),                                      //          .ready
		.in_startofpacket  (boot_up_s1_agent_rf_source_startofpacket),                              //          .startofpacket
		.in_endofpacket    (boot_up_s1_agent_rf_source_endofpacket),                                //          .endofpacket
		.out_data          (boot_up_s1_agent_rsp_fifo_out_data),                                    //       out.data
		.out_valid         (boot_up_s1_agent_rsp_fifo_out_valid),                                   //          .valid
		.out_ready         (boot_up_s1_agent_rsp_fifo_out_ready),                                   //          .ready
		.out_startofpacket (boot_up_s1_agent_rsp_fifo_out_startofpacket),                           //          .startofpacket
		.out_endofpacket   (boot_up_s1_agent_rsp_fifo_out_endofpacket),                             //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	Bomberman_mm_interconnect_0_router router (
		.sink_ready         (nios2_qsys_0_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_0_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_qsys_0_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_qsys_0_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_qsys_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_qsys_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_qsys_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                          //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //       src.ready
		.src_valid          (router_001_src_valid),                                   //          .valid
		.src_data           (router_001_src_data),                                    //          .data
		.src_channel        (router_001_src_channel),                                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //       src.ready
		.src_valid          (router_002_src_valid),                                 //          .valid
		.src_data           (router_002_src_data),                                  //          .data
		.src_channel        (router_002_src_channel),                               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (sysid_qsys_0_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_0_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_0_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_003_src_ready),                              //       src.ready
		.src_valid          (router_003_src_valid),                              //          .valid
		.src_data           (router_003_src_data),                               //          .data
		.src_channel        (router_003_src_channel),                            //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (nios2_qsys_0_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_0_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_qsys_0_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_qsys_0_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_004_src_ready),                                //       src.ready
		.src_valid          (router_004_src_valid),                                //          .valid
		.src_data           (router_004_src_data),                                 //          .data
		.src_channel        (router_004_src_channel),                              //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                           //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_003 router_005 (
		.sink_ready         (sdram_pll_audio_pll_pll_slave_agent_rp_ready),                          //      sink.ready
		.sink_valid         (sdram_pll_audio_pll_pll_slave_agent_rp_valid),                          //          .valid
		.sink_data          (sdram_pll_audio_pll_pll_slave_agent_rp_data),                           //          .data
		.sink_startofpacket (sdram_pll_audio_pll_pll_slave_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (sdram_pll_audio_pll_pll_slave_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                                  //       src.ready
		.src_valid          (router_005_src_valid),                                                  //          .valid
		.src_data           (router_005_src_data),                                                   //          .data
		.src_channel        (router_005_src_channel),                                                //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_003 router_006 (
		.sink_ready         (sdram_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (sdram_pll_audio_pll_c0_clk),              //       clk.clk
		.reset              (sdram_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                    //       src.ready
		.src_valid          (router_006_src_valid),                    //          .valid
		.src_data           (router_006_src_data),                     //          .data
		.src_channel        (router_006_src_channel),                  //          .channel
		.src_startofpacket  (router_006_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)               //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_003 router_007 (
		.sink_ready         (timer_0_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),                      //          .valid
		.sink_data          (timer_0_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                           //       src.ready
		.src_valid          (router_007_src_valid),                           //          .valid
		.src_data           (router_007_src_data),                            //          .data
		.src_channel        (router_007_src_channel),                         //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                      //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (avalon_blitter_0_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (avalon_blitter_0_s1_agent_rp_valid),             //          .valid
		.sink_data          (avalon_blitter_0_s1_agent_rp_data),              //          .data
		.sink_startofpacket (avalon_blitter_0_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (avalon_blitter_0_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                           //       src.ready
		.src_valid          (router_008_src_valid),                           //          .valid
		.src_data           (router_008_src_data),                            //          .data
		.src_channel        (router_008_src_channel),                         //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                      //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (otg_hpi_address_s1_agent_rp_ready),                                     //      sink.ready
		.sink_valid         (otg_hpi_address_s1_agent_rp_valid),                                     //          .valid
		.sink_data          (otg_hpi_address_s1_agent_rp_data),                                      //          .data
		.sink_startofpacket (otg_hpi_address_s1_agent_rp_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (otg_hpi_address_s1_agent_rp_endofpacket),                               //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                                  //       src.ready
		.src_valid          (router_009_src_valid),                                                  //          .valid
		.src_data           (router_009_src_data),                                                   //          .data
		.src_channel        (router_009_src_channel),                                                //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (otg_hpi_data_s1_agent_rp_ready),                                        //      sink.ready
		.sink_valid         (otg_hpi_data_s1_agent_rp_valid),                                        //          .valid
		.sink_data          (otg_hpi_data_s1_agent_rp_data),                                         //          .data
		.sink_startofpacket (otg_hpi_data_s1_agent_rp_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (otg_hpi_data_s1_agent_rp_endofpacket),                                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                                  //       src.ready
		.src_valid          (router_010_src_valid),                                                  //          .valid
		.src_data           (router_010_src_data),                                                   //          .data
		.src_channel        (router_010_src_channel),                                                //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (otg_hpi_r_s1_agent_rp_ready),                                           //      sink.ready
		.sink_valid         (otg_hpi_r_s1_agent_rp_valid),                                           //          .valid
		.sink_data          (otg_hpi_r_s1_agent_rp_data),                                            //          .data
		.sink_startofpacket (otg_hpi_r_s1_agent_rp_startofpacket),                                   //          .startofpacket
		.sink_endofpacket   (otg_hpi_r_s1_agent_rp_endofpacket),                                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                                  //       src.ready
		.src_valid          (router_011_src_valid),                                                  //          .valid
		.src_data           (router_011_src_data),                                                   //          .data
		.src_channel        (router_011_src_channel),                                                //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (otg_hpi_w_s1_agent_rp_ready),                                           //      sink.ready
		.sink_valid         (otg_hpi_w_s1_agent_rp_valid),                                           //          .valid
		.sink_data          (otg_hpi_w_s1_agent_rp_data),                                            //          .data
		.sink_startofpacket (otg_hpi_w_s1_agent_rp_startofpacket),                                   //          .startofpacket
		.sink_endofpacket   (otg_hpi_w_s1_agent_rp_endofpacket),                                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                                  //       src.ready
		.src_valid          (router_012_src_valid),                                                  //          .valid
		.src_data           (router_012_src_data),                                                   //          .data
		.src_channel        (router_012_src_channel),                                                //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (otg_hpi_cs_s1_agent_rp_ready),                                          //      sink.ready
		.sink_valid         (otg_hpi_cs_s1_agent_rp_valid),                                          //          .valid
		.sink_data          (otg_hpi_cs_s1_agent_rp_data),                                           //          .data
		.sink_startofpacket (otg_hpi_cs_s1_agent_rp_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (otg_hpi_cs_s1_agent_rp_endofpacket),                                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                                  //       src.ready
		.src_valid          (router_013_src_valid),                                                  //          .valid
		.src_data           (router_013_src_data),                                                   //          .data
		.src_channel        (router_013_src_channel),                                                //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_002 router_014 (
		.sink_ready         (otg_hpi_reset_s1_agent_rp_ready),                                       //      sink.ready
		.sink_valid         (otg_hpi_reset_s1_agent_rp_valid),                                       //          .valid
		.sink_data          (otg_hpi_reset_s1_agent_rp_data),                                        //          .data
		.sink_startofpacket (otg_hpi_reset_s1_agent_rp_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (otg_hpi_reset_s1_agent_rp_endofpacket),                                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                                                  //       src.ready
		.src_valid          (router_014_src_valid),                                                  //          .valid
		.src_data           (router_014_src_data),                                                   //          .data
		.src_channel        (router_014_src_channel),                                                //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_002 router_015 (
		.sink_ready         (audio_init_s1_agent_rp_ready),                                          //      sink.ready
		.sink_valid         (audio_init_s1_agent_rp_valid),                                          //          .valid
		.sink_data          (audio_init_s1_agent_rp_data),                                           //          .data
		.sink_startofpacket (audio_init_s1_agent_rp_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (audio_init_s1_agent_rp_endofpacket),                                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                                  //       src.ready
		.src_valid          (router_015_src_valid),                                                  //          .valid
		.src_data           (router_015_src_data),                                                   //          .data
		.src_channel        (router_015_src_channel),                                                //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_002 router_016 (
		.sink_ready         (audio_init_f_s1_agent_rp_ready),                                        //      sink.ready
		.sink_valid         (audio_init_f_s1_agent_rp_valid),                                        //          .valid
		.sink_data          (audio_init_f_s1_agent_rp_data),                                         //          .data
		.sink_startofpacket (audio_init_f_s1_agent_rp_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (audio_init_f_s1_agent_rp_endofpacket),                                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                                                  //       src.ready
		.src_valid          (router_016_src_valid),                                                  //          .valid
		.src_data           (router_016_src_data),                                                   //          .data
		.src_channel        (router_016_src_channel),                                                //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_002 router_017 (
		.sink_ready         (audio_back_vol_s1_agent_rp_ready),                                      //      sink.ready
		.sink_valid         (audio_back_vol_s1_agent_rp_valid),                                      //          .valid
		.sink_data          (audio_back_vol_s1_agent_rp_data),                                       //          .data
		.sink_startofpacket (audio_back_vol_s1_agent_rp_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (audio_back_vol_s1_agent_rp_endofpacket),                                //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                                                  //       src.ready
		.src_valid          (router_017_src_valid),                                                  //          .valid
		.src_data           (router_017_src_data),                                                   //          .data
		.src_channel        (router_017_src_channel),                                                //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_002 router_018 (
		.sink_ready         (audio_bomb_vol_s1_agent_rp_ready),                                      //      sink.ready
		.sink_valid         (audio_bomb_vol_s1_agent_rp_valid),                                      //          .valid
		.sink_data          (audio_bomb_vol_s1_agent_rp_data),                                       //          .data
		.sink_startofpacket (audio_bomb_vol_s1_agent_rp_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (audio_bomb_vol_s1_agent_rp_endofpacket),                                //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                                                  //       src.ready
		.src_valid          (router_018_src_valid),                                                  //          .valid
		.src_data           (router_018_src_data),                                                   //          .data
		.src_channel        (router_018_src_channel),                                                //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_002 router_019 (
		.sink_ready         (audio_bomb_active_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (audio_bomb_active_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (audio_bomb_active_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (audio_bomb_active_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (audio_bomb_active_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                                                  //       src.ready
		.src_valid          (router_019_src_valid),                                                  //          .valid
		.src_data           (router_019_src_data),                                                   //          .data
		.src_channel        (router_019_src_channel),                                                //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_003 router_020 (
		.sink_ready         (leds_s1_agent_rp_ready),                                                //      sink.ready
		.sink_valid         (leds_s1_agent_rp_valid),                                                //          .valid
		.sink_data          (leds_s1_agent_rp_data),                                                 //          .data
		.sink_startofpacket (leds_s1_agent_rp_startofpacket),                                        //          .startofpacket
		.sink_endofpacket   (leds_s1_agent_rp_endofpacket),                                          //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                                                  //       src.ready
		.src_valid          (router_020_src_valid),                                                  //          .valid
		.src_data           (router_020_src_data),                                                   //          .data
		.src_channel        (router_020_src_channel),                                                //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_003 router_021 (
		.sink_ready         (player2score0_s1_agent_rp_ready),                                       //      sink.ready
		.sink_valid         (player2score0_s1_agent_rp_valid),                                       //          .valid
		.sink_data          (player2score0_s1_agent_rp_data),                                        //          .data
		.sink_startofpacket (player2score0_s1_agent_rp_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (player2score0_s1_agent_rp_endofpacket),                                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                                                  //       src.ready
		.src_valid          (router_021_src_valid),                                                  //          .valid
		.src_data           (router_021_src_data),                                                   //          .data
		.src_channel        (router_021_src_channel),                                                //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_003 router_022 (
		.sink_ready         (player2score1_s1_agent_rp_ready),                                       //      sink.ready
		.sink_valid         (player2score1_s1_agent_rp_valid),                                       //          .valid
		.sink_data          (player2score1_s1_agent_rp_data),                                        //          .data
		.sink_startofpacket (player2score1_s1_agent_rp_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (player2score1_s1_agent_rp_endofpacket),                                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                                                  //       src.ready
		.src_valid          (router_022_src_valid),                                                  //          .valid
		.src_data           (router_022_src_data),                                                   //          .data
		.src_channel        (router_022_src_channel),                                                //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_003 router_023 (
		.sink_ready         (player1score0_s1_agent_rp_ready),                                       //      sink.ready
		.sink_valid         (player1score0_s1_agent_rp_valid),                                       //          .valid
		.sink_data          (player1score0_s1_agent_rp_data),                                        //          .data
		.sink_startofpacket (player1score0_s1_agent_rp_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (player1score0_s1_agent_rp_endofpacket),                                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                                                  //       src.ready
		.src_valid          (router_023_src_valid),                                                  //          .valid
		.src_data           (router_023_src_data),                                                   //          .data
		.src_channel        (router_023_src_channel),                                                //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_003 router_024 (
		.sink_ready         (player1score1_s1_agent_rp_ready),                                       //      sink.ready
		.sink_valid         (player1score1_s1_agent_rp_valid),                                       //          .valid
		.sink_data          (player1score1_s1_agent_rp_data),                                        //          .data
		.sink_startofpacket (player1score1_s1_agent_rp_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (player1score1_s1_agent_rp_endofpacket),                                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                                                  //       src.ready
		.src_valid          (router_024_src_valid),                                                  //          .valid
		.src_data           (router_024_src_data),                                                   //          .data
		.src_channel        (router_024_src_channel),                                                //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_003 router_025 (
		.sink_ready         (timescreen1_s1_agent_rp_ready),                                         //      sink.ready
		.sink_valid         (timescreen1_s1_agent_rp_valid),                                         //          .valid
		.sink_data          (timescreen1_s1_agent_rp_data),                                          //          .data
		.sink_startofpacket (timescreen1_s1_agent_rp_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (timescreen1_s1_agent_rp_endofpacket),                                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                                                  //       src.ready
		.src_valid          (router_025_src_valid),                                                  //          .valid
		.src_data           (router_025_src_data),                                                   //          .data
		.src_channel        (router_025_src_channel),                                                //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_003 router_026 (
		.sink_ready         (timescreen2_s1_agent_rp_ready),                                         //      sink.ready
		.sink_valid         (timescreen2_s1_agent_rp_valid),                                         //          .valid
		.sink_data          (timescreen2_s1_agent_rp_data),                                          //          .data
		.sink_startofpacket (timescreen2_s1_agent_rp_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (timescreen2_s1_agent_rp_endofpacket),                                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                                                  //       src.ready
		.src_valid          (router_026_src_valid),                                                  //          .valid
		.src_data           (router_026_src_data),                                                   //          .data
		.src_channel        (router_026_src_channel),                                                //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_003 router_027 (
		.sink_ready         (timescreen0_s1_agent_rp_ready),                                         //      sink.ready
		.sink_valid         (timescreen0_s1_agent_rp_valid),                                         //          .valid
		.sink_data          (timescreen0_s1_agent_rp_data),                                          //          .data
		.sink_startofpacket (timescreen0_s1_agent_rp_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (timescreen0_s1_agent_rp_endofpacket),                                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                                                  //       src.ready
		.src_valid          (router_027_src_valid),                                                  //          .valid
		.src_data           (router_027_src_data),                                                   //          .data
		.src_channel        (router_027_src_channel),                                                //          .channel
		.src_startofpacket  (router_027_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_002 router_028 (
		.sink_ready         (audio_select_s1_agent_rp_ready),                                        //      sink.ready
		.sink_valid         (audio_select_s1_agent_rp_valid),                                        //          .valid
		.sink_data          (audio_select_s1_agent_rp_data),                                         //          .data
		.sink_startofpacket (audio_select_s1_agent_rp_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (audio_select_s1_agent_rp_endofpacket),                                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_028_src_ready),                                                  //       src.ready
		.src_valid          (router_028_src_valid),                                                  //          .valid
		.src_data           (router_028_src_data),                                                   //          .data
		.src_channel        (router_028_src_channel),                                                //          .channel
		.src_startofpacket  (router_028_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_router_002 router_029 (
		.sink_ready         (boot_up_s1_agent_rp_ready),                                             //      sink.ready
		.sink_valid         (boot_up_s1_agent_rp_valid),                                             //          .valid
		.sink_data          (boot_up_s1_agent_rp_data),                                              //          .data
		.sink_startofpacket (boot_up_s1_agent_rp_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (boot_up_s1_agent_rp_endofpacket),                                       //          .endofpacket
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_029_src_ready),                                                  //       src.ready
		.src_valid          (router_029_src_valid),                                                  //          .valid
		.src_data           (router_029_src_data),                                                   //          .data
		.src_channel        (router_029_src_channel),                                                //          .channel
		.src_startofpacket  (router_029_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                               //      sink.ready
		.sink_channel        (router_src_channel),                             //          .channel
		.sink_data           (router_src_data),                                //          .data
		.sink_startofpacket  (router_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                         //          .endofpacket
		.sink_valid          (router_src_valid),                               //          .valid
		.src0_ready          (cmd_demux_src0_ready),                           //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                           //          .valid
		.src0_data           (cmd_demux_src0_data),                            //          .data
		.src0_channel        (cmd_demux_src0_channel),                         //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                           //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                           //          .valid
		.src1_data           (cmd_demux_src1_data),                            //          .data
		.src1_channel        (cmd_demux_src1_channel),                         //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                     //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                           //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                           //          .valid
		.src2_data           (cmd_demux_src2_data),                            //          .data
		.src2_channel        (cmd_demux_src2_channel),                         //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                     //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                           //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                           //          .valid
		.src3_data           (cmd_demux_src3_data),                            //          .data
		.src3_channel        (cmd_demux_src3_channel),                         //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                           //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                           //          .valid
		.src4_data           (cmd_demux_src4_data),                            //          .data
		.src4_channel        (cmd_demux_src4_channel),                         //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                     //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                           //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                           //          .valid
		.src5_data           (cmd_demux_src5_data),                            //          .data
		.src5_channel        (cmd_demux_src5_channel),                         //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                     //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                           //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                           //          .valid
		.src6_data           (cmd_demux_src6_data),                            //          .data
		.src6_channel        (cmd_demux_src6_channel),                         //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                     //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                           //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                           //          .valid
		.src7_data           (cmd_demux_src7_data),                            //          .data
		.src7_channel        (cmd_demux_src7_channel),                         //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                     //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                           //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                           //          .valid
		.src8_data           (cmd_demux_src8_data),                            //          .data
		.src8_channel        (cmd_demux_src8_channel),                         //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                   //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                     //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                           //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                           //          .valid
		.src9_data           (cmd_demux_src9_data),                            //          .data
		.src9_channel        (cmd_demux_src9_channel),                         //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                   //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                     //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                          //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                          //          .valid
		.src10_data          (cmd_demux_src10_data),                           //          .data
		.src10_channel       (cmd_demux_src10_channel),                        //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                  //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                    //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                          //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                          //          .valid
		.src11_data          (cmd_demux_src11_data),                           //          .data
		.src11_channel       (cmd_demux_src11_channel),                        //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                  //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                    //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                          //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                          //          .valid
		.src12_data          (cmd_demux_src12_data),                           //          .data
		.src12_channel       (cmd_demux_src12_channel),                        //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                  //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                    //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                          //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                          //          .valid
		.src13_data          (cmd_demux_src13_data),                           //          .data
		.src13_channel       (cmd_demux_src13_channel),                        //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                  //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                    //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                          //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                          //          .valid
		.src14_data          (cmd_demux_src14_data),                           //          .data
		.src14_channel       (cmd_demux_src14_channel),                        //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                  //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                    //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                          //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                          //          .valid
		.src15_data          (cmd_demux_src15_data),                           //          .data
		.src15_channel       (cmd_demux_src15_channel),                        //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                  //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                    //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                          //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                          //          .valid
		.src16_data          (cmd_demux_src16_data),                           //          .data
		.src16_channel       (cmd_demux_src16_channel),                        //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                  //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                    //          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                          //     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                          //          .valid
		.src17_data          (cmd_demux_src17_data),                           //          .data
		.src17_channel       (cmd_demux_src17_channel),                        //          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                  //          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                    //          .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                          //     src18.ready
		.src18_valid         (cmd_demux_src18_valid),                          //          .valid
		.src18_data          (cmd_demux_src18_data),                           //          .data
		.src18_channel       (cmd_demux_src18_channel),                        //          .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                  //          .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                    //          .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                          //     src19.ready
		.src19_valid         (cmd_demux_src19_valid),                          //          .valid
		.src19_data          (cmd_demux_src19_data),                           //          .data
		.src19_channel       (cmd_demux_src19_channel),                        //          .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                  //          .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                    //          .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                          //     src20.ready
		.src20_valid         (cmd_demux_src20_valid),                          //          .valid
		.src20_data          (cmd_demux_src20_data),                           //          .data
		.src20_channel       (cmd_demux_src20_channel),                        //          .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                  //          .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),                    //          .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                          //     src21.ready
		.src21_valid         (cmd_demux_src21_valid),                          //          .valid
		.src21_data          (cmd_demux_src21_data),                           //          .data
		.src21_channel       (cmd_demux_src21_channel),                        //          .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),                  //          .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket),                    //          .endofpacket
		.src22_ready         (cmd_demux_src22_ready),                          //     src22.ready
		.src22_valid         (cmd_demux_src22_valid),                          //          .valid
		.src22_data          (cmd_demux_src22_data),                           //          .data
		.src22_channel       (cmd_demux_src22_channel),                        //          .channel
		.src22_startofpacket (cmd_demux_src22_startofpacket),                  //          .startofpacket
		.src22_endofpacket   (cmd_demux_src22_endofpacket),                    //          .endofpacket
		.src23_ready         (cmd_demux_src23_ready),                          //     src23.ready
		.src23_valid         (cmd_demux_src23_valid),                          //          .valid
		.src23_data          (cmd_demux_src23_data),                           //          .data
		.src23_channel       (cmd_demux_src23_channel),                        //          .channel
		.src23_startofpacket (cmd_demux_src23_startofpacket),                  //          .startofpacket
		.src23_endofpacket   (cmd_demux_src23_endofpacket),                    //          .endofpacket
		.src24_ready         (cmd_demux_src24_ready),                          //     src24.ready
		.src24_valid         (cmd_demux_src24_valid),                          //          .valid
		.src24_data          (cmd_demux_src24_data),                           //          .data
		.src24_channel       (cmd_demux_src24_channel),                        //          .channel
		.src24_startofpacket (cmd_demux_src24_startofpacket),                  //          .startofpacket
		.src24_endofpacket   (cmd_demux_src24_endofpacket),                    //          .endofpacket
		.src25_ready         (cmd_demux_src25_ready),                          //     src25.ready
		.src25_valid         (cmd_demux_src25_valid),                          //          .valid
		.src25_data          (cmd_demux_src25_data),                           //          .data
		.src25_channel       (cmd_demux_src25_channel),                        //          .channel
		.src25_startofpacket (cmd_demux_src25_startofpacket),                  //          .startofpacket
		.src25_endofpacket   (cmd_demux_src25_endofpacket),                    //          .endofpacket
		.src26_ready         (cmd_demux_src26_ready),                          //     src26.ready
		.src26_valid         (cmd_demux_src26_valid),                          //          .valid
		.src26_data          (cmd_demux_src26_data),                           //          .data
		.src26_channel       (cmd_demux_src26_channel),                        //          .channel
		.src26_startofpacket (cmd_demux_src26_startofpacket),                  //          .startofpacket
		.src26_endofpacket   (cmd_demux_src26_endofpacket),                    //          .endofpacket
		.src27_ready         (cmd_demux_src27_ready),                          //     src27.ready
		.src27_valid         (cmd_demux_src27_valid),                          //          .valid
		.src27_data          (cmd_demux_src27_data),                           //          .data
		.src27_channel       (cmd_demux_src27_channel),                        //          .channel
		.src27_startofpacket (cmd_demux_src27_startofpacket),                  //          .startofpacket
		.src27_endofpacket   (cmd_demux_src27_endofpacket)                     //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_001_src_ready),                           //      sink.ready
		.sink_channel        (router_001_src_channel),                         //          .channel
		.sink_data           (router_001_src_data),                            //          .data
		.sink_startofpacket  (router_001_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket    (router_001_src_endofpacket),                     //          .endofpacket
		.sink_valid          (router_001_src_valid),                           //          .valid
		.src0_ready          (cmd_demux_001_src0_ready),                       //      src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                       //          .valid
		.src0_data           (cmd_demux_001_src0_data),                        //          .data
		.src0_channel        (cmd_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                 //          .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                       //      src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                       //          .valid
		.src1_data           (cmd_demux_001_src1_data),                        //          .data
		.src1_channel        (cmd_demux_001_src1_channel),                     //          .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                 //          .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                       //      src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                       //          .valid
		.src2_data           (cmd_demux_001_src2_data),                        //          .data
		.src2_channel        (cmd_demux_001_src2_channel),                     //          .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                 //          .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                       //      src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                       //          .valid
		.src3_data           (cmd_demux_001_src3_data),                        //          .data
		.src3_channel        (cmd_demux_001_src3_channel),                     //          .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),               //          .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                 //          .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                       //      src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                       //          .valid
		.src4_data           (cmd_demux_001_src4_data),                        //          .data
		.src4_channel        (cmd_demux_001_src4_channel),                     //          .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),               //          .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                 //          .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                       //      src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                       //          .valid
		.src5_data           (cmd_demux_001_src5_data),                        //          .data
		.src5_channel        (cmd_demux_001_src5_channel),                     //          .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),               //          .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                 //          .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                       //      src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                       //          .valid
		.src6_data           (cmd_demux_001_src6_data),                        //          .data
		.src6_channel        (cmd_demux_001_src6_channel),                     //          .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),               //          .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                 //          .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                       //      src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                       //          .valid
		.src7_data           (cmd_demux_001_src7_data),                        //          .data
		.src7_channel        (cmd_demux_001_src7_channel),                     //          .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),               //          .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                 //          .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                       //      src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                       //          .valid
		.src8_data           (cmd_demux_001_src8_data),                        //          .data
		.src8_channel        (cmd_demux_001_src8_channel),                     //          .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),               //          .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                 //          .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                       //      src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                       //          .valid
		.src9_data           (cmd_demux_001_src9_data),                        //          .data
		.src9_channel        (cmd_demux_001_src9_channel),                     //          .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),               //          .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                 //          .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                      //     src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                      //          .valid
		.src10_data          (cmd_demux_001_src10_data),                       //          .data
		.src10_channel       (cmd_demux_001_src10_channel),                    //          .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),              //          .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                //          .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                      //     src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                      //          .valid
		.src11_data          (cmd_demux_001_src11_data),                       //          .data
		.src11_channel       (cmd_demux_001_src11_channel),                    //          .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),              //          .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                //          .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                      //     src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                      //          .valid
		.src12_data          (cmd_demux_001_src12_data),                       //          .data
		.src12_channel       (cmd_demux_001_src12_channel),                    //          .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),              //          .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket)                 //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_src_valid),                              //          .valid
		.src_data            (cmd_mux_src_data),                               //          .data
		.src_channel         (cmd_mux_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                         //          .channel
		.sink0_data          (cmd_demux_src0_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                      //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                          //          .valid
		.src_data            (cmd_mux_001_src_data),                           //          .data
		.src_channel         (cmd_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                         //          .channel
		.sink0_data          (cmd_demux_src1_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //          .valid
		.src_data            (cmd_mux_002_src_data),                           //          .data
		.src_channel         (cmd_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                         //          .channel
		.sink0_data          (cmd_demux_src2_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                  //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_003_src_data),                                                  //          .data
		.src_channel         (cmd_mux_003_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                                  //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                                //          .channel
		.sink0_data          (cmd_demux_src3_data),                                                   //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                                              //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                                            //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                                               //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux_001 cmd_mux_004 (
		.clk                 (sdram_pll_audio_pll_c0_clk),              //       clk.clk
		.reset               (sdram_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                   //          .valid
		.src_data            (cmd_mux_004_src_data),                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_out_valid),                       //          .valid
		.sink0_channel       (crosser_out_channel),                     //          .channel
		.sink0_data          (crosser_out_data),                        //          .data
		.sink0_startofpacket (crosser_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                 //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                   //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                   //          .valid
		.sink1_channel       (crosser_001_out_channel),                 //          .channel
		.sink1_data          (crosser_001_out_data),                    //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket)              //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux_001 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                          //          .valid
		.src_data            (cmd_mux_005_src_data),                           //          .data
		.src_channel         (cmd_mux_005_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                         //          .channel
		.sink0_data          (cmd_demux_src5_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                  //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                          //          .valid
		.src_data            (cmd_mux_006_src_data),                           //          .data
		.src_channel         (cmd_mux_006_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                         //          .channel
		.sink0_data          (cmd_demux_src6_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                      //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_007_src_data),                                                  //          .data
		.src_channel         (cmd_mux_007_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                                                  //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                                                //          .channel
		.sink0_data          (cmd_demux_src7_data),                                                   //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_008_src_data),                                                  //          .data
		.src_channel         (cmd_mux_008_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                                  //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                                                //          .channel
		.sink0_data          (cmd_demux_src8_data),                                                   //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_009_src_data),                                                  //          .data
		.src_channel         (cmd_mux_009_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                                                  //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                                                //          .channel
		.sink0_data          (cmd_demux_src9_data),                                                   //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                                             //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_010_src_data),                                                  //          .data
		.src_channel         (cmd_mux_010_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src10_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                                            //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_011_src_data),                                                  //          .data
		.src_channel         (cmd_mux_011_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src11_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                                            //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_012_src_data),                                                  //          .data
		.src_channel         (cmd_mux_012_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src12_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                                            //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_013_src_data),                                                  //          .data
		.src_channel         (cmd_mux_013_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src13_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                                            //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_014_src_data),                                                  //          .data
		.src_channel         (cmd_mux_014_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src14_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                                            //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_015_src_data),                                                  //          .data
		.src_channel         (cmd_mux_015_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src15_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                                            //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_016_src_data),                                                  //          .data
		.src_channel         (cmd_mux_016_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src16_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)                                            //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_017_src_data),                                                  //          .data
		.src_channel         (cmd_mux_017_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src17_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket)                                            //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux_001 cmd_mux_018 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_018_src_data),                                                  //          .data
		.src_channel         (cmd_mux_018_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src18_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket),                                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                                              //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                                            //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                                               //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),                                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux_001 cmd_mux_019 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_019_src_data),                                                  //          .data
		.src_channel         (cmd_mux_019_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src19_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket),                                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                                              //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                                            //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                                               //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),                                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux_001 cmd_mux_020 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_020_src_data),                                                  //          .data
		.src_channel         (cmd_mux_020_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src20_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src20_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket),                                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                                              //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                                            //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                                               //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),                                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux_001 cmd_mux_021 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_021_src_data),                                                  //          .data
		.src_channel         (cmd_mux_021_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src21_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src21_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket),                                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                                              //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                                            //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                                               //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),                                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux_001 cmd_mux_022 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_022_src_data),                                                  //          .data
		.src_channel         (cmd_mux_022_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src22_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src22_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src22_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src22_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src22_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src22_endofpacket),                                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                                              //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),                                            //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                                               //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),                                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux_001 cmd_mux_023 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_023_src_data),                                                  //          .data
		.src_channel         (cmd_mux_023_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src23_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src23_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src23_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src23_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src23_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src23_endofpacket),                                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),                                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),                                             //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),                                           //          .channel
		.sink1_data          (cmd_demux_001_src10_data),                                              //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),                                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket)                                        //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux_001 cmd_mux_024 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_024_src_data),                                                  //          .data
		.src_channel         (cmd_mux_024_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src24_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src24_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src24_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src24_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src24_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src24_endofpacket),                                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src11_ready),                                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src11_valid),                                             //          .valid
		.sink1_channel       (cmd_demux_001_src11_channel),                                           //          .channel
		.sink1_data          (cmd_demux_001_src11_data),                                              //          .data
		.sink1_startofpacket (cmd_demux_001_src11_startofpacket),                                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src11_endofpacket)                                        //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux_001 cmd_mux_025 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_025_src_data),                                                  //          .data
		.src_channel         (cmd_mux_025_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src25_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src25_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src25_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src25_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src25_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src25_endofpacket),                                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src12_ready),                                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src12_valid),                                             //          .valid
		.sink1_channel       (cmd_demux_001_src12_channel),                                           //          .channel
		.sink1_data          (cmd_demux_001_src12_data),                                              //          .data
		.sink1_startofpacket (cmd_demux_001_src12_startofpacket),                                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src12_endofpacket)                                        //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux cmd_mux_026 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_026_src_data),                                                  //          .data
		.src_channel         (cmd_mux_026_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src26_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src26_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src26_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src26_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src26_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src26_endofpacket)                                            //          .endofpacket
	);

	Bomberman_mm_interconnect_0_cmd_mux cmd_mux_027 (
		.clk                 (clk_0_clk_clk),                                                         //       clk.clk
		.reset               (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_027_src_ready),                                                 //       src.ready
		.src_valid           (cmd_mux_027_src_valid),                                                 //          .valid
		.src_data            (cmd_mux_027_src_data),                                                  //          .data
		.src_channel         (cmd_mux_027_src_channel),                                               //          .channel
		.src_startofpacket   (cmd_mux_027_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_027_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src27_ready),                                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src27_valid),                                                 //          .valid
		.sink0_channel       (cmd_demux_src27_channel),                                               //          .channel
		.sink0_data          (cmd_demux_src27_data),                                                  //          .data
		.sink0_startofpacket (cmd_demux_src27_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src27_endofpacket)                                            //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                           //      sink.ready
		.sink_channel       (router_002_src_channel),                         //          .channel
		.sink_data          (router_002_src_data),                            //          .data
		.sink_startofpacket (router_002_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_002_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_src0_data),                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                      //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                           //      sink.ready
		.sink_channel       (router_003_src_channel),                         //          .channel
		.sink_data          (router_003_src_data),                            //          .data
		.sink_startofpacket (router_003_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_003_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_001_src0_data),                        //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_001_src1_data),                        //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                  //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                           //      sink.ready
		.sink_channel       (router_004_src_channel),                         //          .channel
		.sink_data          (router_004_src_data),                            //          .data
		.sink_startofpacket (router_004_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_004_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_002_src0_data),                        //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_002_src1_data),                        //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                  //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux_001 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                                  //      sink.ready
		.sink_channel       (router_005_src_channel),                                                //          .channel
		.sink_data          (router_005_src_data),                                                   //          .data
		.sink_startofpacket (router_005_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_005_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                                        //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                                              //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                                              //          .valid
		.src1_data          (rsp_demux_003_src1_data),                                               //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                                            //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux_001 rsp_demux_004 (
		.clk                (sdram_pll_audio_pll_c0_clk),              //       clk.clk
		.reset              (sdram_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                    //      sink.ready
		.sink_channel       (router_006_src_channel),                  //          .channel
		.sink_data          (router_006_src_data),                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_006_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                //          .valid
		.src1_data          (rsp_demux_004_src1_data),                 //          .data
		.src1_channel       (rsp_demux_004_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)           //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux_001 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                           //      sink.ready
		.sink_channel       (router_007_src_channel),                         //          .channel
		.sink_data          (router_007_src_data),                            //          .data
		.sink_startofpacket (router_007_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_007_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_005_src0_data),                        //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_005_src1_data),                        //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                  //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                           //      sink.ready
		.sink_channel       (router_008_src_channel),                         //          .channel
		.sink_data          (router_008_src_data),                            //          .data
		.sink_startofpacket (router_008_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_008_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_006_src0_data),                        //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                  //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                                  //      sink.ready
		.sink_channel       (router_009_src_channel),                                                //          .channel
		.sink_data          (router_009_src_data),                                                   //          .data
		.sink_startofpacket (router_009_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_009_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                                  //      sink.ready
		.sink_channel       (router_010_src_channel),                                                //          .channel
		.sink_data          (router_010_src_data),                                                   //          .data
		.sink_startofpacket (router_010_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_010_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                                  //      sink.ready
		.sink_channel       (router_011_src_channel),                                                //          .channel
		.sink_data          (router_011_src_data),                                                   //          .data
		.sink_startofpacket (router_011_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_011_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                                  //      sink.ready
		.sink_channel       (router_012_src_channel),                                                //          .channel
		.sink_data          (router_012_src_data),                                                   //          .data
		.sink_startofpacket (router_012_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_012_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_010_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                                  //      sink.ready
		.sink_channel       (router_013_src_channel),                                                //          .channel
		.sink_data          (router_013_src_data),                                                   //          .data
		.sink_startofpacket (router_013_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_013_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_011_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                                                  //      sink.ready
		.sink_channel       (router_014_src_channel),                                                //          .channel
		.sink_data          (router_014_src_data),                                                   //          .data
		.sink_startofpacket (router_014_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_014_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_012_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                                                  //      sink.ready
		.sink_channel       (router_015_src_channel),                                                //          .channel
		.sink_data          (router_015_src_data),                                                   //          .data
		.sink_startofpacket (router_015_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_015_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_013_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                                                  //      sink.ready
		.sink_channel       (router_016_src_channel),                                                //          .channel
		.sink_data          (router_016_src_data),                                                   //          .data
		.sink_startofpacket (router_016_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_016_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_014_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                                                  //      sink.ready
		.sink_channel       (router_017_src_channel),                                                //          .channel
		.sink_data          (router_017_src_data),                                                   //          .data
		.sink_startofpacket (router_017_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_017_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_015_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                                                  //      sink.ready
		.sink_channel       (router_018_src_channel),                                                //          .channel
		.sink_data          (router_018_src_data),                                                   //          .data
		.sink_startofpacket (router_018_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_018_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_016_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                                                  //      sink.ready
		.sink_channel       (router_019_src_channel),                                                //          .channel
		.sink_data          (router_019_src_data),                                                   //          .data
		.sink_startofpacket (router_019_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_019_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_017_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux_001 rsp_demux_018 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                                                  //      sink.ready
		.sink_channel       (router_020_src_channel),                                                //          .channel
		.sink_data          (router_020_src_data),                                                   //          .data
		.sink_startofpacket (router_020_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_020_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_018_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),                                        //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                                              //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                                              //          .valid
		.src1_data          (rsp_demux_018_src1_data),                                               //          .data
		.src1_channel       (rsp_demux_018_src1_channel),                                            //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),                                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux_001 rsp_demux_019 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                                                  //      sink.ready
		.sink_channel       (router_021_src_channel),                                                //          .channel
		.sink_data          (router_021_src_data),                                                   //          .data
		.sink_startofpacket (router_021_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_021_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_019_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),                                        //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                                              //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                                              //          .valid
		.src1_data          (rsp_demux_019_src1_data),                                               //          .data
		.src1_channel       (rsp_demux_019_src1_channel),                                            //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),                                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux_001 rsp_demux_020 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                                                  //      sink.ready
		.sink_channel       (router_022_src_channel),                                                //          .channel
		.sink_data          (router_022_src_data),                                                   //          .data
		.sink_startofpacket (router_022_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_022_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_020_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket),                                        //          .endofpacket
		.src1_ready         (rsp_demux_020_src1_ready),                                              //      src1.ready
		.src1_valid         (rsp_demux_020_src1_valid),                                              //          .valid
		.src1_data          (rsp_demux_020_src1_data),                                               //          .data
		.src1_channel       (rsp_demux_020_src1_channel),                                            //          .channel
		.src1_startofpacket (rsp_demux_020_src1_startofpacket),                                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_020_src1_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux_001 rsp_demux_021 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                                                  //      sink.ready
		.sink_channel       (router_023_src_channel),                                                //          .channel
		.sink_data          (router_023_src_data),                                                   //          .data
		.sink_startofpacket (router_023_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_023_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_021_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket),                                        //          .endofpacket
		.src1_ready         (rsp_demux_021_src1_ready),                                              //      src1.ready
		.src1_valid         (rsp_demux_021_src1_valid),                                              //          .valid
		.src1_data          (rsp_demux_021_src1_data),                                               //          .data
		.src1_channel       (rsp_demux_021_src1_channel),                                            //          .channel
		.src1_startofpacket (rsp_demux_021_src1_startofpacket),                                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_021_src1_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux_001 rsp_demux_022 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                                                  //      sink.ready
		.sink_channel       (router_024_src_channel),                                                //          .channel
		.sink_data          (router_024_src_data),                                                   //          .data
		.sink_startofpacket (router_024_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_024_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_022_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket),                                        //          .endofpacket
		.src1_ready         (rsp_demux_022_src1_ready),                                              //      src1.ready
		.src1_valid         (rsp_demux_022_src1_valid),                                              //          .valid
		.src1_data          (rsp_demux_022_src1_data),                                               //          .data
		.src1_channel       (rsp_demux_022_src1_channel),                                            //          .channel
		.src1_startofpacket (rsp_demux_022_src1_startofpacket),                                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_022_src1_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux_001 rsp_demux_023 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                                                  //      sink.ready
		.sink_channel       (router_025_src_channel),                                                //          .channel
		.sink_data          (router_025_src_data),                                                   //          .data
		.sink_startofpacket (router_025_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_025_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_023_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket),                                        //          .endofpacket
		.src1_ready         (rsp_demux_023_src1_ready),                                              //      src1.ready
		.src1_valid         (rsp_demux_023_src1_valid),                                              //          .valid
		.src1_data          (rsp_demux_023_src1_data),                                               //          .data
		.src1_channel       (rsp_demux_023_src1_channel),                                            //          .channel
		.src1_startofpacket (rsp_demux_023_src1_startofpacket),                                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_023_src1_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux_001 rsp_demux_024 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                                                  //      sink.ready
		.sink_channel       (router_026_src_channel),                                                //          .channel
		.sink_data          (router_026_src_data),                                                   //          .data
		.sink_startofpacket (router_026_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_026_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_024_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket),                                        //          .endofpacket
		.src1_ready         (rsp_demux_024_src1_ready),                                              //      src1.ready
		.src1_valid         (rsp_demux_024_src1_valid),                                              //          .valid
		.src1_data          (rsp_demux_024_src1_data),                                               //          .data
		.src1_channel       (rsp_demux_024_src1_channel),                                            //          .channel
		.src1_startofpacket (rsp_demux_024_src1_startofpacket),                                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_024_src1_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux_001 rsp_demux_025 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                                                  //      sink.ready
		.sink_channel       (router_027_src_channel),                                                //          .channel
		.sink_data          (router_027_src_data),                                                   //          .data
		.sink_startofpacket (router_027_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_027_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_025_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_025_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket),                                        //          .endofpacket
		.src1_ready         (rsp_demux_025_src1_ready),                                              //      src1.ready
		.src1_valid         (rsp_demux_025_src1_valid),                                              //          .valid
		.src1_data          (rsp_demux_025_src1_data),                                               //          .data
		.src1_channel       (rsp_demux_025_src1_channel),                                            //          .channel
		.src1_startofpacket (rsp_demux_025_src1_startofpacket),                                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_025_src1_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux rsp_demux_026 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                                                  //      sink.ready
		.sink_channel       (router_028_src_channel),                                                //          .channel
		.sink_data          (router_028_src_data),                                                   //          .data
		.sink_startofpacket (router_028_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_028_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_026_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_026_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_demux rsp_demux_027 (
		.clk                (clk_0_clk_clk),                                                         //       clk.clk
		.reset              (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                                                  //      sink.ready
		.sink_channel       (router_029_src_channel),                                                //          .channel
		.sink_data          (router_029_src_data),                                                   //          .data
		.sink_startofpacket (router_029_src_startofpacket),                                          //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),                                            //          .endofpacket
		.sink_valid         (router_029_src_valid),                                                  //          .valid
		.src0_ready         (rsp_demux_027_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_027_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_027_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_027_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_027_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_027_src0_endofpacket)                                         //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                  //       clk.clk
		.reset                (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                              //       src.ready
		.src_valid            (rsp_mux_src_valid),                              //          .valid
		.src_data             (rsp_mux_src_data),                               //          .data
		.src_channel          (rsp_mux_src_channel),                            //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                           //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                           //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                         //          .channel
		.sink0_data           (rsp_demux_src0_data),                            //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                       //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                     //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                        //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                       //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                       //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                     //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                        //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                       //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                       //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                     //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                        //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.sink4_ready          (crosser_002_out_ready),                          //     sink4.ready
		.sink4_valid          (crosser_002_out_valid),                          //          .valid
		.sink4_channel        (crosser_002_out_channel),                        //          .channel
		.sink4_data           (crosser_002_out_data),                           //          .data
		.sink4_startofpacket  (crosser_002_out_startofpacket),                  //          .startofpacket
		.sink4_endofpacket    (crosser_002_out_endofpacket),                    //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                       //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                       //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                     //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                        //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                       //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                       //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                     //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                        //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                 //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                       //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                       //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                     //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                        //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                 //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                       //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                       //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                     //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                        //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                 //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                       //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                       //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                     //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                        //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),               //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                 //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                       //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                       //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                     //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                        //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),               //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                 //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                       //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                       //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                     //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                        //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),               //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                 //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                       //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                       //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                     //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                        //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),               //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                 //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                       //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                       //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                     //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                        //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),               //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                 //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                       //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                       //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                     //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                        //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),               //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                 //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                       //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                       //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                     //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                        //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),               //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                 //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                       //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                       //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                     //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                        //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),               //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                 //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                       //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                       //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                     //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                        //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),               //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                 //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                       //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                       //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                     //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                        //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),               //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                 //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                       //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                       //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                     //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                        //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),               //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),                 //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                       //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                       //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                     //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                        //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),               //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),                 //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                       //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                       //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                     //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                        //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),               //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),                 //          .endofpacket
		.sink22_ready         (rsp_demux_022_src0_ready),                       //    sink22.ready
		.sink22_valid         (rsp_demux_022_src0_valid),                       //          .valid
		.sink22_channel       (rsp_demux_022_src0_channel),                     //          .channel
		.sink22_data          (rsp_demux_022_src0_data),                        //          .data
		.sink22_startofpacket (rsp_demux_022_src0_startofpacket),               //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src0_endofpacket),                 //          .endofpacket
		.sink23_ready         (rsp_demux_023_src0_ready),                       //    sink23.ready
		.sink23_valid         (rsp_demux_023_src0_valid),                       //          .valid
		.sink23_channel       (rsp_demux_023_src0_channel),                     //          .channel
		.sink23_data          (rsp_demux_023_src0_data),                        //          .data
		.sink23_startofpacket (rsp_demux_023_src0_startofpacket),               //          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src0_endofpacket),                 //          .endofpacket
		.sink24_ready         (rsp_demux_024_src0_ready),                       //    sink24.ready
		.sink24_valid         (rsp_demux_024_src0_valid),                       //          .valid
		.sink24_channel       (rsp_demux_024_src0_channel),                     //          .channel
		.sink24_data          (rsp_demux_024_src0_data),                        //          .data
		.sink24_startofpacket (rsp_demux_024_src0_startofpacket),               //          .startofpacket
		.sink24_endofpacket   (rsp_demux_024_src0_endofpacket),                 //          .endofpacket
		.sink25_ready         (rsp_demux_025_src0_ready),                       //    sink25.ready
		.sink25_valid         (rsp_demux_025_src0_valid),                       //          .valid
		.sink25_channel       (rsp_demux_025_src0_channel),                     //          .channel
		.sink25_data          (rsp_demux_025_src0_data),                        //          .data
		.sink25_startofpacket (rsp_demux_025_src0_startofpacket),               //          .startofpacket
		.sink25_endofpacket   (rsp_demux_025_src0_endofpacket),                 //          .endofpacket
		.sink26_ready         (rsp_demux_026_src0_ready),                       //    sink26.ready
		.sink26_valid         (rsp_demux_026_src0_valid),                       //          .valid
		.sink26_channel       (rsp_demux_026_src0_channel),                     //          .channel
		.sink26_data          (rsp_demux_026_src0_data),                        //          .data
		.sink26_startofpacket (rsp_demux_026_src0_startofpacket),               //          .startofpacket
		.sink26_endofpacket   (rsp_demux_026_src0_endofpacket),                 //          .endofpacket
		.sink27_ready         (rsp_demux_027_src0_ready),                       //    sink27.ready
		.sink27_valid         (rsp_demux_027_src0_valid),                       //          .valid
		.sink27_channel       (rsp_demux_027_src0_channel),                     //          .channel
		.sink27_data          (rsp_demux_027_src0_data),                        //          .data
		.sink27_startofpacket (rsp_demux_027_src0_startofpacket),               //          .startofpacket
		.sink27_endofpacket   (rsp_demux_027_src0_endofpacket)                  //          .endofpacket
	);

	Bomberman_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                  (clk_0_clk_clk),                                  //       clk.clk
		.reset                (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                          //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                          //          .valid
		.src_data             (rsp_mux_001_src_data),                           //          .data
		.src_channel          (rsp_mux_001_src_channel),                        //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready          (rsp_demux_001_src1_ready),                       //     sink0.ready
		.sink0_valid          (rsp_demux_001_src1_valid),                       //          .valid
		.sink0_channel        (rsp_demux_001_src1_channel),                     //          .channel
		.sink0_data           (rsp_demux_001_src1_data),                        //          .data
		.sink0_startofpacket  (rsp_demux_001_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket    (rsp_demux_001_src1_endofpacket),                 //          .endofpacket
		.sink1_ready          (rsp_demux_002_src1_ready),                       //     sink1.ready
		.sink1_valid          (rsp_demux_002_src1_valid),                       //          .valid
		.sink1_channel        (rsp_demux_002_src1_channel),                     //          .channel
		.sink1_data           (rsp_demux_002_src1_data),                        //          .data
		.sink1_startofpacket  (rsp_demux_002_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket    (rsp_demux_002_src1_endofpacket),                 //          .endofpacket
		.sink2_ready          (rsp_demux_003_src1_ready),                       //     sink2.ready
		.sink2_valid          (rsp_demux_003_src1_valid),                       //          .valid
		.sink2_channel        (rsp_demux_003_src1_channel),                     //          .channel
		.sink2_data           (rsp_demux_003_src1_data),                        //          .data
		.sink2_startofpacket  (rsp_demux_003_src1_startofpacket),               //          .startofpacket
		.sink2_endofpacket    (rsp_demux_003_src1_endofpacket),                 //          .endofpacket
		.sink3_ready          (crosser_003_out_ready),                          //     sink3.ready
		.sink3_valid          (crosser_003_out_valid),                          //          .valid
		.sink3_channel        (crosser_003_out_channel),                        //          .channel
		.sink3_data           (crosser_003_out_data),                           //          .data
		.sink3_startofpacket  (crosser_003_out_startofpacket),                  //          .startofpacket
		.sink3_endofpacket    (crosser_003_out_endofpacket),                    //          .endofpacket
		.sink4_ready          (rsp_demux_005_src1_ready),                       //     sink4.ready
		.sink4_valid          (rsp_demux_005_src1_valid),                       //          .valid
		.sink4_channel        (rsp_demux_005_src1_channel),                     //          .channel
		.sink4_data           (rsp_demux_005_src1_data),                        //          .data
		.sink4_startofpacket  (rsp_demux_005_src1_startofpacket),               //          .startofpacket
		.sink4_endofpacket    (rsp_demux_005_src1_endofpacket),                 //          .endofpacket
		.sink5_ready          (rsp_demux_018_src1_ready),                       //     sink5.ready
		.sink5_valid          (rsp_demux_018_src1_valid),                       //          .valid
		.sink5_channel        (rsp_demux_018_src1_channel),                     //          .channel
		.sink5_data           (rsp_demux_018_src1_data),                        //          .data
		.sink5_startofpacket  (rsp_demux_018_src1_startofpacket),               //          .startofpacket
		.sink5_endofpacket    (rsp_demux_018_src1_endofpacket),                 //          .endofpacket
		.sink6_ready          (rsp_demux_019_src1_ready),                       //     sink6.ready
		.sink6_valid          (rsp_demux_019_src1_valid),                       //          .valid
		.sink6_channel        (rsp_demux_019_src1_channel),                     //          .channel
		.sink6_data           (rsp_demux_019_src1_data),                        //          .data
		.sink6_startofpacket  (rsp_demux_019_src1_startofpacket),               //          .startofpacket
		.sink6_endofpacket    (rsp_demux_019_src1_endofpacket),                 //          .endofpacket
		.sink7_ready          (rsp_demux_020_src1_ready),                       //     sink7.ready
		.sink7_valid          (rsp_demux_020_src1_valid),                       //          .valid
		.sink7_channel        (rsp_demux_020_src1_channel),                     //          .channel
		.sink7_data           (rsp_demux_020_src1_data),                        //          .data
		.sink7_startofpacket  (rsp_demux_020_src1_startofpacket),               //          .startofpacket
		.sink7_endofpacket    (rsp_demux_020_src1_endofpacket),                 //          .endofpacket
		.sink8_ready          (rsp_demux_021_src1_ready),                       //     sink8.ready
		.sink8_valid          (rsp_demux_021_src1_valid),                       //          .valid
		.sink8_channel        (rsp_demux_021_src1_channel),                     //          .channel
		.sink8_data           (rsp_demux_021_src1_data),                        //          .data
		.sink8_startofpacket  (rsp_demux_021_src1_startofpacket),               //          .startofpacket
		.sink8_endofpacket    (rsp_demux_021_src1_endofpacket),                 //          .endofpacket
		.sink9_ready          (rsp_demux_022_src1_ready),                       //     sink9.ready
		.sink9_valid          (rsp_demux_022_src1_valid),                       //          .valid
		.sink9_channel        (rsp_demux_022_src1_channel),                     //          .channel
		.sink9_data           (rsp_demux_022_src1_data),                        //          .data
		.sink9_startofpacket  (rsp_demux_022_src1_startofpacket),               //          .startofpacket
		.sink9_endofpacket    (rsp_demux_022_src1_endofpacket),                 //          .endofpacket
		.sink10_ready         (rsp_demux_023_src1_ready),                       //    sink10.ready
		.sink10_valid         (rsp_demux_023_src1_valid),                       //          .valid
		.sink10_channel       (rsp_demux_023_src1_channel),                     //          .channel
		.sink10_data          (rsp_demux_023_src1_data),                        //          .data
		.sink10_startofpacket (rsp_demux_023_src1_startofpacket),               //          .startofpacket
		.sink10_endofpacket   (rsp_demux_023_src1_endofpacket),                 //          .endofpacket
		.sink11_ready         (rsp_demux_024_src1_ready),                       //    sink11.ready
		.sink11_valid         (rsp_demux_024_src1_valid),                       //          .valid
		.sink11_channel       (rsp_demux_024_src1_channel),                     //          .channel
		.sink11_data          (rsp_demux_024_src1_data),                        //          .data
		.sink11_startofpacket (rsp_demux_024_src1_startofpacket),               //          .startofpacket
		.sink11_endofpacket   (rsp_demux_024_src1_endofpacket),                 //          .endofpacket
		.sink12_ready         (rsp_demux_025_src1_ready),                       //    sink12.ready
		.sink12_valid         (rsp_demux_025_src1_valid),                       //          .valid
		.sink12_channel       (rsp_demux_025_src1_channel),                     //          .channel
		.sink12_data          (rsp_demux_025_src1_data),                        //          .data
		.sink12_startofpacket (rsp_demux_025_src1_startofpacket),               //          .startofpacket
		.sink12_endofpacket   (rsp_demux_025_src1_endofpacket)                  //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (28),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_0_clk_clk),                                  //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sdram_pll_audio_pll_c0_clk),                     //       out_clk.clk
		.out_reset         (sdram_reset_reset_bridge_in_reset_reset),        // out_clk_reset.reset
		.in_ready          (cmd_demux_src4_ready),                           //            in.ready
		.in_valid          (cmd_demux_src4_valid),                           //              .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                   //              .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                     //              .endofpacket
		.in_channel        (cmd_demux_src4_channel),                         //              .channel
		.in_data           (cmd_demux_src4_data),                            //              .data
		.out_ready         (crosser_out_ready),                              //           out.ready
		.out_valid         (crosser_out_valid),                              //              .valid
		.out_startofpacket (crosser_out_startofpacket),                      //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                        //              .endofpacket
		.out_channel       (crosser_out_channel),                            //              .channel
		.out_data          (crosser_out_data),                               //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (28),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_0_clk_clk),                                  //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sdram_pll_audio_pll_c0_clk),                     //       out_clk.clk
		.out_reset         (sdram_reset_reset_bridge_in_reset_reset),        // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                       //            in.ready
		.in_valid          (cmd_demux_001_src3_valid),                       //              .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),               //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),                 //              .endofpacket
		.in_channel        (cmd_demux_001_src3_channel),                     //              .channel
		.in_data           (cmd_demux_001_src3_data),                        //              .data
		.out_ready         (crosser_001_out_ready),                          //           out.ready
		.out_valid         (crosser_001_out_valid),                          //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_001_out_channel),                        //              .channel
		.out_data          (crosser_001_out_data),                           //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (28),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (sdram_pll_audio_pll_c0_clk),                     //        in_clk.clk
		.in_reset          (sdram_reset_reset_bridge_in_reset_reset),        //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                  //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                       //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                       //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),               //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                 //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                     //              .channel
		.in_data           (rsp_demux_004_src0_data),                        //              .data
		.out_ready         (crosser_002_out_ready),                          //           out.ready
		.out_valid         (crosser_002_out_valid),                          //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_002_out_channel),                        //              .channel
		.out_data          (crosser_002_out_data),                           //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (28),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (sdram_pll_audio_pll_c0_clk),                     //        in_clk.clk
		.in_reset          (sdram_reset_reset_bridge_in_reset_reset),        //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                  //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src1_ready),                       //            in.ready
		.in_valid          (rsp_demux_004_src1_valid),                       //              .valid
		.in_startofpacket  (rsp_demux_004_src1_startofpacket),               //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src1_endofpacket),                 //              .endofpacket
		.in_channel        (rsp_demux_004_src1_channel),                     //              .channel
		.in_data           (rsp_demux_004_src1_data),                        //              .data
		.out_ready         (crosser_003_out_ready),                          //           out.ready
		.out_valid         (crosser_003_out_valid),                          //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_003_out_channel),                        //              .channel
		.out_data          (crosser_003_out_data),                           //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                        //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_pll_audio_pll_pll_slave_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (sdram_pll_audio_pll_pll_slave_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (sdram_pll_audio_pll_pll_slave_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (sdram_pll_audio_pll_c0_clk),              // in_clk_0.clk
		.in_rst_0_reset (sdram_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)        //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)               //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (avalon_blitter_0_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (avalon_blitter_0_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (avalon_blitter_0_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)               //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (otg_hpi_address_s1_agent_rdata_fifo_src_data),                          //     in_0.data
		.in_0_valid     (otg_hpi_address_s1_agent_rdata_fifo_src_valid),                         //         .valid
		.in_0_ready     (otg_hpi_address_s1_agent_rdata_fifo_src_ready),                         //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (otg_hpi_data_s1_agent_rdata_fifo_src_data),                             //     in_0.data
		.in_0_valid     (otg_hpi_data_s1_agent_rdata_fifo_src_valid),                            //         .valid
		.in_0_ready     (otg_hpi_data_s1_agent_rdata_fifo_src_ready),                            //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (otg_hpi_r_s1_agent_rdata_fifo_src_data),                                //     in_0.data
		.in_0_valid     (otg_hpi_r_s1_agent_rdata_fifo_src_valid),                               //         .valid
		.in_0_ready     (otg_hpi_r_s1_agent_rdata_fifo_src_ready),                               //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (otg_hpi_w_s1_agent_rdata_fifo_src_data),                                //     in_0.data
		.in_0_valid     (otg_hpi_w_s1_agent_rdata_fifo_src_valid),                               //         .valid
		.in_0_ready     (otg_hpi_w_s1_agent_rdata_fifo_src_ready),                               //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (otg_hpi_cs_s1_agent_rdata_fifo_src_data),                               //     in_0.data
		.in_0_valid     (otg_hpi_cs_s1_agent_rdata_fifo_src_valid),                              //         .valid
		.in_0_ready     (otg_hpi_cs_s1_agent_rdata_fifo_src_ready),                              //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (otg_hpi_reset_s1_agent_rdata_fifo_src_data),                            //     in_0.data
		.in_0_valid     (otg_hpi_reset_s1_agent_rdata_fifo_src_valid),                           //         .valid
		.in_0_ready     (otg_hpi_reset_s1_agent_rdata_fifo_src_ready),                           //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (audio_init_s1_agent_rdata_fifo_src_data),                               //     in_0.data
		.in_0_valid     (audio_init_s1_agent_rdata_fifo_src_valid),                              //         .valid
		.in_0_ready     (audio_init_s1_agent_rdata_fifo_src_ready),                              //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (audio_init_f_s1_agent_rdata_fifo_src_data),                             //     in_0.data
		.in_0_valid     (audio_init_f_s1_agent_rdata_fifo_src_valid),                            //         .valid
		.in_0_ready     (audio_init_f_s1_agent_rdata_fifo_src_ready),                            //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (audio_back_vol_s1_agent_rdata_fifo_src_data),                           //     in_0.data
		.in_0_valid     (audio_back_vol_s1_agent_rdata_fifo_src_valid),                          //         .valid
		.in_0_ready     (audio_back_vol_s1_agent_rdata_fifo_src_ready),                          //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (audio_bomb_vol_s1_agent_rdata_fifo_src_data),                           //     in_0.data
		.in_0_valid     (audio_bomb_vol_s1_agent_rdata_fifo_src_valid),                          //         .valid
		.in_0_ready     (audio_bomb_vol_s1_agent_rdata_fifo_src_ready),                          //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (audio_bomb_active_s1_agent_rdata_fifo_src_data),                        //     in_0.data
		.in_0_valid     (audio_bomb_active_s1_agent_rdata_fifo_src_valid),                       //         .valid
		.in_0_ready     (audio_bomb_active_s1_agent_rdata_fifo_src_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (leds_s1_agent_rdata_fifo_src_data),                                     //     in_0.data
		.in_0_valid     (leds_s1_agent_rdata_fifo_src_valid),                                    //         .valid
		.in_0_ready     (leds_s1_agent_rdata_fifo_src_ready),                                    //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (player2score0_s1_agent_rdata_fifo_src_data),                            //     in_0.data
		.in_0_valid     (player2score0_s1_agent_rdata_fifo_src_valid),                           //         .valid
		.in_0_ready     (player2score0_s1_agent_rdata_fifo_src_ready),                           //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (player2score1_s1_agent_rdata_fifo_src_data),                            //     in_0.data
		.in_0_valid     (player2score1_s1_agent_rdata_fifo_src_valid),                           //         .valid
		.in_0_ready     (player2score1_s1_agent_rdata_fifo_src_ready),                           //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (player1score0_s1_agent_rdata_fifo_src_data),                            //     in_0.data
		.in_0_valid     (player1score0_s1_agent_rdata_fifo_src_valid),                           //         .valid
		.in_0_ready     (player1score0_s1_agent_rdata_fifo_src_ready),                           //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (player1score1_s1_agent_rdata_fifo_src_data),                            //     in_0.data
		.in_0_valid     (player1score1_s1_agent_rdata_fifo_src_valid),                           //         .valid
		.in_0_ready     (player1score1_s1_agent_rdata_fifo_src_ready),                           //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timescreen1_s1_agent_rdata_fifo_src_data),                              //     in_0.data
		.in_0_valid     (timescreen1_s1_agent_rdata_fifo_src_valid),                             //         .valid
		.in_0_ready     (timescreen1_s1_agent_rdata_fifo_src_ready),                             //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timescreen2_s1_agent_rdata_fifo_src_data),                              //     in_0.data
		.in_0_valid     (timescreen2_s1_agent_rdata_fifo_src_valid),                             //         .valid
		.in_0_ready     (timescreen2_s1_agent_rdata_fifo_src_ready),                             //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_025 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timescreen0_s1_agent_rdata_fifo_src_data),                              //     in_0.data
		.in_0_valid     (timescreen0_s1_agent_rdata_fifo_src_valid),                             //         .valid
		.in_0_ready     (timescreen0_s1_agent_rdata_fifo_src_ready),                             //         .ready
		.out_0_data     (avalon_st_adapter_025_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_025_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_025_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_025_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_026 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (audio_select_s1_agent_rdata_fifo_src_data),                             //     in_0.data
		.in_0_valid     (audio_select_s1_agent_rdata_fifo_src_valid),                            //         .valid
		.in_0_ready     (audio_select_s1_agent_rdata_fifo_src_ready),                            //         .ready
		.out_0_data     (avalon_st_adapter_026_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_026_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_026_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_026_out_0_error)                                      //         .error
	);

	Bomberman_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_027 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                         // in_clk_0.clk
		.in_rst_0_reset (sdram_pll_audio_pll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (boot_up_s1_agent_rdata_fifo_src_data),                                  //     in_0.data
		.in_0_valid     (boot_up_s1_agent_rdata_fifo_src_valid),                                 //         .valid
		.in_0_ready     (boot_up_s1_agent_rdata_fifo_src_ready),                                 //         .ready
		.out_0_data     (avalon_st_adapter_027_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_027_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_027_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_027_out_0_error)                                      //         .error
	);

endmodule
